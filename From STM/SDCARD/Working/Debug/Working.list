
Working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056bc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  24000010  080059e0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400023c  080059e0  0002023c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fef6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e80  00000000  00000000  0003ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001030  00000000  00000000  00042db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f58  00000000  00000000  00043de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032956  00000000  00000000  00044d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014eb9  00000000  00000000  00077696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bd6c  00000000  00000000  0008c54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d82bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000445c  00000000  00000000  001d8310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005970 	.word	0x08005970

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005970 	.word	0x08005970

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ADC_SERVICE_ROUTINE>:

#include "ADS8588H.h"
#include "main.h"
#include "HelperCommand.h"

void ADC_SERVICE_ROUTINE(ADC_DATA_t *ADC_DATA) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  // Begin conversion
  ADS8588H_CONV_AB();
 800060c:	f000 f890 	bl	8000730 <ADS8588H_CONV_AB>
  /** TODO, Should not need this,
   * Board needs a interrupt tied to falling edge of BUSY(?)
   * Wait out BUSY and OSR
   */
  TIM14WaitUntil(BUSYWAIT);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 f8bf 	bl	8000794 <TIM14WaitUntil>
  //delay_5ns(WAIT_OUT_CONVERSION_TIME_200us);

  ADS8588H_READ_8CH(ADC_DATA);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f804 	bl	8000624 <ADS8588H_READ_8CH>
  return;
 800061c:	bf00      	nop
}
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <ADS8588H_READ_8CH>:

void ADS8588H_READ_8CH(ADC_DATA_t *ADC_DATA) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  // Lower CS to enable data conversion
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	483b      	ldr	r0, [pc, #236]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 8000632:	f001 f87d 	bl	8001730 <HAL_GPIO_WritePin>
	uint32_t hello = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  for (int channel = 0; channel < QTY_DIFF_CHANNELS; channel++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e063      	b.n	8000708 <ADS8588H_READ_8CH+0xe4>
  {
    for (int stepping = CLK_CYCLES; stepping >= 0; stepping--)
 8000640:	230f      	movs	r3, #15
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e05a      	b.n	80006fc <ADS8588H_READ_8CH+0xd8>
    {
    	//Timer is very sensitive to abstraction ???
		while(TIM14->CNT <=HalfDutyCycle/2);
 8000646:	bf00      	nop
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <ADS8588H_READ_8CH+0x100>)
 800064a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <ADS8588H_READ_8CH+0x100>)
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	429a      	cmp	r2, r3
 8000654:	d9f8      	bls.n	8000648 <ADS8588H_READ_8CH+0x24>
		TIM14->CNT = RESET;
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <ADS8588H_READ_8CH+0x100>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(ADC_SCLK_GPIO_Port,ADC_SCLK_Pin,RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2102      	movs	r1, #2
 8000660:	482f      	ldr	r0, [pc, #188]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 8000662:	f001 f865 	bl	8001730 <HAL_GPIO_WritePin>
		ADC_DATA->ADC1_8[channel] |= (((ADC1_8_GPIO_Port->IDR & ADC1_8_Pin) >> 7 ) & 1U )<< stepping;
 8000666:	4b30      	ldr	r3, [pc, #192]	; (8000728 <ADS8588H_READ_8CH+0x104>)
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	09db      	lsrs	r3, r3, #7
 800066c:	f003 0201 	and.w	r2, r3, #1
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	fa02 f103 	lsl.w	r1, r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800067e:	b28b      	uxth	r3, r1
 8000680:	4313      	orrs	r3, r2
 8000682:	b299      	uxth	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				//(HAL_GPIO_ReadPin(ADC1_8_GPIO_Port,ADC1_8_Pin)<< stepping);
		ADC_DATA->ADC9_16[channel] |= (((ADC9_16_GPIO_Port->IDR & ADC9_16_Pin)>> 8 ) & 1U )<< stepping;
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <ADS8588H_READ_8CH+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0201 	and.w	r2, r3, #1
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	fa02 f103 	lsl.w	r1, r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	3208      	adds	r2, #8
 80006a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006a6:	b28b      	uxth	r3, r1
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b299      	uxth	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	3208      	adds	r2, #8
 80006b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				//(HAL_GPIO_ReadPin(ADC9_16_GPIO_Port,ADC9_16_Pin)<< stepping);
		ADC_DATA->ADC17_24[channel] |= (((ADC17_24_GPIO_Port->IDR & ADC17_24_Pin) >>3) & 1U) << stepping;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <ADS8588H_READ_8CH+0x108>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	f003 0201 	and.w	r2, r3, #1
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	fa02 f103 	lsl.w	r1, r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	3210      	adds	r2, #16
 80006cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006d0:	b28b      	uxth	r3, r1
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b299      	uxth	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	3210      	adds	r2, #16
 80006dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				//(HAL_GPIO_ReadPin(ADC17_24_GPIO_Port,ADC17_24_Pin)<< stepping);
		ADC_DATA->DataPoint++;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80006e4:	3301      	adds	r3, #1
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	861a      	strh	r2, [r3, #48]	; 0x30
		HAL_GPIO_WritePin(ADC_SCLK_GPIO_Port,ADC_SCLK_Pin,SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2102      	movs	r1, #2
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 80006f2:	f001 f81d 	bl	8001730 <HAL_GPIO_WritePin>
    for (int stepping = CLK_CYCLES; stepping >= 0; stepping--)
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	daa1      	bge.n	8000646 <ADS8588H_READ_8CH+0x22>
  for (int channel = 0; channel < QTY_DIFF_CHANNELS; channel++)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b07      	cmp	r3, #7
 800070c:	dd98      	ble.n	8000640 <ADS8588H_READ_8CH+0x1c>
    }
//    convertData(channel, &ADC_Strain_Guage_1);
//    convertData(channel, &ADC_Strain_Guage_2);
//    convertData(channel, &ADC_General_Purpose_1);
  }
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <ADS8588H_READ_8CH+0xfc>)
 8000714:	f001 f80c 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021800 	.word	0x58021800
 8000724:	40002000 	.word	0x40002000
 8000728:	58021400 	.word	0x58021400
 800072c:	58021000 	.word	0x58021000

08000730 <ADS8588H_CONV_AB>:
//        ADC_ABS_RANGE;
//  }
//  ADC->bit_collector = 0;
//}

void ADS8588H_CONV_AB() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_CONV_AB_GPIO_Port, ADC_CONV_AB_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <ADS8588H_CONV_AB+0x28>)
 800073c:	f000 fff8 	bl	8001730 <HAL_GPIO_WritePin>
	TIM14WaitUntil(SMALLWAIT);
 8000740:	2032      	movs	r0, #50	; 0x32
 8000742:	f000 f827 	bl	8000794 <TIM14WaitUntil>
  	HAL_GPIO_WritePin(ADC_CONV_AB_GPIO_Port, ADC_CONV_AB_Pin, SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ADS8588H_CONV_AB+0x28>)
 800074e:	f000 ffef 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58021400 	.word	0x58021400

0800075c <ADS8588H_reset>:

void ADS8588H_reset() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	TIM14WaitUntil(SMALLWAIT);
 8000760:	2032      	movs	r0, #50	; 0x32
 8000762:	f000 f817 	bl	8000794 <TIM14WaitUntil>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2102      	movs	r1, #2
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <ADS8588H_reset+0x28>)
 800076c:	f000 ffe0 	bl	8001730 <HAL_GPIO_WritePin>
	TIM14WaitUntil(SMALLWAIT);
 8000770:	2032      	movs	r0, #50	; 0x32
 8000772:	f000 f80f 	bl	8000794 <TIM14WaitUntil>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2102      	movs	r1, #2
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <ADS8588H_reset+0x28>)
 800077c:	f000 ffd8 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00

08000788 <ADS8588H_init>:

void ADS8588H_init() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /*
   * From section 7.4.1.6 of data sheet
   * Needed for settling internal references.
   */
  ADS8588H_reset();
 800078c:	f7ff ffe6 	bl	800075c <ADS8588H_reset>
  return;
 8000790:	bf00      	nop
}
 8000792:	bd80      	pop	{r7, pc}

08000794 <TIM14WaitUntil>:
#include "stm32h723xx.h"
/**
 * @brief Wait time tick is based off of what ever Timer14 is
 * configured for.
 */
void TIM14WaitUntil(uint16_t WaitLength){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
	while((TIM14->CNT) <= WaitLength);
 800079e:	bf00      	nop
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <TIM14WaitUntil+0x28>)
 80007a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d9fa      	bls.n	80007a0 <TIM14WaitUntil+0xc>
	TIM14->CNT = RESET;
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <TIM14WaitUntil+0x28>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40002000 	.word	0x40002000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc69 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f81f 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f937 	bl	8000a40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 f8e9 	bl	80009a8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80007d6:	f000 f887 	bl	80008e8 <MX_TIM7_Init>
  MX_TIM14_Init();
 80007da:	f000 f8bf 	bl	800095c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ADS8588H_init();
 80007de:	f7ff ffd3 	bl	8000788 <ADS8588H_init>
  ADC_DATA_t ADC_DATA = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2232      	movs	r2, #50	; 0x32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 f8b9 	bl	8005960 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Enter task list
	  if (StartADCFlag == 1)
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <main+0x48>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d1fb      	bne.n	80007ee <main+0x2e>
	  {
		  ADC_SERVICE_ROUTINE(&ADC_DATA);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff03 	bl	8000604 <ADC_SERVICE_ROUTINE>
		  StartADCFlag = RESET;
 80007fe:	4b02      	ldr	r3, [pc, #8]	; (8000808 <main+0x48>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	  if (StartADCFlag == 1)
 8000804:	e7f3      	b.n	80007ee <main+0x2e>
 8000806:	bf00      	nop
 8000808:	2400002c 	.word	0x2400002c

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	; 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	224c      	movs	r2, #76	; 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 f8a0 	bl	8005960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 f89a 	bl	8005960 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082c:	2002      	movs	r0, #2
 800082e:	f000 ffb3 	bl	8001798 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0xd8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0xd8>)
 800083c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xd8>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800084e:	bf00      	nop
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <SystemClock_Config+0xd8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800085c:	d1f8      	bne.n	8000850 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085e:	2301      	movs	r3, #1
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000862:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086c:	2302      	movs	r3, #2
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000874:	f240 1313 	movw	r3, #275	; 0x113
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000886:	2304      	movs	r3, #4
 8000888:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088a:	2300      	movs	r3, #0
 800088c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4618      	mov	r0, r3
 8000898:	f000 ffb8 	bl	800180c <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008a2:	f000 fa5f 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	233f      	movs	r3, #63	; 0x3f
 80008a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2303      	movs	r3, #3
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b2:	2308      	movs	r3, #8
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fb49 	bl	8001f64 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008d8:	f000 fa44 	bl	8000d64 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3770      	adds	r7, #112	; 0x70
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58024800 	.word	0x58024800

080008e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM7_Init+0x6c>)
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_TIM7_Init+0x70>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1375-1;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM7_Init+0x6c>)
 8000900:	f240 525e 	movw	r2, #1374	; 0x55e
 8000904:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_TIM7_Init+0x6c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_TIM7_Init+0x6c>)
 800090e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000912:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_TIM7_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_TIM7_Init+0x6c>)
 800091c:	f003 f9ca 	bl	8003cb4 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000926:	f000 fa1d 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM7_Init+0x6c>)
 8000938:	f003 fdc4 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000942:	f000 fa0f 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM7_Init+0x6c>)
 8000948:	f003 fa96 	bl	8003e78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400017c 	.word	0x2400017c
 8000958:	40001400 	.word	0x40001400

0800095c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MX_TIM14_Init+0x48>)
 8000964:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_TIM14_Init+0x44>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 136;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000974:	2288      	movs	r2, #136	; 0x88
 8000976:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_TIM14_Init+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000986:	f003 f995 	bl	8003cb4 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000990:	f000 f9e8 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  //HAL_TIM_Base_Start_IT(&htim14);
  //TIM14->CCR1 = 34;
  HAL_TIM_Base_Start(&htim14);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <MX_TIM14_Init+0x44>)
 8000996:	f003 f9f1 	bl	8003d7c <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	240000c0 	.word	0x240000c0
 80009a4:	40002000 	.word	0x40002000

080009a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_USART3_UART_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 80009f2:	f003 fe2b 	bl	800464c <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 f9b2 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 8000a04:	f004 febe 	bl	8005784 <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 f9a9 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 8000a16:	f004 fef3 	bl	8005800 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 f9a0 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_USART3_UART_Init+0x90>)
 8000a26:	f004 fe74 	bl	8005712 <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 f998 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	24000030 	.word	0x24000030
 8000a3c:	40004800 	.word	0x40004800

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4bae      	ldr	r3, [pc, #696]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4aac      	ldr	r2, [pc, #688]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4baa      	ldr	r3, [pc, #680]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	4ba6      	ldr	r3, [pc, #664]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	4aa5      	ldr	r2, [pc, #660]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a84:	4ba2      	ldr	r3, [pc, #648]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	4b9f      	ldr	r3, [pc, #636]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a9d      	ldr	r2, [pc, #628]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b9b      	ldr	r3, [pc, #620]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0320 	and.w	r3, r3, #32
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab0:	4b97      	ldr	r3, [pc, #604]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a96      	ldr	r2, [pc, #600]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b93      	ldr	r3, [pc, #588]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b90      	ldr	r3, [pc, #576]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a8e      	ldr	r2, [pc, #568]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b8c      	ldr	r3, [pc, #560]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b88      	ldr	r3, [pc, #544]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a87      	ldr	r2, [pc, #540]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b84      	ldr	r3, [pc, #528]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a7f      	ldr	r2, [pc, #508]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b7d      	ldr	r3, [pc, #500]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b28:	4b79      	ldr	r3, [pc, #484]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a78      	ldr	r2, [pc, #480]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b75      	ldr	r3, [pc, #468]	; (8000d10 <MX_GPIO_Init+0x2d0>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADC17_24_Pin|TEST_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210b      	movs	r1, #11
 8000b4a:	4872      	ldr	r0, [pc, #456]	; (8000d14 <MX_GPIO_Init+0x2d4>)
 8000b4c:	f000 fdf0 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ADC1_8_Pin|ADC9_16_Pin|ADC_CONV_AB_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b56:	4870      	ldr	r0, [pc, #448]	; (8000d18 <MX_GPIO_Init+0x2d8>)
 8000b58:	f000 fdea 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b62:	486e      	ldr	r0, [pc, #440]	; (8000d1c <MX_GPIO_Init+0x2dc>)
 8000b64:	f000 fde4 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADC_CS_Pin|ADC_SCLK_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	486c      	ldr	r0, [pc, #432]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b6e:	f000 fddf 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|ADC_RESET_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f240 4102 	movw	r1, #1026	; 0x402
 8000b78:	486a      	ldr	r0, [pc, #424]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000b7a:	f000 fdd9 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC17_24_Pin TEST_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = ADC17_24_Pin|TEST_Pin|LED_YELLOW_Pin;
 8000b7e:	230b      	movs	r3, #11
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	485f      	ldr	r0, [pc, #380]	; (8000d14 <MX_GPIO_Init+0x2d4>)
 8000b96:	f000 fc23 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	485e      	ldr	r0, [pc, #376]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000bb0:	f000 fc16 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_8_Pin ADC9_16_Pin ADC_CONV_AB_Pin */
  GPIO_InitStruct.Pin = ADC1_8_Pin|ADC9_16_Pin|ADC_CONV_AB_Pin;
 8000bb4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4852      	ldr	r0, [pc, #328]	; (8000d18 <MX_GPIO_Init+0x2d8>)
 8000bce:	f000 fc07 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd2:	2332      	movs	r3, #50	; 0x32
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	484e      	ldr	r0, [pc, #312]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000bee:	f000 fbf7 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf2:	2386      	movs	r3, #134	; 0x86
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x2ec>)
 8000c0e:	f000 fbe7 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c12:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	483c      	ldr	r0, [pc, #240]	; (8000d1c <MX_GPIO_Init+0x2dc>)
 8000c2c:	f000 fbd8 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000c30:	2301      	movs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4836      	ldr	r0, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000c48:	f000 fbca 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_SCLK_Pin */
  GPIO_InitStruct.Pin = ADC_SCLK_Pin;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_SCLK_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	482f      	ldr	r0, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000c64:	f000 fbbc 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4825      	ldr	r0, [pc, #148]	; (8000d1c <MX_GPIO_Init+0x2dc>)
 8000c86:	f000 fbab 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin ADC_RESET_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|ADC_RESET_Pin;
 8000c8a:	f240 4302 	movw	r3, #1026	; 0x402
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4820      	ldr	r0, [pc, #128]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000ca4:	f000 fb9c 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000cbe:	f000 fb8f 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_GPIO_Init+0x2ec>)
 8000ce0:	f000 fb7e 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ce4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000d02:	f000 fb6d 	bl	80013e0 <HAL_GPIO_Init>

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58021400 	.word	0x58021400
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	58021800 	.word	0x58021800
 8000d24:	58020c00 	.word	0x58020c00
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	58020000 	.word	0x58020000

08000d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	  if (htim == &htim7 )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d106      	bne.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x1e>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000d40:	2101      	movs	r1, #1
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d44:	f000 fd0d 	bl	8001762 <HAL_GPIO_TogglePin>
		  // Flag for ADC Task
		  StartADCFlag = 1;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
	  }
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2400017c 	.word	0x2400017c
 8000d5c:	58020400 	.word	0x58020400
 8000d60:	2400002c 	.word	0x2400002c

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_TIM_Base_MspInit+0x74>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d117      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2037      	movs	r0, #55	; 0x37
 8000dda:	f000 facc 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dde:	2037      	movs	r0, #55	; 0x37
 8000de0:	f000 fae3 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000de4:	e013      	b.n	8000e0e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM14)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10e      	bne.n	8000e0e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40001400 	.word	0x40001400
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	40002000 	.word	0x40002000

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0b6      	sub	sp, #216	; 0xd8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	22b4      	movs	r2, #180	; 0xb4
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 fd8b 	bl	8005960 <memset>
  if(huart->Instance==USART3)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_UART_MspInit+0xc0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d142      	bne.n	8000eda <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc0a 	bl	800267c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6e:	f7ff ff79 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UART_MspInit+0xc8>)
 8000ed6:	f000 fa83 	bl	80013e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	37d8      	adds	r7, #216	; 0xd8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020c00 	.word	0x58020c00

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f920 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM7_IRQHandler+0x10>)
 8000f4a:	f003 f81b 	bl	8003f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400017c 	.word	0x2400017c

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <SystemInit+0xd0>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <SystemInit+0xd0>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	; (800102c <SystemInit+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <SystemInit+0xd4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a2a      	ldr	r2, [pc, #168]	; (800102c <SystemInit+0xd4>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <SystemInit+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <SystemInit+0xd8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SystemInit+0xd8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <SystemInit+0xd8>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4924      	ldr	r1, [pc, #144]	; (8001030 <SystemInit+0xd8>)
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <SystemInit+0xdc>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <SystemInit+0xd4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <SystemInit+0xd4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <SystemInit+0xd4>)
 8000fbc:	f043 0307 	orr.w	r3, r3, #7
 8000fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <SystemInit+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <SystemInit+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <SystemInit+0xd8>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <SystemInit+0xe0>)
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <SystemInit+0xd8>)
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <SystemInit+0xe4>)
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <SystemInit+0xd8>)
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <SystemInit+0xe8>)
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <SystemInit+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <SystemInit+0xd8>)
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <SystemInit+0xe8>)
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <SystemInit+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemInit+0xd8>)
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SystemInit+0xe8>)
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <SystemInit+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SystemInit+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <SystemInit+0xd8>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <SystemInit+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <SystemInit+0xec>)
 8001018:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800101c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	52002000 	.word	0x52002000
 8001030:	58024400 	.word	0x58024400
 8001034:	eaf6ed7f 	.word	0xeaf6ed7f
 8001038:	02020200 	.word	0x02020200
 800103c:	01ff0000 	.word	0x01ff0000
 8001040:	01010280 	.word	0x01010280
 8001044:	52004000 	.word	0x52004000

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f7ff ff84 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 fc4f 	bl	8005918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fba1 	bl	80007c0 <main>
  bx  lr
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001084:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001088:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800108c:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 8001090:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001094:	2400023c 	.word	0x2400023c

08001098 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC3_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 f95c 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010a8:	f001 f912 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	4913      	ldr	r1, [pc, #76]	; (8001108 <HAL_Init+0x6c>)
 80010ba:	5ccb      	ldrb	r3, [r1, r3]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_Init+0x6c>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_Init+0x70>)
 80010de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_Init+0x74>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f814 	bl	8001114 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e002      	b.n	80010fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010f6:	f7ff fe3b 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400
 8001108:	08005988 	.word	0x08005988
 800110c:	24000004 	.word	0x24000004
 8001110:	24000000 	.word	0x24000000

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e021      	b.n	800116c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_InitTick+0x64>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f941 	bl	80013c6 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f90b 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x68>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400000c 	.word	0x2400000c
 8001178:	24000000 	.word	0x24000000
 800117c:	24000008 	.word	0x24000008

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	24000238 	.word	0x24000238

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	24000238 	.word	0x24000238

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff29 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff40 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff33 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa4 	bl	800131c <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ee:	4b86      	ldr	r3, [pc, #536]	; (8001608 <HAL_GPIO_Init+0x228>)
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013f2:	e18c      	b.n	800170e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 817e 	beq.w	8001708 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x44>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0203 	and.w	r2, r3, #3
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80d8 	beq.w	8001708 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_GPIO_Init+0x22c>)
 800155a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800155e:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_GPIO_Init+0x22c>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_GPIO_Init+0x22c>)
 800156a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <HAL_GPIO_Init+0x230>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x234>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d04a      	beq.n	8001638 <HAL_GPIO_Init+0x258>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_GPIO_Init+0x238>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_GPIO_Init+0x23c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_GPIO_Init+0x240>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x244>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x248>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_GPIO_Init+0x24c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_GPIO_Init+0x250>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x20a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x254>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x206>
 80015e2:	2309      	movs	r3, #9
 80015e4:	e029      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015e6:	230a      	movs	r3, #10
 80015e8:	e027      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e025      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015ee:	2306      	movs	r3, #6
 80015f0:	e023      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e021      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e01f      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e01d      	b.n	800163a <HAL_GPIO_Init+0x25a>
 80015fe:	2302      	movs	r3, #2
 8001600:	e01b      	b.n	800163a <HAL_GPIO_Init+0x25a>
 8001602:	2301      	movs	r3, #1
 8001604:	e019      	b.n	800163a <HAL_GPIO_Init+0x25a>
 8001606:	bf00      	nop
 8001608:	58000080 	.word	0x58000080
 800160c:	58024400 	.word	0x58024400
 8001610:	58000400 	.word	0x58000400
 8001614:	58020000 	.word	0x58020000
 8001618:	58020400 	.word	0x58020400
 800161c:	58020800 	.word	0x58020800
 8001620:	58020c00 	.word	0x58020c00
 8001624:	58021000 	.word	0x58021000
 8001628:	58021400 	.word	0x58021400
 800162c:	58021800 	.word	0x58021800
 8001630:	58021c00 	.word	0x58021c00
 8001634:	58022400 	.word	0x58022400
 8001638:	2300      	movs	r3, #0
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164a:	4938      	ldr	r1, [pc, #224]	; (800172c <HAL_GPIO_Init+0x34c>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f ae6b 	bne.w	80013f4 <HAL_GPIO_Init+0x14>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	58000400 	.word	0x58000400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	041a      	lsls	r2, r3, #16
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43d9      	mvns	r1, r3
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	400b      	ands	r3, r1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	619a      	str	r2, [r3, #24]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_PWREx_ConfigSupply+0x70>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00a      	beq.n	80017c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_PWREx_ConfigSupply+0x70>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e01f      	b.n	80017fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01d      	b.n	80017fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_PWREx_ConfigSupply+0x70>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <HAL_PWREx_ConfigSupply+0x70>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017d2:	f7ff fce9 	bl	80011a8 <HAL_GetTick>
 80017d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017d8:	e009      	b.n	80017ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017da:	f7ff fce5 	bl	80011a8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e8:	d901      	bls.n	80017ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e007      	b.n	80017fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_PWREx_ConfigSupply+0x70>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fa:	d1ee      	bne.n	80017da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	58024800 	.word	0x58024800

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e397      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8087 	beq.w	800193a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182c:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001836:	4b9c      	ldr	r3, [pc, #624]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	2b10      	cmp	r3, #16
 8001840:	d007      	beq.n	8001852 <HAL_RCC_OscConfig+0x46>
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	2b18      	cmp	r3, #24
 8001846:	d110      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b95      	ldr	r3, [pc, #596]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d06c      	beq.n	8001938 <HAL_RCC_OscConfig+0x12c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d168      	bne.n	8001938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e371      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x76>
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x98>
 800188a:	4b87      	ldr	r3, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a86      	ldr	r2, [pc, #536]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a83      	ldr	r2, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0xbc>
 80018ae:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7d      	ldr	r2, [pc, #500]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018c8:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc5e 	bl	80011a8 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fc5a 	bl	80011a8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e325      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001902:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe4>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc4a 	bl	80011a8 <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc46 	bl	80011a8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e311      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x10c>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 808a 	beq.w	8001a5c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001950:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_RCC_OscConfig+0x162>
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b18      	cmp	r3, #24
 8001962:	d137      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c8>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d132      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x17a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e2e3      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001986:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0219 	bic.w	r2, r3, #25
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4945      	ldr	r1, [pc, #276]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001998:	f7ff fc06 	bl	80011a8 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc02 	bl	80011a8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e2cd      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	4936      	ldr	r1, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d2:	e043      	b.n	8001a5c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d026      	beq.n	8001a2a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 0219 	bic.w	r2, r3, #25
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	492f      	ldr	r1, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fbdb 	bl	80011a8 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fbd7 	bl	80011a8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2a2      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fbb7 	bl	80011a8 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fbb3 	bl	80011a8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e27e      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d06d      	beq.n	8001b44 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a70:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d007      	beq.n	8001a8e <HAL_RCC_OscConfig+0x282>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	d11e      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2b6>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d119      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_RCC_OscConfig+0x2a0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d004      	beq.n	8001aac <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e253      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
 8001aa6:	bf00      	nop
 8001aa8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aac:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	49a0      	ldr	r1, [pc, #640]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ac0:	e040      	b.n	8001b44 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001aca:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a9b      	ldr	r2, [pc, #620]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb67 	bl	80011a8 <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ade:	f7ff fb63 	bl	80011a8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e22e      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afc:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	498c      	ldr	r1, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e018      	b.n	8001b44 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b12:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a89      	ldr	r2, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fb43 	bl	80011a8 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b26:	f7ff fb3f 	bl	80011a8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e20a      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d036      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d019      	beq.n	8001b8c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb20 	bl	80011a8 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fb1c 	bl	80011a8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1e7      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x360>
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fb06 	bl	80011a8 <HAL_GetTick>
 8001b9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fb02 	bl	80011a8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1cd      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d036      	beq.n	8001c38 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a59      	ldr	r2, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fae3 	bl	80011a8 <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001be6:	f7ff fadf 	bl	80011a8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1aa      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x3da>
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fac9 	bl	80011a8 <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c1a:	f7ff fac5 	bl	80011a8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e190      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8085 	beq.w	8001d50 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <HAL_RCC_OscConfig+0x534>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x534>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c52:	f7ff faa9 	bl	80011a8 <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7ff faa5 	bl	80011a8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e170      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_RCC_OscConfig+0x534>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x482>
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	e02d      	b.n	8001cea <HAL_RCC_OscConfig+0x4de>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4a4>
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x4de>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4c6>
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x4de>
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fa59 	bl	80011a8 <HAL_GetTick>
 8001cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fa55 	bl	80011a8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e11e      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x530>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4ee>
 8001d1c:	e018      	b.n	8001d50 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fa43 	bl	80011a8 <HAL_GetTick>
 8001d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d24:	e00e      	b.n	8001d44 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fa3f 	bl	80011a8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d905      	bls.n	8001d44 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e108      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ea      	bne.n	8001d26 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80f9 	beq.w	8001f4c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	f000 80b4 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	f040 8095 	bne.w	8001e9c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a78      	ldr	r2, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa13 	bl	80011a8 <HAL_GetTick>
 8001d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff fa0f 	bl	80011a8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0da      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x750>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	430a      	orrs	r2, r1
 8001db8:	4967      	ldr	r1, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	628b      	str	r3, [r1, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	3b01      	subs	r3, #1
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001dee:	495a      	ldr	r1, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001df4:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e00:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x754>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	4952      	ldr	r1, [pc, #328]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f023 020c 	bic.w	r2, r3, #12
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f023 0202 	bic.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4949      	ldr	r1, [pc, #292]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e38:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	4a46      	ldr	r2, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	4a43      	ldr	r2, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	4a40      	ldr	r2, [pc, #256]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f998 	bl	80011a8 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f994 	bl	80011a8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e05f      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x670>
 8001e9a:	e057      	b.n	8001f4c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f97e 	bl	80011a8 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f97a 	bl	80011a8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e045      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x6a4>
 8001ece:	e03d      	b.n	8001f4c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_OscConfig+0x74c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d031      	beq.n	8001f48 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d12a      	bne.n	8001f48 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d122      	bne.n	8001f48 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d11a      	bne.n	8001f48 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0a5b      	lsrs	r3, r3, #9
 8001f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d111      	bne.n	8001f48 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0e1b      	lsrs	r3, r3, #24
 8001f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3730      	adds	r7, #48	; 0x30
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	fffffc0c 	.word	0xfffffc0c
 8001f60:	ffff0007 	.word	0xffff0007

08001f64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e19c      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b8a      	ldr	r3, [pc, #552]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b87      	ldr	r3, [pc, #540]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 020f 	bic.w	r2, r3, #15
 8001f8e:	4985      	ldr	r1, [pc, #532]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e184      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d908      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc4:	4b78      	ldr	r3, [pc, #480]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4975      	ldr	r1, [pc, #468]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	4b70      	ldr	r3, [pc, #448]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	496a      	ldr	r1, [pc, #424]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800201c:	429a      	cmp	r2, r3
 800201e:	d908      	bls.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002020:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	495e      	ldr	r1, [pc, #376]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 800202e:	4313      	orrs	r3, r2
 8002030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d908      	bls.n	8002060 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800204e:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4953      	ldr	r1, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4b4d      	ldr	r3, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	429a      	cmp	r2, r3
 800207a:	d908      	bls.n	800208e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f023 020f 	bic.w	r2, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4947      	ldr	r1, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 800208a:	4313      	orrs	r3, r2
 800208c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d055      	beq.n	8002146 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4940      	ldr	r1, [pc, #256]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b4:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d121      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0f6      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d115      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0ea      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0de      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0d6      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f023 0207 	bic.w	r2, r3, #7
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4925      	ldr	r1, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002112:	4313      	orrs	r3, r2
 8002114:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff f847 	bl	80011a8 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211c:	e00a      	b.n	8002134 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211e:	f7ff f843 	bl	80011a8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0be      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	429a      	cmp	r2, r3
 8002144:	d1eb      	bne.n	800211e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	429a      	cmp	r2, r3
 8002160:	d208      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x244>)
 8002170:	4313      	orrs	r3, r2
 8002172:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d214      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 020f 	bic.w	r2, r3, #15
 800218a:	4906      	ldr	r1, [pc, #24]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_ClockConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e086      	b.n	80022b2 <HAL_RCC_ClockConfig+0x34e>
 80021a4:	52002000 	.word	0x52002000
 80021a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d208      	bcs.n	80021da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021c8:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d010      	beq.n	8002208 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d208      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	492e      	ldr	r1, [pc, #184]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002204:	4313      	orrs	r3, r2
 8002206:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002220:	429a      	cmp	r2, r3
 8002222:	d208      	bcs.n	8002236 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4922      	ldr	r1, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002232:	4313      	orrs	r3, r2
 8002234:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4917      	ldr	r1, [pc, #92]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002260:	4313      	orrs	r3, r2
 8002262:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002264:	f000 f834 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	4912      	ldr	r1, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x35c>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_RCC_ClockConfig+0x358>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_RCC_ClockConfig+0x35c>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x360>)
 800229a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x364>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x368>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe ff34 	bl	8001114 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	58024400 	.word	0x58024400
 80022c0:	08005988 	.word	0x08005988
 80022c4:	24000004 	.word	0x24000004
 80022c8:	24000000 	.word	0x24000000
 80022cc:	24000008 	.word	0x24000008

080022d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d6:	4bb3      	ldr	r3, [pc, #716]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022de:	2b18      	cmp	r3, #24
 80022e0:	f200 8155 	bhi.w	800258e <HAL_RCC_GetSysClockFreq+0x2be>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002351 	.word	0x08002351
 80022f0:	0800258f 	.word	0x0800258f
 80022f4:	0800258f 	.word	0x0800258f
 80022f8:	0800258f 	.word	0x0800258f
 80022fc:	0800258f 	.word	0x0800258f
 8002300:	0800258f 	.word	0x0800258f
 8002304:	0800258f 	.word	0x0800258f
 8002308:	0800258f 	.word	0x0800258f
 800230c:	08002377 	.word	0x08002377
 8002310:	0800258f 	.word	0x0800258f
 8002314:	0800258f 	.word	0x0800258f
 8002318:	0800258f 	.word	0x0800258f
 800231c:	0800258f 	.word	0x0800258f
 8002320:	0800258f 	.word	0x0800258f
 8002324:	0800258f 	.word	0x0800258f
 8002328:	0800258f 	.word	0x0800258f
 800232c:	0800237d 	.word	0x0800237d
 8002330:	0800258f 	.word	0x0800258f
 8002334:	0800258f 	.word	0x0800258f
 8002338:	0800258f 	.word	0x0800258f
 800233c:	0800258f 	.word	0x0800258f
 8002340:	0800258f 	.word	0x0800258f
 8002344:	0800258f 	.word	0x0800258f
 8002348:	0800258f 	.word	0x0800258f
 800234c:	08002383 	.word	0x08002383
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002350:	4b94      	ldr	r3, [pc, #592]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800235c:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800236e:	e111      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002370:	4b8d      	ldr	r3, [pc, #564]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002372:	61bb      	str	r3, [r7, #24]
    break;
 8002374:	e10e      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002376:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002378:	61bb      	str	r3, [r7, #24]
    break;
 800237a:	e10b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800237e:	61bb      	str	r3, [r7, #24]
    break;
 8002380:	e108      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800238c:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002396:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023a2:	4b80      	ldr	r3, [pc, #512]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	08db      	lsrs	r3, r3, #3
 80023a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80e1 	beq.w	8002588 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	f000 8083 	beq.w	80024d4 <HAL_RCC_GetSysClockFreq+0x204>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f200 80a1 	bhi.w	8002518 <HAL_RCC_GetSysClockFreq+0x248>
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x114>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d056      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x1c0>
 80023e2:	e099      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02d      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023f0:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	4a6b      	ldr	r2, [pc, #428]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	ed97 6a02 	vldr	s12, [r7, #8]
 800242e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800244a:	e087      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002472:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800248e:	e065      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d2:	e043      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002516:	e021      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	ed97 6a02 	vldr	s12, [r7, #8]
 800253e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800255a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	0a5b      	lsrs	r3, r3, #9
 8002562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002566:	3301      	adds	r3, #1
 8002568:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002574:	edd7 6a07 	vldr	s13, [r7, #28]
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    break;
 800258c:	e002      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002590:	61bb      	str	r3, [r7, #24]
    break;
 8002592:	bf00      	nop
  }

  return sysclockfreq;
 8002594:	69bb      	ldr	r3, [r7, #24]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	58024400 	.word	0x58024400
 80025a8:	03d09000 	.word	0x03d09000
 80025ac:	003d0900 	.word	0x003d0900
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	46000000 	.word	0x46000000
 80025b8:	4c742400 	.word	0x4c742400
 80025bc:	4a742400 	.word	0x4a742400
 80025c0:	4af42400 	.word	0x4af42400

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ca:	f7ff fe81 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_GetHCLKFreq+0x50>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490f      	ldr	r1, [pc, #60]	; (8002618 <HAL_RCC_GetHCLKFreq+0x54>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_GetHCLKFreq+0x54>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_RCC_GetHCLKFreq+0x58>)
 8002600:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_GetHCLKFreq+0x58>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	58024400 	.word	0x58024400
 8002618:	08005988 	.word	0x08005988
 800261c:	24000004 	.word	0x24000004
 8002620:	24000000 	.word	0x24000000

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002628:	f7ff ffcc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_RCC_GetPCLK1Freq+0x28>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58024400 	.word	0x58024400
 800264c:	08005988 	.word	0x08005988

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002654:	f7ff ffb6 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	58024400 	.word	0x58024400
 8002678:	08005988 	.word	0x08005988

0800267c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002688:	2300      	movs	r3, #0
 800268a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03f      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026a0:	d02a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026a6:	d824      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ac:	d018      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b2:	d81e      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026bc:	d007      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026be:	e018      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c0:	4bab      	ldr	r3, [pc, #684]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4aaa      	ldr	r2, [pc, #680]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026cc:	e015      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2102      	movs	r1, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f989 	bl	80039ec <RCCEx_PLL2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026de:	e00c      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	2102      	movs	r1, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 fa32 	bl	8003b50 <RCCEx_PLL3_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
      break;
 80026f6:	e000      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002700:	4b9b      	ldr	r3, [pc, #620]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	4998      	ldr	r1, [pc, #608]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	650b      	str	r3, [r1, #80]	; 0x50
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03d      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	2b04      	cmp	r3, #4
 800272a:	d826      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800272c:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002749 	.word	0x08002749
 8002738:	08002757 	.word	0x08002757
 800273c:	08002769 	.word	0x08002769
 8002740:	08002781 	.word	0x08002781
 8002744:	08002781 	.word	0x08002781
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4b89      	ldr	r3, [pc, #548]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4a88      	ldr	r2, [pc, #544]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002754:	e015      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f945 	bl	80039ec <RCCEx_PLL2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002766:	e00c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3324      	adds	r3, #36	; 0x24
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f001 f9ee 	bl	8003b50 <RCCEx_PLL3_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
      break;
 800277e:	e000      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002788:	4b79      	ldr	r3, [pc, #484]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278c:	f023 0207 	bic.w	r2, r3, #7
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	4976      	ldr	r1, [pc, #472]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	650b      	str	r3, [r1, #80]	; 0x50
 800279a:	e001      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d051      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80027b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80027b6:	d036      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027b8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80027bc:	d830      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80027be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c2:	d032      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80027c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c8:	d82a      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80027ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027ce:	d02e      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80027d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027d4:	d824      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027da:	d018      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e0:	d81e      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 80027e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ea:	d007      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80027ec:	e018      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027fa:	e019      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f8f2 	bl	80039ec <RCCEx_PLL2_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800280c:	e010      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3324      	adds	r3, #36	; 0x24
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 f99b 	bl	8003b50 <RCCEx_PLL3_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800281e:	e007      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
      break;
 8002824:	e004      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002836:	4b4e      	ldr	r3, [pc, #312]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002844:	494a      	ldr	r1, [pc, #296]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	658b      	str	r3, [r1, #88]	; 0x58
 800284a:	e001      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002858:	2b00      	cmp	r3, #0
 800285a:	d051      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002862:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002866:	d036      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002868:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800286c:	d830      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800286e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002872:	d032      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002878:	d82a      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800287a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800287e:	d02e      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002880:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002884:	d824      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288a:	d018      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x242>
 800288c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002890:	d81e      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289a:	d007      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800289c:	e018      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028aa:	e019      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 f89a 	bl	80039ec <RCCEx_PLL2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028bc:	e010      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3324      	adds	r3, #36	; 0x24
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f943 	bl	8003b50 <RCCEx_PLL3_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028ce:	e007      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
      break;
 80028d4:	e004      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80028d6:	bf00      	nop
 80028d8:	e002      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80028da:	bf00      	nop
 80028dc:	e000      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80028de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028f4:	491e      	ldr	r1, [pc, #120]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	658b      	str	r3, [r1, #88]	; 0x58
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d035      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d01c      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002914:	2b30      	cmp	r3, #48	; 0x30
 8002916:	d817      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002918:	2b20      	cmp	r3, #32
 800291a:	d00c      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d813      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d016      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002924:	2b10      	cmp	r3, #16
 8002926:	d10f      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002934:	e00e      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f855 	bl	80039ec <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8002952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	4902      	ldr	r1, [pc, #8]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800296c:	e004      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d047      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800298c:	d030      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800298e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002992:	d82a      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002998:	d02c      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800299a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800299e:	d824      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80029a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a4:	d018      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	d81e      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d007      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029b6:	e018      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b8:	4bac      	ldr	r3, [pc, #688]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	4aab      	ldr	r2, [pc, #684]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80029be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029c4:	e017      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f80d 	bl	80039ec <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029d6:	e00e      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f8b6 	bl	8003b50 <RCCEx_PLL3_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029e8:	e005      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80029f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029fc:	4b9b      	ldr	r3, [pc, #620]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	4998      	ldr	r1, [pc, #608]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a0e:	e001      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d049      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d02e      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2e:	d828      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a34:	d02a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a3a:	d822      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a40:	d026      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a46:	d81c      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a52:	d816      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d111      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2101      	movs	r1, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 ffc1 	bl	80039ec <RCCEx_PLL2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a6e:	e012      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	2101      	movs	r1, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f86a 	bl	8003b50 <RCCEx_PLL3_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a80:	e009      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
      break;
 8002a86:	e006      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e004      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e002      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002a90:	bf00      	nop
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a9c:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	4970      	ldr	r1, [pc, #448]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	650b      	str	r3, [r1, #80]	; 0x50
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aca:	d02e      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad0:	d828      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d02a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d822      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ade:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae2:	d026      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002ae4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae8:	d81c      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aee:	d010      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af4:	d816      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afe:	d111      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 ff70 	bl	80039ec <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b10:	e012      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3324      	adds	r3, #36	; 0x24
 8002b16:	2101      	movs	r1, #1
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 f819 	bl	8003b50 <RCCEx_PLL3_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b22:	e009      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
      break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b4c:	4947      	ldr	r1, [pc, #284]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	658b      	str	r3, [r1, #88]	; 0x58
 8002b52:	e001      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6c:	d00e      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b72:	d814      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b8a:	e00c      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 ff2a 	bl	80039ec <RCCEx_PLL2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8002ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bac:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	492c      	ldr	r1, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d81b      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c17 	.word	0x08002c17
 8002be4:	08002bf1 	.word	0x08002bf1
 8002be8:	08002bff 	.word	0x08002bff
 8002bec:	08002c17 	.word	0x08002c17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2102      	movs	r1, #2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fef1 	bl	80039ec <RCCEx_PLL2_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4910      	ldr	r1, [pc, #64]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c30:	e001      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 808a 	beq.w	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c50:	f7fe faaa 	bl	80011a8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c56:	e00d      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7fe faa6 	bl	80011a8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d906      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	75fb      	strb	r3, [r7, #23]
        break;
 8002c6a:	e009      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c74:	4bb9      	ldr	r3, [pc, #740]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0eb      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d166      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c86:	4bb6      	ldr	r3, [pc, #728]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c90:	4053      	eors	r3, r2
 8002c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c9a:	4bb1      	ldr	r3, [pc, #708]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4bae      	ldr	r3, [pc, #696]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4aad      	ldr	r2, [pc, #692]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb0:	4bab      	ldr	r3, [pc, #684]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4aaa      	ldr	r2, [pc, #680]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cbc:	4aa8      	ldr	r2, [pc, #672]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fa6b 	bl	80011a8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd4:	e00b      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fa67 	bl	80011a8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d902      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	75fb      	strb	r3, [r7, #23]
            break;
 8002cec:	e005      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cee:	4b9c      	ldr	r3, [pc, #624]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ed      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d126      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002d10:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d1e:	0919      	lsrs	r1, r3, #4
 8002d20:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d22:	400b      	ands	r3, r1
 8002d24:	498e      	ldr	r1, [pc, #568]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	610b      	str	r3, [r1, #16]
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8002d2c:	4b8c      	ldr	r3, [pc, #560]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4a8b      	ldr	r2, [pc, #556]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d36:	6113      	str	r3, [r2, #16]
 8002d38:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	4986      	ldr	r1, [pc, #536]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	670b      	str	r3, [r1, #112]	; 0x70
 8002d4c:	e004      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	75bb      	strb	r3, [r7, #22]
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d07e      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	2b28      	cmp	r3, #40	; 0x28
 8002d6a:	d867      	bhi.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002e43 	.word	0x08002e43
 8002d78:	08002e3d 	.word	0x08002e3d
 8002d7c:	08002e3d 	.word	0x08002e3d
 8002d80:	08002e3d 	.word	0x08002e3d
 8002d84:	08002e3d 	.word	0x08002e3d
 8002d88:	08002e3d 	.word	0x08002e3d
 8002d8c:	08002e3d 	.word	0x08002e3d
 8002d90:	08002e3d 	.word	0x08002e3d
 8002d94:	08002e19 	.word	0x08002e19
 8002d98:	08002e3d 	.word	0x08002e3d
 8002d9c:	08002e3d 	.word	0x08002e3d
 8002da0:	08002e3d 	.word	0x08002e3d
 8002da4:	08002e3d 	.word	0x08002e3d
 8002da8:	08002e3d 	.word	0x08002e3d
 8002dac:	08002e3d 	.word	0x08002e3d
 8002db0:	08002e3d 	.word	0x08002e3d
 8002db4:	08002e2b 	.word	0x08002e2b
 8002db8:	08002e3d 	.word	0x08002e3d
 8002dbc:	08002e3d 	.word	0x08002e3d
 8002dc0:	08002e3d 	.word	0x08002e3d
 8002dc4:	08002e3d 	.word	0x08002e3d
 8002dc8:	08002e3d 	.word	0x08002e3d
 8002dcc:	08002e3d 	.word	0x08002e3d
 8002dd0:	08002e3d 	.word	0x08002e3d
 8002dd4:	08002e43 	.word	0x08002e43
 8002dd8:	08002e3d 	.word	0x08002e3d
 8002ddc:	08002e3d 	.word	0x08002e3d
 8002de0:	08002e3d 	.word	0x08002e3d
 8002de4:	08002e3d 	.word	0x08002e3d
 8002de8:	08002e3d 	.word	0x08002e3d
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	08002e3d 	.word	0x08002e3d
 8002df4:	08002e43 	.word	0x08002e43
 8002df8:	08002e3d 	.word	0x08002e3d
 8002dfc:	08002e3d 	.word	0x08002e3d
 8002e00:	08002e3d 	.word	0x08002e3d
 8002e04:	08002e3d 	.word	0x08002e3d
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e3d 	.word	0x08002e3d
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e43 	.word	0x08002e43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fde4 	bl	80039ec <RCCEx_PLL2_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3324      	adds	r3, #36	; 0x24
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fe8d 	bl	8003b50 <RCCEx_PLL3_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e3a:	e003      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8002e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	4942      	ldr	r1, [pc, #264]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e5c:	e001      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d037      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d820      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ebf 	.word	0x08002ebf
 8002e80:	08002e95 	.word	0x08002e95
 8002e84:	08002ea7 	.word	0x08002ea7
 8002e88:	08002ebf 	.word	0x08002ebf
 8002e8c:	08002ebf 	.word	0x08002ebf
 8002e90:	08002ebf 	.word	0x08002ebf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fda6 	bl	80039ec <RCCEx_PLL2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3324      	adds	r3, #36	; 0x24
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fe4f 	bl	8003b50 <RCCEx_PLL3_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4923      	ldr	r1, [pc, #140]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ed8:	e001      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d040      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d821      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f3f 	.word	0x08002f3f
 8002f00:	08002f15 	.word	0x08002f15
 8002f04:	08002f27 	.word	0x08002f27
 8002f08:	08002f3f 	.word	0x08002f3f
 8002f0c:	08002f3f 	.word	0x08002f3f
 8002f10:	08002f3f 	.word	0x08002f3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fd66 	bl	80039ec <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fe0f 	bl	8003b50 <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f36:	e003      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d110      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	4902      	ldr	r1, [pc, #8]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	658b      	str	r3, [r1, #88]	; 0x58
 8002f5a:	e007      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002f5c:	58024800 	.word	0x58024800
 8002f60:	58024400 	.word	0x58024400
 8002f64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d04b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f82:	d02e      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f88:	d828      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d02a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d822      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f9a:	d026      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fa0:	d81c      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa6:	d010      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fac:	d816      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01d      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb6:	d111      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fd14 	bl	80039ec <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fc8:	e012      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fdbd 	bl	8003b50 <RCCEx_PLL3_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fda:	e009      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe0:	e006      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	4bb2      	ldr	r3, [pc, #712]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	49ae      	ldr	r1, [pc, #696]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003006:	4313      	orrs	r3, r2
 8003008:	654b      	str	r3, [r1, #84]	; 0x54
 800300a:	e001      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d04b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003026:	d02e      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003028:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800302c:	d828      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	d02a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d822      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800303a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800303e:	d026      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003044:	d81c      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d010      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003050:	d816      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01d      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d111      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fcc2 	bl	80039ec <RCCEx_PLL2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800306c:	e012      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3324      	adds	r3, #36	; 0x24
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fd6b 	bl	8003b50 <RCCEx_PLL3_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800307e:	e009      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
      break;
 8003084:	e006      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003086:	bf00      	nop
 8003088:	e004      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800308a:	bf00      	nop
 800308c:	e002      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	4985      	ldr	r1, [pc, #532]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	658b      	str	r3, [r1, #88]	; 0x58
 80030ae:	e001      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d04b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ca:	d02e      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80030cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030d0:	d828      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d02a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	d822      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030e2:	d026      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80030e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030e8:	d81c      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ee:	d010      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80030f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f4:	d816      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01d      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	d111      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fc70 	bl	80039ec <RCCEx_PLL2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003110:	e012      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3324      	adds	r3, #36	; 0x24
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fd19 	bl	8003b50 <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003122:	e009      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
      break;
 8003128:	e006      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800313e:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314c:	495c      	ldr	r1, [pc, #368]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800314e:	4313      	orrs	r3, r2
 8003150:	658b      	str	r3, [r1, #88]	; 0x58
 8003152:	e001      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d10a      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fceb 	bl	8003b50 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003184:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003190:	494b      	ldr	r1, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003192:	4313      	orrs	r3, r2
 8003194:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3324      	adds	r3, #36	; 0x24
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fccb 	bl	8003b50 <RCCEx_PLL3_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c4:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	493b      	ldr	r1, [pc, #236]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d034      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ee:	d01d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80031f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f4:	d817      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003200:	e011      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fbef 	bl	80039ec <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003212:	e00c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3324      	adds	r3, #36	; 0x24
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fc98 	bl	8003b50 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
      break;
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800322c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003242:	491f      	ldr	r1, [pc, #124]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003244:	4313      	orrs	r3, r2
 8003246:	658b      	str	r3, [r1, #88]	; 0x58
 8003248:	e001      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d036      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003264:	d01c      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800326a:	d816      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800326c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003276:	d007      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003278:	e00f      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003286:	e00c      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fc5e 	bl	8003b50 <RCCEx_PLL3_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
      break;
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80032a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b6:	4902      	ldr	r1, [pc, #8]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	654b      	str	r3, [r1, #84]	; 0x54
 80032bc:	e004      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80032be:	bf00      	nop
 80032c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d029      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d007      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80032e2:	e00f      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e4:	4b61      	ldr	r3, [pc, #388]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a60      	ldr	r2, [pc, #384]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80032ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032f0:	e00b      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fb77 	bl	80039ec <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003302:	e002      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003310:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331c:	4953      	ldr	r1, [pc, #332]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800331e:	4313      	orrs	r3, r2
 8003320:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fc08 	bl	8003b50 <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d030      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335e:	d017      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d811      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d013      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d80b      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d106      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a3a      	ldr	r2, [pc, #232]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003388:	e007      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
      break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a0:	4b32      	ldr	r3, [pc, #200]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ac:	492f      	ldr	r1, [pc, #188]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	654b      	str	r3, [r1, #84]	; 0x54
 80033b2:	e001      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d0:	4926      	ldr	r1, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ee:	491f      	ldr	r1, [pc, #124]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003406:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800340a:	6113      	str	r3, [r2, #16]
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003416:	4915      	ldr	r1, [pc, #84]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da08      	bge.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003456:	7dbb      	ldrb	r3, [r7, #22]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400

08003470 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003474:	f7ff f8a6 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4904      	ldr	r1, [pc, #16]	; (8003498 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	58024400 	.word	0x58024400
 8003498:	08005988 	.word	0x08005988

0800349c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a4:	4ba1      	ldr	r3, [pc, #644]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034ae:	4b9f      	ldr	r3, [pc, #636]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	0b1b      	lsrs	r3, r3, #12
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034ba:	4b9c      	ldr	r3, [pc, #624]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034c6:	4b99      	ldr	r3, [pc, #612]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8111 	beq.w	800370c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f000 8083 	beq.w	80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f200 80a1 	bhi.w	800363c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d056      	beq.n	80035b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003506:	e099      	b.n	800363c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003508:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02d      	beq.n	8003570 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003514:	4b85      	ldr	r3, [pc, #532]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	4a84      	ldr	r2, [pc, #528]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b7b      	ldr	r3, [pc, #492]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003552:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800356e:	e087      	b.n	8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a03 	vldr	s12, [r7, #12]
 8003596:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035b2:	e065      	b.n	8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035f6:	e043      	b.n	8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b48      	ldr	r3, [pc, #288]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a03 	vldr	s12, [r7, #12]
 800361e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800363a:	e021      	b.n	8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003662:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800367e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	0a5b      	lsrs	r3, r3, #9
 8003686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800369a:	edd7 6a07 	vldr	s13, [r7, #28]
 800369e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a6:	ee17 2a90 	vmov	r2, s15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d4:	ee17 2a90 	vmov	r2, s15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036dc:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	0e1b      	lsrs	r3, r3, #24
 80036e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800370a:	e008      	b.n	800371e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	bf00      	nop
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	58024400 	.word	0x58024400
 8003730:	03d09000 	.word	0x03d09000
 8003734:	46000000 	.word	0x46000000
 8003738:	4c742400 	.word	0x4c742400
 800373c:	4a742400 	.word	0x4a742400
 8003740:	4af42400 	.word	0x4af42400

08003744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800374c:	4ba1      	ldr	r3, [pc, #644]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003756:	4b9f      	ldr	r3, [pc, #636]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	0d1b      	lsrs	r3, r3, #20
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003762:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800376e:	4b99      	ldr	r3, [pc, #612]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8111 	beq.w	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f000 8083 	beq.w	80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b02      	cmp	r3, #2
 800379e:	f200 80a1 	bhi.w	80038e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d056      	beq.n	800385c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037ae:	e099      	b.n	80038e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b0:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037bc:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003816:	e087      	b.n	8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a03 	vldr	s12, [r7, #12]
 800383e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800385a:	e065      	b.n	8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003882:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800389e:	e043      	b.n	8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038e2:	e021      	b.n	8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a03 	vldr	s12, [r7, #12]
 800390a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003926:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	0a5b      	lsrs	r3, r3, #9
 800392e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	edd7 6a07 	vldr	s13, [r7, #28]
 8003946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 2a90 	vmov	r2, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	edd7 6a07 	vldr	s13, [r7, #28]
 8003974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397c:	ee17 2a90 	vmov	r2, s15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399e:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 2a90 	vmov	r2, s15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039b2:	e008      	b.n	80039c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	03d09000 	.word	0x03d09000
 80039dc:	46000000 	.word	0x46000000
 80039e0:	4c742400 	.word	0x4c742400
 80039e4:	4a742400 	.word	0x4a742400
 80039e8:	4af42400 	.word	0x4af42400

080039ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039fa:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d101      	bne.n	8003a0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e099      	b.n	8003b3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a4e      	ldr	r2, [pc, #312]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fd fbc7 	bl	80011a8 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a1e:	f7fd fbc3 	bl	80011a8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e086      	b.n	8003b3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a30:	4b45      	ldr	r3, [pc, #276]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a3c:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	031b      	lsls	r3, r3, #12
 8003a4a:	493f      	ldr	r1, [pc, #252]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	025b      	lsls	r3, r3, #9
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	061b      	lsls	r3, r3, #24
 8003a7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a80:	4931      	ldr	r1, [pc, #196]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f023 0220 	bic.w	r2, r3, #32
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4928      	ldr	r1, [pc, #160]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <RCCEx_PLL2_Config+0x160>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	69d2      	ldr	r2, [r2, #28]
 8003ac2:	00d2      	lsls	r2, r2, #3
 8003ac4:	4920      	ldr	r1, [pc, #128]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003aca:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	f043 0310 	orr.w	r3, r3, #16
 8003ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ae8:	e00f      	b.n	8003b0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003afc:	e005      	b.n	8003b0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003b10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b16:	f7fd fb47 	bl	80011a8 <HAL_GetTick>
 8003b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b1e:	f7fd fb43 	bl	80011a8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <RCCEx_PLL2_Config+0x15c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	ffff0007 	.word	0xffff0007

08003b50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b5e:	4b53      	ldr	r3, [pc, #332]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d101      	bne.n	8003b6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e099      	b.n	8003ca2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b6e:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fb15 	bl	80011a8 <HAL_GetTick>
 8003b7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b82:	f7fd fb11 	bl	80011a8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e086      	b.n	8003ca2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b94:	4b45      	ldr	r3, [pc, #276]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	051b      	lsls	r3, r3, #20
 8003bae:	493f      	ldr	r1, [pc, #252]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	628b      	str	r3, [r1, #40]	; 0x28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	025b      	lsls	r3, r3, #9
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003be4:	4931      	ldr	r1, [pc, #196]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	492d      	ldr	r1, [pc, #180]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4928      	ldr	r1, [pc, #160]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c0e:	4b27      	ldr	r3, [pc, #156]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a26      	ldr	r2, [pc, #152]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <RCCEx_PLL3_Config+0x160>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	69d2      	ldr	r2, [r2, #28]
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	4920      	ldr	r1, [pc, #128]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c4c:	e00f      	b.n	8003c6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c60:	e005      	b.n	8003c6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fd fa95 	bl	80011a8 <HAL_GetTick>
 8003c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c82:	f7fd fa91 	bl	80011a8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e006      	b.n	8003ca2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <RCCEx_PLL3_Config+0x15c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	ffff0007 	.word	0xffff0007

08003cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e054      	b.n	8003d70 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d111      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fb94 	bl	8004408 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <HAL_TIM_Base_Init+0xc4>)
 8003cec:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 fad7 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	08000da5 	.word	0x08000da5

08003d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e056      	b.n	8003e42 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <HAL_TIM_Base_Start+0xd4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02c      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d027      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_TIM_Base_Start+0xd8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <HAL_TIM_Base_Start+0xdc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01d      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <HAL_TIM_Base_Start+0xe0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a23      	ldr	r2, [pc, #140]	; (8003e60 <HAL_TIM_Base_Start+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <HAL_TIM_Base_Start+0xe8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <HAL_TIM_Base_Start+0xec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_TIM_Base_Start+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_TIM_Base_Start+0x84>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_TIM_Base_Start+0xf4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d115      	bne.n	8003e2c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_TIM_Base_Start+0xf8>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d015      	beq.n	8003e3e <HAL_TIM_Base_Start+0xc2>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d011      	beq.n	8003e3e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	e008      	b.n	8003e3e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800
 8003e5c:	40000c00 	.word	0x40000c00
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40001800 	.word	0x40001800
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	4000e000 	.word	0x4000e000
 8003e70:	4000e400 	.word	0x4000e400
 8003e74:	00010007 	.word	0x00010007

08003e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e05e      	b.n	8003f4e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02c      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d027      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <HAL_TIM_Base_Start_IT+0xec>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d01d      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <HAL_TIM_Base_Start_IT+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_TIM_Base_Start_IT+0xf4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_TIM_Base_Start_IT+0xf8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_TIM_Base_Start_IT+0xfc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_TIM_Base_Start_IT+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x94>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIM_Base_Start_IT+0x104>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d115      	bne.n	8003f38 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_TIM_Base_Start_IT+0x108>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d015      	beq.n	8003f4a <HAL_TIM_Base_Start_IT+0xd2>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d011      	beq.n	8003f4a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	e008      	b.n	8003f4a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40001800 	.word	0x40001800
 8003f74:	40014000 	.word	0x40014000
 8003f78:	4000e000 	.word	0x4000e000
 8003f7c:	4000e400 	.word	0x4000e400
 8003f80:	00010007 	.word	0x00010007

08003f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d128      	bne.n	8003fec <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d121      	bne.n	8003fec <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e009      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d128      	bne.n	800404c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d121      	bne.n	800404c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0204 	mvn.w	r2, #4
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
 8004030:	e009      	b.n	8004046 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	d128      	bne.n	80040ac <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d121      	bne.n	80040ac <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0208 	mvn.w	r2, #8
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2204      	movs	r2, #4
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	e009      	b.n	80040a6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d128      	bne.n	800410c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d121      	bne.n	800410c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0210 	mvn.w	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	e009      	b.n	8004106 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d110      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d109      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0201 	mvn.w	r2, #1
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d110      	bne.n	800416c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d109      	bne.n	800416c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417a:	d110      	bne.n	800419e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d109      	bne.n	800419e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d110      	bne.n	80041ce <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d109      	bne.n	80041ce <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d110      	bne.n	80041fe <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d109      	bne.n	80041fe <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0220 	mvn.w	r2, #32
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <TIM_Base_SetConfig+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <TIM_Base_SetConfig+0x12c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3f      	ldr	r2, [pc, #252]	; (80043ec <TIM_Base_SetConfig+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3e      	ldr	r2, [pc, #248]	; (80043f0 <TIM_Base_SetConfig+0x134>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d108      	bne.n	800430e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d027      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d023      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a30      	ldr	r2, [pc, #192]	; (80043e4 <TIM_Base_SetConfig+0x128>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01f      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <TIM_Base_SetConfig+0x12c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01b      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <TIM_Base_SetConfig+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d017      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <TIM_Base_SetConfig+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_Base_SetConfig+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00f      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_Base_SetConfig+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00b      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <TIM_Base_SetConfig+0x140>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a29      	ldr	r2, [pc, #164]	; (8004400 <TIM_Base_SetConfig+0x144>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_Base_SetConfig+0xaa>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a28      	ldr	r2, [pc, #160]	; (8004404 <TIM_Base_SetConfig+0x148>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00f      	beq.n	80043c4 <TIM_Base_SetConfig+0x108>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <TIM_Base_SetConfig+0x134>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_Base_SetConfig+0x108>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <TIM_Base_SetConfig+0x138>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <TIM_Base_SetConfig+0x108>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <TIM_Base_SetConfig+0x13c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0x108>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <TIM_Base_SetConfig+0x140>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	4000e000 	.word	0x4000e000
 8004404:	4000e400 	.word	0x4000e400

08004408 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <TIM_ResetCallback+0x84>)
 8004414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <TIM_ResetCallback+0x88>)
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <TIM_ResetCallback+0x8c>)
 8004424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <TIM_ResetCallback+0x90>)
 800442c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1a      	ldr	r2, [pc, #104]	; (800449c <TIM_ResetCallback+0x94>)
 8004434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <TIM_ResetCallback+0x98>)
 800443c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <TIM_ResetCallback+0x9c>)
 8004444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_ResetCallback+0xa0>)
 800444c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_ResetCallback+0xa4>)
 8004454:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <TIM_ResetCallback+0xa8>)
 800445c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <TIM_ResetCallback+0xac>)
 8004464:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <TIM_ResetCallback+0xb0>)
 800446c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <TIM_ResetCallback+0xb4>)
 8004474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <TIM_ResetCallback+0xb8>)
 800447c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	08000d31 	.word	0x08000d31
 8004490:	08004207 	.word	0x08004207
 8004494:	0800427f 	.word	0x0800427f
 8004498:	08004293 	.word	0x08004293
 800449c:	0800422f 	.word	0x0800422f
 80044a0:	08004243 	.word	0x08004243
 80044a4:	0800421b 	.word	0x0800421b
 80044a8:	08004257 	.word	0x08004257
 80044ac:	0800426b 	.word	0x0800426b
 80044b0:	080042a7 	.word	0x080042a7
 80044b4:	080045fd 	.word	0x080045fd
 80044b8:	08004611 	.word	0x08004611
 80044bc:	08004625 	.word	0x08004625
 80044c0:	08004639 	.word	0x08004639

080044c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e077      	b.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a35      	ldr	r2, [pc, #212]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d027      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40001800 	.word	0x40001800
 80045f0:	40014000 	.word	0x40014000
 80045f4:	4000e000 	.word	0x4000e000
 80045f8:	4000e400 	.word	0x4000e400

080045fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e042      	b.n	80046e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fc fbd7 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2224      	movs	r2, #36	; 0x24
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f82c 	bl	80046ec <UART_SetConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e022      	b.n	80046e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fe7e 	bl	80053a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 ff05 	bl	80054ec <UART_CheckIdleState>
 80046e2:	4603      	mov	r3, r0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b5b0      	push	{r4, r5, r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4313      	orrs	r3, r2
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4bbf      	ldr	r3, [pc, #764]	; (8004a18 <UART_SetConfig+0x32c>)
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004722:	430b      	orrs	r3, r1
 8004724:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4ab5      	ldr	r2, [pc, #724]	; (8004a1c <UART_SetConfig+0x330>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004752:	4313      	orrs	r3, r2
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4bb0      	ldr	r3, [pc, #704]	; (8004a20 <UART_SetConfig+0x334>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004766:	430b      	orrs	r3, r1
 8004768:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f023 010f 	bic.w	r1, r3, #15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4aa7      	ldr	r2, [pc, #668]	; (8004a24 <UART_SetConfig+0x338>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d176      	bne.n	8004878 <UART_SetConfig+0x18c>
 800478a:	4ba7      	ldr	r3, [pc, #668]	; (8004a28 <UART_SetConfig+0x33c>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	d86c      	bhi.n	8004870 <UART_SetConfig+0x184>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0xb0>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	08004841 	.word	0x08004841
 80047a0:	08004871 	.word	0x08004871
 80047a4:	08004871 	.word	0x08004871
 80047a8:	08004871 	.word	0x08004871
 80047ac:	08004871 	.word	0x08004871
 80047b0:	08004871 	.word	0x08004871
 80047b4:	08004871 	.word	0x08004871
 80047b8:	08004871 	.word	0x08004871
 80047bc:	08004849 	.word	0x08004849
 80047c0:	08004871 	.word	0x08004871
 80047c4:	08004871 	.word	0x08004871
 80047c8:	08004871 	.word	0x08004871
 80047cc:	08004871 	.word	0x08004871
 80047d0:	08004871 	.word	0x08004871
 80047d4:	08004871 	.word	0x08004871
 80047d8:	08004871 	.word	0x08004871
 80047dc:	08004851 	.word	0x08004851
 80047e0:	08004871 	.word	0x08004871
 80047e4:	08004871 	.word	0x08004871
 80047e8:	08004871 	.word	0x08004871
 80047ec:	08004871 	.word	0x08004871
 80047f0:	08004871 	.word	0x08004871
 80047f4:	08004871 	.word	0x08004871
 80047f8:	08004871 	.word	0x08004871
 80047fc:	08004859 	.word	0x08004859
 8004800:	08004871 	.word	0x08004871
 8004804:	08004871 	.word	0x08004871
 8004808:	08004871 	.word	0x08004871
 800480c:	08004871 	.word	0x08004871
 8004810:	08004871 	.word	0x08004871
 8004814:	08004871 	.word	0x08004871
 8004818:	08004871 	.word	0x08004871
 800481c:	08004861 	.word	0x08004861
 8004820:	08004871 	.word	0x08004871
 8004824:	08004871 	.word	0x08004871
 8004828:	08004871 	.word	0x08004871
 800482c:	08004871 	.word	0x08004871
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
 8004838:	08004871 	.word	0x08004871
 800483c:	08004869 	.word	0x08004869
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004846:	e326      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484e:	e322      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004856:	e31e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485e:	e31a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004860:	2320      	movs	r3, #32
 8004862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004866:	e316      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004868:	2340      	movs	r3, #64	; 0x40
 800486a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800486e:	e312      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004876:	e30e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a6b      	ldr	r2, [pc, #428]	; (8004a2c <UART_SetConfig+0x340>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d130      	bne.n	80048e4 <UART_SetConfig+0x1f8>
 8004882:	4b69      	ldr	r3, [pc, #420]	; (8004a28 <UART_SetConfig+0x33c>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b05      	cmp	r3, #5
 800488c:	d826      	bhi.n	80048dc <UART_SetConfig+0x1f0>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0x1a8>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048b5 	.word	0x080048b5
 800489c:	080048bd 	.word	0x080048bd
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b2:	e2f0      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ba:	e2ec      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c2:	e2e8      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ca:	e2e4      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048cc:	2320      	movs	r3, #32
 80048ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d2:	e2e0      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048da:	e2dc      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e2:	e2d8      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a51      	ldr	r2, [pc, #324]	; (8004a30 <UART_SetConfig+0x344>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d130      	bne.n	8004950 <UART_SetConfig+0x264>
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <UART_SetConfig+0x33c>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d826      	bhi.n	8004948 <UART_SetConfig+0x25c>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x214>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e2ba      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e2b6      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492e:	e2b2      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004936:	e2ae      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e2aa      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e2a6      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494e:	e2a2      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <UART_SetConfig+0x348>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d130      	bne.n	80049bc <UART_SetConfig+0x2d0>
 800495a:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <UART_SetConfig+0x33c>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b05      	cmp	r3, #5
 8004964:	d826      	bhi.n	80049b4 <UART_SetConfig+0x2c8>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0x280>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004985 	.word	0x08004985
 8004970:	0800498d 	.word	0x0800498d
 8004974:	08004995 	.word	0x08004995
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498a:	e284      	b.n	8004e96 <UART_SetConfig+0x7aa>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004992:	e280      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499a:	e27c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a2:	e278      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049aa:	e274      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b2:	e270      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ba:	e26c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <UART_SetConfig+0x34c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d142      	bne.n	8004a4c <UART_SetConfig+0x360>
 80049c6:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <UART_SetConfig+0x33c>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d838      	bhi.n	8004a44 <UART_SetConfig+0x358>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x2ec>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a3d 	.word	0x08004a3d
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049f6:	e24e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fe:	e24a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a06:	e246      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e242      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e23e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a18:	cfff69f3 	.word	0xcfff69f3
 8004a1c:	58000c00 	.word	0x58000c00
 8004a20:	11fff4ff 	.word	0x11fff4ff
 8004a24:	40011000 	.word	0x40011000
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	40004400 	.word	0x40004400
 8004a30:	40004800 	.word	0x40004800
 8004a34:	40004c00 	.word	0x40004c00
 8004a38:	40005000 	.word	0x40005000
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a42:	e228      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a4a:	e224      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4ab1      	ldr	r2, [pc, #708]	; (8004d18 <UART_SetConfig+0x62c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d176      	bne.n	8004b44 <UART_SetConfig+0x458>
 8004a56:	4bb1      	ldr	r3, [pc, #708]	; (8004d1c <UART_SetConfig+0x630>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a5e:	2b28      	cmp	r3, #40	; 0x28
 8004a60:	d86c      	bhi.n	8004b3c <UART_SetConfig+0x450>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x37c>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004b0d 	.word	0x08004b0d
 8004a6c:	08004b3d 	.word	0x08004b3d
 8004a70:	08004b3d 	.word	0x08004b3d
 8004a74:	08004b3d 	.word	0x08004b3d
 8004a78:	08004b3d 	.word	0x08004b3d
 8004a7c:	08004b3d 	.word	0x08004b3d
 8004a80:	08004b3d 	.word	0x08004b3d
 8004a84:	08004b3d 	.word	0x08004b3d
 8004a88:	08004b15 	.word	0x08004b15
 8004a8c:	08004b3d 	.word	0x08004b3d
 8004a90:	08004b3d 	.word	0x08004b3d
 8004a94:	08004b3d 	.word	0x08004b3d
 8004a98:	08004b3d 	.word	0x08004b3d
 8004a9c:	08004b3d 	.word	0x08004b3d
 8004aa0:	08004b3d 	.word	0x08004b3d
 8004aa4:	08004b3d 	.word	0x08004b3d
 8004aa8:	08004b1d 	.word	0x08004b1d
 8004aac:	08004b3d 	.word	0x08004b3d
 8004ab0:	08004b3d 	.word	0x08004b3d
 8004ab4:	08004b3d 	.word	0x08004b3d
 8004ab8:	08004b3d 	.word	0x08004b3d
 8004abc:	08004b3d 	.word	0x08004b3d
 8004ac0:	08004b3d 	.word	0x08004b3d
 8004ac4:	08004b3d 	.word	0x08004b3d
 8004ac8:	08004b25 	.word	0x08004b25
 8004acc:	08004b3d 	.word	0x08004b3d
 8004ad0:	08004b3d 	.word	0x08004b3d
 8004ad4:	08004b3d 	.word	0x08004b3d
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004b3d 	.word	0x08004b3d
 8004ae0:	08004b3d 	.word	0x08004b3d
 8004ae4:	08004b3d 	.word	0x08004b3d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b3d 	.word	0x08004b3d
 8004af4:	08004b3d 	.word	0x08004b3d
 8004af8:	08004b3d 	.word	0x08004b3d
 8004afc:	08004b3d 	.word	0x08004b3d
 8004b00:	08004b3d 	.word	0x08004b3d
 8004b04:	08004b3d 	.word	0x08004b3d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b12:	e1c0      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b14:	2304      	movs	r3, #4
 8004b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1a:	e1bc      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b22:	e1b8      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b24:	2310      	movs	r3, #16
 8004b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b2a:	e1b4      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b32:	e1b0      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3a:	e1ac      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b42:	e1a8      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <UART_SetConfig+0x634>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d130      	bne.n	8004bb0 <UART_SetConfig+0x4c4>
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <UART_SetConfig+0x630>)
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d826      	bhi.n	8004ba8 <UART_SetConfig+0x4bc>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0x474>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b79 	.word	0x08004b79
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b89 	.word	0x08004b89
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b7e:	e18a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b86:	e186      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b8e:	e182      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b96:	e17e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004b98:	2320      	movs	r3, #32
 8004b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9e:	e17a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004ba0:	2340      	movs	r3, #64	; 0x40
 8004ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba6:	e176      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bae:	e172      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a5b      	ldr	r2, [pc, #364]	; (8004d24 <UART_SetConfig+0x638>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d130      	bne.n	8004c1c <UART_SetConfig+0x530>
 8004bba:	4b58      	ldr	r3, [pc, #352]	; (8004d1c <UART_SetConfig+0x630>)
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d826      	bhi.n	8004c14 <UART_SetConfig+0x528>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x4e0>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004be5 	.word	0x08004be5
 8004bd0:	08004bed 	.word	0x08004bed
 8004bd4:	08004bf5 	.word	0x08004bf5
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bea:	e154      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf2:	e150      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfa:	e14c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c02:	e148      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004c04:	2320      	movs	r3, #32
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	e144      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c12:	e140      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1a:	e13c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a41      	ldr	r2, [pc, #260]	; (8004d28 <UART_SetConfig+0x63c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f040 8082 	bne.w	8004d2c <UART_SetConfig+0x640>
 8004c28:	4b3c      	ldr	r3, [pc, #240]	; (8004d1c <UART_SetConfig+0x630>)
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c30:	2b28      	cmp	r3, #40	; 0x28
 8004c32:	d86d      	bhi.n	8004d10 <UART_SetConfig+0x624>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x550>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004ce1 	.word	0x08004ce1
 8004c40:	08004d11 	.word	0x08004d11
 8004c44:	08004d11 	.word	0x08004d11
 8004c48:	08004d11 	.word	0x08004d11
 8004c4c:	08004d11 	.word	0x08004d11
 8004c50:	08004d11 	.word	0x08004d11
 8004c54:	08004d11 	.word	0x08004d11
 8004c58:	08004d11 	.word	0x08004d11
 8004c5c:	08004ce9 	.word	0x08004ce9
 8004c60:	08004d11 	.word	0x08004d11
 8004c64:	08004d11 	.word	0x08004d11
 8004c68:	08004d11 	.word	0x08004d11
 8004c6c:	08004d11 	.word	0x08004d11
 8004c70:	08004d11 	.word	0x08004d11
 8004c74:	08004d11 	.word	0x08004d11
 8004c78:	08004d11 	.word	0x08004d11
 8004c7c:	08004cf1 	.word	0x08004cf1
 8004c80:	08004d11 	.word	0x08004d11
 8004c84:	08004d11 	.word	0x08004d11
 8004c88:	08004d11 	.word	0x08004d11
 8004c8c:	08004d11 	.word	0x08004d11
 8004c90:	08004d11 	.word	0x08004d11
 8004c94:	08004d11 	.word	0x08004d11
 8004c98:	08004d11 	.word	0x08004d11
 8004c9c:	08004cf9 	.word	0x08004cf9
 8004ca0:	08004d11 	.word	0x08004d11
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004d11 	.word	0x08004d11
 8004cb4:	08004d11 	.word	0x08004d11
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d11 	.word	0x08004d11
 8004ccc:	08004d11 	.word	0x08004d11
 8004cd0:	08004d11 	.word	0x08004d11
 8004cd4:	08004d11 	.word	0x08004d11
 8004cd8:	08004d11 	.word	0x08004d11
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce6:	e0d6      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cee:	e0d2      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e0ce      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e0ca      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004d00:	2320      	movs	r3, #32
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e0c6      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004d08:	2340      	movs	r3, #64	; 0x40
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	e0c2      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	e0be      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	40007800 	.word	0x40007800
 8004d24:	40007c00 	.word	0x40007c00
 8004d28:	40011800 	.word	0x40011800
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4aad      	ldr	r2, [pc, #692]	; (8004fe8 <UART_SetConfig+0x8fc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d176      	bne.n	8004e24 <UART_SetConfig+0x738>
 8004d36:	4bad      	ldr	r3, [pc, #692]	; (8004fec <UART_SetConfig+0x900>)
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3e:	2b28      	cmp	r3, #40	; 0x28
 8004d40:	d86c      	bhi.n	8004e1c <UART_SetConfig+0x730>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x65c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004ded 	.word	0x08004ded
 8004d4c:	08004e1d 	.word	0x08004e1d
 8004d50:	08004e1d 	.word	0x08004e1d
 8004d54:	08004e1d 	.word	0x08004e1d
 8004d58:	08004e1d 	.word	0x08004e1d
 8004d5c:	08004e1d 	.word	0x08004e1d
 8004d60:	08004e1d 	.word	0x08004e1d
 8004d64:	08004e1d 	.word	0x08004e1d
 8004d68:	08004df5 	.word	0x08004df5
 8004d6c:	08004e1d 	.word	0x08004e1d
 8004d70:	08004e1d 	.word	0x08004e1d
 8004d74:	08004e1d 	.word	0x08004e1d
 8004d78:	08004e1d 	.word	0x08004e1d
 8004d7c:	08004e1d 	.word	0x08004e1d
 8004d80:	08004e1d 	.word	0x08004e1d
 8004d84:	08004e1d 	.word	0x08004e1d
 8004d88:	08004dfd 	.word	0x08004dfd
 8004d8c:	08004e1d 	.word	0x08004e1d
 8004d90:	08004e1d 	.word	0x08004e1d
 8004d94:	08004e1d 	.word	0x08004e1d
 8004d98:	08004e1d 	.word	0x08004e1d
 8004d9c:	08004e1d 	.word	0x08004e1d
 8004da0:	08004e1d 	.word	0x08004e1d
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004e1d 	.word	0x08004e1d
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004e1d 	.word	0x08004e1d
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e0d 	.word	0x08004e0d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e1d 	.word	0x08004e1d
 8004dd4:	08004e1d 	.word	0x08004e1d
 8004dd8:	08004e1d 	.word	0x08004e1d
 8004ddc:	08004e1d 	.word	0x08004e1d
 8004de0:	08004e1d 	.word	0x08004e1d
 8004de4:	08004e1d 	.word	0x08004e1d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004df2:	e050      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dfa:	e04c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e02:	e048      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0a:	e044      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e12:	e040      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1a:	e03c      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e22:	e038      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <UART_SetConfig+0x904>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d130      	bne.n	8004e90 <UART_SetConfig+0x7a4>
 8004e2e:	4b6f      	ldr	r3, [pc, #444]	; (8004fec <UART_SetConfig+0x900>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d826      	bhi.n	8004e88 <UART_SetConfig+0x79c>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0x754>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e59 	.word	0x08004e59
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e69 	.word	0x08004e69
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e5e:	e01a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e66:	e016      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e6e:	e012      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e76:	e00e      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e78:	2320      	movs	r3, #32
 8004e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7e:	e00a      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e80:	2340      	movs	r3, #64	; 0x40
 8004e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e86:	e006      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8e:	e002      	b.n	8004e96 <UART_SetConfig+0x7aa>
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a55      	ldr	r2, [pc, #340]	; (8004ff0 <UART_SetConfig+0x904>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	f040 80f0 	bne.w	8005082 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	dc46      	bgt.n	8004f38 <UART_SetConfig+0x84c>
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	db75      	blt.n	8004f9a <UART_SetConfig+0x8ae>
 8004eae:	3b02      	subs	r3, #2
 8004eb0:	2b1e      	cmp	r3, #30
 8004eb2:	d872      	bhi.n	8004f9a <UART_SetConfig+0x8ae>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <UART_SetConfig+0x7d0>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004f3f 	.word	0x08004f3f
 8004ec0:	08004f9b 	.word	0x08004f9b
 8004ec4:	08004f47 	.word	0x08004f47
 8004ec8:	08004f9b 	.word	0x08004f9b
 8004ecc:	08004f9b 	.word	0x08004f9b
 8004ed0:	08004f9b 	.word	0x08004f9b
 8004ed4:	08004f57 	.word	0x08004f57
 8004ed8:	08004f9b 	.word	0x08004f9b
 8004edc:	08004f9b 	.word	0x08004f9b
 8004ee0:	08004f9b 	.word	0x08004f9b
 8004ee4:	08004f9b 	.word	0x08004f9b
 8004ee8:	08004f9b 	.word	0x08004f9b
 8004eec:	08004f9b 	.word	0x08004f9b
 8004ef0:	08004f9b 	.word	0x08004f9b
 8004ef4:	08004f67 	.word	0x08004f67
 8004ef8:	08004f9b 	.word	0x08004f9b
 8004efc:	08004f9b 	.word	0x08004f9b
 8004f00:	08004f9b 	.word	0x08004f9b
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	08004f9b 	.word	0x08004f9b
 8004f0c:	08004f9b 	.word	0x08004f9b
 8004f10:	08004f9b 	.word	0x08004f9b
 8004f14:	08004f9b 	.word	0x08004f9b
 8004f18:	08004f9b 	.word	0x08004f9b
 8004f1c:	08004f9b 	.word	0x08004f9b
 8004f20:	08004f9b 	.word	0x08004f9b
 8004f24:	08004f9b 	.word	0x08004f9b
 8004f28:	08004f9b 	.word	0x08004f9b
 8004f2c:	08004f9b 	.word	0x08004f9b
 8004f30:	08004f9b 	.word	0x08004f9b
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d02a      	beq.n	8004f92 <UART_SetConfig+0x8a6>
 8004f3c:	e02d      	b.n	8004f9a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f3e:	f7fe fa97 	bl	8003470 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f44:	e02f      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe faa6 	bl	800349c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f54:	e027      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fbf2 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f64:	e01f      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <UART_SetConfig+0x900>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <UART_SetConfig+0x900>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	08db      	lsrs	r3, r3, #3
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <UART_SetConfig+0x908>)
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f84:	e00f      	b.n	8004fa6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <UART_SetConfig+0x908>)
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8a:	e00c      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <UART_SetConfig+0x90c>)
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f90:	e009      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f98:	e005      	b.n	8004fa6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 81e6 	beq.w	800537a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <UART_SetConfig+0x910>)
 8004fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d305      	bcc.n	8004fde <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d910      	bls.n	8005000 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fe4:	e1c9      	b.n	800537a <UART_SetConfig+0xc8e>
 8004fe6:	bf00      	nop
 8004fe8:	40011c00 	.word	0x40011c00
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	58000c00 	.word	0x58000c00
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	08005998 	.word	0x08005998
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	4618      	mov	r0, r3
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	4ac1      	ldr	r2, [pc, #772]	; (8005314 <UART_SetConfig+0xc28>)
 800500e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005012:	b29a      	uxth	r2, r3
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f7fb f978 	bl	800030c <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	020b      	lsls	r3, r1, #8
 800502e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005032:	0202      	lsls	r2, r0, #8
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	6849      	ldr	r1, [r1, #4]
 8005038:	0849      	lsrs	r1, r1, #1
 800503a:	4608      	mov	r0, r1
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	1814      	adds	r4, r2, r0
 8005042:	eb43 0501 	adc.w	r5, r3, r1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	4620      	mov	r0, r4
 8005052:	4629      	mov	r1, r5
 8005054:	f7fb f95a 	bl	800030c <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005066:	d308      	bcc.n	800507a <UART_SetConfig+0x98e>
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506e:	d204      	bcs.n	800507a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e17f      	b.n	800537a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005080:	e17b      	b.n	800537a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	f040 80bd 	bne.w	8005208 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800508e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005092:	2b20      	cmp	r3, #32
 8005094:	dc48      	bgt.n	8005128 <UART_SetConfig+0xa3c>
 8005096:	2b00      	cmp	r3, #0
 8005098:	db7b      	blt.n	8005192 <UART_SetConfig+0xaa6>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d879      	bhi.n	8005192 <UART_SetConfig+0xaa6>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0x9b8>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	0800512f 	.word	0x0800512f
 80050a8:	08005137 	.word	0x08005137
 80050ac:	08005193 	.word	0x08005193
 80050b0:	08005193 	.word	0x08005193
 80050b4:	0800513f 	.word	0x0800513f
 80050b8:	08005193 	.word	0x08005193
 80050bc:	08005193 	.word	0x08005193
 80050c0:	08005193 	.word	0x08005193
 80050c4:	0800514f 	.word	0x0800514f
 80050c8:	08005193 	.word	0x08005193
 80050cc:	08005193 	.word	0x08005193
 80050d0:	08005193 	.word	0x08005193
 80050d4:	08005193 	.word	0x08005193
 80050d8:	08005193 	.word	0x08005193
 80050dc:	08005193 	.word	0x08005193
 80050e0:	08005193 	.word	0x08005193
 80050e4:	0800515f 	.word	0x0800515f
 80050e8:	08005193 	.word	0x08005193
 80050ec:	08005193 	.word	0x08005193
 80050f0:	08005193 	.word	0x08005193
 80050f4:	08005193 	.word	0x08005193
 80050f8:	08005193 	.word	0x08005193
 80050fc:	08005193 	.word	0x08005193
 8005100:	08005193 	.word	0x08005193
 8005104:	08005193 	.word	0x08005193
 8005108:	08005193 	.word	0x08005193
 800510c:	08005193 	.word	0x08005193
 8005110:	08005193 	.word	0x08005193
 8005114:	08005193 	.word	0x08005193
 8005118:	08005193 	.word	0x08005193
 800511c:	08005193 	.word	0x08005193
 8005120:	08005193 	.word	0x08005193
 8005124:	08005185 	.word	0x08005185
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d02e      	beq.n	800518a <UART_SetConfig+0xa9e>
 800512c:	e031      	b.n	8005192 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512e:	f7fd fa79 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8005132:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005134:	e033      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005136:	f7fd fa8b 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 800513a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800513c:	e02f      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800513e:	f107 0314 	add.w	r3, r7, #20
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f9aa 	bl	800349c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800514c:	e027      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe faf6 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515c:	e01f      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800515e:	4b6e      	ldr	r3, [pc, #440]	; (8005318 <UART_SetConfig+0xc2c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800516a:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <UART_SetConfig+0xc2c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	4a69      	ldr	r2, [pc, #420]	; (800531c <UART_SetConfig+0xc30>)
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800517c:	e00f      	b.n	800519e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800517e:	4b67      	ldr	r3, [pc, #412]	; (800531c <UART_SetConfig+0xc30>)
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005182:	e00c      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005184:	4b66      	ldr	r3, [pc, #408]	; (8005320 <UART_SetConfig+0xc34>)
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005188:	e009      	b.n	800519e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005190:	e005      	b.n	800519e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800519c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80ea 	beq.w	800537a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	4a5a      	ldr	r2, [pc, #360]	; (8005314 <UART_SetConfig+0xc28>)
 80051ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b8:	005a      	lsls	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	441a      	add	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	d916      	bls.n	8005200 <UART_SetConfig+0xb14>
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d212      	bcs.n	8005200 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f023 030f 	bic.w	r3, r3, #15
 80051e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051f2:	4313      	orrs	r3, r2
 80051f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	e0bc      	b.n	800537a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005206:	e0b8      	b.n	800537a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800520c:	2b20      	cmp	r3, #32
 800520e:	dc4b      	bgt.n	80052a8 <UART_SetConfig+0xbbc>
 8005210:	2b00      	cmp	r3, #0
 8005212:	f2c0 8087 	blt.w	8005324 <UART_SetConfig+0xc38>
 8005216:	2b20      	cmp	r3, #32
 8005218:	f200 8084 	bhi.w	8005324 <UART_SetConfig+0xc38>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0xb38>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	080052af 	.word	0x080052af
 8005228:	080052b7 	.word	0x080052b7
 800522c:	08005325 	.word	0x08005325
 8005230:	08005325 	.word	0x08005325
 8005234:	080052bf 	.word	0x080052bf
 8005238:	08005325 	.word	0x08005325
 800523c:	08005325 	.word	0x08005325
 8005240:	08005325 	.word	0x08005325
 8005244:	080052cf 	.word	0x080052cf
 8005248:	08005325 	.word	0x08005325
 800524c:	08005325 	.word	0x08005325
 8005250:	08005325 	.word	0x08005325
 8005254:	08005325 	.word	0x08005325
 8005258:	08005325 	.word	0x08005325
 800525c:	08005325 	.word	0x08005325
 8005260:	08005325 	.word	0x08005325
 8005264:	080052df 	.word	0x080052df
 8005268:	08005325 	.word	0x08005325
 800526c:	08005325 	.word	0x08005325
 8005270:	08005325 	.word	0x08005325
 8005274:	08005325 	.word	0x08005325
 8005278:	08005325 	.word	0x08005325
 800527c:	08005325 	.word	0x08005325
 8005280:	08005325 	.word	0x08005325
 8005284:	08005325 	.word	0x08005325
 8005288:	08005325 	.word	0x08005325
 800528c:	08005325 	.word	0x08005325
 8005290:	08005325 	.word	0x08005325
 8005294:	08005325 	.word	0x08005325
 8005298:	08005325 	.word	0x08005325
 800529c:	08005325 	.word	0x08005325
 80052a0:	08005325 	.word	0x08005325
 80052a4:	08005305 	.word	0x08005305
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d02e      	beq.n	800530a <UART_SetConfig+0xc1e>
 80052ac:	e03a      	b.n	8005324 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7fd f9b9 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80052b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052b4:	e03c      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b6:	f7fd f9cb 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80052ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052bc:	e038      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe f8ea 	bl	800349c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052cc:	e030      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fa36 	bl	8003744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052dc:	e028      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <UART_SetConfig+0xc2c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <UART_SetConfig+0xc2c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	08db      	lsrs	r3, r3, #3
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	4a09      	ldr	r2, [pc, #36]	; (800531c <UART_SetConfig+0xc30>)
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052fc:	e018      	b.n	8005330 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <UART_SetConfig+0xc30>)
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005302:	e015      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <UART_SetConfig+0xc34>)
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005308:	e012      	b.n	8005330 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005310:	e00e      	b.n	8005330 <UART_SetConfig+0xc44>
 8005312:	bf00      	nop
 8005314:	08005998 	.word	0x08005998
 8005318:	58024400 	.word	0x58024400
 800531c:	03d09000 	.word	0x03d09000
 8005320:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800532e:	bf00      	nop
    }

    if (pclk != 0U)
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d021      	beq.n	800537a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <UART_SetConfig+0xcb8>)
 800533c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005340:	461a      	mov	r2, r3
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	fbb3 f2f2 	udiv	r2, r3, r2
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d909      	bls.n	8005374 <UART_SetConfig+0xc88>
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005366:	d205      	bcs.n	8005374 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	e002      	b.n	800537a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005396:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800539a:	4618      	mov	r0, r3
 800539c:	3738      	adds	r7, #56	; 0x38
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	08005998 	.word	0x08005998

080053a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01a      	beq.n	80054be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a6:	d10a      	bne.n	80054be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054fc:	f7fb fe54 	bl	80011a8 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d10e      	bne.n	800552e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f82f 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e025      	b.n	800557a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d10e      	bne.n	800555a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f819 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b09c      	sub	sp, #112	; 0x70
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005592:	e0a9      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	f000 80a5 	beq.w	80056e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fb fe03 	bl	80011a8 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d140      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e6      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	663b      	str	r3, [r7, #96]	; 0x60
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005606:	64ba      	str	r2, [r7, #72]	; 0x48
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800560c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e069      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d051      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005652:	d149      	bne.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800565c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e6      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3308      	adds	r3, #8
 8005696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	613b      	str	r3, [r7, #16]
   return(result);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3308      	adds	r3, #8
 80056ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056b0:	623a      	str	r2, [r7, #32]
 80056b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e010      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	429a      	cmp	r2, r3
 8005704:	f43f af46 	beq.w	8005594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3770      	adds	r7, #112	; 0x70
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UARTEx_DisableFifoMode+0x16>
 8005724:	2302      	movs	r3, #2
 8005726:	e027      	b.n	8005778 <HAL_UARTEx_DisableFifoMode+0x66>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005756:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e02d      	b.n	80057f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2224      	movs	r2, #36	; 0x24
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f84f 	bl	800587c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e02d      	b.n	8005874 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2224      	movs	r2, #36	; 0x24
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f811 	bl	800587c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800589c:	e031      	b.n	8005902 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800589e:	2310      	movs	r3, #16
 80058a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058a2:	2310      	movs	r3, #16
 80058a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	0e5b      	lsrs	r3, r3, #25
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	0f5b      	lsrs	r3, r3, #29
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	7b3a      	ldrb	r2, [r7, #12]
 80058ca:	4911      	ldr	r1, [pc, #68]	; (8005910 <UARTEx_SetNbDataToProcess+0x94>)
 80058cc:	5c8a      	ldrb	r2, [r1, r2]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058d2:	7b3a      	ldrb	r2, [r7, #12]
 80058d4:	490f      	ldr	r1, [pc, #60]	; (8005914 <UARTEx_SetNbDataToProcess+0x98>)
 80058d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	7b7a      	ldrb	r2, [r7, #13]
 80058e8:	4909      	ldr	r1, [pc, #36]	; (8005910 <UARTEx_SetNbDataToProcess+0x94>)
 80058ea:	5c8a      	ldrb	r2, [r1, r2]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058f0:	7b7a      	ldrb	r2, [r7, #13]
 80058f2:	4908      	ldr	r1, [pc, #32]	; (8005914 <UARTEx_SetNbDataToProcess+0x98>)
 80058f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	080059b0 	.word	0x080059b0
 8005914:	080059b8 	.word	0x080059b8

08005918 <__libc_init_array>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4d0d      	ldr	r5, [pc, #52]	; (8005950 <__libc_init_array+0x38>)
 800591c:	4c0d      	ldr	r4, [pc, #52]	; (8005954 <__libc_init_array+0x3c>)
 800591e:	1b64      	subs	r4, r4, r5
 8005920:	10a4      	asrs	r4, r4, #2
 8005922:	2600      	movs	r6, #0
 8005924:	42a6      	cmp	r6, r4
 8005926:	d109      	bne.n	800593c <__libc_init_array+0x24>
 8005928:	4d0b      	ldr	r5, [pc, #44]	; (8005958 <__libc_init_array+0x40>)
 800592a:	4c0c      	ldr	r4, [pc, #48]	; (800595c <__libc_init_array+0x44>)
 800592c:	f000 f820 	bl	8005970 <_init>
 8005930:	1b64      	subs	r4, r4, r5
 8005932:	10a4      	asrs	r4, r4, #2
 8005934:	2600      	movs	r6, #0
 8005936:	42a6      	cmp	r6, r4
 8005938:	d105      	bne.n	8005946 <__libc_init_array+0x2e>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005940:	4798      	blx	r3
 8005942:	3601      	adds	r6, #1
 8005944:	e7ee      	b.n	8005924 <__libc_init_array+0xc>
 8005946:	f855 3b04 	ldr.w	r3, [r5], #4
 800594a:	4798      	blx	r3
 800594c:	3601      	adds	r6, #1
 800594e:	e7f2      	b.n	8005936 <__libc_init_array+0x1e>
 8005950:	080059c8 	.word	0x080059c8
 8005954:	080059c8 	.word	0x080059c8
 8005958:	080059c8 	.word	0x080059c8
 800595c:	080059cc 	.word	0x080059cc

08005960 <memset>:
 8005960:	4402      	add	r2, r0
 8005962:	4603      	mov	r3, r0
 8005964:	4293      	cmp	r3, r2
 8005966:	d100      	bne.n	800596a <memset+0xa>
 8005968:	4770      	bx	lr
 800596a:	f803 1b01 	strb.w	r1, [r3], #1
 800596e:	e7f9      	b.n	8005964 <memset+0x4>

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
