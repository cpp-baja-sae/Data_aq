
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013208  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080134d8  080134d8  000234d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013724  08013724  00023724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801372c  0801372c  0002372c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013730  08013730  00023730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000080a4  24000000  08013734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240080a4  0801b7d8  000380a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24008104  0801b838  00038104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054b4  24008164  0801b898  00038164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400d618  0801b898  0003d618  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00038164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000451ab  00000000  00000000  00038192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a41  00000000  00000000  0007d33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  00083d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b8  00000000  00000000  00086060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008ba8  00000000  00000000  00088118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ed2c  00000000  00000000  00090cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016675f  00000000  00000000  000bf9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022614b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098b8  00000000  00000000  002261a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008164 	.word	0x24008164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080134c0 	.word	0x080134c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24008168 	.word	0x24008168
 800030c:	080134c0 	.word	0x080134c0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000730:	2140      	movs	r1, #64	; 0x40
 8000732:	481a      	ldr	r0, [pc, #104]	; (800079c <main+0x70>)
 8000734:	f7ff ffc0 	bl	80006b8 <HalfKBWrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f001 f862 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f83a 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 fa5c 	bl	8000bfc <MX_GPIO_Init>
  MX_ETH_Init();
 8000744:	f000 f8b0 	bl	80008a8 <MX_ETH_Init>
  MX_MDMA_Init();
 8000748:	f000 f9f4 	bl	8000b34 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 800074c:	f000 f8f8 	bl	8000940 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000750:	f00b fc06 	bl	800bf60 <MX_FATFS_Init>
  MX_DMA_Init();
 8000754:	f000 f9ce 	bl	8000af4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000758:	f000 f920 	bl	800099c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800075c:	f000 f976 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000760:	f000 f9c0 	bl	8000ae4 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR1 = 2;
 8000764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000768:	2202      	movs	r2, #2
 800076a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0x74>)
 8000770:	f008 fcf2 	bl	8009158 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <main+0x78>)
 800077a:	f003 fc4b 	bl	8004014 <HAL_GPIO_WritePin>
//	  }
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800077e:	f00e fd79 	bl	800f274 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of SDCard */
  SDCardHandle = osThreadNew(StartSDCardTask, NULL, &SDCard_attributes);
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <main+0x7c>)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <main+0x80>)
 8000788:	f00e fdf5 	bl	800f376 <osThreadNew>
 800078c:	4603      	mov	r3, r0
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <main+0x84>)
 8000790:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000792:	f00e fdb5 	bl	800f300 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  char str[80]={0};
  //  HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
    Error_Handler();
 8000796:	f000 fc21 	bl	8000fdc <Error_Handler>
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x6e>
 800079c:	24000028 	.word	0x24000028
 80007a0:	2400cf94 	.word	0x2400cf94
 80007a4:	58020400 	.word	0x58020400
 80007a8:	08013578 	.word	0x08013578
 80007ac:	08000f61 	.word	0x08000f61
 80007b0:	2400ccac 	.word	0x2400ccac

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	224c      	movs	r2, #76	; 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f012 f9ec 	bl	8012ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f012 f9e6 	bl	8012ba0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f003 fedd 	bl	8004594 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <SystemClock_Config+0xec>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <SystemClock_Config+0xec>)
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <SystemClock_Config+0xec>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f6:	bf00      	nop
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xec>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000804:	d1f8      	bne.n	80007f8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xf0>)
 8000808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080a:	f023 0303 	bic.w	r3, r3, #3
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <SystemClock_Config+0xf0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000816:	2321      	movs	r3, #33	; 0x21
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000830:	f240 1313 	movw	r3, #275	; 0x113
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000842:	2304      	movs	r3, #4
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fed8 	bl	8004608 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800085e:	f000 fbbd 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086e:	2308      	movs	r3, #8
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2103      	movs	r1, #3
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fa69 	bl	8004d60 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000894:	f000 fba2 	bl	8000fdc <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	; 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58024800 	.word	0x58024800
 80008a4:	58024400 	.word	0x58024400

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ETH_Init+0x80>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ETH_Init+0x88>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x88>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ETH_Init+0x80>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_ETH_Init+0x88>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x80>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x80>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x8c>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x80>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x90>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x80>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x80>)
 80008f8:	f002 fdb6 	bl	8003468 <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 fb6b 	bl	8000fdc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x94>)
 800090c:	f012 f948 	bl	8012ba0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ETH_Init+0x94>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_ETH_Init+0x94>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_ETH_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400d050 	.word	0x2400d050
 800092c:	40028000 	.word	0x40028000
 8000930:	24008180 	.word	0x24008180
 8000934:	24008104 	.word	0x24008104
 8000938:	240080a4 	.word	0x240080a4
 800093c:	2400d0d8 	.word	0x2400d0d8

08000940 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_SDMMC1_SD_Init+0x54>)
 8000948:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 8000952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000956:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SDMMC1_SD_Init+0x50>)
 8000968:	2201      	movs	r2, #1
 800096a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_SDMMC1_SD_Init+0x58>)
 800096e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000970:	4a09      	ldr	r2, [pc, #36]	; (8000998 <MX_SDMMC1_SD_Init+0x58>)
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_SDMMC1_SD_Init+0x58>)
 800097a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <MX_SDMMC1_SD_Init+0x58>)
 800097e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000982:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2400ccb0 	.word	0x2400ccb0
 8000994:	52007000 	.word	0x52007000
 8000998:	58024400 	.word	0x58024400

0800099c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]
 80009be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e6:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM2_Init+0xac>)
 80009e8:	f008 fb5e 	bl	80090a8 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009f2:	f000 faf3 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_TIM2_Init+0xac>)
 8000a06:	f009 fac1 	bl	8009f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a10:	f000 fae4 	bl	8000fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM2_Init+0xac>)
 8000a2c:	f008 fdd0 	bl	80095d0 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a36:	f000 fad1 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM2_Init+0xac>)
 8000a3c:	f000 fcca 	bl	80013d4 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2400cf94 	.word	0x2400cf94

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_USART3_UART_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a96:	f009 fb33 	bl	800a100 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fa9c 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aa8:	f00a fbc6 	bl	800b238 <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 fa93 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aba:	f00a fbfb 	bl	800b2b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fa8a 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aca:	f00a fb7c 	bl	800b1c6 <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fa82 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2400cc14 	.word	0x2400cc14
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	200c      	movs	r0, #12
 8000b1e:	f000 ffbb 	bl	8001a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b22:	200c      	movs	r0, #12
 8000b24:	f000 ffd2 	bl	8001acc <HAL_NVIC_EnableIRQ>

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400

08000b34 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_MDMA_Init+0xbc>)
 8000b3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b40:	4a2b      	ldr	r2, [pc, #172]	; (8000bf0 <MX_MDMA_Init+0xbc>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_MDMA_Init+0xbc>)
 8000b4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b5a:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <MX_MDMA_Init+0xc4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b60:	221d      	movs	r2, #29
 8000b62:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000bb6:	f003 fa60 	bl	800407a <HAL_MDMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f000 fa0c 	bl	8000fdc <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <MX_MDMA_Init+0xc0>)
 8000bca:	f003 faa2 	bl	8004112 <HAL_MDMA_ConfigPostRequestMask>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000bd4:	f000 fa02 	bl	8000fdc <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2105      	movs	r1, #5
 8000bdc:	207a      	movs	r0, #122	; 0x7a
 8000bde:	f000 ff5b 	bl	8001a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000be2:	207a      	movs	r0, #122	; 0x7a
 8000be4:	f000 ff72 	bl	8001acc <HAL_NVIC_EnableIRQ>

}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	2400cfe4 	.word	0x2400cfe4
 8000bf8:	52000040 	.word	0x52000040

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b71      	ldr	r3, [pc, #452]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a6f      	ldr	r2, [pc, #444]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c30:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a68      	ldr	r2, [pc, #416]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b62      	ldr	r3, [pc, #392]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a60      	ldr	r2, [pc, #384]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a59      	ldr	r2, [pc, #356]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b56      	ldr	r3, [pc, #344]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a4a      	ldr	r2, [pc, #296]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x1dc>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <MX_GPIO_Init+0x1e0>)
 8000cec:	f003 f992 	bl	8004014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf6:	483a      	ldr	r0, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cf8:	f003 f98c 	bl	8004014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4838      	ldr	r0, [pc, #224]	; (8000de4 <MX_GPIO_Init+0x1e8>)
 8000d02:	f003 f987 	bl	8004014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4833      	ldr	r0, [pc, #204]	; (8000de8 <MX_GPIO_Init+0x1ec>)
 8000d1c:	f002 ffba 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4828      	ldr	r0, [pc, #160]	; (8000ddc <MX_GPIO_Init+0x1e0>)
 8000d3a:	f002 ffab 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4822      	ldr	r0, [pc, #136]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000d58:	f002 ff9c 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <MX_GPIO_Init+0x1f0>)
 8000d72:	f002 ff8f 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_GPIO_Init+0x1f4>)
 8000d8c:	f002 ff82 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000da2:	230a      	movs	r3, #10
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4810      	ldr	r0, [pc, #64]	; (8000df0 <MX_GPIO_Init+0x1f4>)
 8000dae:	f002 ff71 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_GPIO_Init+0x1e8>)
 8000dca:	f002 ff63 	bl	8003c94 <HAL_GPIO_Init>

}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	; 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58020c00 	.word	0x58020c00
 8000de4:	58021000 	.word	0x58021000
 8000de8:	58020800 	.word	0x58020800
 8000dec:	58021800 	.word	0x58021800
 8000df0:	58020000 	.word	0x58020000

08000df4 <WriteTime>:

/* USER CODE BEGIN 4 */

void WriteTime()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8000df8:	2233      	movs	r2, #51	; 0x33
 8000dfa:	4918      	ldr	r1, [pc, #96]	; (8000e5c <WriteTime+0x68>)
 8000dfc:	4818      	ldr	r0, [pc, #96]	; (8000e60 <WriteTime+0x6c>)
 8000dfe:	f00d f905 	bl	800e00c <f_open>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <WriteTime+0x70>)
 8000e08:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <WriteTime+0x70>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <WriteTime+0x22>
	{
		Error_Handler();
 8000e12:	f000 f8e3 	bl	8000fdc <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",(uint)HAL_GetTick());
 8000e16:	f000 fd43 	bl	80018a0 <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4912      	ldr	r1, [pc, #72]	; (8000e68 <WriteTime+0x74>)
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <WriteTime+0x78>)
 8000e22:	f011 ff99 	bl	8012d58 <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000e26:	4811      	ldr	r0, [pc, #68]	; (8000e6c <WriteTime+0x78>)
 8000e28:	f7ff fa72 	bl	8000310 <strlen>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <WriteTime+0x7c>)
 8000e30:	490e      	ldr	r1, [pc, #56]	; (8000e6c <WriteTime+0x78>)
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <WriteTime+0x6c>)
 8000e34:	f00d faaf 	bl	800e396 <f_write>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <WriteTime+0x70>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <WriteTime+0x7c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <WriteTime+0x62>
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <WriteTime+0x70>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <WriteTime+0x6c>)
 8000e52:	f00d fccd 	bl	800e7f0 <f_close>
	}
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	080134ec 	.word	0x080134ec
 8000e60:	2400d164 	.word	0x2400d164
 8000e64:	2400cfe0 	.word	0x2400cfe0
 8000e68:	080134f4 	.word	0x080134f4
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	2400cca4 	.word	0x2400cca4

08000e74 <FS_MOUNT>:



static void FS_MOUNT(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4914      	ldr	r1, [pc, #80]	; (8000ed0 <FS_MOUNT+0x5c>)
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <FS_MOUNT+0x60>)
 8000e80:	f00d f860 	bl	800df44 <f_mount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <FS_MOUNT+0x64>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <FS_MOUNT+0x64>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d119      	bne.n	8000ec8 <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <FS_MOUNT+0x68>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d115      	bne.n	8000ec8 <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 8000e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <FS_MOUNT+0x6c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <FS_MOUNT+0x5c>)
 8000eaa:	f00d fcd1 	bl	800e850 <f_mkfs>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <FS_MOUNT+0x64>)
 8000eb4:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <FS_MOUNT+0x64>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <FS_MOUNT+0x4e>
			{
				Error_Handler();
 8000ebe:	f000 f88d 	bl	8000fdc <Error_Handler>
			}
		isFsCreated = 1;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <FS_MOUNT+0x68>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2400d160 	.word	0x2400d160
 8000ed4:	2400d394 	.word	0x2400d394
 8000ed8:	2400cfe0 	.word	0x2400cfe0
 8000edc:	24008028 	.word	0x24008028
 8000ee0:	2400cd30 	.word	0x2400cd30

08000ee4 <FS_SPAM>:

static void FS_SPAM(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 8000eea:	2233      	movs	r2, #51	; 0x33
 8000eec:	4917      	ldr	r1, [pc, #92]	; (8000f4c <FS_SPAM+0x68>)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <FS_SPAM+0x6c>)
 8000ef0:	f00d f88c 	bl	800e00c <f_open>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <FS_SPAM+0x70>)
 8000efa:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <FS_SPAM+0x70>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11e      	bne.n	8000f42 <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e00d      	b.n	8000f26 <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <FS_SPAM+0x74>)
 8000f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f10:	4912      	ldr	r1, [pc, #72]	; (8000f5c <FS_SPAM+0x78>)
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <FS_SPAM+0x6c>)
 8000f14:	f00d fa3f 	bl	800e396 <f_write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <FS_SPAM+0x70>)
 8000f1e:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b63      	cmp	r3, #99	; 0x63
 8000f2a:	ddee      	ble.n	8000f0a <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <FS_SPAM+0x74>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <FS_SPAM+0x5e>
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <FS_SPAM+0x70>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <FS_SPAM+0x6c>)
 8000f3e:	f00d fc57 	bl	800e7f0 <f_close>
		}
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08013510 	.word	0x08013510
 8000f50:	2400d164 	.word	0x2400d164
 8000f54:	2400cfe0 	.word	0x2400cfe0
 8000f58:	2400cca4 	.word	0x2400cca4
 8000f5c:	24000028 	.word	0x24000028

08000f60 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int counter = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
	FS_MOUNT();
 8000f6c:	f7ff ff82 	bl	8000e74 <FS_MOUNT>
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2102      	movs	r1, #2
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <StartSDCardTask+0x50>)
 8000f7c:	f003 f84a 	bl	8004014 <HAL_GPIO_WritePin>
	WriteTime();
 8000f80:	f7ff ff38 	bl	8000df4 <WriteTime>
	FS_SPAM();
 8000f84:	f7ff ffae 	bl	8000ee4 <FS_SPAM>
	WriteTime();
 8000f88:	f7ff ff34 	bl	8000df4 <WriteTime>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <StartSDCardTask+0x50>)
 8000f92:	f003 f83f 	bl	8004014 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <StartSDCardTask+0x54>)
 8000f9c:	f003 f853 	bl	8004046 <HAL_GPIO_TogglePin>
	if(counter>=1){
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dde4      	ble.n	8000f70 <StartSDCardTask+0x10>
		osDelay(10000);
 8000fa6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000faa:	f00e fa76 	bl	800f49a <osDelay>
	counter++;
 8000fae:	e7df      	b.n	8000f70 <StartSDCardTask+0x10>
 8000fb0:	58021000 	.word	0x58021000
 8000fb4:	58020400 	.word	0x58020400

08000fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fca:	f000 fc55 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010000 	.word	0x40010000

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Error_Handler+0x2c>)
 8000fe6:	f003 f815 	bl	8004014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2102      	movs	r1, #2
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Error_Handler+0x30>)
 8000ff0:	f003 f810 	bl	8004014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <Error_Handler+0x2c>)
 8000ffc:	f003 f80a 	bl	8004014 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x28>
 8001006:	bf00      	nop
 8001008:	58020400 	.word	0x58020400
 800100c:	58021000 	.word	0x58021000

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x38>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_MspInit+0x38>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_MspInit+0x38>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	210f      	movs	r1, #15
 8001038:	f06f 0001 	mvn.w	r0, #1
 800103c:	f000 fd2c 	bl	8001a98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a59      	ldr	r2, [pc, #356]	; (80011d0 <HAL_ETH_MspInit+0x184>)
 800106a:	4293      	cmp	r3, r2
 800106c:	f040 80ab 	bne.w	80011c6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001070:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001076:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001080:	4b54      	ldr	r3, [pc, #336]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b2:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	4a39      	ldr	r2, [pc, #228]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 800112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_ETH_MspInit+0x188>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001142:	2332      	movs	r3, #50	; 0x32
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001152:	230b      	movs	r3, #11
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	481e      	ldr	r0, [pc, #120]	; (80011d8 <HAL_ETH_MspInit+0x18c>)
 800115e:	f002 fd99 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001162:	2386      	movs	r3, #134	; 0x86
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <HAL_ETH_MspInit+0x190>)
 800117e:	f002 fd89 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001194:	230b      	movs	r3, #11
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <HAL_ETH_MspInit+0x194>)
 80011a0:	f002 fd78 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b6:	230b      	movs	r3, #11
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <HAL_ETH_MspInit+0x198>)
 80011c2:	f002 fd67 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3738      	adds	r7, #56	; 0x38
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40028000 	.word	0x40028000
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020800 	.word	0x58020800
 80011dc:	58020000 	.word	0x58020000
 80011e0:	58020400 	.word	0x58020400
 80011e4:	58021800 	.word	0x58021800

080011e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0b8      	sub	sp, #224	; 0xe0
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	22b4      	movs	r2, #180	; 0xb4
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f011 fcc9 	bl	8012ba0 <memset>
  if(hsd->Instance==SDMMC1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a43      	ldr	r2, [pc, #268]	; (8001320 <HAL_SD_MspInit+0x138>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d17f      	bne.n	8001318 <HAL_SD_MspInit+0x130>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8001222:	2319      	movs	r3, #25
 8001224:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001226:	2302      	movs	r3, #2
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f004 f957 	bl	80054fc <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8001254:	f7ff fec2 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_SD_MspInit+0x13c>)
 800125a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800125e:	4a31      	ldr	r2, [pc, #196]	; (8001324 <HAL_SD_MspInit+0x13c>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_SD_MspInit+0x13c>)
 800126a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_SD_MspInit+0x13c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_SD_MspInit+0x13c>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_SD_MspInit+0x13c>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_SD_MspInit+0x13c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_SD_MspInit+0x13c>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_SD_MspInit+0x13c>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012cc:	230c      	movs	r3, #12
 80012ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d6:	4619      	mov	r1, r3
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_SD_MspInit+0x140>)
 80012da:	f002 fcdb 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012de:	2304      	movs	r3, #4
 80012e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012f6:	230c      	movs	r3, #12
 80012f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001300:	4619      	mov	r1, r3
 8001302:	480a      	ldr	r0, [pc, #40]	; (800132c <HAL_SD_MspInit+0x144>)
 8001304:	f002 fcc6 	bl	8003c94 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2105      	movs	r1, #5
 800130c:	2031      	movs	r0, #49	; 0x31
 800130e:	f000 fbc3 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001312:	2031      	movs	r0, #49	; 0x31
 8001314:	f000 fbda 	bl	8001acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	37e0      	adds	r7, #224	; 0xe0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	52007000 	.word	0x52007000
 8001324:	58024400 	.word	0x58024400
 8001328:	58020800 	.word	0x58020800
 800132c:	58020c00 	.word	0x58020c00

08001330 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d13d      	bne.n	80013be <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_TIM_PWM_MspInit+0x98>)
 8001344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_TIM_PWM_MspInit+0x98>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_TIM_PWM_MspInit+0x98>)
 8001354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001362:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001368:	2212      	movs	r2, #18
 800136a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 80013a4:	f000 fba0 	bl	8001ae8 <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80013ae:	f7ff fe15 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_TIM_PWM_MspInit+0x9c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58024400 	.word	0x58024400
 80013cc:	2400cb9c 	.word	0x2400cb9c
 80013d0:	40020028 	.word	0x40020028

080013d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d11e      	bne.n	8001434 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	f002 fc30 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b6      	sub	sp, #216	; 0xd8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	22b4      	movs	r2, #180	; 0xb4
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f011 fb9b 	bl	8012ba0 <memset>
  if(huart->Instance==USART3)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a25      	ldr	r2, [pc, #148]	; (8001504 <HAL_UART_MspInit+0xc0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d142      	bne.n	80014fa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f83a 	bl	80054fc <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800148e:	f7ff fda5 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_UART_MspInit+0xc4>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_UART_MspInit+0xc4>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_UART_MspInit+0xc4>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_UART_MspInit+0xc4>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_UART_MspInit+0xc4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_UART_MspInit+0xc4>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_UART_MspInit+0xc8>)
 80014f6:	f002 fbcd 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	37d8      	adds	r7, #216	; 0xd8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40004800 	.word	0x40004800
 8001508:	58024400 	.word	0x58024400
 800150c:	58020c00 	.word	0x58020c00

08001510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d844      	bhi.n	80015a8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800151e:	2200      	movs	r2, #0
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	2019      	movs	r0, #25
 8001524:	f000 fab8 	bl	8001a98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001528:	2019      	movs	r0, #25
 800152a:	f000 facf 	bl	8001acc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <HAL_InitTick+0xb0>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_InitTick+0xb4>)
 8001536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800153a:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_InitTick+0xb4>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_InitTick+0xb4>)
 8001546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f003 ff8b 	bl	8005478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001562:	f003 ff73 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_InitTick+0xb8>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_InitTick+0xbc>)
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_InitTick+0xc0>)
 800157e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0xbc>)
 8001582:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_InitTick+0xbc>)
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_InitTick+0xbc>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_InitTick+0xbc>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <HAL_InitTick+0xbc>)
 800159c:	f007 fc9c 	bl	8008ed8 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_InitTick+0xa6>
 80015a6:	e001      	b.n	80015ac <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e005      	b.n	80015b8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <HAL_InitTick+0xbc>)
 80015ae:	f007 fcf5 	bl	8008f9c <HAL_TIM_Base_Start_IT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3738      	adds	r7, #56	; 0x38
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	24008034 	.word	0x24008034
 80015c4:	58024400 	.word	0x58024400
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	2400d10c 	.word	0x2400d10c
 80015d0:	40010000 	.word	0x40010000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream1_IRQHandler+0x10>)
 8001606:	f000 fdc9 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2400cb9c 	.word	0x2400cb9c

08001614 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM1_UP_IRQHandler+0x10>)
 800161a:	f007 feb9 	bl	8009390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2400d10c 	.word	0x2400d10c

08001628 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <SDMMC1_IRQHandler+0x10>)
 800162e:	f006 fa61 	bl	8007af4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2400ccb0 	.word	0x2400ccb0

0800163c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <MDMA_IRQHandler+0x10>)
 8001642:	f002 fdb9 	bl	80041b8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2400cfe4 	.word	0x2400cfe4

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f011 fa54 	bl	8012b2c <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24050000 	.word	0x24050000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	24008188 	.word	0x24008188
 80016b8:	2400d618 	.word	0x2400d618

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <SystemInit+0xd0>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <SystemInit+0xd0>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <SystemInit+0xd4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d807      	bhi.n	80016ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <SystemInit+0xd4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <SystemInit+0xd4>)
 80016e6:	f043 0307 	orr.w	r3, r3, #7
 80016ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <SystemInit+0xd8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <SystemInit+0xd8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <SystemInit+0xd8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <SystemInit+0xd8>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <SystemInit+0xd8>)
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <SystemInit+0xdc>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <SystemInit+0xd4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <SystemInit+0xd4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <SystemInit+0xd4>)
 8001720:	f043 0307 	orr.w	r3, r3, #7
 8001724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SystemInit+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <SystemInit+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SystemInit+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <SystemInit+0xd8>)
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <SystemInit+0xe0>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SystemInit+0xd8>)
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <SystemInit+0xe4>)
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <SystemInit+0xd8>)
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <SystemInit+0xe8>)
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <SystemInit+0xd8>)
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <SystemInit+0xe8>)
 8001754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SystemInit+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <SystemInit+0xd8>)
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <SystemInit+0xe8>)
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <SystemInit+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <SystemInit+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <SystemInit+0xd8>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <SystemInit+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <SystemInit+0xec>)
 800177c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001780:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	52002000 	.word	0x52002000
 8001794:	58024400 	.word	0x58024400
 8001798:	eaf6ed7f 	.word	0xeaf6ed7f
 800179c:	02020200 	.word	0x02020200
 80017a0:	01ff0000 	.word	0x01ff0000
 80017a4:	01010280 	.word	0x01010280
 80017a8:	52004000 	.word	0x52004000

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b0:	f7ff ff84 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f011 f9ad 	bl	8012b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7fe ffa5 	bl	800072c <main>
  bx  lr
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ec:	240080a4 	.word	0x240080a4
  ldr r2, =_sidata
 80017f0:	08013734 	.word	0x08013734
  ldr r2, =_sbss
 80017f4:	24008164 	.word	0x24008164
  ldr r4, =_ebss
 80017f8:	2400d618 	.word	0x2400d618

080017fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC3_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f93b 	bl	8001a82 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800180c:	f003 fc5e 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_Init+0x68>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4913      	ldr	r1, [pc, #76]	; (800186c <HAL_Init+0x6c>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_Init+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_Init+0x6c>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_Init+0x70>)
 8001842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	200f      	movs	r0, #15
 800184c:	f7ff fe60 	bl	8001510 <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e002      	b.n	8001860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fbd9 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58024400 	.word	0x58024400
 800186c:	0801359c 	.word	0x0801359c
 8001870:	24008030 	.word	0x24008030
 8001874:	2400802c 	.word	0x2400802c

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	24008038 	.word	0x24008038
 800189c:	2400d158 	.word	0x2400d158

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2400d158 	.word	0x2400d158

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	24008038 	.word	0x24008038

08001900 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001910:	4904      	ldr	r1, [pc, #16]	; (8001924 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	58000400 	.word	0x58000400

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	4313      	orrs	r3, r2
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	05fa0000 	.word	0x05fa0000

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff4c 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa6:	f7ff ff63 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001aaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	6978      	ldr	r0, [r7, #20]
 8001ab2:	f7ff ffb3 	bl	8001a1c <NVIC_EncodePriority>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff82 	bl	80019c8 <__NVIC_SetPriority>
}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff56 	bl	800198c <__NVIC_EnableIRQ>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fed6 	bl	80018a0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e314      	b.n	800212a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a66      	ldr	r2, [pc, #408]	; (8001ca0 <HAL_DMA_Init+0x1b8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d04a      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_DMA_Init+0x1bc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d045      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_DMA_Init+0x1c0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d040      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a62      	ldr	r2, [pc, #392]	; (8001cac <HAL_DMA_Init+0x1c4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d03b      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_DMA_Init+0x1c8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d036      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5f      	ldr	r2, [pc, #380]	; (8001cb4 <HAL_DMA_Init+0x1cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d031      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_DMA_Init+0x1d0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d02c      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <HAL_DMA_Init+0x1d4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d027      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_DMA_Init+0x1d8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d022      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_DMA_Init+0x1dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d01d      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_DMA_Init+0x1e0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d018      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <HAL_DMA_Init+0x1e4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_DMA_Init+0x1e8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00e      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a53      	ldr	r2, [pc, #332]	; (8001cd4 <HAL_DMA_Init+0x1ec>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_DMA_Init+0x1f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_DMA_Init+0xb8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <HAL_DMA_Init+0x1f4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA_Init+0xbc>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_DMA_Init+0xbe>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 813c 	beq.w	8001e24 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a37      	ldr	r2, [pc, #220]	; (8001ca0 <HAL_DMA_Init+0x1b8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d04a      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a36      	ldr	r2, [pc, #216]	; (8001ca4 <HAL_DMA_Init+0x1bc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d045      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <HAL_DMA_Init+0x1c0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d040      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_DMA_Init+0x1c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d03b      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <HAL_DMA_Init+0x1c8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d036      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <HAL_DMA_Init+0x1cc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d031      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_DMA_Init+0x1d0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02c      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_DMA_Init+0x1d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d027      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_DMA_Init+0x1d8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d022      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <HAL_DMA_Init+0x1dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d01d      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_DMA_Init+0x1e0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_DMA_Init+0x1e4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <HAL_DMA_Init+0x1e8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <HAL_DMA_Init+0x1ec>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_DMA_Init+0x1f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_Init+0x174>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_DMA_Init+0x1f4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d108      	bne.n	8001c6e <HAL_DMA_Init+0x186>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e007      	b.n	8001c7e <HAL_DMA_Init+0x196>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c7e:	e02f      	b.n	8001ce0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c80:	f7ff fe0e 	bl	80018a0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d928      	bls.n	8001ce0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2220      	movs	r2, #32
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e244      	b.n	800212a <HAL_DMA_Init+0x642>
 8001ca0:	40020010 	.word	0x40020010
 8001ca4:	40020028 	.word	0x40020028
 8001ca8:	40020040 	.word	0x40020040
 8001cac:	40020058 	.word	0x40020058
 8001cb0:	40020070 	.word	0x40020070
 8001cb4:	40020088 	.word	0x40020088
 8001cb8:	400200a0 	.word	0x400200a0
 8001cbc:	400200b8 	.word	0x400200b8
 8001cc0:	40020410 	.word	0x40020410
 8001cc4:	40020428 	.word	0x40020428
 8001cc8:	40020440 	.word	0x40020440
 8001ccc:	40020458 	.word	0x40020458
 8001cd0:	40020470 	.word	0x40020470
 8001cd4:	40020488 	.word	0x40020488
 8001cd8:	400204a0 	.word	0x400204a0
 8001cdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1c8      	bne.n	8001c80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_DMA_Init+0x424>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b28      	cmp	r3, #40	; 0x28
 8001d4a:	d903      	bls.n	8001d54 <HAL_DMA_Init+0x26c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b2e      	cmp	r3, #46	; 0x2e
 8001d52:	d91f      	bls.n	8001d94 <HAL_DMA_Init+0x2ac>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b3e      	cmp	r3, #62	; 0x3e
 8001d5a:	d903      	bls.n	8001d64 <HAL_DMA_Init+0x27c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b42      	cmp	r3, #66	; 0x42
 8001d62:	d917      	bls.n	8001d94 <HAL_DMA_Init+0x2ac>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b46      	cmp	r3, #70	; 0x46
 8001d6a:	d903      	bls.n	8001d74 <HAL_DMA_Init+0x28c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b48      	cmp	r3, #72	; 0x48
 8001d72:	d90f      	bls.n	8001d94 <HAL_DMA_Init+0x2ac>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b4e      	cmp	r3, #78	; 0x4e
 8001d7a:	d903      	bls.n	8001d84 <HAL_DMA_Init+0x29c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b52      	cmp	r3, #82	; 0x52
 8001d82:	d907      	bls.n	8001d94 <HAL_DMA_Init+0x2ac>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b73      	cmp	r3, #115	; 0x73
 8001d8a:	d905      	bls.n	8001d98 <HAL_DMA_Init+0x2b0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b77      	cmp	r3, #119	; 0x77
 8001d92:	d801      	bhi.n	8001d98 <HAL_DMA_Init+0x2b0>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_Init+0x2b2>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f023 0307 	bic.w	r3, r3, #7
 8001dbc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d117      	bne.n	8001e00 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f001 f9b6 	bl	8003154 <DMA_CheckFifoParam>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e194      	b.n	800212a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f001 f8f1 	bl	8002ff0 <DMA_CalcBaseAndBitshift>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	e0ca      	b.n	8001fba <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <HAL_DMA_Init+0x428>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <HAL_DMA_Init+0x42c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d01d      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a36      	ldr	r2, [pc, #216]	; (8001f18 <HAL_DMA_Init+0x430>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a35      	ldr	r2, [pc, #212]	; (8001f1c <HAL_DMA_Init+0x434>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <HAL_DMA_Init+0x438>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_DMA_Init+0x43c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_DMA_Init+0x440>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_Init+0x38c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <HAL_DMA_Init+0x444>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_DMA_Init+0x390>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_Init+0x392>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8094 	beq.w	8001fa8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_DMA_Init+0x428>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d021      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <HAL_DMA_Init+0x42c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d01c      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_DMA_Init+0x430>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d017      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_DMA_Init+0x434>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d012      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_DMA_Init+0x438>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_DMA_Init+0x43c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_DMA_Init+0x440>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <HAL_DMA_Init+0x3e6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_DMA_Init+0x444>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_DMA_Init+0x448>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d01d      	beq.n	8001f34 <HAL_DMA_Init+0x44c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d102      	bne.n	8001f06 <HAL_DMA_Init+0x41e>
 8001f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f04:	e017      	b.n	8001f36 <HAL_DMA_Init+0x44e>
 8001f06:	2300      	movs	r3, #0
 8001f08:	e015      	b.n	8001f36 <HAL_DMA_Init+0x44e>
 8001f0a:	bf00      	nop
 8001f0c:	fe10803f 	.word	0xfe10803f
 8001f10:	58025408 	.word	0x58025408
 8001f14:	5802541c 	.word	0x5802541c
 8001f18:	58025430 	.word	0x58025430
 8001f1c:	58025444 	.word	0x58025444
 8001f20:	58025458 	.word	0x58025458
 8001f24:	5802546c 	.word	0x5802546c
 8001f28:	58025480 	.word	0x58025480
 8001f2c:	58025494 	.word	0x58025494
 8001f30:	fffe000f 	.word	0xfffe000f
 8001f34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	; (8002134 <HAL_DMA_Init+0x64c>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_DMA_Init+0x650>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	009a      	lsls	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 f82f 	bl	8002ff0 <DMA_CalcBaseAndBitshift>
 8001f92:	4603      	mov	r3, r0
 8001f94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e008      	b.n	8001fba <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0b7      	b.n	800212a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5f      	ldr	r2, [pc, #380]	; (800213c <HAL_DMA_Init+0x654>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d072      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_DMA_Init+0x658>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d06d      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5c      	ldr	r2, [pc, #368]	; (8002144 <HAL_DMA_Init+0x65c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d068      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_DMA_Init+0x660>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d063      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a59      	ldr	r2, [pc, #356]	; (800214c <HAL_DMA_Init+0x664>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d05e      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_DMA_Init+0x668>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d059      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_DMA_Init+0x66c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d054      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_DMA_Init+0x670>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d04f      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_DMA_Init+0x674>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d04a      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_DMA_Init+0x678>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d045      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_DMA_Init+0x67c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d040      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_DMA_Init+0x680>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d03b      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_DMA_Init+0x684>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d036      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_DMA_Init+0x688>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d031      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4a      	ldr	r2, [pc, #296]	; (8002174 <HAL_DMA_Init+0x68c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d02c      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <HAL_DMA_Init+0x690>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d027      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_DMA_Init+0x694>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d022      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_DMA_Init+0x698>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01d      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a44      	ldr	r2, [pc, #272]	; (8002184 <HAL_DMA_Init+0x69c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d018      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a42      	ldr	r2, [pc, #264]	; (8002188 <HAL_DMA_Init+0x6a0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_DMA_Init+0x6a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00e      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_DMA_Init+0x6a8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_DMA_Init+0x6ac>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_DMA_Init+0x5c2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <HAL_DMA_Init+0x6b0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Init+0x5c6>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_DMA_Init+0x5c8>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d032      	beq.n	800211a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f001 f8c9 	bl	800324c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d102      	bne.n	80020c8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_DMA_Init+0x620>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d80c      	bhi.n	8002108 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f001 f946 	bl	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	e008      	b.n	800211a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	a7fdabf8 	.word	0xa7fdabf8
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	40020010 	.word	0x40020010
 8002140:	40020028 	.word	0x40020028
 8002144:	40020040 	.word	0x40020040
 8002148:	40020058 	.word	0x40020058
 800214c:	40020070 	.word	0x40020070
 8002150:	40020088 	.word	0x40020088
 8002154:	400200a0 	.word	0x400200a0
 8002158:	400200b8 	.word	0x400200b8
 800215c:	40020410 	.word	0x40020410
 8002160:	40020428 	.word	0x40020428
 8002164:	40020440 	.word	0x40020440
 8002168:	40020458 	.word	0x40020458
 800216c:	40020470 	.word	0x40020470
 8002170:	40020488 	.word	0x40020488
 8002174:	400204a0 	.word	0x400204a0
 8002178:	400204b8 	.word	0x400204b8
 800217c:	58025408 	.word	0x58025408
 8002180:	5802541c 	.word	0x5802541c
 8002184:	58025430 	.word	0x58025430
 8002188:	58025444 	.word	0x58025444
 800218c:	58025458 	.word	0x58025458
 8002190:	5802546c 	.word	0x5802546c
 8002194:	58025480 	.word	0x58025480
 8002198:	58025494 	.word	0x58025494

0800219c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a8:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_DMA_IRQHandler+0x1ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	; (800234c <HAL_DMA_IRQHandler+0x1b0>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0a9b      	lsrs	r3, r3, #10
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5f      	ldr	r2, [pc, #380]	; (8002350 <HAL_DMA_IRQHandler+0x1b4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d04a      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <HAL_DMA_IRQHandler+0x1b8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d045      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5c      	ldr	r2, [pc, #368]	; (8002358 <HAL_DMA_IRQHandler+0x1bc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d040      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_DMA_IRQHandler+0x1c0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d03b      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <HAL_DMA_IRQHandler+0x1c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d036      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_DMA_IRQHandler+0x1c8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a56      	ldr	r2, [pc, #344]	; (8002368 <HAL_DMA_IRQHandler+0x1cc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d02c      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_DMA_IRQHandler+0x1d0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d027      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a53      	ldr	r2, [pc, #332]	; (8002370 <HAL_DMA_IRQHandler+0x1d4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a51      	ldr	r2, [pc, #324]	; (8002374 <HAL_DMA_IRQHandler+0x1d8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01d      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a50      	ldr	r2, [pc, #320]	; (8002378 <HAL_DMA_IRQHandler+0x1dc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_DMA_IRQHandler+0x1e0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_DMA_IRQHandler+0x1e4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_DMA_IRQHandler+0x1e8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_DMA_IRQHandler+0x1ec>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_DMA_IRQHandler+0xd2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_DMA_IRQHandler+0x1f0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_DMA_IRQHandler+0xd6>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_DMA_IRQHandler+0xd8>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 842b 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2208      	movs	r2, #8
 8002284:	409a      	lsls	r2, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80a2 	beq.w	80023d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2e      	ldr	r2, [pc, #184]	; (8002350 <HAL_DMA_IRQHandler+0x1b4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04a      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <HAL_DMA_IRQHandler+0x1b8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d045      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <HAL_DMA_IRQHandler+0x1bc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d040      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_DMA_IRQHandler+0x1c0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d03b      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_DMA_IRQHandler+0x1c4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d036      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a27      	ldr	r2, [pc, #156]	; (8002364 <HAL_DMA_IRQHandler+0x1c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d031      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a25      	ldr	r2, [pc, #148]	; (8002368 <HAL_DMA_IRQHandler+0x1cc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02c      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a24      	ldr	r2, [pc, #144]	; (800236c <HAL_DMA_IRQHandler+0x1d0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d027      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_DMA_IRQHandler+0x1d4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d022      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_DMA_IRQHandler+0x1d8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d01d      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_DMA_IRQHandler+0x1dc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d018      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_DMA_IRQHandler+0x1e0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_DMA_IRQHandler+0x1e4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00e      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_DMA_IRQHandler+0x1e8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_DMA_IRQHandler+0x1ec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_DMA_IRQHandler+0x194>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_DMA_IRQHandler+0x1f0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d12f      	bne.n	8002390 <HAL_DMA_IRQHandler+0x1f4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	e02e      	b.n	80023a4 <HAL_DMA_IRQHandler+0x208>
 8002346:	bf00      	nop
 8002348:	2400802c 	.word	0x2400802c
 800234c:	1b4e81b5 	.word	0x1b4e81b5
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d015      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2208      	movs	r2, #8
 80023c2:	409a      	lsls	r2, r3
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d06e      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_DMA_IRQHandler+0x3f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04a      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a67      	ldr	r2, [pc, #412]	; (8002598 <HAL_DMA_IRQHandler+0x3fc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d045      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a66      	ldr	r2, [pc, #408]	; (800259c <HAL_DMA_IRQHandler+0x400>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a64      	ldr	r2, [pc, #400]	; (80025a0 <HAL_DMA_IRQHandler+0x404>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03b      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_DMA_IRQHandler+0x408>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d036      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_DMA_IRQHandler+0x40c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a60      	ldr	r2, [pc, #384]	; (80025ac <HAL_DMA_IRQHandler+0x410>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d02c      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5e      	ldr	r2, [pc, #376]	; (80025b0 <HAL_DMA_IRQHandler+0x414>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_DMA_IRQHandler+0x418>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_DMA_IRQHandler+0x41c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_DMA_IRQHandler+0x420>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_DMA_IRQHandler+0x424>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_DMA_IRQHandler+0x428>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <HAL_DMA_IRQHandler+0x42c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_DMA_IRQHandler+0x430>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_IRQHandler+0x2ee>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_DMA_IRQHandler+0x434>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10a      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x304>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e003      	b.n	80024a8 <HAL_DMA_IRQHandler+0x30c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2204      	movs	r2, #4
 80024d2:	409a      	lsls	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808f 	beq.w	80025fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <HAL_DMA_IRQHandler+0x3f8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04a      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_DMA_IRQHandler+0x3fc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d045      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_DMA_IRQHandler+0x400>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d040      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_DMA_IRQHandler+0x404>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d03b      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_DMA_IRQHandler+0x408>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d036      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_DMA_IRQHandler+0x40c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d031      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_DMA_IRQHandler+0x410>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d02c      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_DMA_IRQHandler+0x414>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d027      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_DMA_IRQHandler+0x418>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_DMA_IRQHandler+0x41c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01d      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_DMA_IRQHandler+0x420>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d018      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_DMA_IRQHandler+0x424>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_DMA_IRQHandler+0x428>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_DMA_IRQHandler+0x42c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_DMA_IRQHandler+0x430>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_DMA_IRQHandler+0x3e2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_DMA_IRQHandler+0x434>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d12a      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x438>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e023      	b.n	80025dc <HAL_DMA_IRQHandler+0x440>
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00d      	beq.n	80025fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2210      	movs	r2, #16
 8002606:	409a      	lsls	r2, r3
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a6 	beq.w	800275e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a85      	ldr	r2, [pc, #532]	; (800282c <HAL_DMA_IRQHandler+0x690>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04a      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a83      	ldr	r2, [pc, #524]	; (8002830 <HAL_DMA_IRQHandler+0x694>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d045      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a82      	ldr	r2, [pc, #520]	; (8002834 <HAL_DMA_IRQHandler+0x698>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d040      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_DMA_IRQHandler+0x69c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d03b      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a7f      	ldr	r2, [pc, #508]	; (800283c <HAL_DMA_IRQHandler+0x6a0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d036      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7d      	ldr	r2, [pc, #500]	; (8002840 <HAL_DMA_IRQHandler+0x6a4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7c      	ldr	r2, [pc, #496]	; (8002844 <HAL_DMA_IRQHandler+0x6a8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d02c      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a7a      	ldr	r2, [pc, #488]	; (8002848 <HAL_DMA_IRQHandler+0x6ac>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d027      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a79      	ldr	r2, [pc, #484]	; (800284c <HAL_DMA_IRQHandler+0x6b0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_DMA_IRQHandler+0x6b4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01d      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a76      	ldr	r2, [pc, #472]	; (8002854 <HAL_DMA_IRQHandler+0x6b8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a74      	ldr	r2, [pc, #464]	; (8002858 <HAL_DMA_IRQHandler+0x6bc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a73      	ldr	r2, [pc, #460]	; (800285c <HAL_DMA_IRQHandler+0x6c0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_DMA_IRQHandler+0x6c4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_DMA_IRQHandler+0x6c8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x516>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6e      	ldr	r2, [pc, #440]	; (8002868 <HAL_DMA_IRQHandler+0x6cc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10a      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x52c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e009      	b.n	80026dc <HAL_DMA_IRQHandler+0x540>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d03e      	beq.n	800275e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2210      	movs	r2, #16
 80026ea:	409a      	lsls	r2, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d018      	beq.n	8002730 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d108      	bne.n	800271e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d024      	beq.n	800275e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e01f      	b.n	800275e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01b      	beq.n	800275e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
 800272e:	e016      	b.n	800275e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d107      	bne.n	800274e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0208 	bic.w	r2, r2, #8
 800274c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2220      	movs	r2, #32
 8002768:	409a      	lsls	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8110 	beq.w	8002994 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2c      	ldr	r2, [pc, #176]	; (800282c <HAL_DMA_IRQHandler+0x690>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_DMA_IRQHandler+0x694>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a29      	ldr	r2, [pc, #164]	; (8002834 <HAL_DMA_IRQHandler+0x698>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_DMA_IRQHandler+0x69c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_DMA_IRQHandler+0x6a0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_DMA_IRQHandler+0x6a4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_DMA_IRQHandler+0x6a8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_DMA_IRQHandler+0x6ac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_DMA_IRQHandler+0x6b0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_DMA_IRQHandler+0x6b4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_DMA_IRQHandler+0x6b8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_DMA_IRQHandler+0x6bc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_DMA_IRQHandler+0x6c0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_DMA_IRQHandler+0x6c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <HAL_DMA_IRQHandler+0x6c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_IRQHandler+0x678>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_DMA_IRQHandler+0x6cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d12b      	bne.n	800286c <HAL_DMA_IRQHandler+0x6d0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e02a      	b.n	8002880 <HAL_DMA_IRQHandler+0x6e4>
 800282a:	bf00      	nop
 800282c:	40020010 	.word	0x40020010
 8002830:	40020028 	.word	0x40020028
 8002834:	40020040 	.word	0x40020040
 8002838:	40020058 	.word	0x40020058
 800283c:	40020070 	.word	0x40020070
 8002840:	40020088 	.word	0x40020088
 8002844:	400200a0 	.word	0x400200a0
 8002848:	400200b8 	.word	0x400200b8
 800284c:	40020410 	.word	0x40020410
 8002850:	40020428 	.word	0x40020428
 8002854:	40020440 	.word	0x40020440
 8002858:	40020458 	.word	0x40020458
 800285c:	40020470 	.word	0x40020470
 8002860:	40020488 	.word	0x40020488
 8002864:	400204a0 	.word	0x400204a0
 8002868:	400204b8 	.word	0x400204b8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8087 	beq.w	8002994 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2220      	movs	r2, #32
 8002890:	409a      	lsls	r2, r3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d139      	bne.n	8002916 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0216 	bic.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x736>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	223f      	movs	r2, #63	; 0x3f
 80028ec:	409a      	lsls	r2, r3
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 834a 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
          }
          return;
 8002914:	e344      	b.n	8002fa0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e027      	b.n	8002994 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e01e      	b.n	8002994 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0210 	bic.w	r2, r2, #16
 8002972:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8306 	beq.w	8002faa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8088 	beq.w	8002abc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7a      	ldr	r2, [pc, #488]	; (8002ba4 <HAL_DMA_IRQHandler+0xa08>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04a      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <HAL_DMA_IRQHandler+0xa0c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d045      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a77      	ldr	r2, [pc, #476]	; (8002bac <HAL_DMA_IRQHandler+0xa10>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a76      	ldr	r2, [pc, #472]	; (8002bb0 <HAL_DMA_IRQHandler+0xa14>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d03b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a74      	ldr	r2, [pc, #464]	; (8002bb4 <HAL_DMA_IRQHandler+0xa18>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d036      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a73      	ldr	r2, [pc, #460]	; (8002bb8 <HAL_DMA_IRQHandler+0xa1c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d031      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a71      	ldr	r2, [pc, #452]	; (8002bbc <HAL_DMA_IRQHandler+0xa20>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02c      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a70      	ldr	r2, [pc, #448]	; (8002bc0 <HAL_DMA_IRQHandler+0xa24>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d027      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <HAL_DMA_IRQHandler+0xa28>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6d      	ldr	r2, [pc, #436]	; (8002bc8 <HAL_DMA_IRQHandler+0xa2c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01d      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	; (8002bcc <HAL_DMA_IRQHandler+0xa30>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6a      	ldr	r2, [pc, #424]	; (8002bd0 <HAL_DMA_IRQHandler+0xa34>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a68      	ldr	r2, [pc, #416]	; (8002bd4 <HAL_DMA_IRQHandler+0xa38>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a67      	ldr	r2, [pc, #412]	; (8002bd8 <HAL_DMA_IRQHandler+0xa3c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a65      	ldr	r2, [pc, #404]	; (8002bdc <HAL_DMA_IRQHandler+0xa40>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x8b8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a64      	ldr	r2, [pc, #400]	; (8002be0 <HAL_DMA_IRQHandler+0xa44>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d108      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x8ca>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e007      	b.n	8002a76 <HAL_DMA_IRQHandler+0x8da>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d307      	bcc.n	8002a92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f2      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x8da>
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002aaa:	e003      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8272 	beq.w	8002faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e26c      	b.n	8002faa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <HAL_DMA_IRQHandler+0xa48>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d022      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a42      	ldr	r2, [pc, #264]	; (8002be8 <HAL_DMA_IRQHandler+0xa4c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d01d      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a40      	ldr	r2, [pc, #256]	; (8002bec <HAL_DMA_IRQHandler+0xa50>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3f      	ldr	r2, [pc, #252]	; (8002bf0 <HAL_DMA_IRQHandler+0xa54>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3d      	ldr	r2, [pc, #244]	; (8002bf4 <HAL_DMA_IRQHandler+0xa58>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_DMA_IRQHandler+0xa5c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_DMA_IRQHandler+0xa60>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x984>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a39      	ldr	r2, [pc, #228]	; (8002c00 <HAL_DMA_IRQHandler+0xa64>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x988>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_DMA_IRQHandler+0x98a>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 823f 	beq.w	8002faa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80cd 	beq.w	8002ce4 <HAL_DMA_IRQHandler+0xb48>
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80c7 	beq.w	8002ce4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2204      	movs	r2, #4
 8002b60:	409a      	lsls	r2, r3
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d049      	beq.n	8002c04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8210 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b8c:	e20a      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8206 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ba0:	e200      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xe08>
 8002ba2:	bf00      	nop
 8002ba4:	40020010 	.word	0x40020010
 8002ba8:	40020028 	.word	0x40020028
 8002bac:	40020040 	.word	0x40020040
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	40020070 	.word	0x40020070
 8002bb8:	40020088 	.word	0x40020088
 8002bbc:	400200a0 	.word	0x400200a0
 8002bc0:	400200b8 	.word	0x400200b8
 8002bc4:	40020410 	.word	0x40020410
 8002bc8:	40020428 	.word	0x40020428
 8002bcc:	40020440 	.word	0x40020440
 8002bd0:	40020458 	.word	0x40020458
 8002bd4:	40020470 	.word	0x40020470
 8002bd8:	40020488 	.word	0x40020488
 8002bdc:	400204a0 	.word	0x400204a0
 8002be0:	400204b8 	.word	0x400204b8
 8002be4:	58025408 	.word	0x58025408
 8002be8:	5802541c 	.word	0x5802541c
 8002bec:	58025430 	.word	0x58025430
 8002bf0:	58025444 	.word	0x58025444
 8002bf4:	58025458 	.word	0x58025458
 8002bf8:	5802546c 	.word	0x5802546c
 8002bfc:	58025480 	.word	0x58025480
 8002c00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d160      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a8c      	ldr	r2, [pc, #560]	; (8002e44 <HAL_DMA_IRQHandler+0xca8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04a      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a8a      	ldr	r2, [pc, #552]	; (8002e48 <HAL_DMA_IRQHandler+0xcac>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d045      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a89      	ldr	r2, [pc, #548]	; (8002e4c <HAL_DMA_IRQHandler+0xcb0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d040      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a87      	ldr	r2, [pc, #540]	; (8002e50 <HAL_DMA_IRQHandler+0xcb4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d03b      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a86      	ldr	r2, [pc, #536]	; (8002e54 <HAL_DMA_IRQHandler+0xcb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d036      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a84      	ldr	r2, [pc, #528]	; (8002e58 <HAL_DMA_IRQHandler+0xcbc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d031      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a83      	ldr	r2, [pc, #524]	; (8002e5c <HAL_DMA_IRQHandler+0xcc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d02c      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <HAL_DMA_IRQHandler+0xcc4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a80      	ldr	r2, [pc, #512]	; (8002e64 <HAL_DMA_IRQHandler+0xcc8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7e      	ldr	r2, [pc, #504]	; (8002e68 <HAL_DMA_IRQHandler+0xccc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	; (8002e6c <HAL_DMA_IRQHandler+0xcd0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_DMA_IRQHandler+0xcd4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7a      	ldr	r2, [pc, #488]	; (8002e74 <HAL_DMA_IRQHandler+0xcd8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_DMA_IRQHandler+0xcdc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a77      	ldr	r2, [pc, #476]	; (8002e7c <HAL_DMA_IRQHandler+0xce0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_DMA_IRQHandler+0xb12>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <HAL_DMA_IRQHandler+0xce4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0xb24>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e007      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb34>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8165 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ce2:	e15f      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2202      	movs	r2, #2
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80c5 	beq.w	8002e84 <HAL_DMA_IRQHandler+0xce8>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80bf 	beq.w	8002e84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2202      	movs	r2, #2
 8002d10:	409a      	lsls	r2, r3
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 813a 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d3c:	e134      	b.n	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8130 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d50:	e12a      	b.n	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d168      	bne.n	8002e2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <HAL_DMA_IRQHandler+0xca8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d04a      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a37      	ldr	r2, [pc, #220]	; (8002e48 <HAL_DMA_IRQHandler+0xcac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d045      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a35      	ldr	r2, [pc, #212]	; (8002e4c <HAL_DMA_IRQHandler+0xcb0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d040      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_DMA_IRQHandler+0xcb4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d03b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <HAL_DMA_IRQHandler+0xcb8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d036      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a31      	ldr	r2, [pc, #196]	; (8002e58 <HAL_DMA_IRQHandler+0xcbc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_DMA_IRQHandler+0xcc0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02c      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_DMA_IRQHandler+0xcc4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d027      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <HAL_DMA_IRQHandler+0xcc8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2b      	ldr	r2, [pc, #172]	; (8002e68 <HAL_DMA_IRQHandler+0xccc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01d      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_DMA_IRQHandler+0xcd0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_DMA_IRQHandler+0xcd4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_DMA_IRQHandler+0xcd8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <HAL_DMA_IRQHandler+0xcdc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_DMA_IRQHandler+0xce0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xc60>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_DMA_IRQHandler+0xce4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <HAL_DMA_IRQHandler+0xc72>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0214 	bic.w	r2, r2, #20
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e007      	b.n	8002e1e <HAL_DMA_IRQHandler+0xc82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 020a 	bic.w	r2, r2, #10
 8002e1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80b8 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e40:	e0b2      	b.n	8002fa8 <HAL_DMA_IRQHandler+0xe0c>
 8002e42:	bf00      	nop
 8002e44:	40020010 	.word	0x40020010
 8002e48:	40020028 	.word	0x40020028
 8002e4c:	40020040 	.word	0x40020040
 8002e50:	40020058 	.word	0x40020058
 8002e54:	40020070 	.word	0x40020070
 8002e58:	40020088 	.word	0x40020088
 8002e5c:	400200a0 	.word	0x400200a0
 8002e60:	400200b8 	.word	0x400200b8
 8002e64:	40020410 	.word	0x40020410
 8002e68:	40020428 	.word	0x40020428
 8002e6c:	40020440 	.word	0x40020440
 8002e70:	40020458 	.word	0x40020458
 8002e74:	40020470 	.word	0x40020470
 8002e78:	40020488 	.word	0x40020488
 8002e7c:	400204a0 	.word	0x400204a0
 8002e80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8088 	beq.w	8002faa <HAL_DMA_IRQHandler+0xe0e>
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8082 	beq.w	8002faa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_DMA_IRQHandler+0xe14>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d04a      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3f      	ldr	r2, [pc, #252]	; (8002fb4 <HAL_DMA_IRQHandler+0xe18>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d045      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <HAL_DMA_IRQHandler+0xe1c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d040      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3c      	ldr	r2, [pc, #240]	; (8002fbc <HAL_DMA_IRQHandler+0xe20>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d03b      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3b      	ldr	r2, [pc, #236]	; (8002fc0 <HAL_DMA_IRQHandler+0xe24>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d036      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a39      	ldr	r2, [pc, #228]	; (8002fc4 <HAL_DMA_IRQHandler+0xe28>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d031      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <HAL_DMA_IRQHandler+0xe2c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d02c      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_DMA_IRQHandler+0xe30>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d027      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <HAL_DMA_IRQHandler+0xe34>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a33      	ldr	r2, [pc, #204]	; (8002fd4 <HAL_DMA_IRQHandler+0xe38>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01d      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a32      	ldr	r2, [pc, #200]	; (8002fd8 <HAL_DMA_IRQHandler+0xe3c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <HAL_DMA_IRQHandler+0xe40>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <HAL_DMA_IRQHandler+0xe44>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	; (8002fe4 <HAL_DMA_IRQHandler+0xe48>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <HAL_DMA_IRQHandler+0xe4c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xdaa>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <HAL_DMA_IRQHandler+0xe50>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d108      	bne.n	8002f58 <HAL_DMA_IRQHandler+0xdbc>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 021c 	bic.w	r2, r2, #28
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e007      	b.n	8002f68 <HAL_DMA_IRQHandler+0xdcc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020e 	bic.w	r2, r2, #14
 8002f66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
 8002f9e:	e004      	b.n	8002faa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40020010 	.word	0x40020010
 8002fb4:	40020028 	.word	0x40020028
 8002fb8:	40020040 	.word	0x40020040
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	40020070 	.word	0x40020070
 8002fc4:	40020088 	.word	0x40020088
 8002fc8:	400200a0 	.word	0x400200a0
 8002fcc:	400200b8 	.word	0x400200b8
 8002fd0:	40020410 	.word	0x40020410
 8002fd4:	40020428 	.word	0x40020428
 8002fd8:	40020440 	.word	0x40020440
 8002fdc:	40020458 	.word	0x40020458
 8002fe0:	40020470 	.word	0x40020470
 8002fe4:	40020488 	.word	0x40020488
 8002fe8:	400204a0 	.word	0x400204a0
 8002fec:	400204b8 	.word	0x400204b8

08002ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <DMA_CalcBaseAndBitshift+0x118>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04a      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a41      	ldr	r2, [pc, #260]	; (800310c <DMA_CalcBaseAndBitshift+0x11c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d045      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <DMA_CalcBaseAndBitshift+0x120>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d040      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <DMA_CalcBaseAndBitshift+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d03b      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <DMA_CalcBaseAndBitshift+0x128>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d036      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <DMA_CalcBaseAndBitshift+0x12c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d031      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a39      	ldr	r2, [pc, #228]	; (8003120 <DMA_CalcBaseAndBitshift+0x130>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02c      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a38      	ldr	r2, [pc, #224]	; (8003124 <DMA_CalcBaseAndBitshift+0x134>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a36      	ldr	r2, [pc, #216]	; (8003128 <DMA_CalcBaseAndBitshift+0x138>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a35      	ldr	r2, [pc, #212]	; (800312c <DMA_CalcBaseAndBitshift+0x13c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01d      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a33      	ldr	r2, [pc, #204]	; (8003130 <DMA_CalcBaseAndBitshift+0x140>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a32      	ldr	r2, [pc, #200]	; (8003134 <DMA_CalcBaseAndBitshift+0x144>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a30      	ldr	r2, [pc, #192]	; (8003138 <DMA_CalcBaseAndBitshift+0x148>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <DMA_CalcBaseAndBitshift+0x14c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <DMA_CalcBaseAndBitshift+0x150>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <DMA_CalcBaseAndBitshift+0x154>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <DMA_CalcBaseAndBitshift+0xac>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <DMA_CalcBaseAndBitshift+0xae>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3b10      	subs	r3, #16
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <DMA_CalcBaseAndBitshift+0x158>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	4a24      	ldr	r2, [pc, #144]	; (800314c <DMA_CalcBaseAndBitshift+0x15c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d908      	bls.n	80030dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <DMA_CalcBaseAndBitshift+0x160>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	1d1a      	adds	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	; 0x58
 80030da:	e00d      	b.n	80030f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <DMA_CalcBaseAndBitshift+0x160>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ea:	e005      	b.n	80030f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
 8003148:	aaaaaaab 	.word	0xaaaaaaab
 800314c:	080135ac 	.word	0x080135ac
 8003150:	fffffc00 	.word	0xfffffc00

08003154 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d120      	bne.n	80031aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	2b03      	cmp	r3, #3
 800316e:	d858      	bhi.n	8003222 <DMA_CheckFifoParam+0xce>
 8003170:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <DMA_CheckFifoParam+0x24>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003189 	.word	0x08003189
 800317c:	0800319b 	.word	0x0800319b
 8003180:	08003189 	.word	0x08003189
 8003184:	08003223 	.word	0x08003223
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d048      	beq.n	8003226 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003198:	e045      	b.n	8003226 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a2:	d142      	bne.n	800322a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031a8:	e03f      	b.n	800322a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	d123      	bne.n	80031fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d838      	bhi.n	800322e <DMA_CheckFifoParam+0xda>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x70>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031db 	.word	0x080031db
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	080031ed 	.word	0x080031ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
        break;
 80031d8:	e030      	b.n	800323c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d025      	beq.n	8003232 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ea:	e022      	b.n	8003232 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031fa:	e01c      	b.n	8003236 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <DMA_CheckFifoParam+0xb6>
 8003204:	2b03      	cmp	r3, #3
 8003206:	d003      	beq.n	8003210 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003208:	e018      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
        break;
 800320e:	e015      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
    break;
 8003220:	e00b      	b.n	800323a <DMA_CheckFifoParam+0xe6>
        break;
 8003222:	bf00      	nop
 8003224:	e00a      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003226:	bf00      	nop
 8003228:	e008      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 800322a:	bf00      	nop
 800322c:	e006      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <DMA_CheckFifoParam+0xe8>
    break;
 800323a:	bf00      	nop
    }
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a36      	ldr	r2, [pc, #216]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a35      	ldr	r2, [pc, #212]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a33      	ldr	r2, [pc, #204]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a32      	ldr	r2, [pc, #200]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a30      	ldr	r2, [pc, #192]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01a      	beq.n	80032ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3b08      	subs	r3, #8
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032e8:	e024      	b.n	8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3b10      	subs	r3, #16
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d806      	bhi.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d902      	bls.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3308      	adds	r3, #8
 8003310:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003324:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	58025408 	.word	0x58025408
 8003344:	5802541c 	.word	0x5802541c
 8003348:	58025430 	.word	0x58025430
 800334c:	58025444 	.word	0x58025444
 8003350:	58025458 	.word	0x58025458
 8003354:	5802546c 	.word	0x5802546c
 8003358:	58025480 	.word	0x58025480
 800335c:	58025494 	.word	0x58025494
 8003360:	cccccccd 	.word	0xcccccccd
 8003364:	16009600 	.word	0x16009600
 8003368:	58025880 	.word	0x58025880
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	400204b8 	.word	0x400204b8
 8003374:	4002040f 	.word	0x4002040f
 8003378:	10008200 	.word	0x10008200
 800337c:	40020880 	.word	0x40020880

08003380 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04a      	beq.n	800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d847      	bhi.n	800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	; (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	; (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003408:	671a      	str	r2, [r3, #112]	; 0x70
 800340a:	e009      	b.n	8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800341e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3b01      	subs	r3, #1
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	58025408 	.word	0x58025408
 800343c:	5802541c 	.word	0x5802541c
 8003440:	58025430 	.word	0x58025430
 8003444:	58025444 	.word	0x58025444
 8003448:	58025458 	.word	0x58025458
 800344c:	5802546c 	.word	0x5802546c
 8003450:	58025480 	.word	0x58025480
 8003454:	58025494 	.word	0x58025494
 8003458:	1600963f 	.word	0x1600963f
 800345c:	58025940 	.word	0x58025940
 8003460:	1000823f 	.word	0x1000823f
 8003464:	40020940 	.word	0x40020940

08003468 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0c6      	b.n	8003608 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fde2 	bl	800104c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2223      	movs	r2, #35	; 0x23
 800348c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	4b60      	ldr	r3, [pc, #384]	; (8003610 <HAL_ETH_Init+0x1a8>)
 8003490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003494:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <HAL_ETH_Init+0x1a8>)
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800349e:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <HAL_ETH_Init+0x1a8>)
 80034a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7a1b      	ldrb	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fe fa23 	bl	8001900 <HAL_SYSCFG_ETHInterfaceSelect>
 80034ba:	e003      	b.n	80034c4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80034bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034c0:	f7fe fa1e 	bl	8001900 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034dc:	f7fe f9e0 	bl	80018a0 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034e2:	e00f      	b.n	8003504 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80034e4:	f7fe f9dc 	bl	80018a0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034f2:	d907      	bls.n	8003504 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2204      	movs	r2, #4
 80034f8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	22e0      	movs	r2, #224	; 0xe0
 80034fe:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e081      	b.n	8003608 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e6      	bne.n	80034e4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fac0 	bl	8003a9c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800351c:	f001 ff50 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8003520:	4603      	mov	r3, r0
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <HAL_ETH_Init+0x1ac>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	0c9a      	lsrs	r2, r3, #18
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3a01      	subs	r2, #1
 8003530:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa13 	bl	8003960 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003550:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003554:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	22e0      	movs	r2, #224	; 0xe0
 800356c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e04a      	b.n	8003608 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f241 1308 	movw	r3, #4360	; 0x1108
 800357a:	4413      	add	r3, r2
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_ETH_Init+0x1b0>)
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6952      	ldr	r2, [r2, #20]
 8003586:	0052      	lsls	r2, r2, #1
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6809      	ldr	r1, [r1, #0]
 800358c:	431a      	orrs	r2, r3
 800358e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003592:	440b      	add	r3, r1
 8003594:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fad8 	bl	8003b4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb1c 	bl	8003bda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	3305      	adds	r3, #5
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	3303      	adds	r3, #3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	061a      	lsls	r2, r3, #24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	3302      	adds	r3, #2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2210      	movs	r2, #16
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2210      	movs	r2, #16
 8003604:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024400 	.word	0x58024400
 8003614:	431bde83 	.word	0x431bde83
 8003618:	ffff8001 	.word	0xffff8001

0800361c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800362e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003636:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	7b1b      	ldrb	r3, [r3, #12]
 800363c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800363e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	7b5b      	ldrb	r3, [r3, #13]
 8003644:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003646:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	7b9b      	ldrb	r3, [r3, #14]
 800364c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800364e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	7bdb      	ldrb	r3, [r3, #15]
 8003654:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003656:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	7c12      	ldrb	r2, [r2, #16]
 800365c:	2a00      	cmp	r2, #0
 800365e:	d102      	bne.n	8003666 <ETH_SetMACConfig+0x4a>
 8003660:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003664:	e000      	b.n	8003668 <ETH_SetMACConfig+0x4c>
 8003666:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003668:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	7c52      	ldrb	r2, [r2, #17]
 800366e:	2a00      	cmp	r2, #0
 8003670:	d102      	bne.n	8003678 <ETH_SetMACConfig+0x5c>
 8003672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003676:	e000      	b.n	800367a <ETH_SetMACConfig+0x5e>
 8003678:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800367a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	7c9b      	ldrb	r3, [r3, #18]
 8003680:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003682:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003688:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800368e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	7f1b      	ldrb	r3, [r3, #28]
 8003694:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003696:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	7f5b      	ldrb	r3, [r3, #29]
 800369c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800369e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	7f92      	ldrb	r2, [r2, #30]
 80036a4:	2a00      	cmp	r2, #0
 80036a6:	d102      	bne.n	80036ae <ETH_SetMACConfig+0x92>
 80036a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ac:	e000      	b.n	80036b0 <ETH_SetMACConfig+0x94>
 80036ae:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80036b0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	7fdb      	ldrb	r3, [r3, #31]
 80036b6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80036b8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d102      	bne.n	80036ca <ETH_SetMACConfig+0xae>
 80036c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c8:	e000      	b.n	80036cc <ETH_SetMACConfig+0xb0>
 80036ca:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80036cc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80036d2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036da:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80036dc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b56      	ldr	r3, [pc, #344]	; (8003848 <ETH_SetMACConfig+0x22c>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003706:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003708:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003710:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003712:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800371a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800371c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003724:	2a00      	cmp	r2, #0
 8003726:	d102      	bne.n	800372e <ETH_SetMACConfig+0x112>
 8003728:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800372c:	e000      	b.n	8003730 <ETH_SetMACConfig+0x114>
 800372e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003730:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4b42      	ldr	r3, [pc, #264]	; (800384c <ETH_SetMACConfig+0x230>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	430b      	orrs	r3, r1
 800374c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003754:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <ETH_SetMACConfig+0x234>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	430b      	orrs	r3, r1
 8003770:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003778:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800377e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003786:	2a00      	cmp	r2, #0
 8003788:	d101      	bne.n	800378e <ETH_SetMACConfig+0x172>
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	e000      	b.n	8003790 <ETH_SetMACConfig+0x174>
 800378e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003790:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	68f9      	ldr	r1, [r7, #12]
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80037b8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80037c0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f023 0103 	bic.w	r1, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	430a      	orrs	r2, r1
 80037da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80037e6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003802:	2a00      	cmp	r2, #0
 8003804:	d101      	bne.n	800380a <ETH_SetMACConfig+0x1ee>
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	e000      	b.n	800380c <ETH_SetMACConfig+0x1f0>
 800380a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800380c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003814:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003816:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800381e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800382c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	430a      	orrs	r2, r1
 8003838:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	00048083 	.word	0x00048083
 800384c:	c0f88000 	.word	0xc0f88000
 8003850:	fffffef0 	.word	0xfffffef0

08003854 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <ETH_SetDMAConfig+0xf8>)
 800386a:	4013      	ands	r3, r2
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6809      	ldr	r1, [r1, #0]
 8003874:	431a      	orrs	r2, r3
 8003876:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800387a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	791b      	ldrb	r3, [r3, #4]
 8003880:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003886:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	7b1b      	ldrb	r3, [r3, #12]
 800388c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	f241 0304 	movw	r3, #4100	; 0x1004
 800389a:	4413      	add	r3, r2
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <ETH_SetDMAConfig+0xfc>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6811      	ldr	r1, [r2, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80038ae:	440b      	add	r3, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	7b5b      	ldrb	r3, [r3, #13]
 80038b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <ETH_SetDMAConfig+0x100>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6811      	ldr	r1, [r2, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80038da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	7d1b      	ldrb	r3, [r3, #20]
 80038e4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80038e6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	7f5b      	ldrb	r3, [r3, #29]
 80038ec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f241 1304 	movw	r3, #4356	; 0x1104
 80038fa:	4413      	add	r3, r2
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <ETH_SetDMAConfig+0x104>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	431a      	orrs	r2, r3
 800390a:	f241 1304 	movw	r3, #4356	; 0x1104
 800390e:	440b      	add	r3, r1
 8003910:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	7f1b      	ldrb	r3, [r3, #28]
 8003916:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f241 1308 	movw	r3, #4360	; 0x1108
 8003928:	4413      	add	r3, r2
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <ETH_SetDMAConfig+0x108>)
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6811      	ldr	r1, [r2, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	431a      	orrs	r2, r3
 8003938:	f241 1308 	movw	r3, #4360	; 0x1108
 800393c:	440b      	add	r3, r1
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	ffff87fd 	.word	0xffff87fd
 8003950:	ffff2ffe 	.word	0xffff2ffe
 8003954:	fffec000 	.word	0xfffec000
 8003958:	ffc0efef 	.word	0xffc0efef
 800395c:	7fc0ffff 	.word	0x7fc0ffff

08003960 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0a4      	sub	sp, #144	; 0x90
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800396e:	2300      	movs	r3, #0
 8003970:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800399c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80039b8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80039bc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80039c4:	2300      	movs	r3, #0
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80039da:	2300      	movs	r3, #0
 80039dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80039de:	2300      	movs	r3, #0
 80039e0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80039e2:	2300      	movs	r3, #0
 80039e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80039f8:	2320      	movs	r3, #32
 80039fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003a0a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a14:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fde6 	bl	800361c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a54:	2301      	movs	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a78:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003a80:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fee1 	bl	8003854 <ETH_SetDMAConfig>
}
 8003a92:	bf00      	nop
 8003a94:	3790      	adds	r7, #144	; 0x90
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ab6:	f001 fc83 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8003aba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d908      	bls.n	8003ad6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d804      	bhi.n	8003ad6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e027      	b.n	8003b26 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d908      	bls.n	8003af0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d204      	bcs.n	8003af0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e01a      	b.n	8003b26 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d303      	bcc.n	8003b00 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d911      	bls.n	8003b24 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d908      	bls.n	8003b1a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d804      	bhi.n	8003b1a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e005      	b.n	8003b26 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e000      	b.n	8003b26 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003b24:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	01312cff 	.word	0x01312cff
 8003b3c:	02160ebf 	.word	0x02160ebf
 8003b40:	03938700 	.word	0x03938700
 8003b44:	05f5e0ff 	.word	0x05f5e0ff
 8003b48:	08f0d17f 	.word	0x08f0d17f

08003b4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e01d      	b.n	8003b96 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68d9      	ldr	r1, [r3, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4613      	mov	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	440b      	add	r3, r1
 8003b6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	3206      	adds	r2, #6
 8003b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d9de      	bls.n	8003b5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f241 132c 	movw	r3, #4396	; 0x112c
 8003baa:	4413      	add	r3, r2
 8003bac:	2203      	movs	r2, #3
 8003bae:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68d9      	ldr	r1, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	f241 1314 	movw	r3, #4372	; 0x1114
 8003bbc:	4413      	add	r3, r2
 8003bbe:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e024      	b.n	8003c32 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6919      	ldr	r1, [r3, #16]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	440b      	add	r3, r1
 8003bf8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3310      	adds	r3, #16
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d9d7      	bls.n	8003be8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f241 1330 	movw	r3, #4400	; 0x1130
 8003c5e:	4413      	add	r3, r2
 8003c60:	2203      	movs	r2, #3
 8003c62:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6919      	ldr	r1, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003c70:	4413      	add	r3, r2
 8003c72:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	f241 1328 	movw	r3, #4392	; 0x1128
 8003c84:	4413      	add	r3, r2
 8003c86:	6019      	str	r1, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ca2:	4b86      	ldr	r3, [pc, #536]	; (8003ebc <HAL_GPIO_Init+0x228>)
 8003ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ca6:	e18c      	b.n	8003fc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 817e 	beq.w	8003fbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d005      	beq.n	8003cd8 <HAL_GPIO_Init+0x44>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d130      	bne.n	8003d3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d0e:	2201      	movs	r2, #1
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0201 	and.w	r2, r3, #1
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d017      	beq.n	8003d76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d123      	bne.n	8003dca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80d8 	beq.w	8003fbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_GPIO_Init+0x22c>)
 8003e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_GPIO_Init+0x22c>)
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_GPIO_Init+0x22c>)
 8003e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2a:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_GPIO_Init+0x230>)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_GPIO_Init+0x234>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_GPIO_Init+0x258>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_GPIO_Init+0x238>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_GPIO_Init+0x222>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_GPIO_Init+0x23c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d025      	beq.n	8003eb2 <HAL_GPIO_Init+0x21e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_GPIO_Init+0x240>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01f      	beq.n	8003eae <HAL_GPIO_Init+0x21a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_GPIO_Init+0x244>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_Init+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_GPIO_Init+0x248>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_GPIO_Init+0x24c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_Init+0x20e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <HAL_GPIO_Init+0x250>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x20a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_GPIO_Init+0x254>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_Init+0x206>
 8003e96:	2309      	movs	r3, #9
 8003e98:	e029      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	e027      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	e025      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003ea2:	2306      	movs	r3, #6
 8003ea4:	e023      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	e021      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003eaa:	2304      	movs	r3, #4
 8003eac:	e01f      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e01d      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e01b      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e019      	b.n	8003eee <HAL_GPIO_Init+0x25a>
 8003eba:	bf00      	nop
 8003ebc:	58000080 	.word	0x58000080
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	58000400 	.word	0x58000400
 8003ec8:	58020000 	.word	0x58020000
 8003ecc:	58020400 	.word	0x58020400
 8003ed0:	58020800 	.word	0x58020800
 8003ed4:	58020c00 	.word	0x58020c00
 8003ed8:	58021000 	.word	0x58021000
 8003edc:	58021400 	.word	0x58021400
 8003ee0:	58021800 	.word	0x58021800
 8003ee4:	58021c00 	.word	0x58021c00
 8003ee8:	58022400 	.word	0x58022400
 8003eec:	2300      	movs	r3, #0
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	f002 0203 	and.w	r2, r2, #3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4093      	lsls	r3, r2
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efe:	4938      	ldr	r1, [pc, #224]	; (8003fe0 <HAL_GPIO_Init+0x34c>)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f ae6b 	bne.w	8003ca8 <HAL_GPIO_Init+0x14>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	3724      	adds	r7, #36	; 0x24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	58000400 	.word	0x58000400

08003fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	e001      	b.n	8004006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	807b      	strh	r3, [r7, #2]
 8004020:	4613      	mov	r3, r2
 8004022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004024:	787b      	ldrb	r3, [r7, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004030:	e003      	b.n	800403a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	041a      	lsls	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	619a      	str	r2, [r3, #24]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004058:	887a      	ldrh	r2, [r7, #2]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4013      	ands	r3, r2
 800405e:	041a      	lsls	r2, r3, #16
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43d9      	mvns	r1, r3
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	400b      	ands	r3, r1
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004082:	f7fd fc0d 	bl	80018a0 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e03b      	b.n	800410a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040b2:	e00f      	b.n	80040d4 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80040b4:	f7fd fbf4 	bl	80018a0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d908      	bls.n	80040d4 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2240      	movs	r2, #64	; 0x40
 80040c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e01a      	b.n	800410a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e8      	bne.n	80040b4 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9be 	bl	8004464 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e03e      	b.n	80041aa <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_MDMA_ConfigPostRequestMask+0x28>
 8004136:	2302      	movs	r3, #2
 8004138:	e037      	b.n	80041aa <HAL_MDMA_ConfigPostRequestMask+0x98>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d126      	bne.n	800419c <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11c      	bne.n	8004196 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d108      	bne.n	8004184 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004180:	611a      	str	r2, [r3, #16]
 8004182:	e00d      	b.n	80041a0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004192:	611a      	str	r2, [r3, #16]
 8004194:	e004      	b.n	80041a0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
 800419a:	e001      	b.n	80041a0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c4:	4b9a      	ldr	r3, [pc, #616]	; (8004430 <HAL_MDMA_IRQHandler+0x278>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a9a      	ldr	r2, [pc, #616]	; (8004434 <HAL_MDMA_IRQHandler+0x27c>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b97      	ldr	r3, [pc, #604]	; (8004438 <HAL_MDMA_IRQHandler+0x280>)
 80041da:	4413      	add	r3, r2
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80041ea:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 812e 	beq.w	8004456 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d054      	beq.n	80042b2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04d      	beq.n	80042b2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0202 	bic.w	r2, r2, #2
 8004224:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	669a      	str	r2, [r3, #104]	; 0x68
 8004244:	e005      	b.n	8004252 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428c:	f043 0210 	orr.w	r2, r3, #16
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2210      	movs	r2, #16
 80042d4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2208      	movs	r2, #8
 8004308:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2204      	movs	r2, #4
 800433c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d039      	beq.n	80043d0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d032      	beq.n	80043d0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8004378:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d110      	bne.n	80043a8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	2b00      	cmp	r3, #0
 800439c:	d05d      	beq.n	800445a <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
        }
        return;
 80043a6:	e058      	b.n	800445a <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2202      	movs	r2, #2
 80043ae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d041      	beq.n	800445c <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d307      	bcc.n	800440c <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f2      	bne.n	80043f0 <HAL_MDMA_IRQHandler+0x238>
 800440a:	e000      	b.n	800440e <HAL_MDMA_IRQHandler+0x256>
        break;
 800440c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2203      	movs	r2, #3
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800442c:	e00a      	b.n	8004444 <HAL_MDMA_IRQHandler+0x28c>
 800442e:	bf00      	nop
 8004430:	2400802c 	.word	0x2400802c
 8004434:	1b4e81b5 	.word	0x1b4e81b5
 8004438:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
 8004454:	e002      	b.n	800445c <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <HAL_MDMA_IRQHandler+0x2a4>
        return;
 800445a:	bf00      	nop
    }
  }
}
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop

08004464 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68d9      	ldr	r1, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800448a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004496:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80044a2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80044ac:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80044b8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80044ba:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d107      	bne.n	80044d6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80044d4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da11      	bge.n	800450a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044f4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	425b      	negs	r3, r3
 80044fc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	b292      	uxth	r2, r2
 8004506:	621a      	str	r2, [r3, #32]
 8004508:	e006      	b.n	8004518 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	b292      	uxth	r2, r2
 8004516:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	da15      	bge.n	800454c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800452e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	425b      	negs	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a19      	ldr	r1, [r3, #32]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	621a      	str	r2, [r3, #32]
 800454a:	e009      	b.n	8004560 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6a19      	ldr	r1, [r3, #32]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	041a      	lsls	r2, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d006      	beq.n	8004578 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
 8004576:	e003      	b.n	8004580 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d00a      	beq.n	80045be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01f      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e01d      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	490f      	ldr	r1, [pc, #60]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ce:	f7fd f967 	bl	80018a0 <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045d4:	e009      	b.n	80045ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045d6:	f7fd f963 	bl	80018a0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e4:	d901      	bls.n	80045ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d1ee      	bne.n	80045d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	58024800 	.word	0x58024800

08004608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e397      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8087 	beq.w	8004736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004628:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004632:	4b9c      	ldr	r3, [pc, #624]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	2b10      	cmp	r3, #16
 800463c:	d007      	beq.n	800464e <HAL_RCC_OscConfig+0x46>
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b18      	cmp	r3, #24
 8004642:	d110      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d10b      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464e:	4b95      	ldr	r3, [pc, #596]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06c      	beq.n	8004734 <HAL_RCC_OscConfig+0x12c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d168      	bne.n	8004734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e371      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x76>
 8004670:	4b8c      	ldr	r3, [pc, #560]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a8b      	ldr	r2, [pc, #556]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e02e      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x98>
 8004686:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a86      	ldr	r2, [pc, #536]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800468c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b84      	ldr	r3, [pc, #528]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a83      	ldr	r2, [pc, #524]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0xbc>
 80046aa:	4b7e      	ldr	r3, [pc, #504]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7a      	ldr	r2, [pc, #488]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046c4:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a76      	ldr	r2, [pc, #472]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a73      	ldr	r2, [pc, #460]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd f8dc 	bl	80018a0 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fd f8d8 	bl	80018a0 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e325      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fe:	4b69      	ldr	r3, [pc, #420]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xe4>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd f8c8 	bl	80018a0 <HAL_GetTick>
 8004710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004714:	f7fd f8c4 	bl	80018a0 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e311      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004726:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x10c>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 808a 	beq.w	8004858 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004744:	4b57      	ldr	r3, [pc, #348]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_RCC_OscConfig+0x162>
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b18      	cmp	r3, #24
 800475e:	d137      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1c8>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d132      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476a:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x17a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e2e3      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004782:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 0219 	bic.w	r2, r3, #25
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4945      	ldr	r1, [pc, #276]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004794:	f7fd f884 	bl	80018a0 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479c:	f7fd f880 	bl	80018a0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e2cd      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	4936      	ldr	r1, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ce:	e043      	b.n	8004858 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d026      	beq.n	8004826 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d8:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 0219 	bic.w	r2, r3, #25
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	492f      	ldr	r1, [pc, #188]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fd f859 	bl	80018a0 <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f2:	f7fd f855 	bl	80018a0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e2a2      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	4921      	ldr	r1, [pc, #132]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	e018      	b.n	8004858 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004826:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd f835 	bl	80018a0 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483a:	f7fd f831 	bl	80018a0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e27e      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d06d      	beq.n	8004940 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d007      	beq.n	800488a <HAL_RCC_OscConfig+0x282>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b18      	cmp	r3, #24
 800487e:	d11e      	bne.n	80048be <HAL_RCC_OscConfig+0x2b6>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d119      	bne.n	80048be <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2a0>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d004      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e253      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048a8:	4ba3      	ldr	r3, [pc, #652]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	49a0      	ldr	r1, [pc, #640]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048bc:	e040      	b.n	8004940 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d023      	beq.n	800490e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048c6:	4b9c      	ldr	r3, [pc, #624]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a9b      	ldr	r2, [pc, #620]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fc ffe5 	bl	80018a0 <HAL_GetTick>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048da:	f7fc ffe1 	bl	80018a0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e22e      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ec:	4b92      	ldr	r3, [pc, #584]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048f8:	4b8f      	ldr	r3, [pc, #572]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	498c      	ldr	r1, [pc, #560]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004908:	4313      	orrs	r3, r2
 800490a:	60cb      	str	r3, [r1, #12]
 800490c:	e018      	b.n	8004940 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800490e:	4b8a      	ldr	r3, [pc, #552]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a89      	ldr	r2, [pc, #548]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fc ffc1 	bl	80018a0 <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004922:	f7fc ffbd 	bl	80018a0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e20a      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004934:	4b80      	ldr	r3, [pc, #512]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d036      	beq.n	80049ba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d019      	beq.n	8004988 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004954:	4b78      	ldr	r3, [pc, #480]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	4a77      	ldr	r2, [pc, #476]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fc ff9e 	bl	80018a0 <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004968:	f7fc ff9a 	bl	80018a0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e1e7      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800497a:	4b6f      	ldr	r3, [pc, #444]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x360>
 8004986:	e018      	b.n	80049ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004988:	4b6b      	ldr	r3, [pc, #428]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	4a6a      	ldr	r2, [pc, #424]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fc ff84 	bl	80018a0 <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499c:	f7fc ff80 	bl	80018a0 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1cd      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ae:	4b62      	ldr	r3, [pc, #392]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d036      	beq.n	8004a34 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d019      	beq.n	8004a02 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ce:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a59      	ldr	r2, [pc, #356]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80049d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049da:	f7fc ff61 	bl	80018a0 <HAL_GetTick>
 80049de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049e2:	f7fc ff5d 	bl	80018a0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1aa      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f4:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x3da>
 8004a00:	e018      	b.n	8004a34 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a02:	4b4d      	ldr	r3, [pc, #308]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a0e:	f7fc ff47 	bl	80018a0 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a16:	f7fc ff43 	bl	80018a0 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e190      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a28:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8085 	beq.w	8004b4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a42:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <HAL_RCC_OscConfig+0x534>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3d      	ldr	r2, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x534>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a4e:	f7fc ff27 	bl	80018a0 <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fc ff23 	bl	80018a0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b64      	cmp	r3, #100	; 0x64
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e170      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a68:	4b34      	ldr	r3, [pc, #208]	; (8004b3c <HAL_RCC_OscConfig+0x534>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x482>
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a2d      	ldr	r2, [pc, #180]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e02d      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4de>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x4a4>
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4de>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCC_OscConfig+0x4c6>
 8004ab4:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004aba:	f043 0304 	orr.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	e00b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4de>
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a19      	ldr	r2, [pc, #100]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d015      	beq.n	8004b1a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fc fed7 	bl	80018a0 <HAL_GetTick>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fed3 	bl	80018a0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e11e      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_RCC_OscConfig+0x530>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ee      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4ee>
 8004b18:	e018      	b.n	8004b4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fc fec1 	bl	80018a0 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b20:	e00e      	b.n	8004b40 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fc febd 	bl	80018a0 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d905      	bls.n	8004b40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e108      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b40:	4b84      	ldr	r3, [pc, #528]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ea      	bne.n	8004b22 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80f9 	beq.w	8004d48 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5e:	2b18      	cmp	r3, #24
 8004b60:	f000 80b4 	beq.w	8004ccc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f040 8095 	bne.w	8004c98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a78      	ldr	r2, [pc, #480]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc fe91 	bl	80018a0 <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fc fe8d 	bl	80018a0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0da      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b94:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba0:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba4:	4b6c      	ldr	r3, [pc, #432]	; (8004d58 <HAL_RCC_OscConfig+0x750>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bb0:	0112      	lsls	r2, r2, #4
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	4967      	ldr	r1, [pc, #412]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	628b      	str	r3, [r1, #40]	; 0x28
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	025b      	lsls	r3, r3, #9
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	3b01      	subs	r3, #1
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bea:	495a      	ldr	r1, [pc, #360]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004bf0:	4b58      	ldr	r3, [pc, #352]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a57      	ldr	r2, [pc, #348]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bfc:	4b55      	ldr	r3, [pc, #340]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c00:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <HAL_RCC_OscConfig+0x754>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c08:	00d2      	lsls	r2, r2, #3
 8004c0a:	4952      	ldr	r1, [pc, #328]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c10:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	f023 020c 	bic.w	r2, r3, #12
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	494d      	ldr	r1, [pc, #308]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c22:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f023 0202 	bic.w	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4949      	ldr	r1, [pc, #292]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c34:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004c58:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a3d      	ldr	r2, [pc, #244]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3a      	ldr	r2, [pc, #232]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fc fe16 	bl	80018a0 <HAL_GetTick>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fc fe12 	bl	80018a0 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e05f      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x670>
 8004c96:	e057      	b.n	8004d48 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2d      	ldr	r2, [pc, #180]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fc fdfc 	bl	80018a0 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fc fdf8 	bl	80018a0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e045      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cbe:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x6a4>
 8004cca:	e03d      	b.n	8004d48 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_RCC_OscConfig+0x74c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d031      	beq.n	8004d44 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d12a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d122      	bne.n	8004d44 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	0a5b      	lsrs	r3, r3, #9
 8004d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d111      	bne.n	8004d44 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d108      	bne.n	8004d44 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3730      	adds	r7, #48	; 0x30
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	fffffc0c 	.word	0xfffffc0c
 8004d5c:	ffff0007 	.word	0xffff0007

08004d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e19c      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d74:	4b8a      	ldr	r3, [pc, #552]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d910      	bls.n	8004da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b87      	ldr	r3, [pc, #540]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 020f 	bic.w	r2, r3, #15
 8004d8a:	4985      	ldr	r1, [pc, #532]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b83      	ldr	r3, [pc, #524]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e184      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d908      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dc0:	4b78      	ldr	r3, [pc, #480]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	4975      	ldr	r1, [pc, #468]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d010      	beq.n	8004e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	4b70      	ldr	r3, [pc, #448]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d908      	bls.n	8004e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dee:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	496a      	ldr	r1, [pc, #424]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	4b64      	ldr	r3, [pc, #400]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d908      	bls.n	8004e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e1c:	4b61      	ldr	r3, [pc, #388]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	495e      	ldr	r1, [pc, #376]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d908      	bls.n	8004e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4953      	ldr	r1, [pc, #332]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d908      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f023 020f 	bic.w	r2, r3, #15
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4947      	ldr	r1, [pc, #284]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d055      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e96:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4940      	ldr	r1, [pc, #256]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eb0:	4b3c      	ldr	r3, [pc, #240]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d121      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0f6      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d115      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0ea      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0de      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0d6      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f023 0207 	bic.w	r2, r3, #7
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4925      	ldr	r1, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fc fcc5 	bl	80018a0 <HAL_GetTick>
 8004f16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1a:	f7fc fcc1 	bl	80018a0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0be      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d1eb      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d208      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f023 020f 	bic.w	r2, r3, #15
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d214      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 020f 	bic.w	r2, r3, #15
 8004f86:	4906      	ldr	r1, [pc, #24]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <HAL_RCC_ClockConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e086      	b.n	80050ae <HAL_RCC_ClockConfig+0x34e>
 8004fa0:	52002000 	.word	0x52002000
 8004fa4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d208      	bcs.n	8004fd6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fc4:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	4939      	ldr	r1, [pc, #228]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d010      	beq.n	8005004 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d208      	bcs.n	8005004 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ff2:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	492e      	ldr	r1, [pc, #184]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005000:	4313      	orrs	r3, r2
 8005002:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800501c:	429a      	cmp	r2, r3
 800501e:	d208      	bcs.n	8005032 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4922      	ldr	r1, [pc, #136]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 800502e:	4313      	orrs	r3, r2
 8005030:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800504a:	429a      	cmp	r2, r3
 800504c:	d208      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800504e:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4917      	ldr	r1, [pc, #92]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 800505c:	4313      	orrs	r3, r2
 800505e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005060:	f000 f834 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	4912      	ldr	r1, [pc, #72]	; (80050bc <HAL_RCC_ClockConfig+0x35c>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <HAL_RCC_ClockConfig+0x358>)
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <HAL_RCC_ClockConfig+0x35c>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <HAL_RCC_ClockConfig+0x360>)
 8005096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x364>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x368>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fa34 	bl	8001510 <HAL_InitTick>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
 80050bc:	0801359c 	.word	0x0801359c
 80050c0:	24008030 	.word	0x24008030
 80050c4:	2400802c 	.word	0x2400802c
 80050c8:	24008034 	.word	0x24008034

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d2:	4bb3      	ldr	r3, [pc, #716]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050da:	2b18      	cmp	r3, #24
 80050dc:	f200 8155 	bhi.w	800538a <HAL_RCC_GetSysClockFreq+0x2be>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800538b 	.word	0x0800538b
 80050f0:	0800538b 	.word	0x0800538b
 80050f4:	0800538b 	.word	0x0800538b
 80050f8:	0800538b 	.word	0x0800538b
 80050fc:	0800538b 	.word	0x0800538b
 8005100:	0800538b 	.word	0x0800538b
 8005104:	0800538b 	.word	0x0800538b
 8005108:	08005173 	.word	0x08005173
 800510c:	0800538b 	.word	0x0800538b
 8005110:	0800538b 	.word	0x0800538b
 8005114:	0800538b 	.word	0x0800538b
 8005118:	0800538b 	.word	0x0800538b
 800511c:	0800538b 	.word	0x0800538b
 8005120:	0800538b 	.word	0x0800538b
 8005124:	0800538b 	.word	0x0800538b
 8005128:	08005179 	.word	0x08005179
 800512c:	0800538b 	.word	0x0800538b
 8005130:	0800538b 	.word	0x0800538b
 8005134:	0800538b 	.word	0x0800538b
 8005138:	0800538b 	.word	0x0800538b
 800513c:	0800538b 	.word	0x0800538b
 8005140:	0800538b 	.word	0x0800538b
 8005144:	0800538b 	.word	0x0800538b
 8005148:	0800517f 	.word	0x0800517f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514c:	4b94      	ldr	r3, [pc, #592]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005158:	4b91      	ldr	r3, [pc, #580]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	4a90      	ldr	r2, [pc, #576]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800516a:	e111      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800516c:	4b8d      	ldr	r3, [pc, #564]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800516e:	61bb      	str	r3, [r7, #24]
    break;
 8005170:	e10e      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005172:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005174:	61bb      	str	r3, [r7, #24]
    break;
 8005176:	e10b      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005178:	4b8c      	ldr	r3, [pc, #560]	; (80053ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800517a:	61bb      	str	r3, [r7, #24]
    break;
 800517c:	e108      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800517e:	4b88      	ldr	r3, [pc, #544]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005188:	4b85      	ldr	r3, [pc, #532]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005192:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005194:	4b82      	ldr	r3, [pc, #520]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800519e:	4b80      	ldr	r3, [pc, #512]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80e1 	beq.w	8005384 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f000 8083 	beq.w	80052d0 <HAL_RCC_GetSysClockFreq+0x204>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f200 80a1 	bhi.w	8005314 <HAL_RCC_GetSysClockFreq+0x248>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x114>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d056      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x1c0>
 80051de:	e099      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02d      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051ec:	4b6c      	ldr	r3, [pc, #432]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	4a6b      	ldr	r2, [pc, #428]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a02 	vldr	s12, [r7, #8]
 800522a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005246:	e087      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	eddf 6a58 	vldr	s13, [pc, #352]	; 80053b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b51      	ldr	r3, [pc, #324]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a02 	vldr	s12, [r7, #8]
 800526e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528a:	e065      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a48 	vldr	s13, [pc, #288]	; 80053b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b40      	ldr	r3, [pc, #256]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ce:	e043      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80053bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80052de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e2:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005312:	e021      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80053b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	ed97 6a02 	vldr	s12, [r7, #8]
 800533a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005356:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	0a5b      	lsrs	r3, r3, #9
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005362:	3301      	adds	r3, #1
 8005364:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005370:	edd7 6a07 	vldr	s13, [r7, #28]
 8005374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537c:	ee17 3a90 	vmov	r3, s15
 8005380:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005382:	e005      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
    break;
 8005388:	e002      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800538c:	61bb      	str	r3, [r7, #24]
    break;
 800538e:	bf00      	nop
  }

  return sysclockfreq;
 8005390:	69bb      	ldr	r3, [r7, #24]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	58024400 	.word	0x58024400
 80053a4:	03d09000 	.word	0x03d09000
 80053a8:	003d0900 	.word	0x003d0900
 80053ac:	007a1200 	.word	0x007a1200
 80053b0:	46000000 	.word	0x46000000
 80053b4:	4c742400 	.word	0x4c742400
 80053b8:	4a742400 	.word	0x4a742400
 80053bc:	4af42400 	.word	0x4af42400

080053c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053c6:	f7ff fe81 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_GetHCLKFreq+0x50>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	490f      	ldr	r1, [pc, #60]	; (8005414 <HAL_RCC_GetHCLKFreq+0x54>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_GetHCLKFreq+0x50>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <HAL_RCC_GetHCLKFreq+0x54>)
 80053ee:	5cd3      	ldrb	r3, [r2, r3]
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_GetHCLKFreq+0x58>)
 80053fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053fe:	4a07      	ldr	r2, [pc, #28]	; (800541c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <HAL_RCC_GetHCLKFreq+0x58>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	58024400 	.word	0x58024400
 8005414:	0801359c 	.word	0x0801359c
 8005418:	24008030 	.word	0x24008030
 800541c:	2400802c 	.word	0x2400802c

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005424:	f7ff ffcc 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4904      	ldr	r1, [pc, #16]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	58024400 	.word	0x58024400
 8005448:	0801359c 	.word	0x0801359c

0800544c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005450:	f7ff ffb6 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	0801359c 	.word	0x0801359c

08005478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	223f      	movs	r2, #63	; 0x3f
 8005486:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0207 	and.w	r2, r3, #7
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005494:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 020f 	and.w	r2, r3, #15
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_RCC_GetClockConfig+0x7c>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetClockConfig+0x80>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 020f 	and.w	r2, r3, #15
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	58024400 	.word	0x58024400
 80054f8:	52002000 	.word	0x52002000

080054fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005508:	2300      	movs	r3, #0
 800550a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005520:	d02a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005526:	d824      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552c:	d018      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800552e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005532:	d81e      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553c:	d007      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800553e:	e018      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	4bab      	ldr	r3, [pc, #684]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4aaa      	ldr	r2, [pc, #680]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800554c:	e015      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f001 feff 	bl	8007358 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800555e:	e00c      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	2102      	movs	r1, #2
 8005566:	4618      	mov	r0, r3
 8005568:	f001 ffa8 	bl	80074bc <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005570:	e003      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
      break;
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005580:	4b9b      	ldr	r3, [pc, #620]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	4998      	ldr	r1, [pc, #608]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	650b      	str	r3, [r1, #80]	; 0x50
 8005592:	e001      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03d      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d826      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c9 	.word	0x080055c9
 80055b8:	080055d7 	.word	0x080055d7
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	08005601 	.word	0x08005601
 80055c4:	08005601 	.word	0x08005601
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c8:	4b89      	ldr	r3, [pc, #548]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a88      	ldr	r2, [pc, #544]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055d4:	e015      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 febb 	bl	8007358 <RCCEx_PLL2_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055e6:	e00c      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 ff64 	bl	80074bc <RCCEx_PLL3_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055f8:	e003      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	75fb      	strb	r3, [r7, #23]
      break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005608:	4b79      	ldr	r3, [pc, #484]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	f023 0207 	bic.w	r2, r3, #7
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	4976      	ldr	r1, [pc, #472]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	650b      	str	r3, [r1, #80]	; 0x50
 800561a:	e001      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d051      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005632:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005636:	d036      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005638:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800563c:	d830      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800563e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005642:	d032      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005648:	d82a      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800564a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800564e:	d02e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005650:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005654:	d824      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565a:	d018      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800565c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005660:	d81e      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566a:	d007      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800566c:	e018      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566e:	4b60      	ldr	r3, [pc, #384]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	4a5f      	ldr	r2, [pc, #380]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800567a:	e019      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f001 fe68 	bl	8007358 <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800568c:	e010      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3324      	adds	r3, #36	; 0x24
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f001 ff11 	bl	80074bc <RCCEx_PLL3_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800569e:	e007      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	e004      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056b6:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056c4:	494a      	ldr	r1, [pc, #296]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	658b      	str	r3, [r1, #88]	; 0x58
 80056ca:	e001      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d051      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056e2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80056e6:	d036      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80056e8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80056ec:	d830      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80056ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f2:	d032      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80056f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f8:	d82a      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80056fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056fe:	d02e      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005700:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005704:	d824      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800570a:	d018      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800570c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005710:	d81e      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800571a:	d007      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800571c:	e018      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571e:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800572a:	e019      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f001 fe10 	bl	8007358 <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800573c:	e010      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 feb9 	bl	80074bc <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800574e:	e007      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
      break;
 8005754:	e004      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800575e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005774:	491e      	ldr	r1, [pc, #120]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	658b      	str	r3, [r1, #88]	; 0x58
 800577a:	e001      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d035      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	2b30      	cmp	r3, #48	; 0x30
 8005792:	d01c      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d817      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d00c      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d813      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d016      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d10f      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80057b4:	e00e      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2102      	movs	r1, #2
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fdcb 	bl	8007358 <RCCEx_PLL2_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80057c6:	e005      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
      break;
 80057cc:	e002      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80057d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e6:	4902      	ldr	r1, [pc, #8]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057ec:	e004      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80057ee:	bf00      	nop
 80057f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d047      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580c:	d030      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800580e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005812:	d82a      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005814:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005818:	d02c      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800581a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800581e:	d824      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005824:	d018      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	d81e      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d007      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005836:	e018      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4bac      	ldr	r3, [pc, #688]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4aab      	ldr	r2, [pc, #684]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005844:	e017      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fd83 	bl	8007358 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005856:	e00e      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fe2c 	bl	80074bc <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005868:	e005      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
      break;
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800587c:	4b9b      	ldr	r3, [pc, #620]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	4998      	ldr	r1, [pc, #608]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800588a:	4313      	orrs	r3, r2
 800588c:	650b      	str	r3, [r1, #80]	; 0x50
 800588e:	e001      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d049      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a8:	d02e      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80058aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ae:	d828      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80058b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058b4:	d02a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058ba:	d822      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80058bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058c0:	d026      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80058c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058c6:	d81c      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80058c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058cc:	d010      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80058ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d2:	d816      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01d      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d111      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fd37 	bl	8007358 <RCCEx_PLL2_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80058ee:	e012      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3324      	adds	r3, #36	; 0x24
 80058f4:	2101      	movs	r1, #1
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fde0 	bl	80074bc <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005900:	e009      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
      break;
 8005906:	e006      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005908:	bf00      	nop
 800590a:	e004      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800590c:	bf00      	nop
 800590e:	e002      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005910:	bf00      	nop
 8005912:	e000      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800591c:	4b73      	ldr	r3, [pc, #460]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005928:	4970      	ldr	r1, [pc, #448]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	650b      	str	r3, [r1, #80]	; 0x50
 800592e:	e001      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d04b      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800594a:	d02e      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800594c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005950:	d828      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d02a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d822      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800595e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005962:	d026      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005968:	d81c      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800596a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596e:	d010      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005974:	d816      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01d      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800597a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800597e:	d111      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fce6 	bl	8007358 <RCCEx_PLL2_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005990:	e012      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fd8f 	bl	80074bc <RCCEx_PLL3_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059a2:	e009      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059aa:	bf00      	nop
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059be:	4b4b      	ldr	r3, [pc, #300]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059cc:	4947      	ldr	r1, [pc, #284]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	658b      	str	r3, [r1, #88]	; 0x58
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d02f      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ec:	d00e      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80059ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f2:	d814      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80059f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fc:	d10f      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fe:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 fca0 	bl	8007358 <RCCEx_PLL2_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a1c:	e003      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a38:	492c      	ldr	r1, [pc, #176]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a3e:	e001      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d032      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d81b      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a97 	.word	0x08005a97
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005a97 	.word	0x08005a97
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a7c:	e00c      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	2102      	movs	r1, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fc67 	bl	8007358 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	4910      	ldr	r1, [pc, #64]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ab0:	e001      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 808a 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ad0:	f7fb fee6 	bl	80018a0 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad6:	e00d      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7fb fee2 	bl	80018a0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	; 0x64
 8005ae4:	d906      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8005aea:	e009      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005aec:	58024400 	.word	0x58024400
 8005af0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af4:	4bb9      	ldr	r3, [pc, #740]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0eb      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d166      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b06:	4bb6      	ldr	r3, [pc, #728]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b10:	4053      	eors	r3, r2
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b1a:	4bb1      	ldr	r3, [pc, #708]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b24:	4bae      	ldr	r3, [pc, #696]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4aad      	ldr	r2, [pc, #692]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b30:	4bab      	ldr	r3, [pc, #684]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	4aaa      	ldr	r2, [pc, #680]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b3c:	4aa8      	ldr	r2, [pc, #672]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d115      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fb fea7 	bl	80018a0 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b54:	e00b      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fb fea3 	bl	80018a0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d902      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b6c:	e005      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b6e:	4b9c      	ldr	r3, [pc, #624]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ed      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d126      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8e:	d10d      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005b90:	4b93      	ldr	r3, [pc, #588]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b9e:	0919      	lsrs	r1, r3, #4
 8005ba0:	4b90      	ldr	r3, [pc, #576]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	498e      	ldr	r1, [pc, #568]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	610b      	str	r3, [r1, #16]
 8005baa:	e005      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005bac:	4b8c      	ldr	r3, [pc, #560]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4a8b      	ldr	r2, [pc, #556]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bb6:	6113      	str	r3, [r2, #16]
 8005bb8:	4b89      	ldr	r3, [pc, #548]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc6:	4986      	ldr	r1, [pc, #536]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	670b      	str	r3, [r1, #112]	; 0x70
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	75bb      	strb	r3, [r7, #22]
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d07e      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	2b28      	cmp	r3, #40	; 0x28
 8005bea:	d867      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005cc3 	.word	0x08005cc3
 8005bf8:	08005cbd 	.word	0x08005cbd
 8005bfc:	08005cbd 	.word	0x08005cbd
 8005c00:	08005cbd 	.word	0x08005cbd
 8005c04:	08005cbd 	.word	0x08005cbd
 8005c08:	08005cbd 	.word	0x08005cbd
 8005c0c:	08005cbd 	.word	0x08005cbd
 8005c10:	08005cbd 	.word	0x08005cbd
 8005c14:	08005c99 	.word	0x08005c99
 8005c18:	08005cbd 	.word	0x08005cbd
 8005c1c:	08005cbd 	.word	0x08005cbd
 8005c20:	08005cbd 	.word	0x08005cbd
 8005c24:	08005cbd 	.word	0x08005cbd
 8005c28:	08005cbd 	.word	0x08005cbd
 8005c2c:	08005cbd 	.word	0x08005cbd
 8005c30:	08005cbd 	.word	0x08005cbd
 8005c34:	08005cab 	.word	0x08005cab
 8005c38:	08005cbd 	.word	0x08005cbd
 8005c3c:	08005cbd 	.word	0x08005cbd
 8005c40:	08005cbd 	.word	0x08005cbd
 8005c44:	08005cbd 	.word	0x08005cbd
 8005c48:	08005cbd 	.word	0x08005cbd
 8005c4c:	08005cbd 	.word	0x08005cbd
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005cc3 	.word	0x08005cc3
 8005c58:	08005cbd 	.word	0x08005cbd
 8005c5c:	08005cbd 	.word	0x08005cbd
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005cbd 	.word	0x08005cbd
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005cbd 	.word	0x08005cbd
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005cc3 	.word	0x08005cc3
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005cbd 	.word	0x08005cbd
 8005c80:	08005cbd 	.word	0x08005cbd
 8005c84:	08005cbd 	.word	0x08005cbd
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cc3 	.word	0x08005cc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fb5a 	bl	8007358 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ca8:	e00c      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fc03 	bl	80074bc <RCCEx_PLL3_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cca:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4942      	ldr	r1, [pc, #264]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	654b      	str	r3, [r1, #84]	; 0x54
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d037      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d820      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d3f 	.word	0x08005d3f
 8005d00:	08005d15 	.word	0x08005d15
 8005d04:	08005d27 	.word	0x08005d27
 8005d08:	08005d3f 	.word	0x08005d3f
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d3f 	.word	0x08005d3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fb1c 	bl	8007358 <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d24:	e00c      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3324      	adds	r3, #36	; 0x24
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fbc5 	bl	80074bc <RCCEx_PLL3_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d36:	e003      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f023 0207 	bic.w	r2, r3, #7
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4923      	ldr	r1, [pc, #140]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	654b      	str	r3, [r1, #84]	; 0x54
 8005d58:	e001      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d040      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d821      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005dbf 	.word	0x08005dbf
 8005d80:	08005d95 	.word	0x08005d95
 8005d84:	08005da7 	.word	0x08005da7
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fadc 	bl	8007358 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fb85 	bl	80074bc <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d110      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f023 0207 	bic.w	r2, r3, #7
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd4:	4902      	ldr	r1, [pc, #8]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8005dda:	e007      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005ddc:	58024800 	.word	0x58024800
 8005de0:	58024400 	.word	0x58024400
 8005de4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d04b      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e02:	d02e      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e08:	d828      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d02a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d822      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e1a:	d026      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e20:	d81c      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e26:	d010      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2c:	d816      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01d      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e36:	d111      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fa8a 	bl	8007358 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e48:	e012      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fb33 	bl	80074bc <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e5a:	e009      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e76:	4bb2      	ldr	r3, [pc, #712]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	49ae      	ldr	r1, [pc, #696]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	654b      	str	r3, [r1, #84]	; 0x54
 8005e8a:	e001      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d04b      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ea6:	d02e      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005ea8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005eac:	d828      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d02a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d822      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005eba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ebe:	d026      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ec4:	d81c      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eca:	d010      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed0:	d816      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01d      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eda:	d111      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fa38 	bl	8007358 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005eec:	e012      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fae1 	bl	80074bc <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005efe:	e009      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
      break;
 8005f04:	e006      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f06:	bf00      	nop
 8005f08:	e004      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e002      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e000      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f1a:	4b89      	ldr	r3, [pc, #548]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	4985      	ldr	r1, [pc, #532]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005f2e:	e001      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d04b      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f4a:	d02e      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005f4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f50:	d828      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f56:	d02a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d822      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f62:	d026      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005f64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f68:	d81c      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6e:	d010      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f74:	d816      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01d      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7e:	d111      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f9e6 	bl	8007358 <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f90:	e012      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3324      	adds	r3, #36	; 0x24
 8005f96:	2102      	movs	r1, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fa8f 	bl	80074bc <RCCEx_PLL3_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fa2:	e009      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa8:	e006      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005faa:	bf00      	nop
 8005fac:	e004      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fcc:	495c      	ldr	r1, [pc, #368]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8005fd2:	e001      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d018      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fec:	d10a      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3324      	adds	r3, #36	; 0x24
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fa61 	bl	80074bc <RCCEx_PLL3_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006004:	4b4e      	ldr	r3, [pc, #312]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006010:	494b      	ldr	r1, [pc, #300]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006012:	4313      	orrs	r3, r2
 8006014:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602c:	d10a      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	2102      	movs	r1, #2
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fa41 	bl	80074bc <RCCEx_PLL3_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006044:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	493b      	ldr	r1, [pc, #236]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006054:	4313      	orrs	r3, r2
 8006056:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d034      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800606e:	d01d      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006074:	d817      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607e:	d009      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006080:	e011      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2100      	movs	r1, #0
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f965 	bl	8007358 <RCCEx_PLL2_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006092:	e00c      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	2102      	movs	r1, #2
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fa0e 	bl	80074bc <RCCEx_PLL3_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
      break;
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80060ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060b4:	4b22      	ldr	r3, [pc, #136]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c2:	491f      	ldr	r1, [pc, #124]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	658b      	str	r3, [r1, #88]	; 0x58
 80060c8:	e001      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d036      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060e4:	d01c      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80060e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ea:	d816      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f0:	d003      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80060f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f6:	d007      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	4a10      	ldr	r2, [pc, #64]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006106:	e00c      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f9d4 	bl	80074bc <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006118:	e003      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006136:	4902      	ldr	r1, [pc, #8]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006138:	4313      	orrs	r3, r2
 800613a:	654b      	str	r3, [r1, #84]	; 0x54
 800613c:	e004      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d029      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006160:	d007      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006162:	e00f      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a60      	ldr	r2, [pc, #384]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006170:	e00b      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	2102      	movs	r1, #2
 8006178:	4618      	mov	r0, r3
 800617a:	f001 f8ed 	bl	8007358 <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006182:	e002      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	75fb      	strb	r3, [r7, #23]
      break;
 8006188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006190:	4b56      	ldr	r3, [pc, #344]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619c:	4953      	ldr	r1, [pc, #332]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061a2:	e001      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3324      	adds	r3, #36	; 0x24
 80061b8:	2102      	movs	r1, #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f97e 	bl	80074bc <RCCEx_PLL3_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d030      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061de:	d017      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80061e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e4:	d811      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80061e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ea:	d013      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f0:	d80b      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80061f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fa:	d106      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061fc:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a3a      	ldr	r2, [pc, #232]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006208:	e007      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	e004      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006210:	bf00      	nop
 8006212:	e002      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006214:	bf00      	nop
 8006216:	e000      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006220:	4b32      	ldr	r3, [pc, #200]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800622c:	492f      	ldr	r1, [pc, #188]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800622e:	4313      	orrs	r3, r2
 8006230:	654b      	str	r3, [r1, #84]	; 0x54
 8006232:	e001      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006244:	4b29      	ldr	r3, [pc, #164]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	4926      	ldr	r1, [pc, #152]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006252:	4313      	orrs	r3, r2
 8006254:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006262:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	491f      	ldr	r1, [pc, #124]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006270:	4313      	orrs	r3, r2
 8006272:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00d      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006280:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628a:	6113      	str	r3, [r2, #16]
 800628c:	4b17      	ldr	r3, [pc, #92]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006296:	4915      	ldr	r1, [pc, #84]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006298:	4313      	orrs	r3, r2
 800629a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da08      	bge.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062a4:	4b11      	ldr	r3, [pc, #68]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	490e      	ldr	r1, [pc, #56]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d0:	4906      	ldr	r1, [pc, #24]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80062d6:	7dbb      	ldrb	r3, [r7, #22]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	58024400 	.word	0x58024400

080062f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b090      	sub	sp, #64	; 0x40
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fe:	f040 8089 	bne.w	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006302:	4b95      	ldr	r3, [pc, #596]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	2b04      	cmp	r3, #4
 8006310:	d87d      	bhi.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800632d 	.word	0x0800632d
 800631c:	08006351 	.word	0x08006351
 8006320:	08006375 	.word	0x08006375
 8006324:	08006409 	.word	0x08006409
 8006328:	08006399 	.word	0x08006399

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632c:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006338:	d107      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800633a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f000 feb8 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006348:	e3ed      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800634e:	e3ea      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006350:	4b81      	ldr	r3, [pc, #516]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635c:	d107      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800635e:	f107 0318 	add.w	r3, r7, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fbfe 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800636c:	e3db      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006372:	e3d8      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006374:	4b78      	ldr	r3, [pc, #480]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800637c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006380:	d107      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006382:	f107 030c 	add.w	r3, r7, #12
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd40 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006390:	e3c9      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006396:	e3c6      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006398:	4b6f      	ldr	r3, [pc, #444]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800639a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063a2:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063b4:	4b68      	ldr	r3, [pc, #416]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	08db      	lsrs	r3, r3, #3
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	4a67      	ldr	r2, [pc, #412]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c6:	e01e      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063c8:	4b63      	ldr	r3, [pc, #396]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d4:	d106      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063dc:	d102      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063de:	4b60      	ldr	r3, [pc, #384]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e2:	e010      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063e4:	4b5c      	ldr	r3, [pc, #368]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f0:	d106      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f8:	d102      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063fa:	4b5a      	ldr	r3, [pc, #360]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fe:	e002      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006404:	e38f      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006406:	e38e      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006408:	4b57      	ldr	r3, [pc, #348]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800640c:	e38b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006412:	e388      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641a:	f040 80a7 	bne.w	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800641e:	4b4e      	ldr	r3, [pc, #312]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006426:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800642e:	d054      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006436:	f200 808b 	bhi.w	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006440:	f000 8083 	beq.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800644a:	f200 8081 	bhi.w	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006454:	d02f      	beq.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800645c:	d878      	bhi.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800646a:	d012      	beq.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800646c:	e070      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800646e:	4b3a      	ldr	r3, [pc, #232]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800647a:	d107      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800647c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fe17 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800648a:	e34c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006490:	e349      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006492:	4b31      	ldr	r3, [pc, #196]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800649a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649e:	d107      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064a0:	f107 0318 	add.w	r3, r7, #24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fb5d 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064ae:	e33a      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064b4:	e337      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064b6:	4b28      	ldr	r3, [pc, #160]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c2:	d107      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c4:	f107 030c 	add.w	r3, r7, #12
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fc9f 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064d2:	e328      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d8:	e325      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064da:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e4:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d10c      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	4a16      	ldr	r2, [pc, #88]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	e01e      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800650a:	4b13      	ldr	r3, [pc, #76]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d106      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651e:	d102      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006524:	e010      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006532:	d106      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653a:	d102      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006546:	e2ee      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006548:	e2ed      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800654e:	e2ea      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006554:	e2e7      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006556:	bf00      	nop
 8006558:	58024400 	.word	0x58024400
 800655c:	03d09000 	.word	0x03d09000
 8006560:	003d0900 	.word	0x003d0900
 8006564:	007a1200 	.word	0x007a1200
 8006568:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006572:	f040 809c 	bne.w	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006576:	4b9e      	ldr	r3, [pc, #632]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800657e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006586:	d054      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800658e:	f200 808b 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006598:	f000 8083 	beq.w	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065a2:	f200 8081 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ac:	d02f      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065b4:	d878      	bhi.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065c2:	d012      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80065c4:	e070      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065c6:	4b8a      	ldr	r3, [pc, #552]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fd6b 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065e2:	e2a0      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e8:	e29d      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ea:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f6:	d107      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f8:	f107 0318 	add.w	r3, r7, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fab1 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006606:	e28e      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660c:	e28b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800660e:	4b78      	ldr	r3, [pc, #480]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661a:	d107      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661c:	f107 030c 	add.w	r3, r7, #12
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fbf3 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800662a:	e27c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006630:	e279      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006632:	4b6f      	ldr	r3, [pc, #444]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800663a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663c:	4b6c      	ldr	r3, [pc, #432]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d10c      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800664e:	4b68      	ldr	r3, [pc, #416]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	4a66      	ldr	r2, [pc, #408]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006660:	e01e      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006662:	4b63      	ldr	r3, [pc, #396]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d106      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006676:	d102      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006678:	4b5f      	ldr	r3, [pc, #380]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667c:	e010      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667e:	4b5c      	ldr	r3, [pc, #368]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668a:	d106      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006692:	d102      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800669e:	e242      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80066a0:	e241      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066a2:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a6:	e23e      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ac:	e23b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	f040 80a6 	bne.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80066b8:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c8:	d054      	beq.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066d0:	f200 808b 	bhi.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066da:	f000 8083 	beq.w	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066e4:	f200 8081 	bhi.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	d02f      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f6:	d878      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	d012      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006706:	e070      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006708:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006714:	d107      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fcca 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006724:	e1ff      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672a:	e1fc      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006738:	d107      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0318 	add.w	r3, r7, #24
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa10 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006748:	e1ed      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800674e:	e1ea      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675c:	d107      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675e:	f107 030c 	add.w	r3, r7, #12
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fb52 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800676c:	e1db      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006772:	e1d8      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800677c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800677e:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b04      	cmp	r3, #4
 8006788:	d10c      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006790:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	08db      	lsrs	r3, r3, #3
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a2:	e01e      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067a4:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d106      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b8:	d102      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067be:	e010      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067cc:	d106      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d4:	d102      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067da:	e002      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80067e0:	e1a1      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80067e2:	e1a0      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e8:	e19d      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ee:	e19a      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80067f0:	58024400 	.word	0x58024400
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	003d0900 	.word	0x003d0900
 80067fc:	007a1200 	.word	0x007a1200
 8006800:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800680a:	d173      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800680c:	4b9a      	ldr	r3, [pc, #616]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800681c:	d02f      	beq.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006824:	d863      	bhi.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d012      	beq.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006834:	e05b      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006836:	4b90      	ldr	r3, [pc, #576]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800683e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006842:	d107      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006844:	f107 0318 	add.w	r3, r7, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f98b 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006852:	e168      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006858:	e165      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800685a:	4b87      	ldr	r3, [pc, #540]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006866:	d107      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	4618      	mov	r0, r3
 800686e:	f000 facd 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006876:	e156      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800687c:	e153      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800687e:	4b7e      	ldr	r3, [pc, #504]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006886:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006888:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d10c      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800689a:	4b77      	ldr	r3, [pc, #476]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	4a75      	ldr	r2, [pc, #468]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ac:	e01e      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ae:	4b72      	ldr	r3, [pc, #456]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ba:	d106      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c2:	d102      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068c4:	4b6e      	ldr	r3, [pc, #440]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	e010      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ca:	4b6b      	ldr	r3, [pc, #428]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d6:	d106      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068de:	d102      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068e0:	4b68      	ldr	r3, [pc, #416]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068ea:	e11c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80068ec:	e11b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f2:	e118      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fa:	d133      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80068fc:	4b5e      	ldr	r3, [pc, #376]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006912:	d012      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006914:	e023      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006916:	4b58      	ldr	r3, [pc, #352]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006922:	d107      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fbc3 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006932:	e0f8      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006938:	e0f5      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800693a:	4b4f      	ldr	r3, [pc, #316]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006946:	d107      	bne.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006948:	f107 0318 	add.w	r3, r7, #24
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f909 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006956:	e0e6      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800695c:	e0e3      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006962:	e0e0      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800696a:	f040 808d 	bne.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800696e:	4b42      	ldr	r3, [pc, #264]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800697e:	d06b      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006986:	d874      	bhi.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698e:	d056      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d86c      	bhi.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800699e:	d03b      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069a6:	d864      	bhi.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ae:	d021      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b6:	d85c      	bhi.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069c4:	d004      	beq.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80069c6:	e054      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069c8:	f000 f8b6 	bl	8006b38 <HAL_RCCEx_GetD3PCLK1Freq>
 80069cc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80069ce:	e0aa      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d0:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069dc:	d107      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069de:	f107 0318 	add.w	r3, r7, #24
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f8be 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069ec:	e09b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f2:	e098      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069f4:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a00:	d107      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fa00 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a10:	e089      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a16:	e086      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d109      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a24:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a36:	e076      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3c:	e073      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a50:	e069      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a56:	e066      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a64:	d102      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a6a:	e05c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a70:	e059      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a76:	e056      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	003d0900 	.word	0x003d0900
 8006a84:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	d148      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d02a      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa8:	d838      	bhi.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006ab8:	e030      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac6:	d102      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006ac8:	4b1a      	ldr	r3, [pc, #104]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006acc:	e02b      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad2:	e028      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ad4:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fae4 	bl	80070b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006af0:	e019      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af6:	e016      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af8:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b04:	d107      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f82a 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b14:	e007      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b20:	e001      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3740      	adds	r7, #64	; 0x40
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400
 8006b34:	007a1200 	.word	0x007a1200

08006b38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b3c:	f7fe fc40 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	091b      	lsrs	r3, r3, #4
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	4904      	ldr	r1, [pc, #16]	; (8006b60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b4e:	5ccb      	ldrb	r3, [r1, r3]
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	0801359c 	.word	0x0801359c

08006b64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b6c:	4ba1      	ldr	r3, [pc, #644]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006b76:	4b9f      	ldr	r3, [pc, #636]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	0b1b      	lsrs	r3, r3, #12
 8006b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b82:	4b9c      	ldr	r3, [pc, #624]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006b8e:	4b99      	ldr	r3, [pc, #612]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8111 	beq.w	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f000 8083 	beq.w	8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	f200 80a1 	bhi.w	8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d056      	beq.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bce:	e099      	b.n	8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd0:	4b88      	ldr	r3, [pc, #544]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d02d      	beq.n	8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bdc:	4b85      	ldr	r3, [pc, #532]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	08db      	lsrs	r3, r3, #3
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	4a84      	ldr	r2, [pc, #528]	; (8006df8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b7b      	ldr	r3, [pc, #492]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c36:	e087      	b.n	8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4a:	4b6a      	ldr	r3, [pc, #424]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c7a:	e065      	b.n	8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8e:	4b59      	ldr	r3, [pc, #356]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cbe:	e043      	b.n	8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd2:	4b48      	ldr	r3, [pc, #288]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d02:	e021      	b.n	8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d16:	4b37      	ldr	r3, [pc, #220]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006d48:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	0a5b      	lsrs	r3, r3, #9
 8006d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6e:	ee17 2a90 	vmov	r2, s15
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006d76:	4b1f      	ldr	r3, [pc, #124]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	0c1b      	lsrs	r3, r3, #16
 8006d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9c:	ee17 2a90 	vmov	r2, s15
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	0e1b      	lsrs	r3, r3, #24
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dca:	ee17 2a90 	vmov	r2, s15
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dd2:	e008      	b.n	8006de6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
}
 8006de6:	bf00      	nop
 8006de8:	3724      	adds	r7, #36	; 0x24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	58024400 	.word	0x58024400
 8006df8:	03d09000 	.word	0x03d09000
 8006dfc:	46000000 	.word	0x46000000
 8006e00:	4c742400 	.word	0x4c742400
 8006e04:	4a742400 	.word	0x4a742400
 8006e08:	4af42400 	.word	0x4af42400

08006e0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e14:	4ba1      	ldr	r3, [pc, #644]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e1e:	4b9f      	ldr	r3, [pc, #636]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	0d1b      	lsrs	r3, r3, #20
 8006e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e2a:	4b9c      	ldr	r3, [pc, #624]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006e36:	4b99      	ldr	r3, [pc, #612]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	08db      	lsrs	r3, r3, #3
 8006e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8111 	beq.w	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	f000 8083 	beq.w	8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f200 80a1 	bhi.w	8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d056      	beq.n	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e76:	e099      	b.n	8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e78:	4b88      	ldr	r3, [pc, #544]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02d      	beq.n	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e84:	4b85      	ldr	r3, [pc, #532]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	08db      	lsrs	r3, r3, #3
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	4a84      	ldr	r2, [pc, #528]	; (80070a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
 8006e94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eae:	4b7b      	ldr	r3, [pc, #492]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ede:	e087      	b.n	8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b6a      	ldr	r3, [pc, #424]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f06:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f22:	e065      	b.n	8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f66:	e043      	b.n	8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7a:	4b48      	ldr	r3, [pc, #288]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006faa:	e021      	b.n	8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fbe:	4b37      	ldr	r3, [pc, #220]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ff0:	4b2a      	ldr	r3, [pc, #168]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	0a5b      	lsrs	r3, r3, #9
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800700a:	edd7 6a07 	vldr	s13, [r7, #28]
 800700e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007016:	ee17 2a90 	vmov	r2, s15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800701e:	4b1f      	ldr	r3, [pc, #124]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007038:	edd7 6a07 	vldr	s13, [r7, #28]
 800703c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007044:	ee17 2a90 	vmov	r2, s15
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	0e1b      	lsrs	r3, r3, #24
 8007052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007066:	edd7 6a07 	vldr	s13, [r7, #28]
 800706a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007072:	ee17 2a90 	vmov	r2, s15
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800707a:	e008      	b.n	800708e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	609a      	str	r2, [r3, #8]
}
 800708e:	bf00      	nop
 8007090:	3724      	adds	r7, #36	; 0x24
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	46000000 	.word	0x46000000
 80070a8:	4c742400 	.word	0x4c742400
 80070ac:	4a742400 	.word	0x4a742400
 80070b0:	4af42400 	.word	0x4af42400

080070b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	; 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070bc:	4ba0      	ldr	r3, [pc, #640]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80070c6:	4b9e      	ldr	r3, [pc, #632]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070d2:	4b9b      	ldr	r3, [pc, #620]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070dc:	4b98      	ldr	r3, [pc, #608]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e0:	08db      	lsrs	r3, r3, #3
 80070e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8111 	beq.w	8007322 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b02      	cmp	r3, #2
 8007104:	f000 8083 	beq.w	800720e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b02      	cmp	r3, #2
 800710c:	f200 80a1 	bhi.w	8007252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d056      	beq.n	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800711c:	e099      	b.n	8007252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800711e:	4b88      	ldr	r3, [pc, #544]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02d      	beq.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800712a:	4b85      	ldr	r3, [pc, #532]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	4a83      	ldr	r2, [pc, #524]	; (8007344 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007136:	fa22 f303 	lsr.w	r3, r2, r3
 800713a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007154:	4b7a      	ldr	r3, [pc, #488]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	ed97 6a03 	vldr	s12, [r7, #12]
 8007168:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800716c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007180:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007184:	e087      	b.n	8007296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007190:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800734c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007198:	4b69      	ldr	r3, [pc, #420]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c8:	e065      	b.n	8007296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071dc:	4b58      	ldr	r3, [pc, #352]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720c:	e043      	b.n	8007296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007218:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800721c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007220:	4b47      	ldr	r3, [pc, #284]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007230:	ed97 6a03 	vldr	s12, [r7, #12]
 8007234:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007250:	e021      	b.n	8007296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800734c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007264:	4b36      	ldr	r3, [pc, #216]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007274:	ed97 6a03 	vldr	s12, [r7, #12]
 8007278:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800727c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007294:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007296:	4b2a      	ldr	r3, [pc, #168]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	0a5b      	lsrs	r3, r3, #9
 800729c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072bc:	ee17 2a90 	vmov	r2, s15
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072de:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ea:	ee17 2a90 	vmov	r2, s15
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	0e1b      	lsrs	r3, r3, #24
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800730c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007318:	ee17 2a90 	vmov	r2, s15
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007320:	e008      	b.n	8007334 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	609a      	str	r2, [r3, #8]
}
 8007334:	bf00      	nop
 8007336:	3724      	adds	r7, #36	; 0x24
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	58024400 	.word	0x58024400
 8007344:	03d09000 	.word	0x03d09000
 8007348:	46000000 	.word	0x46000000
 800734c:	4c742400 	.word	0x4c742400
 8007350:	4a742400 	.word	0x4a742400
 8007354:	4af42400 	.word	0x4af42400

08007358 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007366:	4b53      	ldr	r3, [pc, #332]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b03      	cmp	r3, #3
 8007370:	d101      	bne.n	8007376 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e099      	b.n	80074aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007376:	4b4f      	ldr	r3, [pc, #316]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a4e      	ldr	r2, [pc, #312]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800737c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007382:	f7fa fa8d 	bl	80018a0 <HAL_GetTick>
 8007386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007388:	e008      	b.n	800739c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800738a:	f7fa fa89 	bl	80018a0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e086      	b.n	80074aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800739c:	4b45      	ldr	r3, [pc, #276]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f0      	bne.n	800738a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073a8:	4b42      	ldr	r3, [pc, #264]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	493f      	ldr	r1, [pc, #252]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	628b      	str	r3, [r1, #40]	; 0x28
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	025b      	lsls	r3, r3, #9
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	041b      	lsls	r3, r3, #16
 80073da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	061b      	lsls	r3, r3, #24
 80073e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073ec:	4931      	ldr	r1, [pc, #196]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073f2:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	492d      	ldr	r1, [pc, #180]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f023 0220 	bic.w	r2, r3, #32
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	4928      	ldr	r1, [pc, #160]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800741c:	f023 0310 	bic.w	r3, r3, #16
 8007420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007422:	4b24      	ldr	r3, [pc, #144]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007426:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <RCCEx_PLL2_Config+0x160>)
 8007428:	4013      	ands	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	69d2      	ldr	r2, [r2, #28]
 800742e:	00d2      	lsls	r2, r2, #3
 8007430:	4920      	ldr	r1, [pc, #128]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007432:	4313      	orrs	r3, r2
 8007434:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007436:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	4a1e      	ldr	r2, [pc, #120]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800743c:	f043 0310 	orr.w	r3, r3, #16
 8007440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a19      	ldr	r2, [pc, #100]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800744e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007454:	e00f      	b.n	8007476 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800745c:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007468:	e005      	b.n	8007476 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800746a:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	4a11      	ldr	r2, [pc, #68]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a0e      	ldr	r2, [pc, #56]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800747c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007482:	f7fa fa0d 	bl	80018a0 <HAL_GetTick>
 8007486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007488:	e008      	b.n	800749c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800748a:	f7fa fa09 	bl	80018a0 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e006      	b.n	80074aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <RCCEx_PLL2_Config+0x15c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0f0      	beq.n	800748a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	58024400 	.word	0x58024400
 80074b8:	ffff0007 	.word	0xffff0007

080074bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ca:	4b53      	ldr	r3, [pc, #332]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d101      	bne.n	80074da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e099      	b.n	800760e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074da:	4b4f      	ldr	r3, [pc, #316]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a4e      	ldr	r2, [pc, #312]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80074e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e6:	f7fa f9db 	bl	80018a0 <HAL_GetTick>
 80074ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074ec:	e008      	b.n	8007500 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074ee:	f7fa f9d7 	bl	80018a0 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e086      	b.n	800760e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007500:	4b45      	ldr	r3, [pc, #276]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800750c:	4b42      	ldr	r3, [pc, #264]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	051b      	lsls	r3, r3, #20
 800751a:	493f      	ldr	r1, [pc, #252]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	628b      	str	r3, [r1, #40]	; 0x28
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	3b01      	subs	r3, #1
 8007526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	3b01      	subs	r3, #1
 8007530:	025b      	lsls	r3, r3, #9
 8007532:	b29b      	uxth	r3, r3
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	3b01      	subs	r3, #1
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	3b01      	subs	r3, #1
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007550:	4931      	ldr	r1, [pc, #196]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007556:	4b30      	ldr	r3, [pc, #192]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	492d      	ldr	r1, [pc, #180]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007564:	4313      	orrs	r3, r2
 8007566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007568:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	4928      	ldr	r1, [pc, #160]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800757a:	4b27      	ldr	r3, [pc, #156]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a26      	ldr	r2, [pc, #152]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758a:	4b24      	ldr	r3, [pc, #144]	; (800761c <RCCEx_PLL3_Config+0x160>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	69d2      	ldr	r2, [r2, #28]
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4920      	ldr	r1, [pc, #128]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800759a:	4b1f      	ldr	r3, [pc, #124]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d106      	bne.n	80075ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075b8:	e00f      	b.n	80075da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075c0:	4b15      	ldr	r3, [pc, #84]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075cc:	e005      	b.n	80075da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	4a11      	ldr	r2, [pc, #68]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a0e      	ldr	r2, [pc, #56]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e6:	f7fa f95b 	bl	80018a0 <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075ec:	e008      	b.n	8007600 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075ee:	f7fa f957 	bl	80018a0 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e006      	b.n	800760e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <RCCEx_PLL3_Config+0x15c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	58024400 	.word	0x58024400
 800761c:	ffff0007 	.word	0xffff0007

08007620 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e075      	b.n	800771e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d105      	bne.n	800764a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7f9 fdcf 	bl	80011e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2204      	movs	r2, #4
 800764e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f868 	bl	8007728 <HAL_SD_InitCard>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e05d      	b.n	800771e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fda7 	bl	80081bc <HAL_SD_GetCardStatus>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e052      	b.n	800771e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007678:	7e3b      	ldrb	r3, [r7, #24]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800767e:	7e7b      	ldrb	r3, [r7, #25]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	2b01      	cmp	r3, #1
 800768a:	d10a      	bne.n	80076a2 <HAL_SD_Init+0x82>
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <HAL_SD_Init+0x78>
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800769e:	659a      	str	r2, [r3, #88]	; 0x58
 80076a0:	e00b      	b.n	80076ba <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d104      	bne.n	80076b4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b0:	659a      	str	r2, [r3, #88]	; 0x58
 80076b2:	e002      	b.n	80076ba <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fe65 	bl	8008390 <HAL_SD_ConfigWideBusOperation>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e026      	b.n	800771e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80076d0:	f7fa f8e6 	bl	80018a0 <HAL_GetTick>
 80076d4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076d6:	e011      	b.n	80076fc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076d8:	f7fa f8e2 	bl	80018a0 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d109      	bne.n	80076fc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e010      	b.n	800771e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 ff59 	bl	80085b4 <HAL_SD_GetCardState>
 8007702:	4603      	mov	r3, r0
 8007704:	2b04      	cmp	r3, #4
 8007706:	d1e7      	bne.n	80076d8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b08d      	sub	sp, #52	; 0x34
 800772c:	af02      	add	r7, sp, #8
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007744:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007748:	f7fe fdd2 	bl	80062f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007762:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e06a      	b.n	800783e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	4a36      	ldr	r2, [pc, #216]	; (8007848 <HAL_SD_InitCard+0x120>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	091b      	lsrs	r3, r3, #4
 8007774:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681c      	ldr	r4, [r3, #0]
 800777a:	466a      	mov	r2, sp
 800777c:	f107 0318 	add.w	r3, r7, #24
 8007780:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007784:	e882 0003 	stmia.w	r2, {r0, r1}
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800778e:	4620      	mov	r0, r4
 8007790:	f003 fe1c 	bl	800b3cc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f003 fe5f 	bl	800b45c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80077aa:	4a28      	ldr	r2, [pc, #160]	; (800784c <HAL_SD_InitCard+0x124>)
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b2:	3301      	adds	r3, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa f87f 	bl	80018b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 ffe8 	bl	8008790 <SD_PowerON>
 80077c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e02e      	b.n	800783e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 ff07 	bl	80085f4 <SD_InitCard>
 80077e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e01b      	b.n	800783e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800780e:	4618      	mov	r0, r3
 8007810:	f003 feba 	bl	800b588 <SDMMC_CmdBlockLength>
 8007814:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <HAL_SD_InitCard+0x128>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	372c      	adds	r7, #44	; 0x2c
 8007842:	46bd      	mov	sp, r7
 8007844:	bd90      	pop	{r4, r7, pc}
 8007846:	bf00      	nop
 8007848:	014f8b59 	.word	0x014f8b59
 800784c:	00012110 	.word	0x00012110
 8007850:	1fe00fff 	.word	0x1fe00fff

08007854 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e08d      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	f040 8086 	bne.w	8007996 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	441a      	add	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	429a      	cmp	r2, r3
 800789c:	d907      	bls.n	80078ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e074      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2203      	movs	r2, #3
 80078b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	025a      	lsls	r2, r3, #9
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	025b      	lsls	r3, r3, #9
 80078e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80078e6:	2390      	movs	r3, #144	; 0x90
 80078e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078ea:	2302      	movs	r3, #2
 80078ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f107 0210 	add.w	r2, r7, #16
 80078fe:	4611      	mov	r1, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f003 fe15 	bl	800b530 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d90a      	bls.n	8007942 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2282      	movs	r2, #130	; 0x82
 8007930:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007938:	4618      	mov	r0, r3
 800793a:	f003 fe6b 	bl	800b614 <SDMMC_CmdReadMultiBlock>
 800793e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007940:	e009      	b.n	8007956 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2281      	movs	r2, #129	; 0x81
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794e:	4618      	mov	r0, r3
 8007950:	f003 fe3d 	bl	800b5ce <SDMMC_CmdReadSingleBlock>
 8007954:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d012      	beq.n	8007982 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	431a      	orrs	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e00a      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007990:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	e000      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007996:	2302      	movs	r3, #2
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	1fe00fff 	.word	0x1fe00fff

080079a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08c      	sub	sp, #48	; 0x30
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e08d      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	f040 8086 	bne.w	8007ae6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d907      	bls.n	80079fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e074      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2203      	movs	r2, #3
 8007a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	025a      	lsls	r2, r3, #9
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d002      	beq.n	8007a2a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	025b      	lsls	r3, r3, #9
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	025b      	lsls	r3, r3, #9
 8007a34:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a36:	2390      	movs	r3, #144	; 0x90
 8007a38:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f107 0210 	add.w	r2, r7, #16
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f003 fd6d 	bl	800b530 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a64:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2201      	movs	r2, #1
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d90a      	bls.n	8007a92 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	22a0      	movs	r2, #160	; 0xa0
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f003 fe09 	bl	800b6a0 <SDMMC_CmdWriteMultiBlock>
 8007a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a90:	e009      	b.n	8007aa6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2290      	movs	r2, #144	; 0x90
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f003 fddb 	bl	800b65a <SDMMC_CmdWriteSingleBlock>
 8007aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d012      	beq.n	8007ad2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e00a      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3730      	adds	r7, #48	; 0x30
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	1fe00fff 	.word	0x1fe00fff

08007af4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d008      	beq.n	8007b22 <HAL_SD_IRQHandler+0x2e>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f924 	bl	8008d68 <SD_Read_IT>
 8007b20:	e19a      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80ac 	beq.w	8007c8a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b9d      	ldr	r3, [pc, #628]	; (8007dbc <HAL_SD_IRQHandler+0x2c8>)
 8007b48:	400b      	ands	r3, r1
 8007b4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007b5a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b6a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d038      	beq.n	8007be8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <HAL_SD_IRQHandler+0x96>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d011      	beq.n	8007bae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f003 fdaa 	bl	800b6e8 <SDMMC_CmdStopTransfer>
 8007b94:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f959 	bl	8007e60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a83      	ldr	r2, [pc, #524]	; (8007dc0 <HAL_SD_IRQHandler+0x2cc>)
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <HAL_SD_IRQHandler+0xe4>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f004 fa5d 	bl	800c098 <HAL_SD_RxCpltCallback>
 8007bde:	e13b      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f004 fa4f 	bl	800c084 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007be6:	e137      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 8132 	beq.w	8007e58 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2200      	movs	r2, #0
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <HAL_SD_IRQHandler+0x12c>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d011      	beq.n	8007c44 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 fd5f 	bl	800b6e8 <SDMMC_CmdStopTransfer>
 8007c2a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f90e 	bl	8007e60 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <HAL_SD_IRQHandler+0x172>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f004 fa0c 	bl	800c084 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <HAL_SD_IRQHandler+0x18e>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80eb 	beq.w	8007e58 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f004 fa08 	bl	800c098 <HAL_SD_RxCpltCallback>
}
 8007c88:	e0e6      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_SD_IRQHandler+0x1b6>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f8a6 	bl	8008df4 <SD_Write_IT>
 8007ca8:	e0d6      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80a2 	beq.w	8007dfe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ccc:	f043 0202 	orr.w	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	f043 0208 	orr.w	r2, r3, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	f043 0210 	orr.w	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <HAL_SD_IRQHandler+0x2cc>)
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d38:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d48:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d68:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f003 fcba 	bl	800b6e8 <SDMMC_CmdStopTransfer>
 8007d74:	4602      	mov	r2, r0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00f      	beq.n	8007dc4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f854 	bl	8007e60 <HAL_SD_ErrorCallback>
}
 8007db8:	e04e      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
 8007dba:	bf00      	nop
 8007dbc:	ffff3ec5 	.word	0xffff3ec5
 8007dc0:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d044      	beq.n	8007e58 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d040      	beq.n	8007e58 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007de4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f832 	bl	8007e60 <HAL_SD_ErrorCallback>
}
 8007dfc:	e02c      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d025      	beq.n	8007e58 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10c      	bne.n	8007e3e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f848 	bl	8008ec4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007e34:	e010      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f830 	bl	8008e9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007e3c:	e00c      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f831 	bl	8008eb0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007e4e:	e003      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f819 	bl	8008e88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007e56:	e7ff      	b.n	8007e58 <HAL_SD_IRQHandler+0x364>
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	0f9b      	lsrs	r3, r3, #30
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8e:	0e9b      	lsrs	r3, r3, #26
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	0d1b      	lsrs	r3, r3, #20
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef2:	0bdb      	lsrs	r3, r3, #15
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f04:	0b9b      	lsrs	r3, r3, #14
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f16:	0b5b      	lsrs	r3, r3, #13
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f28:	0b1b      	lsrs	r3, r3, #12
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d163      	bne.n	800800c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f48:	009a      	lsls	r2, r3, #2
 8007f4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f4e:	4013      	ands	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007f54:	0f92      	lsrs	r2, r2, #30
 8007f56:	431a      	orrs	r2, r3
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f60:	0edb      	lsrs	r3, r3, #27
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f72:	0e1b      	lsrs	r3, r3, #24
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f84:	0d5b      	lsrs	r3, r3, #21
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f96:	0c9b      	lsrs	r3, r3, #18
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	0bdb      	lsrs	r3, r3, #15
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	7e1b      	ldrb	r3, [r3, #24]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	3302      	adds	r3, #2
 8007fcc:	2201      	movs	r2, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fd6:	fb02 f203 	mul.w	r2, r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	7a1b      	ldrb	r3, [r3, #8]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	2201      	movs	r2, #1
 8007fea:	409a      	lsls	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ff8:	0a52      	lsrs	r2, r2, #9
 8007ffa:	fb02 f203 	mul.w	r2, r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
 800800a:	e031      	b.n	8008070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	2b01      	cmp	r3, #1
 8008012:	d11d      	bne.n	8008050 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	431a      	orrs	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	3301      	adds	r3, #1
 8008030:	029a      	lsls	r2, r3, #10
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008044:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	655a      	str	r2, [r3, #84]	; 0x54
 800804e:	e00f      	b.n	8008070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a58      	ldr	r2, [pc, #352]	; (80081b8 <HAL_SD_GetCardCSD+0x344>)
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e09d      	b.n	80081ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008074:	0b9b      	lsrs	r3, r3, #14
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	09db      	lsrs	r3, r3, #7
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080a8:	0fdb      	lsrs	r3, r3, #31
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080b4:	0f5b      	lsrs	r3, r3, #29
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c6:	0e9b      	lsrs	r3, r3, #26
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d8:	0d9b      	lsrs	r3, r3, #22
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ea:	0d5b      	lsrs	r3, r3, #21
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800811a:	0bdb      	lsrs	r3, r3, #15
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800812e:	0b9b      	lsrs	r3, r3, #14
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008142:	0b5b      	lsrs	r3, r3, #13
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008156:	0b1b      	lsrs	r3, r3, #12
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816a:	0a9b      	lsrs	r3, r3, #10
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819a:	b2da      	uxtb	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	1fe00fff 	.word	0x1fe00fff

080081bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b094      	sub	sp, #80	; 0x50
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d101      	bne.n	80081dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0a7      	b.n	800832c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80081dc:	f107 0308 	add.w	r3, r7, #8
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fb62 	bl	80088ac <SD_SendSDStatus>
 80081e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80081ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d011      	beq.n	8008214 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a4f      	ldr	r2, [pc, #316]	; (8008334 <HAL_SD_GetCardStatus+0x178>)
 80081f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008212:	e070      	b.n	80082f6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	b29b      	uxth	r3, r3
 800823a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800823e:	b29a      	uxth	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	0e1b      	lsrs	r3, r3, #24
 8008244:	b29b      	uxth	r3, r3
 8008246:	4313      	orrs	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	061a      	lsls	r2, r3, #24
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800825a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008264:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0e1b      	lsrs	r3, r3, #24
 800826a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b2da      	uxtb	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	0d1b      	lsrs	r3, r3, #20
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	0c1b      	lsrs	r3, r3, #16
 8008296:	b29b      	uxth	r3, r3
 8008298:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800829c:	b29a      	uxth	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	4313      	orrs	r3, r2
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	0a9b      	lsrs	r3, r3, #10
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	091b      	lsrs	r3, r3, #4
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	0e1b      	lsrs	r3, r3, #24
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082fe:	4618      	mov	r0, r3
 8008300:	f003 f942 	bl	800b588 <SDMMC_CmdBlockLength>
 8008304:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00d      	beq.n	8008328 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a08      	ldr	r2, [pc, #32]	; (8008334 <HAL_SD_GetCardStatus+0x178>)
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008318:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800832c:	4618      	mov	r0, r3
 800832e:	3750      	adds	r7, #80	; 0x50
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	1fe00fff 	.word	0x1fe00fff

08008338 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b08d      	sub	sp, #52	; 0x34
 8008394:	af02      	add	r7, sp, #8
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2203      	movs	r2, #3
 80083a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d02e      	beq.n	8008412 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ba:	d106      	bne.n	80083ca <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	635a      	str	r2, [r3, #52]	; 0x34
 80083c8:	e029      	b.n	800841e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d0:	d10a      	bne.n	80083e8 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb62 	bl	8008a9c <SD_WideBus_Enable>
 80083d8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	635a      	str	r2, [r3, #52]	; 0x34
 80083e6:	e01a      	b.n	800841e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb9f 	bl	8008b32 <SD_WideBus_Disable>
 80083f4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	635a      	str	r2, [r3, #52]	; 0x34
 8008402:	e00c      	b.n	800841e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	635a      	str	r2, [r3, #52]	; 0x34
 8008410:	e005      	b.n	800841e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a5e      	ldr	r2, [pc, #376]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800842c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008434:	e094      	b.n	8008560 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008436:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800843a:	f7fd ff59 	bl	80062f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800843e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8083 	beq.w	800854e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	4950      	ldr	r1, [pc, #320]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008466:	fba1 1303 	umull	r1, r3, r1, r3
 800846a:	0e1b      	lsrs	r3, r3, #24
 800846c:	429a      	cmp	r2, r3
 800846e:	d303      	bcc.n	8008478 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	e05a      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008480:	d103      	bne.n	800848a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	e051      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008492:	d126      	bne.n	80084e2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10e      	bne.n	80084ba <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	4a43      	ldr	r2, [pc, #268]	; (80085ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d906      	bls.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	4a40      	ldr	r2, [pc, #256]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084a8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ac:	0e5b      	lsrs	r3, r3, #25
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e03d      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	61bb      	str	r3, [r7, #24]
 80084b8:	e039      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	6a3a      	ldr	r2, [r7, #32]
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	4a39      	ldr	r2, [pc, #228]	; (80085ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d906      	bls.n	80084da <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	4a36      	ldr	r2, [pc, #216]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084d0:	fba2 2303 	umull	r2, r3, r2, r3
 80084d4:	0e5b      	lsrs	r3, r3, #25
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e029      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	e025      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10e      	bne.n	8008508 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	4a30      	ldr	r2, [pc, #192]	; (80085b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d906      	bls.n	8008500 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	0e1b      	lsrs	r3, r3, #24
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	e016      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	61bb      	str	r3, [r7, #24]
 8008506:	e012      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	6a3a      	ldr	r2, [r7, #32]
 8008510:	fbb2 f3f3 	udiv	r3, r2, r3
 8008514:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d906      	bls.n	8008528 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800851e:	fba2 2303 	umull	r2, r3, r2, r3
 8008522:	0e1b      	lsrs	r3, r3, #24
 8008524:	61bb      	str	r3, [r7, #24]
 8008526:	e002      	b.n	800852e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681c      	ldr	r4, [r3, #0]
 8008532:	466a      	mov	r2, sp
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	e893 0003 	ldmia.w	r3, {r0, r1}
 800853c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008546:	4620      	mov	r0, r4
 8008548:	f002 ff40 	bl	800b3cc <SDMMC_Init>
 800854c:	e008      	b.n	8008560 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008568:	4618      	mov	r0, r3
 800856a:	f003 f80d 	bl	800b588 <SDMMC_CmdBlockLength>
 800856e:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00c      	beq.n	8008590 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800859c:	4618      	mov	r0, r3
 800859e:	372c      	adds	r7, #44	; 0x2c
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd90      	pop	{r4, r7, pc}
 80085a4:	1fe00fff 	.word	0x1fe00fff
 80085a8:	55e63b89 	.word	0x55e63b89
 80085ac:	02faf080 	.word	0x02faf080
 80085b0:	017d7840 	.word	0x017d7840

080085b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085c0:	f107 030c 	add.w	r3, r7, #12
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa40 	bl	8008a4c <SD_SendStatus>
 80085cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085ea:	693b      	ldr	r3, [r7, #16]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b090      	sub	sp, #64	; 0x40
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008600:	f7f9 f94e 	bl	80018a0 <HAL_GetTick>
 8008604:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f002 ff37 	bl	800b47e <SDMMC_GetPowerState>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d102      	bne.n	800861c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008616:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800861a:	e0b5      	b.n	8008788 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	2b03      	cmp	r3, #3
 8008622:	d02e      	beq.n	8008682 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f003 f982 	bl	800b932 <SDMMC_CmdSendCID>
 800862e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <SD_InitCard+0x46>
    {
      return errorstate;
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	e0a6      	b.n	8008788 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f002 ff62 	bl	800b50a <SDMMC_GetResponse>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2104      	movs	r1, #4
 8008652:	4618      	mov	r0, r3
 8008654:	f002 ff59 	bl	800b50a <SDMMC_GetResponse>
 8008658:	4602      	mov	r2, r0
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2108      	movs	r1, #8
 8008664:	4618      	mov	r0, r3
 8008666:	f002 ff50 	bl	800b50a <SDMMC_GetResponse>
 800866a:	4602      	mov	r2, r0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	210c      	movs	r1, #12
 8008676:	4618      	mov	r0, r3
 8008678:	f002 ff47 	bl	800b50a <SDMMC_GetResponse>
 800867c:	4602      	mov	r2, r0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	2b03      	cmp	r3, #3
 8008688:	d01d      	beq.n	80086c6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800868a:	e019      	b.n	80086c0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f107 020a 	add.w	r2, r7, #10
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f003 f98a 	bl	800b9b0 <SDMMC_CmdSetRelAdd>
 800869c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	e06f      	b.n	8008788 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80086a8:	f7f9 f8fa 	bl	80018a0 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d902      	bls.n	80086c0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80086ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086be:	e063      	b.n	8008788 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80086c0:	897b      	ldrh	r3, [r7, #10]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0e2      	beq.n	800868c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d036      	beq.n	800873c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80086ce:	897b      	ldrh	r3, [r7, #10]
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f003 f944 	bl	800b970 <SDMMC_CmdSendCSD>
 80086e8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <SD_InitCard+0x100>
    {
      return errorstate;
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	e049      	b.n	8008788 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f002 ff05 	bl	800b50a <SDMMC_GetResponse>
 8008700:	4602      	mov	r2, r0
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2104      	movs	r1, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f002 fefc 	bl	800b50a <SDMMC_GetResponse>
 8008712:	4602      	mov	r2, r0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2108      	movs	r1, #8
 800871e:	4618      	mov	r0, r3
 8008720:	f002 fef3 	bl	800b50a <SDMMC_GetResponse>
 8008724:	4602      	mov	r2, r0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	210c      	movs	r1, #12
 8008730:	4618      	mov	r0, r3
 8008732:	f002 feea 	bl	800b50a <SDMMC_GetResponse>
 8008736:	4602      	mov	r2, r0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2104      	movs	r1, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f002 fee1 	bl	800b50a <SDMMC_GetResponse>
 8008748:	4603      	mov	r3, r0
 800874a:	0d1a      	lsrs	r2, r3, #20
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008750:	f107 030c 	add.w	r3, r7, #12
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff fb8c 	bl	8007e74 <HAL_SD_GetCardCSD>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008766:	e00f      	b.n	8008788 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	041b      	lsls	r3, r3, #16
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f002 fff3 	bl	800b760 <SDMMC_CmdSelDesel>
 800877a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <SD_InitCard+0x192>
  {
    return errorstate;
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	e000      	b.n	8008788 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3740      	adds	r7, #64	; 0x40
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f002 fffc 	bl	800b7a6 <SDMMC_CmdGoIdleState>
 80087ae:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <SD_PowerON+0x2a>
  {
    return errorstate;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	e072      	b.n	80088a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f003 f80f 	bl	800b7e2 <SDMMC_CmdOperCond>
 80087c4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087cc:	d10d      	bne.n	80087ea <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f002 ffe4 	bl	800b7a6 <SDMMC_CmdGoIdleState>
 80087de:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <SD_PowerON+0x60>
    {
      return errorstate;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	e05a      	b.n	80088a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d137      	bne.n	8008868 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f003 f80f 	bl	800b822 <SDMMC_CmdAppCommand>
 8008804:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d02d      	beq.n	8008868 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800880c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008810:	e046      	b.n	80088a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f003 f802 	bl	800b822 <SDMMC_CmdAppCommand>
 800881e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	e03a      	b.n	80088a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	491e      	ldr	r1, [pc, #120]	; (80088a8 <SD_PowerON+0x118>)
 8008830:	4618      	mov	r0, r3
 8008832:	f003 f819 	bl	800b868 <SDMMC_CmdAppOperCommand>
 8008836:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800883e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008842:	e02d      	b.n	80088a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f002 fe5d 	bl	800b50a <SDMMC_GetResponse>
 8008850:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	0fdb      	lsrs	r3, r3, #31
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <SD_PowerON+0xce>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <SD_PowerON+0xd0>
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]

    count++;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	3301      	adds	r3, #1
 8008866:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800886e:	4293      	cmp	r3, r2
 8008870:	d802      	bhi.n	8008878 <SD_PowerON+0xe8>
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0cc      	beq.n	8008812 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800887e:	4293      	cmp	r3, r2
 8008880:	d902      	bls.n	8008888 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008886:	e00b      	b.n	80088a0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	c1100000 	.word	0xc1100000

080088ac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08c      	sub	sp, #48	; 0x30
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088b6:	f7f8 fff3 	bl	80018a0 <HAL_GetTick>
 80088ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 fe1f 	bl	800b50a <SDMMC_GetResponse>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d6:	d102      	bne.n	80088de <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088dc:	e0b0      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2140      	movs	r1, #64	; 0x40
 80088e4:	4618      	mov	r0, r3
 80088e6:	f002 fe4f 	bl	800b588 <SDMMC_CmdBlockLength>
 80088ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	e0a0      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f002 ff89 	bl	800b822 <SDMMC_CmdAppCommand>
 8008910:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	e08d      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008924:	f04f 33ff 	mov.w	r3, #4294967295
 8008928:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800892e:	2360      	movs	r3, #96	; 0x60
 8008930:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008932:	2302      	movs	r3, #2
 8008934:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008936:	2300      	movs	r3, #0
 8008938:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800893a:	2301      	movs	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f107 0208 	add.w	r2, r7, #8
 8008946:	4611      	mov	r1, r2
 8008948:	4618      	mov	r0, r3
 800894a:	f002 fdf1 	bl	800b530 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f003 f871 	bl	800ba3a <SDMMC_CmdStatusRegister>
 8008958:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d02b      	beq.n	80089b8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	e069      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d013      	beq.n	80089a2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800897a:	2300      	movs	r3, #0
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800897e:	e00d      	b.n	800899c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f002 fd4b 	bl	800b420 <SDMMC_ReadFIFO>
 800898a:	4602      	mov	r2, r0
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	601a      	str	r2, [r3, #0]
        pData++;
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	3304      	adds	r3, #4
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	3301      	adds	r3, #1
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	2b07      	cmp	r3, #7
 80089a0:	d9ee      	bls.n	8008980 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089a2:	f7f8 ff7d 	bl	80018a0 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d102      	bne.n	80089b8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089b6:	e043      	b.n	8008a40 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0d2      	beq.n	800896c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089d4:	2308      	movs	r3, #8
 80089d6:	e033      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	e02a      	b.n	8008a40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d017      	beq.n	8008a28 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80089f8:	2320      	movs	r3, #32
 80089fa:	e021      	b.n	8008a40 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f002 fd0d 	bl	800b420 <SDMMC_ReadFIFO>
 8008a06:	4602      	mov	r2, r0
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	601a      	str	r2, [r3, #0]
    pData++;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	3304      	adds	r3, #4
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a12:	f7f8 ff45 	bl	80018a0 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d102      	bne.n	8008a28 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a26:	e00b      	b.n	8008a40 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e2      	bne.n	80089fc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a03      	ldr	r2, [pc, #12]	; (8008a48 <SD_SendSDStatus+0x19c>)
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3730      	adds	r7, #48	; 0x30
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	18000f3a 	.word	0x18000f3a

08008a4c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a60:	e018      	b.n	8008a94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6a:	041b      	lsls	r3, r3, #16
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f002 ffc0 	bl	800b9f4 <SDMMC_CmdSendStatus>
 8008a74:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e009      	b.n	8008a94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 fd3f 	bl	800b50a <SDMMC_GetResponse>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fd29 	bl	800b50a <SDMMC_GetResponse>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ac2:	d102      	bne.n	8008aca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ac8:	e02f      	b.n	8008b2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008aca:	f107 030c 	add.w	r3, r7, #12
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f879 	bl	8008bc8 <SD_FindSCR>
 8008ad6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	e023      	b.n	8008b2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01c      	beq.n	8008b26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af4:	041b      	lsls	r3, r3, #16
 8008af6:	4619      	mov	r1, r3
 8008af8:	4610      	mov	r0, r2
 8008afa:	f002 fe92 	bl	800b822 <SDMMC_CmdAppCommand>
 8008afe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	e00f      	b.n	8008b2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fec9 	bl	800b8a8 <SDMMC_CmdBusWidth>
 8008b16:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	e003      	b.n	8008b2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e001      	b.n	8008b2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fcde 	bl	800b50a <SDMMC_GetResponse>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b58:	d102      	bne.n	8008b60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b5e:	e02f      	b.n	8008bc0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b60:	f107 030c 	add.w	r3, r7, #12
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f82e 	bl	8008bc8 <SD_FindSCR>
 8008b6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	e023      	b.n	8008bc0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01c      	beq.n	8008bbc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f002 fe47 	bl	800b822 <SDMMC_CmdAppCommand>
 8008b94:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	e00f      	b.n	8008bc0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f002 fe7e 	bl	800b8a8 <SDMMC_CmdBusWidth>
 8008bac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	e003      	b.n	8008bc0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e001      	b.n	8008bc0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08e      	sub	sp, #56	; 0x38
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bd2:	f7f8 fe65 	bl	80018a0 <HAL_GetTick>
 8008bd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60bb      	str	r3, [r7, #8]
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2108      	movs	r1, #8
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 fcca 	bl	800b588 <SDMMC_CmdBlockLength>
 8008bf4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	e0ad      	b.n	8008d5c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f002 fe08 	bl	800b822 <SDMMC_CmdAppCommand>
 8008c12:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	e09e      	b.n	8008d5c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c24:	2308      	movs	r3, #8
 8008c26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c28:	2330      	movs	r3, #48	; 0x30
 8008c2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f107 0210 	add.w	r2, r7, #16
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 fc74 	bl	800b530 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f002 fe4e 	bl	800b8ee <SDMMC_CmdSendSCR>
 8008c52:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d027      	beq.n	8008caa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	e07e      	b.n	8008d5c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d113      	bne.n	8008c94 <SD_FindSCR+0xcc>
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d110      	bne.n	8008c94 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 fbd2 	bl	800b420 <SDMMC_ReadFIFO>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fbcb 	bl	800b420 <SDMMC_ReadFIFO>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	60fb      	str	r3, [r7, #12]
      index++;
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c90:	3301      	adds	r3, #1
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c94:	f7f8 fe04 	bl	80018a0 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca2:	d102      	bne.n	8008caa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca8:	e058      	b.n	8008d5c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb0:	f240 532a 	movw	r3, #1322	; 0x52a
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0d1      	beq.n	8008c5e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2208      	movs	r2, #8
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	e043      	b.n	8008d5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	e036      	b.n	8008d5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2220      	movs	r2, #32
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d04:	2320      	movs	r3, #32
 8008d06:	e029      	b.n	8008d5c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a15      	ldr	r2, [pc, #84]	; (8008d64 <SD_FindSCR+0x19c>)
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	061a      	lsls	r2, r3, #24
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	0e1b      	lsrs	r3, r3, #24
 8008d2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	601a      	str	r2, [r3, #0]
    scr++;
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	3304      	adds	r3, #4
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	061a      	lsls	r2, r3, #24
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	0e1b      	lsrs	r3, r3, #24
 8008d54:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3738      	adds	r7, #56	; 0x38
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	18000f3a 	.word	0x18000f3a

08008d68 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	2b1f      	cmp	r3, #31
 8008d7c:	d936      	bls.n	8008dec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	e027      	b.n	8008dd4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f002 fb49 	bl	800b420 <SDMMC_ReadFIFO>
 8008d8e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	0a1b      	lsrs	r3, r3, #8
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	3301      	adds	r3, #1
 8008dac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	0c1b      	lsrs	r3, r3, #16
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b07      	cmp	r3, #7
 8008dd8:	d9d4      	bls.n	8008d84 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f1a3 0220 	sub.w	r2, r3, #32
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	2b1f      	cmp	r3, #31
 8008e08:	d93a      	bls.n	8008e80 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e02b      	b.n	8008e68 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	021a      	lsls	r2, r3, #8
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	041a      	lsls	r2, r3, #16
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	061a      	lsls	r2, r3, #24
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f107 020c 	add.w	r2, r7, #12
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 faec 	bl	800b43a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	3301      	adds	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2b07      	cmp	r3, #7
 8008e6c:	d9d0      	bls.n	8008e10 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f1a3 0220 	sub.w	r2, r3, #32
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	621a      	str	r2, [r3, #32]
  }
}
 8008e80:	bf00      	nop
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e049      	b.n	8008f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f841 	bl	8008f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 fc96 	bl	8009848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e05e      	b.n	8009072 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0201 	orr.w	r2, r2, #1
 8008fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <HAL_TIM_Base_Start_IT+0xe4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d02c      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fde:	d027      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a27      	ldr	r2, [pc, #156]	; (8009084 <HAL_TIM_Base_Start_IT+0xe8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d022      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a26      	ldr	r2, [pc, #152]	; (8009088 <HAL_TIM_Base_Start_IT+0xec>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d01d      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a24      	ldr	r2, [pc, #144]	; (800908c <HAL_TIM_Base_Start_IT+0xf0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d018      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a23      	ldr	r2, [pc, #140]	; (8009090 <HAL_TIM_Base_Start_IT+0xf4>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d013      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a21      	ldr	r2, [pc, #132]	; (8009094 <HAL_TIM_Base_Start_IT+0xf8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00e      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a20      	ldr	r2, [pc, #128]	; (8009098 <HAL_TIM_Base_Start_IT+0xfc>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1e      	ldr	r2, [pc, #120]	; (800909c <HAL_TIM_Base_Start_IT+0x100>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d004      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x94>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1d      	ldr	r2, [pc, #116]	; (80090a0 <HAL_TIM_Base_Start_IT+0x104>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d115      	bne.n	800905c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <HAL_TIM_Base_Start_IT+0x108>)
 8009038:	4013      	ands	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b06      	cmp	r3, #6
 8009040:	d015      	beq.n	800906e <HAL_TIM_Base_Start_IT+0xd2>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009048:	d011      	beq.n	800906e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0201 	orr.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800905a:	e008      	b.n	800906e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0201 	orr.w	r2, r2, #1
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	e000      	b.n	8009070 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40010000 	.word	0x40010000
 8009084:	40000400 	.word	0x40000400
 8009088:	40000800 	.word	0x40000800
 800908c:	40000c00 	.word	0x40000c00
 8009090:	40010400 	.word	0x40010400
 8009094:	40001800 	.word	0x40001800
 8009098:	40014000 	.word	0x40014000
 800909c:	4000e000 	.word	0x4000e000
 80090a0:	4000e400 	.word	0x4000e400
 80090a4:	00010007 	.word	0x00010007

080090a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e049      	b.n	800914e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d106      	bne.n	80090d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7f8 f92e 	bl	8001330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	f000 fbae 	bl	8009848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <HAL_TIM_PWM_Start+0x24>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	bf14      	ite	ne
 8009174:	2301      	movne	r3, #1
 8009176:	2300      	moveq	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	e03c      	b.n	80091f6 <HAL_TIM_PWM_Start+0x9e>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d109      	bne.n	8009196 <HAL_TIM_PWM_Start+0x3e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b01      	cmp	r3, #1
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	e02f      	b.n	80091f6 <HAL_TIM_PWM_Start+0x9e>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b08      	cmp	r3, #8
 800919a:	d109      	bne.n	80091b0 <HAL_TIM_PWM_Start+0x58>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	bf14      	ite	ne
 80091a8:	2301      	movne	r3, #1
 80091aa:	2300      	moveq	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e022      	b.n	80091f6 <HAL_TIM_PWM_Start+0x9e>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b0c      	cmp	r3, #12
 80091b4:	d109      	bne.n	80091ca <HAL_TIM_PWM_Start+0x72>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b01      	cmp	r3, #1
 80091c0:	bf14      	ite	ne
 80091c2:	2301      	movne	r3, #1
 80091c4:	2300      	moveq	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	e015      	b.n	80091f6 <HAL_TIM_PWM_Start+0x9e>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b10      	cmp	r3, #16
 80091ce:	d109      	bne.n	80091e4 <HAL_TIM_PWM_Start+0x8c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	bf14      	ite	ne
 80091dc:	2301      	movne	r3, #1
 80091de:	2300      	moveq	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e008      	b.n	80091f6 <HAL_TIM_PWM_Start+0x9e>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	bf14      	ite	ne
 80091f0:	2301      	movne	r3, #1
 80091f2:	2300      	moveq	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e0ab      	b.n	8009356 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <HAL_TIM_PWM_Start+0xb6>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800920c:	e023      	b.n	8009256 <HAL_TIM_PWM_Start+0xfe>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b04      	cmp	r3, #4
 8009212:	d104      	bne.n	800921e <HAL_TIM_PWM_Start+0xc6>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800921c:	e01b      	b.n	8009256 <HAL_TIM_PWM_Start+0xfe>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b08      	cmp	r3, #8
 8009222:	d104      	bne.n	800922e <HAL_TIM_PWM_Start+0xd6>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800922c:	e013      	b.n	8009256 <HAL_TIM_PWM_Start+0xfe>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b0c      	cmp	r3, #12
 8009232:	d104      	bne.n	800923e <HAL_TIM_PWM_Start+0xe6>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800923c:	e00b      	b.n	8009256 <HAL_TIM_PWM_Start+0xfe>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b10      	cmp	r3, #16
 8009242:	d104      	bne.n	800924e <HAL_TIM_PWM_Start+0xf6>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800924c:	e003      	b.n	8009256 <HAL_TIM_PWM_Start+0xfe>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2201      	movs	r2, #1
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fe6e 	bl	8009f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a3d      	ldr	r2, [pc, #244]	; (8009360 <HAL_TIM_PWM_Start+0x208>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d013      	beq.n	8009296 <HAL_TIM_PWM_Start+0x13e>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a3c      	ldr	r2, [pc, #240]	; (8009364 <HAL_TIM_PWM_Start+0x20c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00e      	beq.n	8009296 <HAL_TIM_PWM_Start+0x13e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a3a      	ldr	r2, [pc, #232]	; (8009368 <HAL_TIM_PWM_Start+0x210>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d009      	beq.n	8009296 <HAL_TIM_PWM_Start+0x13e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a39      	ldr	r2, [pc, #228]	; (800936c <HAL_TIM_PWM_Start+0x214>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d004      	beq.n	8009296 <HAL_TIM_PWM_Start+0x13e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a37      	ldr	r2, [pc, #220]	; (8009370 <HAL_TIM_PWM_Start+0x218>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d101      	bne.n	800929a <HAL_TIM_PWM_Start+0x142>
 8009296:	2301      	movs	r3, #1
 8009298:	e000      	b.n	800929c <HAL_TIM_PWM_Start+0x144>
 800929a:	2300      	movs	r3, #0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <HAL_TIM_PWM_Start+0x208>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d02c      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c2:	d027      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a2a      	ldr	r2, [pc, #168]	; (8009374 <HAL_TIM_PWM_Start+0x21c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d022      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a29      	ldr	r2, [pc, #164]	; (8009378 <HAL_TIM_PWM_Start+0x220>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d01d      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a27      	ldr	r2, [pc, #156]	; (800937c <HAL_TIM_PWM_Start+0x224>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d018      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <HAL_TIM_PWM_Start+0x20c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a23      	ldr	r2, [pc, #140]	; (8009380 <HAL_TIM_PWM_Start+0x228>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a1b      	ldr	r2, [pc, #108]	; (8009368 <HAL_TIM_PWM_Start+0x210>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <HAL_TIM_PWM_Start+0x22c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIM_PWM_Start+0x1bc>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a1e      	ldr	r2, [pc, #120]	; (8009388 <HAL_TIM_PWM_Start+0x230>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d115      	bne.n	8009340 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	4b1c      	ldr	r3, [pc, #112]	; (800938c <HAL_TIM_PWM_Start+0x234>)
 800931c:	4013      	ands	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b06      	cmp	r3, #6
 8009324:	d015      	beq.n	8009352 <HAL_TIM_PWM_Start+0x1fa>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932c:	d011      	beq.n	8009352 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0201 	orr.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933e:	e008      	b.n	8009352 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	e000      	b.n	8009354 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	40010400 	.word	0x40010400
 8009368:	40014000 	.word	0x40014000
 800936c:	40014400 	.word	0x40014400
 8009370:	40014800 	.word	0x40014800
 8009374:	40000400 	.word	0x40000400
 8009378:	40000800 	.word	0x40000800
 800937c:	40000c00 	.word	0x40000c00
 8009380:	40001800 	.word	0x40001800
 8009384:	4000e000 	.word	0x4000e000
 8009388:	4000e400 	.word	0x4000e400
 800938c:	00010007 	.word	0x00010007

08009390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d122      	bne.n	80093ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d11b      	bne.n	80093ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0202 	mvn.w	r2, #2
 80093bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa1a 	bl	800980c <HAL_TIM_IC_CaptureCallback>
 80093d8:	e005      	b.n	80093e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa0c 	bl	80097f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa1d 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d122      	bne.n	8009440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b04      	cmp	r3, #4
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0204 	mvn.w	r2, #4
 8009410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f9f0 	bl	800980c <HAL_TIM_IC_CaptureCallback>
 800942c:	e005      	b.n	800943a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9e2 	bl	80097f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9f3 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b08      	cmp	r3, #8
 800944c:	d122      	bne.n	8009494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b08      	cmp	r3, #8
 800945a:	d11b      	bne.n	8009494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0208 	mvn.w	r2, #8
 8009464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2204      	movs	r2, #4
 800946a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9c6 	bl	800980c <HAL_TIM_IC_CaptureCallback>
 8009480:	e005      	b.n	800948e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9b8 	bl	80097f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f9c9 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d122      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b10      	cmp	r3, #16
 80094ae:	d11b      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0210 	mvn.w	r2, #16
 80094b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2208      	movs	r2, #8
 80094be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f99c 	bl	800980c <HAL_TIM_IC_CaptureCallback>
 80094d4:	e005      	b.n	80094e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f98e 	bl	80097f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f99f 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d10e      	bne.n	8009514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b01      	cmp	r3, #1
 8009502:	d107      	bne.n	8009514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0201 	mvn.w	r2, #1
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7f7 fd52 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b80      	cmp	r3, #128	; 0x80
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b80      	cmp	r3, #128	; 0x80
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fdcc 	bl	800a0d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954e:	d10e      	bne.n	800956e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d107      	bne.n	800956e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fdbf 	bl	800a0ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009578:	2b40      	cmp	r3, #64	; 0x40
 800957a:	d10e      	bne.n	800959a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d107      	bne.n	800959a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f94d 	bl	8009834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d10e      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b20      	cmp	r3, #32
 80095b4:	d107      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f06f 0220 	mvn.w	r2, #32
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fd7f 	bl	800a0c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095ea:	2302      	movs	r3, #2
 80095ec:	e0ff      	b.n	80097ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b14      	cmp	r3, #20
 80095fa:	f200 80f0 	bhi.w	80097de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009659 	.word	0x08009659
 8009608:	080097df 	.word	0x080097df
 800960c:	080097df 	.word	0x080097df
 8009610:	080097df 	.word	0x080097df
 8009614:	08009699 	.word	0x08009699
 8009618:	080097df 	.word	0x080097df
 800961c:	080097df 	.word	0x080097df
 8009620:	080097df 	.word	0x080097df
 8009624:	080096db 	.word	0x080096db
 8009628:	080097df 	.word	0x080097df
 800962c:	080097df 	.word	0x080097df
 8009630:	080097df 	.word	0x080097df
 8009634:	0800971b 	.word	0x0800971b
 8009638:	080097df 	.word	0x080097df
 800963c:	080097df 	.word	0x080097df
 8009640:	080097df 	.word	0x080097df
 8009644:	0800975d 	.word	0x0800975d
 8009648:	080097df 	.word	0x080097df
 800964c:	080097df 	.word	0x080097df
 8009650:	080097df 	.word	0x080097df
 8009654:	0800979d 	.word	0x0800979d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f998 	bl	8009994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0208 	orr.w	r2, r2, #8
 8009672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699a      	ldr	r2, [r3, #24]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0204 	bic.w	r2, r2, #4
 8009682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6999      	ldr	r1, [r3, #24]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	619a      	str	r2, [r3, #24]
      break;
 8009696:	e0a5      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fa08 	bl	8009ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6999      	ldr	r1, [r3, #24]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	021a      	lsls	r2, r3, #8
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	619a      	str	r2, [r3, #24]
      break;
 80096d8:	e084      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fa71 	bl	8009bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f042 0208 	orr.w	r2, r2, #8
 80096f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69da      	ldr	r2, [r3, #28]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0204 	bic.w	r2, r2, #4
 8009704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69d9      	ldr	r1, [r3, #28]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	691a      	ldr	r2, [r3, #16]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	61da      	str	r2, [r3, #28]
      break;
 8009718:	e064      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fad9 	bl	8009cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69da      	ldr	r2, [r3, #28]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69d9      	ldr	r1, [r3, #28]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	021a      	lsls	r2, r3, #8
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	61da      	str	r2, [r3, #28]
      break;
 800975a:	e043      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68b9      	ldr	r1, [r7, #8]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fb22 	bl	8009dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0208 	orr.w	r2, r2, #8
 8009776:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0204 	bic.w	r2, r2, #4
 8009786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800979a:	e023      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fb66 	bl	8009e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	021a      	lsls	r2, r3, #8
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80097dc:	e002      	b.n	80097e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	75fb      	strb	r3, [r7, #23]
      break;
 80097e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop

080097f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a44      	ldr	r2, [pc, #272]	; (800996c <TIM_Base_SetConfig+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d013      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009866:	d00f      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a41      	ldr	r2, [pc, #260]	; (8009970 <TIM_Base_SetConfig+0x128>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00b      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a40      	ldr	r2, [pc, #256]	; (8009974 <TIM_Base_SetConfig+0x12c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d007      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a3f      	ldr	r2, [pc, #252]	; (8009978 <TIM_Base_SetConfig+0x130>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d003      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a3e      	ldr	r2, [pc, #248]	; (800997c <TIM_Base_SetConfig+0x134>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d108      	bne.n	800989a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a33      	ldr	r2, [pc, #204]	; (800996c <TIM_Base_SetConfig+0x124>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d027      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a8:	d023      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a30      	ldr	r2, [pc, #192]	; (8009970 <TIM_Base_SetConfig+0x128>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d01f      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a2f      	ldr	r2, [pc, #188]	; (8009974 <TIM_Base_SetConfig+0x12c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01b      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a2e      	ldr	r2, [pc, #184]	; (8009978 <TIM_Base_SetConfig+0x130>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d017      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2d      	ldr	r2, [pc, #180]	; (800997c <TIM_Base_SetConfig+0x134>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2c      	ldr	r2, [pc, #176]	; (8009980 <TIM_Base_SetConfig+0x138>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2b      	ldr	r2, [pc, #172]	; (8009984 <TIM_Base_SetConfig+0x13c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2a      	ldr	r2, [pc, #168]	; (8009988 <TIM_Base_SetConfig+0x140>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a29      	ldr	r2, [pc, #164]	; (800998c <TIM_Base_SetConfig+0x144>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_Base_SetConfig+0xaa>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a28      	ldr	r2, [pc, #160]	; (8009990 <TIM_Base_SetConfig+0x148>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d108      	bne.n	8009904 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a10      	ldr	r2, [pc, #64]	; (800996c <TIM_Base_SetConfig+0x124>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00f      	beq.n	8009950 <TIM_Base_SetConfig+0x108>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a12      	ldr	r2, [pc, #72]	; (800997c <TIM_Base_SetConfig+0x134>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_Base_SetConfig+0x108>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a11      	ldr	r2, [pc, #68]	; (8009980 <TIM_Base_SetConfig+0x138>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_Base_SetConfig+0x108>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a10      	ldr	r2, [pc, #64]	; (8009984 <TIM_Base_SetConfig+0x13c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0x108>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a0f      	ldr	r2, [pc, #60]	; (8009988 <TIM_Base_SetConfig+0x140>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d103      	bne.n	8009958 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	615a      	str	r2, [r3, #20]
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40010000 	.word	0x40010000
 8009970:	40000400 	.word	0x40000400
 8009974:	40000800 	.word	0x40000800
 8009978:	40000c00 	.word	0x40000c00
 800997c:	40010400 	.word	0x40010400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800
 800998c:	4000e000 	.word	0x4000e000
 8009990:	4000e400 	.word	0x4000e400

08009994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f023 0201 	bic.w	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4b37      	ldr	r3, [pc, #220]	; (8009a9c <TIM_OC1_SetConfig+0x108>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f023 0302 	bic.w	r3, r3, #2
 80099dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a2d      	ldr	r2, [pc, #180]	; (8009aa0 <TIM_OC1_SetConfig+0x10c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00f      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a2c      	ldr	r2, [pc, #176]	; (8009aa4 <TIM_OC1_SetConfig+0x110>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a2b      	ldr	r2, [pc, #172]	; (8009aa8 <TIM_OC1_SetConfig+0x114>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a2a      	ldr	r2, [pc, #168]	; (8009aac <TIM_OC1_SetConfig+0x118>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a29      	ldr	r2, [pc, #164]	; (8009ab0 <TIM_OC1_SetConfig+0x11c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10c      	bne.n	8009a2a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f023 0308 	bic.w	r3, r3, #8
 8009a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f023 0304 	bic.w	r3, r3, #4
 8009a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <TIM_OC1_SetConfig+0x10c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00f      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a1b      	ldr	r2, [pc, #108]	; (8009aa4 <TIM_OC1_SetConfig+0x110>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d00b      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1a      	ldr	r2, [pc, #104]	; (8009aa8 <TIM_OC1_SetConfig+0x114>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d007      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a19      	ldr	r2, [pc, #100]	; (8009aac <TIM_OC1_SetConfig+0x118>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d003      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a18      	ldr	r2, [pc, #96]	; (8009ab0 <TIM_OC1_SetConfig+0x11c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d111      	bne.n	8009a76 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	621a      	str	r2, [r3, #32]
}
 8009a90:	bf00      	nop
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	fffeff8f 	.word	0xfffeff8f
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40014000 	.word	0x40014000
 8009aac:	40014400 	.word	0x40014400
 8009ab0:	40014800 	.word	0x40014800

08009ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f023 0210 	bic.w	r2, r3, #16
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4b34      	ldr	r3, [pc, #208]	; (8009bb0 <TIM_OC2_SetConfig+0xfc>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f023 0320 	bic.w	r3, r3, #32
 8009afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a29      	ldr	r2, [pc, #164]	; (8009bb4 <TIM_OC2_SetConfig+0x100>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC2_SetConfig+0x68>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a28      	ldr	r2, [pc, #160]	; (8009bb8 <TIM_OC2_SetConfig+0x104>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d10d      	bne.n	8009b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a1e      	ldr	r2, [pc, #120]	; (8009bb4 <TIM_OC2_SetConfig+0x100>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00f      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a1d      	ldr	r2, [pc, #116]	; (8009bb8 <TIM_OC2_SetConfig+0x104>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00b      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1c      	ldr	r2, [pc, #112]	; (8009bbc <TIM_OC2_SetConfig+0x108>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d007      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a1b      	ldr	r2, [pc, #108]	; (8009bc0 <TIM_OC2_SetConfig+0x10c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d003      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a1a      	ldr	r2, [pc, #104]	; (8009bc4 <TIM_OC2_SetConfig+0x110>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d113      	bne.n	8009b88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	621a      	str	r2, [r3, #32]
}
 8009ba2:	bf00      	nop
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	feff8fff 	.word	0xfeff8fff
 8009bb4:	40010000 	.word	0x40010000
 8009bb8:	40010400 	.word	0x40010400
 8009bbc:	40014000 	.word	0x40014000
 8009bc0:	40014400 	.word	0x40014400
 8009bc4:	40014800 	.word	0x40014800

08009bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4b33      	ldr	r3, [pc, #204]	; (8009cc0 <TIM_OC3_SetConfig+0xf8>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a28      	ldr	r2, [pc, #160]	; (8009cc4 <TIM_OC3_SetConfig+0xfc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d003      	beq.n	8009c2e <TIM_OC3_SetConfig+0x66>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a27      	ldr	r2, [pc, #156]	; (8009cc8 <TIM_OC3_SetConfig+0x100>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d10d      	bne.n	8009c4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	021b      	lsls	r3, r3, #8
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <TIM_OC3_SetConfig+0xfc>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00f      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1c      	ldr	r2, [pc, #112]	; (8009cc8 <TIM_OC3_SetConfig+0x100>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00b      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ccc <TIM_OC3_SetConfig+0x104>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d007      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1a      	ldr	r2, [pc, #104]	; (8009cd0 <TIM_OC3_SetConfig+0x108>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d003      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a19      	ldr	r2, [pc, #100]	; (8009cd4 <TIM_OC3_SetConfig+0x10c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d113      	bne.n	8009c9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	621a      	str	r2, [r3, #32]
}
 8009cb4:	bf00      	nop
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	fffeff8f 	.word	0xfffeff8f
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40010400 	.word	0x40010400
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800

08009cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <TIM_OC4_SetConfig+0xbc>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	031b      	lsls	r3, r3, #12
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <TIM_OC4_SetConfig+0xc0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00f      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a18      	ldr	r2, [pc, #96]	; (8009d9c <TIM_OC4_SetConfig+0xc4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00b      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a17      	ldr	r2, [pc, #92]	; (8009da0 <TIM_OC4_SetConfig+0xc8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d007      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a16      	ldr	r2, [pc, #88]	; (8009da4 <TIM_OC4_SetConfig+0xcc>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <TIM_OC4_SetConfig+0xd0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d109      	bne.n	8009d6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	feff8fff 	.word	0xfeff8fff
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400
 8009da0:	40014000 	.word	0x40014000
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800

08009dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <TIM_OC5_SetConfig+0xb0>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009dec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <TIM_OC5_SetConfig+0xb4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00f      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a17      	ldr	r2, [pc, #92]	; (8009e64 <TIM_OC5_SetConfig+0xb8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00b      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a16      	ldr	r2, [pc, #88]	; (8009e68 <TIM_OC5_SetConfig+0xbc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d007      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <TIM_OC5_SetConfig+0xc0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a14      	ldr	r2, [pc, #80]	; (8009e70 <TIM_OC5_SetConfig+0xc4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d109      	bne.n	8009e36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	621a      	str	r2, [r3, #32]
}
 8009e50:	bf00      	nop
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	fffeff8f 	.word	0xfffeff8f
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40010400 	.word	0x40010400
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40014400 	.word	0x40014400
 8009e70:	40014800 	.word	0x40014800

08009e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4b22      	ldr	r3, [pc, #136]	; (8009f28 <TIM_OC6_SetConfig+0xb4>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	021b      	lsls	r3, r3, #8
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	051b      	lsls	r3, r3, #20
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a19      	ldr	r2, [pc, #100]	; (8009f2c <TIM_OC6_SetConfig+0xb8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00f      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a18      	ldr	r2, [pc, #96]	; (8009f30 <TIM_OC6_SetConfig+0xbc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00b      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a17      	ldr	r2, [pc, #92]	; (8009f34 <TIM_OC6_SetConfig+0xc0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a16      	ldr	r2, [pc, #88]	; (8009f38 <TIM_OC6_SetConfig+0xc4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a15      	ldr	r2, [pc, #84]	; (8009f3c <TIM_OC6_SetConfig+0xc8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d109      	bne.n	8009f00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	029b      	lsls	r3, r3, #10
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	621a      	str	r2, [r3, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	feff8fff 	.word	0xfeff8fff
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40014400 	.word	0x40014400
 8009f3c:	40014800 	.word	0x40014800

08009f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f003 031f 	and.w	r3, r3, #31
 8009f52:	2201      	movs	r2, #1
 8009f54:	fa02 f303 	lsl.w	r3, r2, r3
 8009f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1a      	ldr	r2, [r3, #32]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	43db      	mvns	r3, r3
 8009f62:	401a      	ands	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a1a      	ldr	r2, [r3, #32]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f003 031f 	and.w	r3, r3, #31
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	fa01 f303 	lsl.w	r3, r1, r3
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
	...

08009f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e077      	b.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a35      	ldr	r2, [pc, #212]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d004      	beq.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a34      	ldr	r2, [pc, #208]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d108      	bne.n	8009fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a25      	ldr	r2, [pc, #148]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d02c      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a016:	d027      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d022      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a21      	ldr	r2, [pc, #132]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d01d      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d018      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1a      	ldr	r2, [pc, #104]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1b      	ldr	r2, [pc, #108]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1a      	ldr	r2, [pc, #104]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d10c      	bne.n	800a082 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4313      	orrs	r3, r2
 800a078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40010000 	.word	0x40010000
 800a0a4:	40010400 	.word	0x40010400
 800a0a8:	40000400 	.word	0x40000400
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40000c00 	.word	0x40000c00
 800a0b4:	40001800 	.word	0x40001800
 800a0b8:	40014000 	.word	0x40014000
 800a0bc:	4000e000 	.word	0x4000e000
 800a0c0:	4000e400 	.word	0x4000e400

0800a0c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e042      	b.n	800a198 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7f7 f98d 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2224      	movs	r2, #36	; 0x24
 800a12e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0201 	bic.w	r2, r2, #1
 800a140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f82c 	bl	800a1a0 <UART_SetConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e022      	b.n	800a198 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fe7e 	bl	800ae5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a16e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a17e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 ff05 	bl	800afa0 <UART_CheckIdleState>
 800a196:	4603      	mov	r3, r0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1a0:	b5b0      	push	{r4, r5, r7, lr}
 800a1a2:	b08e      	sub	sp, #56	; 0x38
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	4bbf      	ldr	r3, [pc, #764]	; (800a4cc <UART_SetConfig+0x32c>)
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	6812      	ldr	r2, [r2, #0]
 800a1d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4ab5      	ldr	r2, [pc, #724]	; (800a4d0 <UART_SetConfig+0x330>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d004      	beq.n	800a20a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a206:	4313      	orrs	r3, r2
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689a      	ldr	r2, [r3, #8]
 800a210:	4bb0      	ldr	r3, [pc, #704]	; (800a4d4 <UART_SetConfig+0x334>)
 800a212:	4013      	ands	r3, r2
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a21a:	430b      	orrs	r3, r1
 800a21c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	f023 010f 	bic.w	r1, r3, #15
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4aa7      	ldr	r2, [pc, #668]	; (800a4d8 <UART_SetConfig+0x338>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d176      	bne.n	800a32c <UART_SetConfig+0x18c>
 800a23e:	4ba7      	ldr	r3, [pc, #668]	; (800a4dc <UART_SetConfig+0x33c>)
 800a240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a246:	2b28      	cmp	r3, #40	; 0x28
 800a248:	d86c      	bhi.n	800a324 <UART_SetConfig+0x184>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <UART_SetConfig+0xb0>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a2f5 	.word	0x0800a2f5
 800a254:	0800a325 	.word	0x0800a325
 800a258:	0800a325 	.word	0x0800a325
 800a25c:	0800a325 	.word	0x0800a325
 800a260:	0800a325 	.word	0x0800a325
 800a264:	0800a325 	.word	0x0800a325
 800a268:	0800a325 	.word	0x0800a325
 800a26c:	0800a325 	.word	0x0800a325
 800a270:	0800a2fd 	.word	0x0800a2fd
 800a274:	0800a325 	.word	0x0800a325
 800a278:	0800a325 	.word	0x0800a325
 800a27c:	0800a325 	.word	0x0800a325
 800a280:	0800a325 	.word	0x0800a325
 800a284:	0800a325 	.word	0x0800a325
 800a288:	0800a325 	.word	0x0800a325
 800a28c:	0800a325 	.word	0x0800a325
 800a290:	0800a305 	.word	0x0800a305
 800a294:	0800a325 	.word	0x0800a325
 800a298:	0800a325 	.word	0x0800a325
 800a29c:	0800a325 	.word	0x0800a325
 800a2a0:	0800a325 	.word	0x0800a325
 800a2a4:	0800a325 	.word	0x0800a325
 800a2a8:	0800a325 	.word	0x0800a325
 800a2ac:	0800a325 	.word	0x0800a325
 800a2b0:	0800a30d 	.word	0x0800a30d
 800a2b4:	0800a325 	.word	0x0800a325
 800a2b8:	0800a325 	.word	0x0800a325
 800a2bc:	0800a325 	.word	0x0800a325
 800a2c0:	0800a325 	.word	0x0800a325
 800a2c4:	0800a325 	.word	0x0800a325
 800a2c8:	0800a325 	.word	0x0800a325
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a315 	.word	0x0800a315
 800a2d4:	0800a325 	.word	0x0800a325
 800a2d8:	0800a325 	.word	0x0800a325
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a325 	.word	0x0800a325
 800a2e4:	0800a325 	.word	0x0800a325
 800a2e8:	0800a325 	.word	0x0800a325
 800a2ec:	0800a325 	.word	0x0800a325
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fa:	e326      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a302:	e322      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30a:	e31e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a312:	e31a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a314:	2320      	movs	r3, #32
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e316      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e312      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a324:	2380      	movs	r3, #128	; 0x80
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e30e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a6b      	ldr	r2, [pc, #428]	; (800a4e0 <UART_SetConfig+0x340>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d130      	bne.n	800a398 <UART_SetConfig+0x1f8>
 800a336:	4b69      	ldr	r3, [pc, #420]	; (800a4dc <UART_SetConfig+0x33c>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d826      	bhi.n	800a390 <UART_SetConfig+0x1f0>
 800a342:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <UART_SetConfig+0x1a8>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a361 	.word	0x0800a361
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a381 	.word	0x0800a381
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	2300      	movs	r3, #0
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	e2f0      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e2ec      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e2e8      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e2e4      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e2e0      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e2dc      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a390:	2380      	movs	r3, #128	; 0x80
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e2d8      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a51      	ldr	r2, [pc, #324]	; (800a4e4 <UART_SetConfig+0x344>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d130      	bne.n	800a404 <UART_SetConfig+0x264>
 800a3a2:	4b4e      	ldr	r3, [pc, #312]	; (800a4dc <UART_SetConfig+0x33c>)
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d826      	bhi.n	800a3fc <UART_SetConfig+0x25c>
 800a3ae:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <UART_SetConfig+0x214>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e2ba      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3d4:	2304      	movs	r3, #4
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e2b6      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e2b2      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e2ae      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e2aa      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3f4:	2340      	movs	r3, #64	; 0x40
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e2a6      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e2a2      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a37      	ldr	r2, [pc, #220]	; (800a4e8 <UART_SetConfig+0x348>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d130      	bne.n	800a470 <UART_SetConfig+0x2d0>
 800a40e:	4b33      	ldr	r3, [pc, #204]	; (800a4dc <UART_SetConfig+0x33c>)
 800a410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	2b05      	cmp	r3, #5
 800a418:	d826      	bhi.n	800a468 <UART_SetConfig+0x2c8>
 800a41a:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <UART_SetConfig+0x280>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a439 	.word	0x0800a439
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a449 	.word	0x0800a449
 800a42c:	0800a451 	.word	0x0800a451
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a461 	.word	0x0800a461
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e284      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e280      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e27c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a456:	e278      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a458:	2320      	movs	r3, #32
 800a45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45e:	e274      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e270      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a468:	2380      	movs	r3, #128	; 0x80
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e26c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1d      	ldr	r2, [pc, #116]	; (800a4ec <UART_SetConfig+0x34c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d142      	bne.n	800a500 <UART_SetConfig+0x360>
 800a47a:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <UART_SetConfig+0x33c>)
 800a47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	2b05      	cmp	r3, #5
 800a484:	d838      	bhi.n	800a4f8 <UART_SetConfig+0x358>
 800a486:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <UART_SetConfig+0x2ec>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4a5 	.word	0x0800a4a5
 800a490:	0800a4ad 	.word	0x0800a4ad
 800a494:	0800a4b5 	.word	0x0800a4b5
 800a498:	0800a4bd 	.word	0x0800a4bd
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e24e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e24a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ba:	e246      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4bc:	2310      	movs	r3, #16
 800a4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c2:	e242      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ca:	e23e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4cc:	cfff69f3 	.word	0xcfff69f3
 800a4d0:	58000c00 	.word	0x58000c00
 800a4d4:	11fff4ff 	.word	0x11fff4ff
 800a4d8:	40011000 	.word	0x40011000
 800a4dc:	58024400 	.word	0x58024400
 800a4e0:	40004400 	.word	0x40004400
 800a4e4:	40004800 	.word	0x40004800
 800a4e8:	40004c00 	.word	0x40004c00
 800a4ec:	40005000 	.word	0x40005000
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e228      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a4f8:	2380      	movs	r3, #128	; 0x80
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e224      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4ab1      	ldr	r2, [pc, #708]	; (800a7cc <UART_SetConfig+0x62c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d176      	bne.n	800a5f8 <UART_SetConfig+0x458>
 800a50a:	4bb1      	ldr	r3, [pc, #708]	; (800a7d0 <UART_SetConfig+0x630>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a512:	2b28      	cmp	r3, #40	; 0x28
 800a514:	d86c      	bhi.n	800a5f0 <UART_SetConfig+0x450>
 800a516:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <UART_SetConfig+0x37c>)
 800a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51c:	0800a5c1 	.word	0x0800a5c1
 800a520:	0800a5f1 	.word	0x0800a5f1
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5f1 	.word	0x0800a5f1
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5c9 	.word	0x0800a5c9
 800a540:	0800a5f1 	.word	0x0800a5f1
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5d1 	.word	0x0800a5d1
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5d9 	.word	0x0800a5d9
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e1c0      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e1bc      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d6:	e1b8      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e1b4      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e1b0      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e1ac      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5f0:	2380      	movs	r3, #128	; 0x80
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	e1a8      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a75      	ldr	r2, [pc, #468]	; (800a7d4 <UART_SetConfig+0x634>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d130      	bne.n	800a664 <UART_SetConfig+0x4c4>
 800a602:	4b73      	ldr	r3, [pc, #460]	; (800a7d0 <UART_SetConfig+0x630>)
 800a604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	d826      	bhi.n	800a65c <UART_SetConfig+0x4bc>
 800a60e:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0x474>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a62d 	.word	0x0800a62d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a64d 	.word	0x0800a64d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	2300      	movs	r3, #0
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a632:	e18a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63a:	e186      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a642:	e182      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e17e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a64c:	2320      	movs	r3, #32
 800a64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a652:	e17a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a654:	2340      	movs	r3, #64	; 0x40
 800a656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65a:	e176      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a65c:	2380      	movs	r3, #128	; 0x80
 800a65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a662:	e172      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a5b      	ldr	r2, [pc, #364]	; (800a7d8 <UART_SetConfig+0x638>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d130      	bne.n	800a6d0 <UART_SetConfig+0x530>
 800a66e:	4b58      	ldr	r3, [pc, #352]	; (800a7d0 <UART_SetConfig+0x630>)
 800a670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b05      	cmp	r3, #5
 800a678:	d826      	bhi.n	800a6c8 <UART_SetConfig+0x528>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <UART_SetConfig+0x4e0>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a699 	.word	0x0800a699
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	0800a6a9 	.word	0x0800a6a9
 800a68c:	0800a6b1 	.word	0x0800a6b1
 800a690:	0800a6b9 	.word	0x0800a6b9
 800a694:	0800a6c1 	.word	0x0800a6c1
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69e:	e154      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a6:	e150      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ae:	e14c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b6:	e148      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6be:	e144      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e140      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6c8:	2380      	movs	r3, #128	; 0x80
 800a6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ce:	e13c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a41      	ldr	r2, [pc, #260]	; (800a7dc <UART_SetConfig+0x63c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	f040 8082 	bne.w	800a7e0 <UART_SetConfig+0x640>
 800a6dc:	4b3c      	ldr	r3, [pc, #240]	; (800a7d0 <UART_SetConfig+0x630>)
 800a6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6e4:	2b28      	cmp	r3, #40	; 0x28
 800a6e6:	d86d      	bhi.n	800a7c4 <UART_SetConfig+0x624>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <UART_SetConfig+0x550>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a795 	.word	0x0800a795
 800a6f4:	0800a7c5 	.word	0x0800a7c5
 800a6f8:	0800a7c5 	.word	0x0800a7c5
 800a6fc:	0800a7c5 	.word	0x0800a7c5
 800a700:	0800a7c5 	.word	0x0800a7c5
 800a704:	0800a7c5 	.word	0x0800a7c5
 800a708:	0800a7c5 	.word	0x0800a7c5
 800a70c:	0800a7c5 	.word	0x0800a7c5
 800a710:	0800a79d 	.word	0x0800a79d
 800a714:	0800a7c5 	.word	0x0800a7c5
 800a718:	0800a7c5 	.word	0x0800a7c5
 800a71c:	0800a7c5 	.word	0x0800a7c5
 800a720:	0800a7c5 	.word	0x0800a7c5
 800a724:	0800a7c5 	.word	0x0800a7c5
 800a728:	0800a7c5 	.word	0x0800a7c5
 800a72c:	0800a7c5 	.word	0x0800a7c5
 800a730:	0800a7a5 	.word	0x0800a7a5
 800a734:	0800a7c5 	.word	0x0800a7c5
 800a738:	0800a7c5 	.word	0x0800a7c5
 800a73c:	0800a7c5 	.word	0x0800a7c5
 800a740:	0800a7c5 	.word	0x0800a7c5
 800a744:	0800a7c5 	.word	0x0800a7c5
 800a748:	0800a7c5 	.word	0x0800a7c5
 800a74c:	0800a7c5 	.word	0x0800a7c5
 800a750:	0800a7ad 	.word	0x0800a7ad
 800a754:	0800a7c5 	.word	0x0800a7c5
 800a758:	0800a7c5 	.word	0x0800a7c5
 800a75c:	0800a7c5 	.word	0x0800a7c5
 800a760:	0800a7c5 	.word	0x0800a7c5
 800a764:	0800a7c5 	.word	0x0800a7c5
 800a768:	0800a7c5 	.word	0x0800a7c5
 800a76c:	0800a7c5 	.word	0x0800a7c5
 800a770:	0800a7b5 	.word	0x0800a7b5
 800a774:	0800a7c5 	.word	0x0800a7c5
 800a778:	0800a7c5 	.word	0x0800a7c5
 800a77c:	0800a7c5 	.word	0x0800a7c5
 800a780:	0800a7c5 	.word	0x0800a7c5
 800a784:	0800a7c5 	.word	0x0800a7c5
 800a788:	0800a7c5 	.word	0x0800a7c5
 800a78c:	0800a7c5 	.word	0x0800a7c5
 800a790:	0800a7bd 	.word	0x0800a7bd
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79a:	e0d6      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a79c:	2304      	movs	r3, #4
 800a79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a2:	e0d2      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7a4:	2308      	movs	r3, #8
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e0ce      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7ac:	2310      	movs	r3, #16
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e0ca      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e0c6      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7bc:	2340      	movs	r3, #64	; 0x40
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e0c2      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e0be      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a7cc:	40011400 	.word	0x40011400
 800a7d0:	58024400 	.word	0x58024400
 800a7d4:	40007800 	.word	0x40007800
 800a7d8:	40007c00 	.word	0x40007c00
 800a7dc:	40011800 	.word	0x40011800
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4aad      	ldr	r2, [pc, #692]	; (800aa9c <UART_SetConfig+0x8fc>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d176      	bne.n	800a8d8 <UART_SetConfig+0x738>
 800a7ea:	4bad      	ldr	r3, [pc, #692]	; (800aaa0 <UART_SetConfig+0x900>)
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f2:	2b28      	cmp	r3, #40	; 0x28
 800a7f4:	d86c      	bhi.n	800a8d0 <UART_SetConfig+0x730>
 800a7f6:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <UART_SetConfig+0x65c>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a8a1 	.word	0x0800a8a1
 800a800:	0800a8d1 	.word	0x0800a8d1
 800a804:	0800a8d1 	.word	0x0800a8d1
 800a808:	0800a8d1 	.word	0x0800a8d1
 800a80c:	0800a8d1 	.word	0x0800a8d1
 800a810:	0800a8d1 	.word	0x0800a8d1
 800a814:	0800a8d1 	.word	0x0800a8d1
 800a818:	0800a8d1 	.word	0x0800a8d1
 800a81c:	0800a8a9 	.word	0x0800a8a9
 800a820:	0800a8d1 	.word	0x0800a8d1
 800a824:	0800a8d1 	.word	0x0800a8d1
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a8d1 	.word	0x0800a8d1
 800a830:	0800a8d1 	.word	0x0800a8d1
 800a834:	0800a8d1 	.word	0x0800a8d1
 800a838:	0800a8d1 	.word	0x0800a8d1
 800a83c:	0800a8b1 	.word	0x0800a8b1
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8d1 	.word	0x0800a8d1
 800a848:	0800a8d1 	.word	0x0800a8d1
 800a84c:	0800a8d1 	.word	0x0800a8d1
 800a850:	0800a8d1 	.word	0x0800a8d1
 800a854:	0800a8d1 	.word	0x0800a8d1
 800a858:	0800a8d1 	.word	0x0800a8d1
 800a85c:	0800a8b9 	.word	0x0800a8b9
 800a860:	0800a8d1 	.word	0x0800a8d1
 800a864:	0800a8d1 	.word	0x0800a8d1
 800a868:	0800a8d1 	.word	0x0800a8d1
 800a86c:	0800a8d1 	.word	0x0800a8d1
 800a870:	0800a8d1 	.word	0x0800a8d1
 800a874:	0800a8d1 	.word	0x0800a8d1
 800a878:	0800a8d1 	.word	0x0800a8d1
 800a87c:	0800a8c1 	.word	0x0800a8c1
 800a880:	0800a8d1 	.word	0x0800a8d1
 800a884:	0800a8d1 	.word	0x0800a8d1
 800a888:	0800a8d1 	.word	0x0800a8d1
 800a88c:	0800a8d1 	.word	0x0800a8d1
 800a890:	0800a8d1 	.word	0x0800a8d1
 800a894:	0800a8d1 	.word	0x0800a8d1
 800a898:	0800a8d1 	.word	0x0800a8d1
 800a89c:	0800a8c9 	.word	0x0800a8c9
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	e050      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ae:	e04c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b6:	e048      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8be:	e044      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c6:	e040      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ce:	e03c      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8d0:	2380      	movs	r3, #128	; 0x80
 800a8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d6:	e038      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a71      	ldr	r2, [pc, #452]	; (800aaa4 <UART_SetConfig+0x904>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d130      	bne.n	800a944 <UART_SetConfig+0x7a4>
 800a8e2:	4b6f      	ldr	r3, [pc, #444]	; (800aaa0 <UART_SetConfig+0x900>)
 800a8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d826      	bhi.n	800a93c <UART_SetConfig+0x79c>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <UART_SetConfig+0x754>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a92d 	.word	0x0800a92d
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	2302      	movs	r3, #2
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e01a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a914:	2304      	movs	r3, #4
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e016      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a91c:	2308      	movs	r3, #8
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e012      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a924:	2310      	movs	r3, #16
 800a926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92a:	e00e      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a92c:	2320      	movs	r3, #32
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	e00a      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	e006      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a93c:	2380      	movs	r3, #128	; 0x80
 800a93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a942:	e002      	b.n	800a94a <UART_SetConfig+0x7aa>
 800a944:	2380      	movs	r3, #128	; 0x80
 800a946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a55      	ldr	r2, [pc, #340]	; (800aaa4 <UART_SetConfig+0x904>)
 800a950:	4293      	cmp	r3, r2
 800a952:	f040 80f0 	bne.w	800ab36 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	dc46      	bgt.n	800a9ec <UART_SetConfig+0x84c>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	db75      	blt.n	800aa4e <UART_SetConfig+0x8ae>
 800a962:	3b02      	subs	r3, #2
 800a964:	2b1e      	cmp	r3, #30
 800a966:	d872      	bhi.n	800aa4e <UART_SetConfig+0x8ae>
 800a968:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <UART_SetConfig+0x7d0>)
 800a96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96e:	bf00      	nop
 800a970:	0800a9f3 	.word	0x0800a9f3
 800a974:	0800aa4f 	.word	0x0800aa4f
 800a978:	0800a9fb 	.word	0x0800a9fb
 800a97c:	0800aa4f 	.word	0x0800aa4f
 800a980:	0800aa4f 	.word	0x0800aa4f
 800a984:	0800aa4f 	.word	0x0800aa4f
 800a988:	0800aa0b 	.word	0x0800aa0b
 800a98c:	0800aa4f 	.word	0x0800aa4f
 800a990:	0800aa4f 	.word	0x0800aa4f
 800a994:	0800aa4f 	.word	0x0800aa4f
 800a998:	0800aa4f 	.word	0x0800aa4f
 800a99c:	0800aa4f 	.word	0x0800aa4f
 800a9a0:	0800aa4f 	.word	0x0800aa4f
 800a9a4:	0800aa4f 	.word	0x0800aa4f
 800a9a8:	0800aa1b 	.word	0x0800aa1b
 800a9ac:	0800aa4f 	.word	0x0800aa4f
 800a9b0:	0800aa4f 	.word	0x0800aa4f
 800a9b4:	0800aa4f 	.word	0x0800aa4f
 800a9b8:	0800aa4f 	.word	0x0800aa4f
 800a9bc:	0800aa4f 	.word	0x0800aa4f
 800a9c0:	0800aa4f 	.word	0x0800aa4f
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aa4f 	.word	0x0800aa4f
 800a9cc:	0800aa4f 	.word	0x0800aa4f
 800a9d0:	0800aa4f 	.word	0x0800aa4f
 800a9d4:	0800aa4f 	.word	0x0800aa4f
 800a9d8:	0800aa4f 	.word	0x0800aa4f
 800a9dc:	0800aa4f 	.word	0x0800aa4f
 800a9e0:	0800aa4f 	.word	0x0800aa4f
 800a9e4:	0800aa4f 	.word	0x0800aa4f
 800a9e8:	0800aa41 	.word	0x0800aa41
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	d02a      	beq.n	800aa46 <UART_SetConfig+0x8a6>
 800a9f0:	e02d      	b.n	800aa4e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9f2:	f7fc f8a1 	bl	8006b38 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9f8:	e02f      	b.n	800aa5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fa:	f107 0314 	add.w	r3, r7, #20
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fc f8b0 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa08:	e027      	b.n	800aa5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa0a:	f107 0308 	add.w	r3, r7, #8
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fc f9fc 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa18:	e01f      	b.n	800aa5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa1a:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <UART_SetConfig+0x900>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa26:	4b1e      	ldr	r3, [pc, #120]	; (800aaa0 <UART_SetConfig+0x900>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	4a1d      	ldr	r2, [pc, #116]	; (800aaa8 <UART_SetConfig+0x908>)
 800aa32:	fa22 f303 	lsr.w	r3, r2, r3
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa38:	e00f      	b.n	800aa5a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800aa3a:	4b1b      	ldr	r3, [pc, #108]	; (800aaa8 <UART_SetConfig+0x908>)
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa3e:	e00c      	b.n	800aa5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa40:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <UART_SetConfig+0x90c>)
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa44:	e009      	b.n	800aa5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa4c:	e005      	b.n	800aa5a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 81e6 	beq.w	800ae2e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	4a12      	ldr	r2, [pc, #72]	; (800aab0 <UART_SetConfig+0x910>)
 800aa68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa74:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	6a3a      	ldr	r2, [r7, #32]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d305      	bcc.n	800aa92 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa8c:	6a3a      	ldr	r2, [r7, #32]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d910      	bls.n	800aab4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa98:	e1c9      	b.n	800ae2e <UART_SetConfig+0xc8e>
 800aa9a:	bf00      	nop
 800aa9c:	40011c00 	.word	0x40011c00
 800aaa0:	58024400 	.word	0x58024400
 800aaa4:	58000c00 	.word	0x58000c00
 800aaa8:	03d09000 	.word	0x03d09000
 800aaac:	003d0900 	.word	0x003d0900
 800aab0:	080135b4 	.word	0x080135b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab6:	4618      	mov	r0, r3
 800aab8:	f04f 0100 	mov.w	r1, #0
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	4ac1      	ldr	r2, [pc, #772]	; (800adc8 <UART_SetConfig+0xc28>)
 800aac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	f7f5 fc78 	bl	80003c0 <__aeabi_uldivmod>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4610      	mov	r0, r2
 800aad6:	4619      	mov	r1, r3
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	020b      	lsls	r3, r1, #8
 800aae2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aae6:	0202      	lsls	r2, r0, #8
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	6849      	ldr	r1, [r1, #4]
 800aaec:	0849      	lsrs	r1, r1, #1
 800aaee:	4608      	mov	r0, r1
 800aaf0:	f04f 0100 	mov.w	r1, #0
 800aaf4:	1814      	adds	r4, r2, r0
 800aaf6:	eb43 0501 	adc.w	r5, r3, r1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 fc5a 	bl	80003c0 <__aeabi_uldivmod>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4613      	mov	r3, r2
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab1a:	d308      	bcc.n	800ab2e <UART_SetConfig+0x98e>
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab22:	d204      	bcs.n	800ab2e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab2a:	60da      	str	r2, [r3, #12]
 800ab2c:	e17f      	b.n	800ae2e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab34:	e17b      	b.n	800ae2e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab3e:	f040 80bd 	bne.w	800acbc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ab42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	dc48      	bgt.n	800abdc <UART_SetConfig+0xa3c>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	db7b      	blt.n	800ac46 <UART_SetConfig+0xaa6>
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d879      	bhi.n	800ac46 <UART_SetConfig+0xaa6>
 800ab52:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <UART_SetConfig+0x9b8>)
 800ab54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab58:	0800abe3 	.word	0x0800abe3
 800ab5c:	0800abeb 	.word	0x0800abeb
 800ab60:	0800ac47 	.word	0x0800ac47
 800ab64:	0800ac47 	.word	0x0800ac47
 800ab68:	0800abf3 	.word	0x0800abf3
 800ab6c:	0800ac47 	.word	0x0800ac47
 800ab70:	0800ac47 	.word	0x0800ac47
 800ab74:	0800ac47 	.word	0x0800ac47
 800ab78:	0800ac03 	.word	0x0800ac03
 800ab7c:	0800ac47 	.word	0x0800ac47
 800ab80:	0800ac47 	.word	0x0800ac47
 800ab84:	0800ac47 	.word	0x0800ac47
 800ab88:	0800ac47 	.word	0x0800ac47
 800ab8c:	0800ac47 	.word	0x0800ac47
 800ab90:	0800ac47 	.word	0x0800ac47
 800ab94:	0800ac47 	.word	0x0800ac47
 800ab98:	0800ac13 	.word	0x0800ac13
 800ab9c:	0800ac47 	.word	0x0800ac47
 800aba0:	0800ac47 	.word	0x0800ac47
 800aba4:	0800ac47 	.word	0x0800ac47
 800aba8:	0800ac47 	.word	0x0800ac47
 800abac:	0800ac47 	.word	0x0800ac47
 800abb0:	0800ac47 	.word	0x0800ac47
 800abb4:	0800ac47 	.word	0x0800ac47
 800abb8:	0800ac47 	.word	0x0800ac47
 800abbc:	0800ac47 	.word	0x0800ac47
 800abc0:	0800ac47 	.word	0x0800ac47
 800abc4:	0800ac47 	.word	0x0800ac47
 800abc8:	0800ac47 	.word	0x0800ac47
 800abcc:	0800ac47 	.word	0x0800ac47
 800abd0:	0800ac47 	.word	0x0800ac47
 800abd4:	0800ac47 	.word	0x0800ac47
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	2b40      	cmp	r3, #64	; 0x40
 800abde:	d02e      	beq.n	800ac3e <UART_SetConfig+0xa9e>
 800abe0:	e031      	b.n	800ac46 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe2:	f7fa fc1d 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 800abe6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abe8:	e033      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abea:	f7fa fc2f 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 800abee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abf0:	e02f      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf2:	f107 0314 	add.w	r3, r7, #20
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fb ffb4 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac00:	e027      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fc f900 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac10:	e01f      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac12:	4b6e      	ldr	r3, [pc, #440]	; (800adcc <UART_SetConfig+0xc2c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0320 	and.w	r3, r3, #32
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac1e:	4b6b      	ldr	r3, [pc, #428]	; (800adcc <UART_SetConfig+0xc2c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	08db      	lsrs	r3, r3, #3
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	4a69      	ldr	r2, [pc, #420]	; (800add0 <UART_SetConfig+0xc30>)
 800ac2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac30:	e00f      	b.n	800ac52 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ac32:	4b67      	ldr	r3, [pc, #412]	; (800add0 <UART_SetConfig+0xc30>)
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac36:	e00c      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac38:	4b66      	ldr	r3, [pc, #408]	; (800add4 <UART_SetConfig+0xc34>)
 800ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac3c:	e009      	b.n	800ac52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac44:	e005      	b.n	800ac52 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80ea 	beq.w	800ae2e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5e:	4a5a      	ldr	r2, [pc, #360]	; (800adc8 <UART_SetConfig+0xc28>)
 800ac60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac64:	461a      	mov	r2, r3
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac6c:	005a      	lsls	r2, r3, #1
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	441a      	add	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	2b0f      	cmp	r3, #15
 800ac84:	d916      	bls.n	800acb4 <UART_SetConfig+0xb14>
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8c:	d212      	bcs.n	800acb4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	f023 030f 	bic.w	r3, r3, #15
 800ac96:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	085b      	lsrs	r3, r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aca6:	4313      	orrs	r3, r2
 800aca8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800acb0:	60da      	str	r2, [r3, #12]
 800acb2:	e0bc      	b.n	800ae2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800acba:	e0b8      	b.n	800ae2e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	dc4b      	bgt.n	800ad5c <UART_SetConfig+0xbbc>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f2c0 8087 	blt.w	800add8 <UART_SetConfig+0xc38>
 800acca:	2b20      	cmp	r3, #32
 800accc:	f200 8084 	bhi.w	800add8 <UART_SetConfig+0xc38>
 800acd0:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <UART_SetConfig+0xb38>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800ad63 	.word	0x0800ad63
 800acdc:	0800ad6b 	.word	0x0800ad6b
 800ace0:	0800add9 	.word	0x0800add9
 800ace4:	0800add9 	.word	0x0800add9
 800ace8:	0800ad73 	.word	0x0800ad73
 800acec:	0800add9 	.word	0x0800add9
 800acf0:	0800add9 	.word	0x0800add9
 800acf4:	0800add9 	.word	0x0800add9
 800acf8:	0800ad83 	.word	0x0800ad83
 800acfc:	0800add9 	.word	0x0800add9
 800ad00:	0800add9 	.word	0x0800add9
 800ad04:	0800add9 	.word	0x0800add9
 800ad08:	0800add9 	.word	0x0800add9
 800ad0c:	0800add9 	.word	0x0800add9
 800ad10:	0800add9 	.word	0x0800add9
 800ad14:	0800add9 	.word	0x0800add9
 800ad18:	0800ad93 	.word	0x0800ad93
 800ad1c:	0800add9 	.word	0x0800add9
 800ad20:	0800add9 	.word	0x0800add9
 800ad24:	0800add9 	.word	0x0800add9
 800ad28:	0800add9 	.word	0x0800add9
 800ad2c:	0800add9 	.word	0x0800add9
 800ad30:	0800add9 	.word	0x0800add9
 800ad34:	0800add9 	.word	0x0800add9
 800ad38:	0800add9 	.word	0x0800add9
 800ad3c:	0800add9 	.word	0x0800add9
 800ad40:	0800add9 	.word	0x0800add9
 800ad44:	0800add9 	.word	0x0800add9
 800ad48:	0800add9 	.word	0x0800add9
 800ad4c:	0800add9 	.word	0x0800add9
 800ad50:	0800add9 	.word	0x0800add9
 800ad54:	0800add9 	.word	0x0800add9
 800ad58:	0800adb9 	.word	0x0800adb9
 800ad5c:	2b40      	cmp	r3, #64	; 0x40
 800ad5e:	d02e      	beq.n	800adbe <UART_SetConfig+0xc1e>
 800ad60:	e03a      	b.n	800add8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad62:	f7fa fb5d 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 800ad66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad68:	e03c      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad6a:	f7fa fb6f 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 800ad6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad70:	e038      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad72:	f107 0314 	add.w	r3, r7, #20
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fb fef4 	bl	8006b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad80:	e030      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fc f840 	bl	8006e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad90:	e028      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad92:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <UART_SetConfig+0xc2c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0320 	and.w	r3, r3, #32
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d009      	beq.n	800adb2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad9e:	4b0b      	ldr	r3, [pc, #44]	; (800adcc <UART_SetConfig+0xc2c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	08db      	lsrs	r3, r3, #3
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	4a09      	ldr	r2, [pc, #36]	; (800add0 <UART_SetConfig+0xc30>)
 800adaa:	fa22 f303 	lsr.w	r3, r2, r3
 800adae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adb0:	e018      	b.n	800ade4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800adb2:	4b07      	ldr	r3, [pc, #28]	; (800add0 <UART_SetConfig+0xc30>)
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adb6:	e015      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adb8:	4b06      	ldr	r3, [pc, #24]	; (800add4 <UART_SetConfig+0xc34>)
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adbc:	e012      	b.n	800ade4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adc4:	e00e      	b.n	800ade4 <UART_SetConfig+0xc44>
 800adc6:	bf00      	nop
 800adc8:	080135b4 	.word	0x080135b4
 800adcc:	58024400 	.word	0x58024400
 800add0:	03d09000 	.word	0x03d09000
 800add4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ade2:	bf00      	nop
    }

    if (pclk != 0U)
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d021      	beq.n	800ae2e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	4a1a      	ldr	r2, [pc, #104]	; (800ae58 <UART_SetConfig+0xcb8>)
 800adf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf4:	461a      	mov	r2, r3
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf8:	fbb3 f2f2 	udiv	r2, r3, r2
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	085b      	lsrs	r3, r3, #1
 800ae02:	441a      	add	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	2b0f      	cmp	r3, #15
 800ae12:	d909      	bls.n	800ae28 <UART_SetConfig+0xc88>
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1a:	d205      	bcs.n	800ae28 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60da      	str	r2, [r3, #12]
 800ae26:	e002      	b.n	800ae2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ae4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3738      	adds	r7, #56	; 0x38
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bdb0      	pop	{r4, r5, r7, pc}
 800ae56:	bf00      	nop
 800ae58:	080135b4 	.word	0x080135b4

0800ae5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00a      	beq.n	800aeca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01a      	beq.n	800af72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af5a:	d10a      	bne.n	800af72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]
  }
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afb0:	f7f6 fc76 	bl	80018a0 <HAL_GetTick>
 800afb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0308 	and.w	r3, r3, #8
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d10e      	bne.n	800afe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f82f 	bl	800b036 <UART_WaitOnFlagUntilTimeout>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e025      	b.n	800b02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b04      	cmp	r3, #4
 800afee:	d10e      	bne.n	800b00e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f819 	bl	800b036 <UART_WaitOnFlagUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e00f      	b.n	800b02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b09c      	sub	sp, #112	; 0x70
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	603b      	str	r3, [r7, #0]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b046:	e0a9      	b.n	800b19c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	f000 80a5 	beq.w	800b19c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b052:	f7f6 fc25 	bl	80018a0 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b05e:	429a      	cmp	r2, r3
 800b060:	d302      	bcc.n	800b068 <UART_WaitOnFlagUntilTimeout+0x32>
 800b062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b064:	2b00      	cmp	r3, #0
 800b066:	d140      	bne.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b07c:	667b      	str	r3, [r7, #100]	; 0x64
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b088:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b08c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e6      	bne.n	800b068 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	f023 0301 	bic.w	r3, r3, #1
 800b0b0:	663b      	str	r3, [r7, #96]	; 0x60
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e5      	bne.n	800b09a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e069      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d051      	beq.n	800b19c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b106:	d149      	bne.n	800b19c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	e853 3f00 	ldrex	r3, [r3]
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b126:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
 800b132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b138:	e841 2300 	strex	r3, r2, [r1]
 800b13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e6      	bne.n	800b112 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3308      	adds	r3, #8
 800b14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	613b      	str	r3, [r7, #16]
   return(result);
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f023 0301 	bic.w	r3, r3, #1
 800b15a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b164:	623a      	str	r2, [r7, #32]
 800b166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	69f9      	ldr	r1, [r7, #28]
 800b16a:	6a3a      	ldr	r2, [r7, #32]
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	61bb      	str	r3, [r7, #24]
   return(result);
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e5      	bne.n	800b144 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2220      	movs	r2, #32
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e010      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	69da      	ldr	r2, [r3, #28]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	bf0c      	ite	eq
 800b1ac:	2301      	moveq	r3, #1
 800b1ae:	2300      	movne	r3, #0
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	f43f af46 	beq.w	800b048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3770      	adds	r7, #112	; 0x70
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_UARTEx_DisableFifoMode+0x16>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e027      	b.n	800b22c <HAL_UARTEx_DisableFifoMode+0x66>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2224      	movs	r2, #36	; 0x24
 800b1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 0201 	bic.w	r2, r2, #1
 800b202:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b20a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d101      	bne.n	800b250 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b24c:	2302      	movs	r3, #2
 800b24e:	e02d      	b.n	800b2ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2224      	movs	r2, #36	; 0x24
 800b25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0201 	bic.w	r2, r2, #1
 800b276:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	430a      	orrs	r2, r1
 800b28a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f84f 	bl	800b330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e02d      	b.n	800b328 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2224      	movs	r2, #36	; 0x24
 800b2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0201 	bic.w	r2, r2, #1
 800b2f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f811 	bl	800b330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d108      	bne.n	800b352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b350:	e031      	b.n	800b3b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b352:	2310      	movs	r3, #16
 800b354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b356:	2310      	movs	r3, #16
 800b358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	0e5b      	lsrs	r3, r3, #25
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	0f5b      	lsrs	r3, r3, #29
 800b372:	b2db      	uxtb	r3, r3
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	7b3a      	ldrb	r2, [r7, #12]
 800b37e:	4911      	ldr	r1, [pc, #68]	; (800b3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b380:	5c8a      	ldrb	r2, [r1, r2]
 800b382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b386:	7b3a      	ldrb	r2, [r7, #12]
 800b388:	490f      	ldr	r1, [pc, #60]	; (800b3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b38a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b38c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b390:	b29a      	uxth	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	7b7a      	ldrb	r2, [r7, #13]
 800b39c:	4909      	ldr	r1, [pc, #36]	; (800b3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b39e:	5c8a      	ldrb	r2, [r1, r2]
 800b3a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3a4:	7b7a      	ldrb	r2, [r7, #13]
 800b3a6:	4908      	ldr	r1, [pc, #32]	; (800b3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	080135cc 	.word	0x080135cc
 800b3c8:	080135d4 	.word	0x080135d4

0800b3cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	b480      	push	{r7}
 800b3d0:	b085      	sub	sp, #20
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	f107 001c 	add.w	r0, r7, #28
 800b3da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b3e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b3e6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b3ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b3ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b3f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	4b07      	ldr	r3, [pc, #28]	; (800b41c <SDMMC_Init+0x50>)
 800b400:	4013      	ands	r3, r2
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	431a      	orrs	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	b004      	add	sp, #16
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	ffc02c00 	.word	0xffc02c00

0800b420 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b42e:	4618      	mov	r0, r3
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f043 0203 	orr.w	r2, r3, #3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0303 	and.w	r3, r3, #3
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
	...

0800b49c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b4c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b4c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <SDMMC_SendCommand+0x50>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	fffee0c0 	.word	0xfffee0c0

0800b4f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	b2db      	uxtb	r3, r3
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b085      	sub	sp, #20
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3314      	adds	r3, #20
 800b518:	461a      	mov	r2, r3
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	4413      	add	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b556:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b55c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b562:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0

}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b596:	2310      	movs	r3, #16
 800b598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b59a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff ff73 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ba:	2110      	movs	r1, #16
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fa5f 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3720      	adds	r7, #32
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b088      	sub	sp, #32
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b5dc:	2311      	movs	r3, #17
 800b5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f0:	f107 0308 	add.w	r3, r7, #8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff ff50 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b600:	2111      	movs	r1, #17
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa3c 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60a:	69fb      	ldr	r3, [r7, #28]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b622:	2312      	movs	r3, #18
 800b624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b636:	f107 0308 	add.w	r3, r7, #8
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff ff2d 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b642:	f241 3288 	movw	r2, #5000	; 0x1388
 800b646:	2112      	movs	r1, #18
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fa19 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b64e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b650:	69fb      	ldr	r3, [r7, #28]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3720      	adds	r7, #32
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b088      	sub	sp, #32
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b668:	2318      	movs	r3, #24
 800b66a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b67a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67c:	f107 0308 	add.w	r3, r7, #8
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ff0a 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b688:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68c:	2118      	movs	r1, #24
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f9f6 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b696:	69fb      	ldr	r3, [r7, #28]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6ae:	2319      	movs	r3, #25
 800b6b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c2:	f107 0308 	add.w	r3, r7, #8
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fee7 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d2:	2119      	movs	r1, #25
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9d3 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b6da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6dc:	69fb      	ldr	r3, [r7, #28]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3720      	adds	r7, #32
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b706:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b720:	f107 0308 	add.w	r3, r7, #8
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff feb8 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b72c:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <SDMMC_CmdStopTransfer+0x74>)
 800b72e:	210c      	movs	r1, #12
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f9a5 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b736:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b74a:	d101      	bne.n	800b750 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b74c:	2300      	movs	r3, #0
 800b74e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b750:	69fb      	ldr	r3, [r7, #28]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3720      	adds	r7, #32
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	05f5e100 	.word	0x05f5e100

0800b760 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b76e:	2307      	movs	r3, #7
 800b770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b772:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b77c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fe87 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b792:	2107      	movs	r1, #7
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f973 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79c:	69fb      	ldr	r3, [r7, #28]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c4:	f107 0308 	add.w	r3, r7, #8
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff fe66 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fb97 	bl	800bf04 <SDMMC_GetCmdError>
 800b7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b088      	sub	sp, #32
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fe46 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fb29 	bl	800be68 <SDMMC_GetCmdResp7>
 800b816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b818:	69fb      	ldr	r3, [r7, #28]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b088      	sub	sp, #32
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b830:	2337      	movs	r3, #55	; 0x37
 800b832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b834:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b83a:	2300      	movs	r3, #0
 800b83c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b83e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b842:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b844:	f107 0308 	add.w	r3, r7, #8
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7ff fe26 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b850:	f241 3288 	movw	r2, #5000	; 0x1388
 800b854:	2137      	movs	r1, #55	; 0x37
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f912 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b85c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b85e:	69fb      	ldr	r3, [r7, #28]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b876:	2329      	movs	r3, #41	; 0x29
 800b878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b87a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b87e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b880:	2300      	movs	r3, #0
 800b882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b88a:	f107 0308 	add.w	r3, r7, #8
 800b88e:	4619      	mov	r1, r3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff fe03 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa2e 	bl	800bcf8 <SDMMC_GetCmdResp3>
 800b89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b89e:	69fb      	ldr	r3, [r7, #28]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b088      	sub	sp, #32
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8b6:	2306      	movs	r3, #6
 800b8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ca:	f107 0308 	add.w	r3, r7, #8
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff fde3 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8da:	2106      	movs	r1, #6
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f8cf 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b088      	sub	sp, #32
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b8fa:	2333      	movs	r3, #51	; 0x33
 800b8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b90e:	f107 0308 	add.w	r3, r7, #8
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fdc1 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b91a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91e:	2133      	movs	r1, #51	; 0x33
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f8ad 	bl	800ba80 <SDMMC_GetCmdResp1>
 800b926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b928:	69fb      	ldr	r3, [r7, #28]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b088      	sub	sp, #32
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b93e:	2302      	movs	r3, #2
 800b940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b942:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b948:	2300      	movs	r3, #0
 800b94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b952:	f107 0308 	add.w	r3, r7, #8
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff fd9f 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f980 	bl	800bc64 <SDMMC_GetCmdResp2>
 800b964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b966:	69fb      	ldr	r3, [r7, #28]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3720      	adds	r7, #32
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b088      	sub	sp, #32
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b97e:	2309      	movs	r3, #9
 800b980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b982:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b990:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b992:	f107 0308 	add.w	r3, r7, #8
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fd7f 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f960 	bl	800bc64 <SDMMC_GetCmdResp2>
 800b9a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9a6:	69fb      	ldr	r3, [r7, #28]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3720      	adds	r7, #32
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b088      	sub	sp, #32
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fd5f 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	2103      	movs	r1, #3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f9c8 	bl	800bd78 <SDMMC_GetCmdResp6>
 800b9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3720      	adds	r7, #32
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba02:	230d      	movs	r3, #13
 800ba04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba16:	f107 0308 	add.w	r3, r7, #8
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fd3d 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba26:	210d      	movs	r1, #13
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f829 	bl	800ba80 <SDMMC_GetCmdResp1>
 800ba2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba30:	69fb      	ldr	r3, [r7, #28]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b088      	sub	sp, #32
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ba46:	230d      	movs	r3, #13
 800ba48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba50:	2300      	movs	r3, #0
 800ba52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba5a:	f107 0308 	add.w	r3, r7, #8
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff fd1b 	bl	800b49c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ba66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba6a:	210d      	movs	r1, #13
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f807 	bl	800ba80 <SDMMC_GetCmdResp1>
 800ba72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba74:	69fb      	ldr	r3, [r7, #28]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3720      	adds	r7, #32
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba8e:	4b70      	ldr	r3, [pc, #448]	; (800bc50 <SDMMC_GetCmdResp1+0x1d0>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a70      	ldr	r2, [pc, #448]	; (800bc54 <SDMMC_GetCmdResp1+0x1d4>)
 800ba94:	fba2 2303 	umull	r2, r3, r2, r3
 800ba98:	0a5a      	lsrs	r2, r3, #9
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	fb02 f303 	mul.w	r3, r2, r3
 800baa0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	1e5a      	subs	r2, r3, #1
 800baa6:	61fa      	str	r2, [r7, #28]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d102      	bne.n	800bab2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bab0:	e0c9      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bab8:	69ba      	ldr	r2, [r7, #24]
 800baba:	4b67      	ldr	r3, [pc, #412]	; (800bc58 <SDMMC_GetCmdResp1+0x1d8>)
 800babc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0ef      	beq.n	800baa2 <SDMMC_GetCmdResp1+0x22>
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1ea      	bne.n	800baa2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d004      	beq.n	800bae2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2204      	movs	r2, #4
 800badc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bade:	2304      	movs	r3, #4
 800bae0:	e0b1      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d004      	beq.n	800baf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e0a6      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4a58      	ldr	r2, [pc, #352]	; (800bc5c <SDMMC_GetCmdResp1+0x1dc>)
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fcf6 	bl	800b4f0 <SDMMC_GetCommandResponse>
 800bb04:	4603      	mov	r3, r0
 800bb06:	461a      	mov	r2, r3
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d001      	beq.n	800bb12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e099      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb12:	2100      	movs	r1, #0
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f7ff fcf8 	bl	800b50a <SDMMC_GetResponse>
 800bb1a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4b50      	ldr	r3, [pc, #320]	; (800bc60 <SDMMC_GetCmdResp1+0x1e0>)
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	e08d      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	da02      	bge.n	800bb36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb34:	e087      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb40:	2340      	movs	r3, #64	; 0x40
 800bb42:	e080      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb4e:	2380      	movs	r3, #128	; 0x80
 800bb50:	e079      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb60:	e071      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb70:	e069      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb80:	e061      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb90:	e059      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bba0:	e051      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbb0:	e049      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbc0:	e041      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd0:	e039      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbe0:	e031      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbf0:	e029      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc00:	e021      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc10:	e019      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc20:	e011      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc30:	e009      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc40:	e001      	b.n	800bc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2400802c 	.word	0x2400802c
 800bc54:	10624dd3 	.word	0x10624dd3
 800bc58:	00200045 	.word	0x00200045
 800bc5c:	002000c5 	.word	0x002000c5
 800bc60:	fdffe008 	.word	0xfdffe008

0800bc64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <SDMMC_GetCmdResp2+0x88>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a1f      	ldr	r2, [pc, #124]	; (800bcf0 <SDMMC_GetCmdResp2+0x8c>)
 800bc72:	fba2 2303 	umull	r2, r3, r2, r3
 800bc76:	0a5b      	lsrs	r3, r3, #9
 800bc78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7c:	fb02 f303 	mul.w	r3, r2, r3
 800bc80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	60fa      	str	r2, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc90:	e026      	b.n	800bce0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0ef      	beq.n	800bc82 <SDMMC_GetCmdResp2+0x1e>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1ea      	bne.n	800bc82 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	e00e      	b.n	800bce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d004      	beq.n	800bcd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e003      	b.n	800bce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a06      	ldr	r2, [pc, #24]	; (800bcf4 <SDMMC_GetCmdResp2+0x90>)
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	2400802c 	.word	0x2400802c
 800bcf0:	10624dd3 	.word	0x10624dd3
 800bcf4:	002000c5 	.word	0x002000c5

0800bcf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd00:	4b1a      	ldr	r3, [pc, #104]	; (800bd6c <SDMMC_GetCmdResp3+0x74>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a1a      	ldr	r2, [pc, #104]	; (800bd70 <SDMMC_GetCmdResp3+0x78>)
 800bd06:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0a:	0a5b      	lsrs	r3, r3, #9
 800bd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	1e5a      	subs	r2, r3, #1
 800bd1a:	60fa      	str	r2, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd24:	e01b      	b.n	800bd5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0ef      	beq.n	800bd16 <SDMMC_GetCmdResp3+0x1e>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1ea      	bne.n	800bd16 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d004      	beq.n	800bd56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2204      	movs	r2, #4
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd52:	2304      	movs	r3, #4
 800bd54:	e003      	b.n	800bd5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a06      	ldr	r2, [pc, #24]	; (800bd74 <SDMMC_GetCmdResp3+0x7c>)
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	2400802c 	.word	0x2400802c
 800bd70:	10624dd3 	.word	0x10624dd3
 800bd74:	002000c5 	.word	0x002000c5

0800bd78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	460b      	mov	r3, r1
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd86:	4b35      	ldr	r3, [pc, #212]	; (800be5c <SDMMC_GetCmdResp6+0xe4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a35      	ldr	r2, [pc, #212]	; (800be60 <SDMMC_GetCmdResp6+0xe8>)
 800bd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd90:	0a5b      	lsrs	r3, r3, #9
 800bd92:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd96:	fb02 f303 	mul.w	r3, r2, r3
 800bd9a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	1e5a      	subs	r2, r3, #1
 800bda0:	61fa      	str	r2, [r7, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bda6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdaa:	e052      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0ef      	beq.n	800bd9c <SDMMC_GetCmdResp6+0x24>
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1ea      	bne.n	800bd9c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d004      	beq.n	800bddc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdd8:	2304      	movs	r3, #4
 800bdda:	e03a      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d004      	beq.n	800bdf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2201      	movs	r2, #1
 800bdec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e02f      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7ff fb7c 	bl	800b4f0 <SDMMC_GetCommandResponse>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	7afb      	ldrb	r3, [r7, #11]
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d001      	beq.n	800be06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be02:	2301      	movs	r3, #1
 800be04:	e025      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	4a16      	ldr	r2, [pc, #88]	; (800be64 <SDMMC_GetCmdResp6+0xec>)
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be0c:	2100      	movs	r1, #0
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7ff fb7b 	bl	800b50a <SDMMC_GetResponse>
 800be14:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	b29a      	uxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e011      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be3c:	e009      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be4c:	e001      	b.n	800be52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be52:	4618      	mov	r0, r3
 800be54:	3720      	adds	r7, #32
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	2400802c 	.word	0x2400802c
 800be60:	10624dd3 	.word	0x10624dd3
 800be64:	002000c5 	.word	0x002000c5

0800be68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be70:	4b22      	ldr	r3, [pc, #136]	; (800befc <SDMMC_GetCmdResp7+0x94>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a22      	ldr	r2, [pc, #136]	; (800bf00 <SDMMC_GetCmdResp7+0x98>)
 800be76:	fba2 2303 	umull	r2, r3, r2, r3
 800be7a:	0a5b      	lsrs	r3, r3, #9
 800be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1e5a      	subs	r2, r3, #1
 800be8a:	60fa      	str	r2, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be94:	e02c      	b.n	800bef0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0ef      	beq.n	800be86 <SDMMC_GetCmdResp7+0x1e>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1ea      	bne.n	800be86 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2204      	movs	r2, #4
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bec2:	2304      	movs	r3, #4
 800bec4:	e014      	b.n	800bef0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d004      	beq.n	800bedc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bed8:	2301      	movs	r3, #1
 800beda:	e009      	b.n	800bef0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2240      	movs	r2, #64	; 0x40
 800beec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800beee:	2300      	movs	r3, #0

}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	2400802c 	.word	0x2400802c
 800bf00:	10624dd3 	.word	0x10624dd3

0800bf04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf0c:	4b11      	ldr	r3, [pc, #68]	; (800bf54 <SDMMC_GetCmdError+0x50>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <SDMMC_GetCmdError+0x54>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	0a5b      	lsrs	r3, r3, #9
 800bf18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf1c:	fb02 f303 	mul.w	r3, r2, r3
 800bf20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	1e5a      	subs	r2, r3, #1
 800bf26:	60fa      	str	r2, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf30:	e009      	b.n	800bf46 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0f1      	beq.n	800bf22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a06      	ldr	r2, [pc, #24]	; (800bf5c <SDMMC_GetCmdError+0x58>)
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	2400802c 	.word	0x2400802c
 800bf58:	10624dd3 	.word	0x10624dd3
 800bf5c:	002000c5 	.word	0x002000c5

0800bf60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf64:	4904      	ldr	r1, [pc, #16]	; (800bf78 <MX_FATFS_Init+0x18>)
 800bf66:	4805      	ldr	r0, [pc, #20]	; (800bf7c <MX_FATFS_Init+0x1c>)
 800bf68:	f003 f8ea 	bl	800f140 <FATFS_LinkDriver>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461a      	mov	r2, r3
 800bf70:	4b03      	ldr	r3, [pc, #12]	; (800bf80 <MX_FATFS_Init+0x20>)
 800bf72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf74:	bf00      	nop
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	2400d160 	.word	0x2400d160
 800bf7c:	080135dc 	.word	0x080135dc
 800bf80:	2400d15c 	.word	0x2400d15c

0800bf84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bf84:	b480      	push	{r7}
 800bf86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bf88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf9e:	f000 f885 	bl	800c0ac <BSP_SD_IsDetected>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d001      	beq.n	800bfac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	e012      	b.n	800bfd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bfac:	480b      	ldr	r0, [pc, #44]	; (800bfdc <BSP_SD_Init+0x48>)
 800bfae:	f7fb fb37 	bl	8007620 <HAL_SD_Init>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d109      	bne.n	800bfd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bfbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bfc0:	4806      	ldr	r0, [pc, #24]	; (800bfdc <BSP_SD_Init+0x48>)
 800bfc2:	f7fc f9e5 	bl	8008390 <HAL_SD_ConfigWideBusOperation>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	2400ccb0 	.word	0x2400ccb0

0800bfe0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	68f9      	ldr	r1, [r7, #12]
 800bff6:	4806      	ldr	r0, [pc, #24]	; (800c010 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bff8:	f7fb fc2c 	bl	8007854 <HAL_SD_ReadBlocks_DMA>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	2400ccb0 	.word	0x2400ccb0

0800c014 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	68f9      	ldr	r1, [r7, #12]
 800c02a:	4806      	ldr	r0, [pc, #24]	; (800c044 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c02c:	f7fb fcba 	bl	80079a4 <HAL_SD_WriteBlocks_DMA>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	2400ccb0 	.word	0x2400ccb0

0800c048 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c04c:	4805      	ldr	r0, [pc, #20]	; (800c064 <BSP_SD_GetCardState+0x1c>)
 800c04e:	f7fc fab1 	bl	80085b4 <HAL_SD_GetCardState>
 800c052:	4603      	mov	r3, r0
 800c054:	2b04      	cmp	r3, #4
 800c056:	bf14      	ite	ne
 800c058:	2301      	movne	r3, #1
 800c05a:	2300      	moveq	r3, #0
 800c05c:	b2db      	uxtb	r3, r3
}
 800c05e:	4618      	mov	r0, r3
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	2400ccb0 	.word	0x2400ccb0

0800c068 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	4803      	ldr	r0, [pc, #12]	; (800c080 <BSP_SD_GetCardInfo+0x18>)
 800c074:	f7fc f960 	bl	8008338 <HAL_SD_GetCardInfo>
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	2400ccb0 	.word	0x2400ccb0

0800c084 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c08c:	f000 f9ac 	bl	800c3e8 <BSP_SD_WriteCpltCallback>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c0a0:	f000 f9b4 	bl	800c40c <BSP_SD_ReadCpltCallback>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c0b6:	f000 f80b 	bl	800c0d0 <BSP_PlatformIsDetected>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	b2db      	uxtb	r3, r3
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c0da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0de:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <BSP_PlatformIsDetected+0x28>)
 800c0e0:	f7f7 ff80 	bl	8003fe4 <HAL_GPIO_ReadPin>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	58020800 	.word	0x58020800

0800c0fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c104:	f003 f922 	bl	800f34c <osKernelGetTickCount>
 800c108:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c10a:	e006      	b.n	800c11a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c10c:	f7ff ff9c 	bl	800c048 <BSP_SD_GetCardState>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d101      	bne.n	800c11a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c116:	2300      	movs	r3, #0
 800c118:	e009      	b.n	800c12e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c11a:	f003 f917 	bl	800f34c <osKernelGetTickCount>
 800c11e:	4602      	mov	r2, r0
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d8f0      	bhi.n	800c10c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c12a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <SD_CheckStatus+0x38>)
 800c144:	2201      	movs	r2, #1
 800c146:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c148:	f7ff ff7e 	bl	800c048 <BSP_SD_GetCardState>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d107      	bne.n	800c162 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <SD_CheckStatus+0x38>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f023 0301 	bic.w	r3, r3, #1
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	4b04      	ldr	r3, [pc, #16]	; (800c170 <SD_CheckStatus+0x38>)
 800c160:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c162:	4b03      	ldr	r3, [pc, #12]	; (800c170 <SD_CheckStatus+0x38>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	b2db      	uxtb	r3, r3
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	24008039 	.word	0x24008039

0800c174 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c17e:	4b1c      	ldr	r3, [pc, #112]	; (800c1f0 <SD_initialize+0x7c>)
 800c180:	2201      	movs	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c184:	f003 f89a 	bl	800f2bc <osKernelGetState>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d129      	bne.n	800c1e2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c18e:	f7ff ff01 	bl	800bf94 <BSP_SD_Init>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d107      	bne.n	800c1a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff ffcc 	bl	800c138 <SD_CheckStatus>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4b12      	ldr	r3, [pc, #72]	; (800c1f0 <SD_initialize+0x7c>)
 800c1a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c1a8:	4b11      	ldr	r3, [pc, #68]	; (800c1f0 <SD_initialize+0x7c>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d017      	beq.n	800c1e2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c1b2:	4b10      	ldr	r3, [pc, #64]	; (800c1f4 <SD_initialize+0x80>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d107      	bne.n	800c1ca <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2102      	movs	r1, #2
 800c1be:	200a      	movs	r0, #10
 800c1c0:	f003 faca 	bl	800f758 <osMessageQueueNew>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	4a0b      	ldr	r2, [pc, #44]	; (800c1f4 <SD_initialize+0x80>)
 800c1c8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c1ca:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <SD_initialize+0x80>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d107      	bne.n	800c1e2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <SD_initialize+0x7c>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f043 0301 	orr.w	r3, r3, #1
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <SD_initialize+0x7c>)
 800c1e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c1e2:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <SD_initialize+0x7c>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	b2db      	uxtb	r3, r3
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	24008039 	.word	0x24008039
 800c1f4:	2400818c 	.word	0x2400818c

0800c1f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff ff97 	bl	800c138 <SD_CheckStatus>
 800c20a:	4603      	mov	r3, r0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b088      	sub	sp, #32
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c228:	f247 5030 	movw	r0, #30000	; 0x7530
 800c22c:	f7ff ff66 	bl	800c0fc <SD_CheckStatusWithTimeout>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	da01      	bge.n	800c23a <SD_read+0x26>
  {
    return res;
 800c236:	7ffb      	ldrb	r3, [r7, #31]
 800c238:	e02f      	b.n	800c29a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	68b8      	ldr	r0, [r7, #8]
 800c240:	f7ff fece 	bl	800bfe0 <BSP_SD_ReadBlocks_DMA>
 800c244:	4603      	mov	r3, r0
 800c246:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c248:	7fbb      	ldrb	r3, [r7, #30]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d124      	bne.n	800c298 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c24e:	4b15      	ldr	r3, [pc, #84]	; (800c2a4 <SD_read+0x90>)
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f107 0112 	add.w	r1, r7, #18
 800c256:	f247 5330 	movw	r3, #30000	; 0x7530
 800c25a:	2200      	movs	r2, #0
 800c25c:	f003 fb50 	bl	800f900 <osMessageQueueGet>
 800c260:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d117      	bne.n	800c298 <SD_read+0x84>
 800c268:	8a7b      	ldrh	r3, [r7, #18]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d114      	bne.n	800c298 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c26e:	f003 f86d 	bl	800f34c <osKernelGetTickCount>
 800c272:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c274:	e007      	b.n	800c286 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c276:	f7ff fee7 	bl	800c048 <BSP_SD_GetCardState>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <SD_read+0x72>
              {
                res = RES_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c284:	e008      	b.n	800c298 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c286:	f003 f861 	bl	800f34c <osKernelGetTickCount>
 800c28a:	4602      	mov	r2, r0
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	f247 522f 	movw	r2, #29999	; 0x752f
 800c294:	4293      	cmp	r3, r2
 800c296:	d9ee      	bls.n	800c276 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c298:	7ffb      	ldrb	r3, [r7, #31]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3720      	adds	r7, #32
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	2400818c 	.word	0x2400818c

0800c2a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	607a      	str	r2, [r7, #4]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c2bc:	f247 5030 	movw	r0, #30000	; 0x7530
 800c2c0:	f7ff ff1c 	bl	800c0fc <SD_CheckStatusWithTimeout>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da01      	bge.n	800c2ce <SD_write+0x26>
  {
    return res;
 800c2ca:	7ffb      	ldrb	r3, [r7, #31]
 800c2cc:	e02d      	b.n	800c32a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	68b8      	ldr	r0, [r7, #8]
 800c2d4:	f7ff fe9e 	bl	800c014 <BSP_SD_WriteBlocks_DMA>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d124      	bne.n	800c328 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c2de:	4b15      	ldr	r3, [pc, #84]	; (800c334 <SD_write+0x8c>)
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	f107 0112 	add.w	r1, r7, #18
 800c2e6:	f247 5330 	movw	r3, #30000	; 0x7530
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f003 fb08 	bl	800f900 <osMessageQueueGet>
 800c2f0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d117      	bne.n	800c328 <SD_write+0x80>
 800c2f8:	8a7b      	ldrh	r3, [r7, #18]
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d114      	bne.n	800c328 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c2fe:	f003 f825 	bl	800f34c <osKernelGetTickCount>
 800c302:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c304:	e007      	b.n	800c316 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c306:	f7ff fe9f 	bl	800c048 <BSP_SD_GetCardState>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <SD_write+0x6e>
          {
            res = RES_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	77fb      	strb	r3, [r7, #31]
            break;
 800c314:	e008      	b.n	800c328 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c316:	f003 f819 	bl	800f34c <osKernelGetTickCount>
 800c31a:	4602      	mov	r2, r0
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	f247 522f 	movw	r2, #29999	; 0x752f
 800c324:	4293      	cmp	r3, r2
 800c326:	d9ee      	bls.n	800c306 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c328:	7ffb      	ldrb	r3, [r7, #31]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3720      	adds	r7, #32
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	2400818c 	.word	0x2400818c

0800c338 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08c      	sub	sp, #48	; 0x30
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	603a      	str	r2, [r7, #0]
 800c342:	71fb      	strb	r3, [r7, #7]
 800c344:	460b      	mov	r3, r1
 800c346:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c34e:	4b25      	ldr	r3, [pc, #148]	; (800c3e4 <SD_ioctl+0xac>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <SD_ioctl+0x28>
 800c35c:	2303      	movs	r3, #3
 800c35e:	e03c      	b.n	800c3da <SD_ioctl+0xa2>

  switch (cmd)
 800c360:	79bb      	ldrb	r3, [r7, #6]
 800c362:	2b03      	cmp	r3, #3
 800c364:	d834      	bhi.n	800c3d0 <SD_ioctl+0x98>
 800c366:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <SD_ioctl+0x34>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c385 	.word	0x0800c385
 800c374:	0800c39d 	.word	0x0800c39d
 800c378:	0800c3b7 	.word	0x0800c3b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c382:	e028      	b.n	800c3d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c384:	f107 0308 	add.w	r3, r7, #8
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff fe6d 	bl	800c068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c38e:	6a3a      	ldr	r2, [r7, #32]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c39a:	e01c      	b.n	800c3d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c39c:	f107 0308 	add.w	r3, r7, #8
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fe61 	bl	800c068 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3b4:	e00f      	b.n	800c3d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3b6:	f107 0308 	add.w	r3, r7, #8
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff fe54 	bl	800c068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	0a5a      	lsrs	r2, r3, #9
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3ce:	e002      	b.n	800c3d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c3d0:	2304      	movs	r3, #4
 800c3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3730      	adds	r7, #48	; 0x30
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	24008039 	.word	0x24008039

0800c3e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c3f2:	4b05      	ldr	r3, [pc, #20]	; (800c408 <BSP_SD_WriteCpltCallback+0x20>)
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	1db9      	adds	r1, r7, #6
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f003 fa20 	bl	800f840 <osMessageQueuePut>
#endif
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	2400818c 	.word	0x2400818c

0800c40c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c412:	2301      	movs	r3, #1
 800c414:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c416:	4b05      	ldr	r3, [pc, #20]	; (800c42c <BSP_SD_ReadCpltCallback+0x20>)
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	1db9      	adds	r1, r7, #6
 800c41c:	2300      	movs	r3, #0
 800c41e:	2200      	movs	r2, #0
 800c420:	f003 fa0e 	bl	800f840 <osMessageQueuePut>
#endif
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	2400818c 	.word	0x2400818c

0800c430 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	4a08      	ldr	r2, [pc, #32]	; (800c460 <disk_status+0x30>)
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	79fa      	ldrb	r2, [r7, #7]
 800c448:	4905      	ldr	r1, [pc, #20]	; (800c460 <disk_status+0x30>)
 800c44a:	440a      	add	r2, r1
 800c44c:	7a12      	ldrb	r2, [r2, #8]
 800c44e:	4610      	mov	r0, r2
 800c450:	4798      	blx	r3
 800c452:	4603      	mov	r3, r0
 800c454:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	240081b8 	.word	0x240081b8

0800c464 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	4a0d      	ldr	r2, [pc, #52]	; (800c4ac <disk_initialize+0x48>)
 800c476:	5cd3      	ldrb	r3, [r2, r3]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d111      	bne.n	800c4a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	4a0b      	ldr	r2, [pc, #44]	; (800c4ac <disk_initialize+0x48>)
 800c480:	2101      	movs	r1, #1
 800c482:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	4a09      	ldr	r2, [pc, #36]	; (800c4ac <disk_initialize+0x48>)
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	79fa      	ldrb	r2, [r7, #7]
 800c492:	4906      	ldr	r1, [pc, #24]	; (800c4ac <disk_initialize+0x48>)
 800c494:	440a      	add	r2, r1
 800c496:	7a12      	ldrb	r2, [r2, #8]
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	240081b8 	.word	0x240081b8

0800c4b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c4b0:	b590      	push	{r4, r7, lr}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	4603      	mov	r3, r0
 800c4be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
 800c4c2:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <disk_read+0x3c>)
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	689c      	ldr	r4, [r3, #8]
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4a07      	ldr	r2, [pc, #28]	; (800c4ec <disk_read+0x3c>)
 800c4d0:	4413      	add	r3, r2
 800c4d2:	7a18      	ldrb	r0, [r3, #8]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	47a0      	blx	r4
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
  return res;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd90      	pop	{r4, r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	240081b8 	.word	0x240081b8

0800c4f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c4f0:	b590      	push	{r4, r7, lr}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	607a      	str	r2, [r7, #4]
 800c4fa:	603b      	str	r3, [r7, #0]
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	4a0a      	ldr	r2, [pc, #40]	; (800c52c <disk_write+0x3c>)
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	68dc      	ldr	r4, [r3, #12]
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	4a07      	ldr	r2, [pc, #28]	; (800c52c <disk_write+0x3c>)
 800c510:	4413      	add	r3, r2
 800c512:	7a18      	ldrb	r0, [r3, #8]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	47a0      	blx	r4
 800c51c:	4603      	mov	r3, r0
 800c51e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c520:	7dfb      	ldrb	r3, [r7, #23]
}
 800c522:	4618      	mov	r0, r3
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd90      	pop	{r4, r7, pc}
 800c52a:	bf00      	nop
 800c52c:	240081b8 	.word	0x240081b8

0800c530 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	603a      	str	r2, [r7, #0]
 800c53a:	71fb      	strb	r3, [r7, #7]
 800c53c:	460b      	mov	r3, r1
 800c53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <disk_ioctl+0x38>)
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	79fa      	ldrb	r2, [r7, #7]
 800c54e:	4906      	ldr	r1, [pc, #24]	; (800c568 <disk_ioctl+0x38>)
 800c550:	440a      	add	r2, r1
 800c552:	7a10      	ldrb	r0, [r2, #8]
 800c554:	79b9      	ldrb	r1, [r7, #6]
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4798      	blx	r3
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	240081b8 	.word	0x240081b8

0800c56c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3301      	adds	r3, #1
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c57c:	89fb      	ldrh	r3, [r7, #14]
 800c57e:	021b      	lsls	r3, r3, #8
 800c580:	b21a      	sxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b21b      	sxth	r3, r3
 800c588:	4313      	orrs	r3, r2
 800c58a:	b21b      	sxth	r3, r3
 800c58c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c58e:	89fb      	ldrh	r3, [r7, #14]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3303      	adds	r3, #3
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	021b      	lsls	r3, r3, #8
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	3202      	adds	r2, #2
 800c5b4:	7812      	ldrb	r2, [r2, #0]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	021b      	lsls	r3, r3, #8
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	7812      	ldrb	r2, [r2, #0]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	021b      	lsls	r3, r3, #8
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	7812      	ldrb	r2, [r2, #0]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	887a      	ldrh	r2, [r7, #2]
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]
 800c5fa:	887b      	ldrh	r3, [r7, #2]
 800c5fc:	0a1b      	lsrs	r3, r3, #8
 800c5fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	607a      	str	r2, [r7, #4]
 800c606:	887a      	ldrh	r2, [r7, #2]
 800c608:	b2d2      	uxtb	r2, r2
 800c60a:	701a      	strb	r2, [r3, #0]
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	b2d2      	uxtb	r2, r2
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	0a1b      	lsrs	r3, r3, #8
 800c632:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	607a      	str	r2, [r7, #4]
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	0a1b      	lsrs	r3, r3, #8
 800c644:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	b2d2      	uxtb	r2, r2
 800c650:	701a      	strb	r2, [r3, #0]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	0a1b      	lsrs	r3, r3, #8
 800c656:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	b2d2      	uxtb	r2, r2
 800c662:	701a      	strb	r2, [r3, #0]
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00d      	beq.n	800c6a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	1c53      	adds	r3, r2, #1
 800c68e:	613b      	str	r3, [r7, #16]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	6179      	str	r1, [r7, #20]
 800c696:	7812      	ldrb	r2, [r2, #0]
 800c698:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	607b      	str	r3, [r7, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1f1      	bne.n	800c68a <mem_cpy+0x1a>
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c6b2:	b480      	push	{r7}
 800c6b4:	b087      	sub	sp, #28
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	60f8      	str	r0, [r7, #12]
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	617a      	str	r2, [r7, #20]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1f3      	bne.n	800c6c2 <mem_set+0x10>
}
 800c6da:	bf00      	nop
 800c6dc:	bf00      	nop
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c6e8:	b480      	push	{r7}
 800c6ea:	b089      	sub	sp, #36	; 0x24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	61fa      	str	r2, [r7, #28]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	4619      	mov	r1, r3
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	61ba      	str	r2, [r7, #24]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	1acb      	subs	r3, r1, r3
 800c714:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3b01      	subs	r3, #1
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <mem_cmp+0x40>
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0eb      	beq.n	800c700 <mem_cmp+0x18>

	return r;
 800c728:	697b      	ldr	r3, [r7, #20]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3724      	adds	r7, #36	; 0x24
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c740:	e002      	b.n	800c748 <chk_chr+0x12>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3301      	adds	r3, #1
 800c746:	607b      	str	r3, [r7, #4]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <chk_chr+0x26>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	461a      	mov	r2, r3
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	4293      	cmp	r3, r2
 800c75a:	d1f2      	bne.n	800c742 <chk_chr+0xc>
	return *str;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	781b      	ldrb	r3, [r3, #0]
}
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d009      	beq.n	800c78e <lock_fs+0x22>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	4618      	mov	r0, r3
 800c780:	f002 fd14 	bl	800f1ac <ff_req_grant>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <lock_fs+0x22>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e000      	b.n	800c790 <lock_fs+0x24>
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00d      	beq.n	800c7c6 <unlock_fs+0x2e>
 800c7aa:	78fb      	ldrb	r3, [r7, #3]
 800c7ac:	2b0c      	cmp	r3, #12
 800c7ae:	d00a      	beq.n	800c7c6 <unlock_fs+0x2e>
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	2b0b      	cmp	r3, #11
 800c7b4:	d007      	beq.n	800c7c6 <unlock_fs+0x2e>
 800c7b6:	78fb      	ldrb	r3, [r7, #3]
 800c7b8:	2b0f      	cmp	r3, #15
 800c7ba:	d004      	beq.n	800c7c6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f002 fd08 	bl	800f1d6 <ff_rel_grant>
	}
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	e029      	b.n	800c838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c7e4:	4a27      	ldr	r2, [pc, #156]	; (800c884 <chk_lock+0xb4>)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	011b      	lsls	r3, r3, #4
 800c7ea:	4413      	add	r3, r2
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01d      	beq.n	800c82e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c7f2:	4a24      	ldr	r2, [pc, #144]	; (800c884 <chk_lock+0xb4>)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	011b      	lsls	r3, r3, #4
 800c7f8:	4413      	add	r3, r2
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d116      	bne.n	800c832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <chk_lock+0xb4>)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	011b      	lsls	r3, r3, #4
 800c80a:	4413      	add	r3, r2
 800c80c:	3304      	adds	r3, #4
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c814:	429a      	cmp	r2, r3
 800c816:	d10c      	bne.n	800c832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c818:	4a1a      	ldr	r2, [pc, #104]	; (800c884 <chk_lock+0xb4>)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	011b      	lsls	r3, r3, #4
 800c81e:	4413      	add	r3, r2
 800c820:	3308      	adds	r3, #8
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c828:	429a      	cmp	r2, r3
 800c82a:	d102      	bne.n	800c832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c82c:	e007      	b.n	800c83e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c82e:	2301      	movs	r3, #1
 800c830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d9d2      	bls.n	800c7e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b02      	cmp	r3, #2
 800c842:	d109      	bne.n	800c858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d102      	bne.n	800c850 <chk_lock+0x80>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d101      	bne.n	800c854 <chk_lock+0x84>
 800c850:	2300      	movs	r3, #0
 800c852:	e010      	b.n	800c876 <chk_lock+0xa6>
 800c854:	2312      	movs	r3, #18
 800c856:	e00e      	b.n	800c876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d108      	bne.n	800c870 <chk_lock+0xa0>
 800c85e:	4a09      	ldr	r2, [pc, #36]	; (800c884 <chk_lock+0xb4>)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	4413      	add	r3, r2
 800c866:	330c      	adds	r3, #12
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c86e:	d101      	bne.n	800c874 <chk_lock+0xa4>
 800c870:	2310      	movs	r3, #16
 800c872:	e000      	b.n	800c876 <chk_lock+0xa6>
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	24008198 	.word	0x24008198

0800c888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c88e:	2300      	movs	r3, #0
 800c890:	607b      	str	r3, [r7, #4]
 800c892:	e002      	b.n	800c89a <enq_lock+0x12>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d806      	bhi.n	800c8ae <enq_lock+0x26>
 800c8a0:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <enq_lock+0x40>)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	4413      	add	r3, r2
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1f2      	bne.n	800c894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	bf14      	ite	ne
 800c8b4:	2301      	movne	r3, #1
 800c8b6:	2300      	moveq	r3, #0
 800c8b8:	b2db      	uxtb	r3, r3
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	24008198 	.word	0x24008198

0800c8cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e01f      	b.n	800c91c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c8dc:	4a41      	ldr	r2, [pc, #260]	; (800c9e4 <inc_lock+0x118>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	4413      	add	r3, r2
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d113      	bne.n	800c916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c8ee:	4a3d      	ldr	r2, [pc, #244]	; (800c9e4 <inc_lock+0x118>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	4413      	add	r3, r2
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d109      	bne.n	800c916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c902:	4a38      	ldr	r2, [pc, #224]	; (800c9e4 <inc_lock+0x118>)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	4413      	add	r3, r2
 800c90a:	3308      	adds	r3, #8
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c912:	429a      	cmp	r2, r3
 800c914:	d006      	beq.n	800c924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d9dc      	bls.n	800c8dc <inc_lock+0x10>
 800c922:	e000      	b.n	800c926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d132      	bne.n	800c992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c92c:	2300      	movs	r3, #0
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	e002      	b.n	800c938 <inc_lock+0x6c>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3301      	adds	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d806      	bhi.n	800c94c <inc_lock+0x80>
 800c93e:	4a29      	ldr	r2, [pc, #164]	; (800c9e4 <inc_lock+0x118>)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	4413      	add	r3, r2
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1f2      	bne.n	800c932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d101      	bne.n	800c956 <inc_lock+0x8a>
 800c952:	2300      	movs	r3, #0
 800c954:	e040      	b.n	800c9d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4922      	ldr	r1, [pc, #136]	; (800c9e4 <inc_lock+0x118>)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	440b      	add	r3, r1
 800c962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	689a      	ldr	r2, [r3, #8]
 800c968:	491e      	ldr	r1, [pc, #120]	; (800c9e4 <inc_lock+0x118>)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	011b      	lsls	r3, r3, #4
 800c96e:	440b      	add	r3, r1
 800c970:	3304      	adds	r3, #4
 800c972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	695a      	ldr	r2, [r3, #20]
 800c978:	491a      	ldr	r1, [pc, #104]	; (800c9e4 <inc_lock+0x118>)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	011b      	lsls	r3, r3, #4
 800c97e:	440b      	add	r3, r1
 800c980:	3308      	adds	r3, #8
 800c982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c984:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <inc_lock+0x118>)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	4413      	add	r3, r2
 800c98c:	330c      	adds	r3, #12
 800c98e:	2200      	movs	r2, #0
 800c990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d009      	beq.n	800c9ac <inc_lock+0xe0>
 800c998:	4a12      	ldr	r2, [pc, #72]	; (800c9e4 <inc_lock+0x118>)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	011b      	lsls	r3, r3, #4
 800c99e:	4413      	add	r3, r2
 800c9a0:	330c      	adds	r3, #12
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <inc_lock+0xe0>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e015      	b.n	800c9d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d108      	bne.n	800c9c4 <inc_lock+0xf8>
 800c9b2:	4a0c      	ldr	r2, [pc, #48]	; (800c9e4 <inc_lock+0x118>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	011b      	lsls	r3, r3, #4
 800c9b8:	4413      	add	r3, r2
 800c9ba:	330c      	adds	r3, #12
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	e001      	b.n	800c9c8 <inc_lock+0xfc>
 800c9c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9c8:	4906      	ldr	r1, [pc, #24]	; (800c9e4 <inc_lock+0x118>)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	011b      	lsls	r3, r3, #4
 800c9ce:	440b      	add	r3, r1
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3301      	adds	r3, #1
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	24008198 	.word	0x24008198

0800c9e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	607b      	str	r3, [r7, #4]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d825      	bhi.n	800ca48 <dec_lock+0x60>
		n = Files[i].ctr;
 800c9fc:	4a17      	ldr	r2, [pc, #92]	; (800ca5c <dec_lock+0x74>)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	4413      	add	r3, r2
 800ca04:	330c      	adds	r3, #12
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca0a:	89fb      	ldrh	r3, [r7, #14]
 800ca0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca10:	d101      	bne.n	800ca16 <dec_lock+0x2e>
 800ca12:	2300      	movs	r3, #0
 800ca14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca16:	89fb      	ldrh	r3, [r7, #14]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <dec_lock+0x3a>
 800ca1c:	89fb      	ldrh	r3, [r7, #14]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca22:	4a0e      	ldr	r2, [pc, #56]	; (800ca5c <dec_lock+0x74>)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	4413      	add	r3, r2
 800ca2a:	330c      	adds	r3, #12
 800ca2c:	89fa      	ldrh	r2, [r7, #14]
 800ca2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca30:	89fb      	ldrh	r3, [r7, #14]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d105      	bne.n	800ca42 <dec_lock+0x5a>
 800ca36:	4a09      	ldr	r2, [pc, #36]	; (800ca5c <dec_lock+0x74>)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	737b      	strb	r3, [r7, #13]
 800ca46:	e001      	b.n	800ca4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca48:	2302      	movs	r3, #2
 800ca4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca4c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	24008198 	.word	0x24008198

0800ca60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	e010      	b.n	800ca90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ca6e:	4a0d      	ldr	r2, [pc, #52]	; (800caa4 <clear_lock+0x44>)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	011b      	lsls	r3, r3, #4
 800ca74:	4413      	add	r3, r2
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d105      	bne.n	800ca8a <clear_lock+0x2a>
 800ca7e:	4a09      	ldr	r2, [pc, #36]	; (800caa4 <clear_lock+0x44>)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	011b      	lsls	r3, r3, #4
 800ca84:	4413      	add	r3, r2
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d9eb      	bls.n	800ca6e <clear_lock+0xe>
	}
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	24008198 	.word	0x24008198

0800caa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	78db      	ldrb	r3, [r3, #3]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d034      	beq.n	800cb26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7858      	ldrb	r0, [r3, #1]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cacc:	2301      	movs	r3, #1
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	f7ff fd0e 	bl	800c4f0 <disk_write>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cada:	2301      	movs	r3, #1
 800cadc:	73fb      	strb	r3, [r7, #15]
 800cade:	e022      	b.n	800cb26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	1ad2      	subs	r2, r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d217      	bcs.n	800cb26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	789b      	ldrb	r3, [r3, #2]
 800cafa:	613b      	str	r3, [r7, #16]
 800cafc:	e010      	b.n	800cb20 <sync_window+0x78>
					wsect += fs->fsize;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	4413      	add	r3, r2
 800cb06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	7858      	ldrb	r0, [r3, #1]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb12:	2301      	movs	r3, #1
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	f7ff fceb 	bl	800c4f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	613b      	str	r3, [r7, #16]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d8eb      	bhi.n	800cafe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3718      	adds	r7, #24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d01b      	beq.n	800cb80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff ffad 	bl	800caa8 <sync_window>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d113      	bne.n	800cb80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7858      	ldrb	r0, [r3, #1]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb62:	2301      	movs	r3, #1
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	f7ff fca3 	bl	800c4b0 <disk_read>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d004      	beq.n	800cb7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cb70:	f04f 33ff 	mov.w	r3, #4294967295
 800cb74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff ff87 	bl	800caa8 <sync_window>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d158      	bne.n	800cc56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d148      	bne.n	800cc3e <sync_fs+0xb2>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	791b      	ldrb	r3, [r3, #4]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d144      	bne.n	800cc3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3334      	adds	r3, #52	; 0x34
 800cbb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff fd77 	bl	800c6b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3334      	adds	r3, #52	; 0x34
 800cbc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbcc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fd06 	bl	800c5e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3334      	adds	r3, #52	; 0x34
 800cbda:	4921      	ldr	r1, [pc, #132]	; (800cc60 <sync_fs+0xd4>)
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff fd1b 	bl	800c618 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3334      	adds	r3, #52	; 0x34
 800cbe6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbea:	491e      	ldr	r1, [pc, #120]	; (800cc64 <sync_fs+0xd8>)
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff fd13 	bl	800c618 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3334      	adds	r3, #52	; 0x34
 800cbf6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4610      	mov	r0, r2
 800cc02:	f7ff fd09 	bl	800c618 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3334      	adds	r3, #52	; 0x34
 800cc0a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	4619      	mov	r1, r3
 800cc14:	4610      	mov	r0, r2
 800cc16:	f7ff fcff 	bl	800c618 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7858      	ldrb	r0, [r3, #1]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc32:	2301      	movs	r3, #1
 800cc34:	f7ff fc5c 	bl	800c4f0 <disk_write>
			fs->fsi_flag = 0;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	785b      	ldrb	r3, [r3, #1]
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fc72 	bl	800c530 <disk_ioctl>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <sync_fs+0xca>
 800cc52:	2301      	movs	r3, #1
 800cc54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	41615252 	.word	0x41615252
 800cc64:	61417272 	.word	0x61417272

0800cc68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	3b02      	subs	r3, #2
 800cc76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	3b02      	subs	r3, #2
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d301      	bcc.n	800cc88 <clust2sect+0x20>
 800cc84:	2300      	movs	r3, #0
 800cc86:	e008      	b.n	800cc9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	895b      	ldrh	r3, [r3, #10]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	fb03 f202 	mul.w	r2, r3, r2
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4413      	add	r3, r2
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b086      	sub	sp, #24
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d904      	bls.n	800ccc6 <get_fat+0x20>
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d302      	bcc.n	800cccc <get_fat+0x26>
		val = 1;	/* Internal error */
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	e08f      	b.n	800cdec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cccc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d062      	beq.n	800cda0 <get_fat+0xfa>
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	dc7c      	bgt.n	800cdd8 <get_fat+0x132>
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d002      	beq.n	800cce8 <get_fat+0x42>
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d042      	beq.n	800cd6c <get_fat+0xc6>
 800cce6:	e077      	b.n	800cdd8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	0a5b      	lsrs	r3, r3, #9
 800ccfe:	4413      	add	r3, r2
 800cd00:	4619      	mov	r1, r3
 800cd02:	6938      	ldr	r0, [r7, #16]
 800cd04:	f7ff ff14 	bl	800cb30 <move_window>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d167      	bne.n	800cdde <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	1c5a      	adds	r2, r3, #1
 800cd12:	60fa      	str	r2, [r7, #12]
 800cd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	0a5b      	lsrs	r3, r3, #9
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6938      	ldr	r0, [r7, #16]
 800cd30:	f7ff fefe 	bl	800cb30 <move_window>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d153      	bne.n	800cde2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	4413      	add	r3, r2
 800cd44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd48:	021b      	lsls	r3, r3, #8
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <get_fat+0xbc>
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	091b      	lsrs	r3, r3, #4
 800cd60:	e002      	b.n	800cd68 <get_fat+0xc2>
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd68:	617b      	str	r3, [r7, #20]
			break;
 800cd6a:	e03f      	b.n	800cdec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	0a1b      	lsrs	r3, r3, #8
 800cd74:	4413      	add	r3, r2
 800cd76:	4619      	mov	r1, r3
 800cd78:	6938      	ldr	r0, [r7, #16]
 800cd7a:	f7ff fed9 	bl	800cb30 <move_window>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d130      	bne.n	800cde6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd92:	4413      	add	r3, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff fbe9 	bl	800c56c <ld_word>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	617b      	str	r3, [r7, #20]
			break;
 800cd9e:	e025      	b.n	800cdec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	09db      	lsrs	r3, r3, #7
 800cda8:	4413      	add	r3, r2
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6938      	ldr	r0, [r7, #16]
 800cdae:	f7ff febf 	bl	800cb30 <move_window>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d118      	bne.n	800cdea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cdc6:	4413      	add	r3, r2
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff fbe7 	bl	800c59c <ld_dword>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cdd4:	617b      	str	r3, [r7, #20]
			break;
 800cdd6:	e009      	b.n	800cdec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cdd8:	2301      	movs	r3, #1
 800cdda:	617b      	str	r3, [r7, #20]
 800cddc:	e006      	b.n	800cdec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdde:	bf00      	nop
 800cde0:	e004      	b.n	800cdec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cde2:	bf00      	nop
 800cde4:	e002      	b.n	800cdec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cde6:	bf00      	nop
 800cde8:	e000      	b.n	800cdec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdea:	bf00      	nop
		}
	}

	return val;
 800cdec:	697b      	ldr	r3, [r7, #20]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3718      	adds	r7, #24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cdf6:	b590      	push	{r4, r7, lr}
 800cdf8:	b089      	sub	sp, #36	; 0x24
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce02:	2302      	movs	r3, #2
 800ce04:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	f240 80d2 	bls.w	800cfb2 <put_fat+0x1bc>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	f080 80cc 	bcs.w	800cfb2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	f000 8096 	beq.w	800cf50 <put_fat+0x15a>
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	f300 80cd 	bgt.w	800cfc4 <put_fat+0x1ce>
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d002      	beq.n	800ce34 <put_fat+0x3e>
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d06e      	beq.n	800cf10 <put_fat+0x11a>
 800ce32:	e0c7      	b.n	800cfc4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	085b      	lsrs	r3, r3, #1
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	4413      	add	r3, r2
 800ce40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	0a5b      	lsrs	r3, r3, #9
 800ce4a:	4413      	add	r3, r2
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f7ff fe6e 	bl	800cb30 <move_window>
 800ce54:	4603      	mov	r3, r0
 800ce56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce58:	7ffb      	ldrb	r3, [r7, #31]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f040 80ab 	bne.w	800cfb6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	1c59      	adds	r1, r3, #1
 800ce6a:	61b9      	str	r1, [r7, #24]
 800ce6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce70:	4413      	add	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00d      	beq.n	800ce9a <put_fat+0xa4>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	f003 030f 	and.w	r3, r3, #15
 800ce88:	b25a      	sxtb	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	b25b      	sxtb	r3, r3
 800ce92:	4313      	orrs	r3, r2
 800ce94:	b25b      	sxtb	r3, r3
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	e001      	b.n	800ce9e <put_fat+0xa8>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2201      	movs	r2, #1
 800cea6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	0a5b      	lsrs	r3, r3, #9
 800ceb0:	4413      	add	r3, r2
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fe3b 	bl	800cb30 <move_window>
 800ceba:	4603      	mov	r3, r0
 800cebc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cebe:	7ffb      	ldrb	r3, [r7, #31]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d17a      	bne.n	800cfba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced0:	4413      	add	r3, r2
 800ced2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d003      	beq.n	800cee6 <put_fat+0xf0>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	091b      	lsrs	r3, r3, #4
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	e00e      	b.n	800cf04 <put_fat+0x10e>
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	b25b      	sxtb	r3, r3
 800ceec:	f023 030f 	bic.w	r3, r3, #15
 800cef0:	b25a      	sxtb	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	0a1b      	lsrs	r3, r3, #8
 800cef6:	b25b      	sxtb	r3, r3
 800cef8:	f003 030f 	and.w	r3, r3, #15
 800cefc:	b25b      	sxtb	r3, r3
 800cefe:	4313      	orrs	r3, r2
 800cf00:	b25b      	sxtb	r3, r3
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	70da      	strb	r2, [r3, #3]
			break;
 800cf0e:	e059      	b.n	800cfc4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	4413      	add	r3, r2
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff fe07 	bl	800cb30 <move_window>
 800cf22:	4603      	mov	r3, r0
 800cf24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf26:	7ffb      	ldrb	r3, [r7, #31]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d148      	bne.n	800cfbe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf3a:	4413      	add	r3, r2
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff fb4d 	bl	800c5e2 <st_word>
			fs->wflag = 1;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	70da      	strb	r2, [r3, #3]
			break;
 800cf4e:	e039      	b.n	800cfc4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	09db      	lsrs	r3, r3, #7
 800cf58:	4413      	add	r3, r2
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7ff fde7 	bl	800cb30 <move_window>
 800cf62:	4603      	mov	r3, r0
 800cf64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf66:	7ffb      	ldrb	r3, [r7, #31]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d12a      	bne.n	800cfc2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf80:	4413      	add	r3, r2
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fb0a 	bl	800c59c <ld_dword>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf8e:	4323      	orrs	r3, r4
 800cf90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfa0:	4413      	add	r3, r2
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fb37 	bl	800c618 <st_dword>
			fs->wflag = 1;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2201      	movs	r2, #1
 800cfae:	70da      	strb	r2, [r3, #3]
			break;
 800cfb0:	e008      	b.n	800cfc4 <put_fat+0x1ce>
		}
	}
 800cfb2:	bf00      	nop
 800cfb4:	e006      	b.n	800cfc4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cfb6:	bf00      	nop
 800cfb8:	e004      	b.n	800cfc4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cfba:	bf00      	nop
 800cfbc:	e002      	b.n	800cfc4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cfbe:	bf00      	nop
 800cfc0:	e000      	b.n	800cfc4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cfc2:	bf00      	nop
	return res;
 800cfc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3724      	adds	r7, #36	; 0x24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd90      	pop	{r4, r7, pc}

0800cfce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b088      	sub	sp, #32
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d904      	bls.n	800cff4 <remove_chain+0x26>
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d301      	bcc.n	800cff8 <remove_chain+0x2a>
 800cff4:	2302      	movs	r3, #2
 800cff6:	e04b      	b.n	800d090 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00c      	beq.n	800d018 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	6879      	ldr	r1, [r7, #4]
 800d004:	69b8      	ldr	r0, [r7, #24]
 800d006:	f7ff fef6 	bl	800cdf6 <put_fat>
 800d00a:	4603      	mov	r3, r0
 800d00c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d00e:	7ffb      	ldrb	r3, [r7, #31]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <remove_chain+0x4a>
 800d014:	7ffb      	ldrb	r3, [r7, #31]
 800d016:	e03b      	b.n	800d090 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d018:	68b9      	ldr	r1, [r7, #8]
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f7ff fe43 	bl	800cca6 <get_fat>
 800d020:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d031      	beq.n	800d08c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <remove_chain+0x64>
 800d02e:	2302      	movs	r3, #2
 800d030:	e02e      	b.n	800d090 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d038:	d101      	bne.n	800d03e <remove_chain+0x70>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e028      	b.n	800d090 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d03e:	2200      	movs	r2, #0
 800d040:	68b9      	ldr	r1, [r7, #8]
 800d042:	69b8      	ldr	r0, [r7, #24]
 800d044:	f7ff fed7 	bl	800cdf6 <put_fat>
 800d048:	4603      	mov	r3, r0
 800d04a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d04c:	7ffb      	ldrb	r3, [r7, #31]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <remove_chain+0x88>
 800d052:	7ffb      	ldrb	r3, [r7, #31]
 800d054:	e01c      	b.n	800d090 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	695a      	ldr	r2, [r3, #20]
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	3b02      	subs	r3, #2
 800d060:	429a      	cmp	r2, r3
 800d062:	d20b      	bcs.n	800d07c <remove_chain+0xae>
			fs->free_clst++;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	791b      	ldrb	r3, [r3, #4]
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	429a      	cmp	r2, r3
 800d088:	d3c6      	bcc.n	800d018 <remove_chain+0x4a>
 800d08a:	e000      	b.n	800d08e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d08c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10d      	bne.n	800d0ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <create_chain+0x2c>
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	69ba      	ldr	r2, [r7, #24]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d31b      	bcc.n	800d0fc <create_chain+0x64>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	e018      	b.n	800d0fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fdea 	bl	800cca6 <get_fat>
 800d0d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d801      	bhi.n	800d0de <create_chain+0x46>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e070      	b.n	800d1c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e4:	d101      	bne.n	800d0ea <create_chain+0x52>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	e06a      	b.n	800d1c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d201      	bcs.n	800d0f8 <create_chain+0x60>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	e063      	b.n	800d1c0 <create_chain+0x128>
		scl = clst;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	3301      	adds	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	69fa      	ldr	r2, [r7, #28]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d307      	bcc.n	800d120 <create_chain+0x88>
				ncl = 2;
 800d110:	2302      	movs	r3, #2
 800d112:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d114:	69fa      	ldr	r2, [r7, #28]
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d901      	bls.n	800d120 <create_chain+0x88>
 800d11c:	2300      	movs	r3, #0
 800d11e:	e04f      	b.n	800d1c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d120:	69f9      	ldr	r1, [r7, #28]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fdbf 	bl	800cca6 <get_fat>
 800d128:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00e      	beq.n	800d14e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d003      	beq.n	800d13e <create_chain+0xa6>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13c:	d101      	bne.n	800d142 <create_chain+0xaa>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	e03e      	b.n	800d1c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d142:	69fa      	ldr	r2, [r7, #28]
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	429a      	cmp	r2, r3
 800d148:	d1da      	bne.n	800d100 <create_chain+0x68>
 800d14a:	2300      	movs	r3, #0
 800d14c:	e038      	b.n	800d1c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d14e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d150:	f04f 32ff 	mov.w	r2, #4294967295
 800d154:	69f9      	ldr	r1, [r7, #28]
 800d156:	6938      	ldr	r0, [r7, #16]
 800d158:	f7ff fe4d 	bl	800cdf6 <put_fat>
 800d15c:	4603      	mov	r3, r0
 800d15e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d109      	bne.n	800d17a <create_chain+0xe2>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d006      	beq.n	800d17a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d16c:	69fa      	ldr	r2, [r7, #28]
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6938      	ldr	r0, [r7, #16]
 800d172:	f7ff fe40 	bl	800cdf6 <put_fat>
 800d176:	4603      	mov	r3, r0
 800d178:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d116      	bne.n	800d1ae <create_chain+0x116>
		fs->last_clst = ncl;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	69fa      	ldr	r2, [r7, #28]
 800d184:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	695a      	ldr	r2, [r3, #20]
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	3b02      	subs	r3, #2
 800d190:	429a      	cmp	r2, r3
 800d192:	d804      	bhi.n	800d19e <create_chain+0x106>
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	1e5a      	subs	r2, r3, #1
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	791b      	ldrb	r3, [r3, #4]
 800d1a2:	f043 0301 	orr.w	r3, r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	711a      	strb	r2, [r3, #4]
 800d1ac:	e007      	b.n	800d1be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d102      	bne.n	800d1ba <create_chain+0x122>
 800d1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b8:	e000      	b.n	800d1bc <create_chain+0x124>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d1be:	69fb      	ldr	r3, [r7, #28]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3720      	adds	r7, #32
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1dc:	3304      	adds	r3, #4
 800d1de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	0a5b      	lsrs	r3, r3, #9
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	8952      	ldrh	r2, [r2, #10]
 800d1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	1d1a      	adds	r2, r3, #4
 800d1f2:	613a      	str	r2, [r7, #16]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <clmt_clust+0x3a>
 800d1fe:	2300      	movs	r3, #0
 800d200:	e010      	b.n	800d224 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	429a      	cmp	r2, r3
 800d208:	d307      	bcc.n	800d21a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	3304      	adds	r3, #4
 800d216:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d218:	e7e9      	b.n	800d1ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d21a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	4413      	add	r3, r2
}
 800d224:	4618      	mov	r0, r3
 800d226:	371c      	adds	r7, #28
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d246:	d204      	bcs.n	800d252 <dir_sdi+0x22>
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	f003 031f 	and.w	r3, r3, #31
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d252:	2302      	movs	r3, #2
 800d254:	e063      	b.n	800d31e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <dir_sdi+0x46>
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d902      	bls.n	800d276 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10c      	bne.n	800d296 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	095b      	lsrs	r3, r3, #5
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	8912      	ldrh	r2, [r2, #8]
 800d284:	4293      	cmp	r3, r2
 800d286:	d301      	bcc.n	800d28c <dir_sdi+0x5c>
 800d288:	2302      	movs	r3, #2
 800d28a:	e048      	b.n	800d31e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	61da      	str	r2, [r3, #28]
 800d294:	e029      	b.n	800d2ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	895b      	ldrh	r3, [r3, #10]
 800d29a:	025b      	lsls	r3, r3, #9
 800d29c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d29e:	e019      	b.n	800d2d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6979      	ldr	r1, [r7, #20]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff fcfe 	bl	800cca6 <get_fat>
 800d2aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b2:	d101      	bne.n	800d2b8 <dir_sdi+0x88>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e032      	b.n	800d31e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d904      	bls.n	800d2c8 <dir_sdi+0x98>
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	699b      	ldr	r3, [r3, #24]
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d301      	bcc.n	800d2cc <dir_sdi+0x9c>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	e028      	b.n	800d31e <dir_sdi+0xee>
			ofs -= csz;
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d2e1      	bcs.n	800d2a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d2dc:	6979      	ldr	r1, [r7, #20]
 800d2de:	6938      	ldr	r0, [r7, #16]
 800d2e0:	f7ff fcc2 	bl	800cc68 <clust2sect>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <dir_sdi+0xcc>
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	e010      	b.n	800d31e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	69da      	ldr	r2, [r3, #28]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	0a5b      	lsrs	r3, r3, #9
 800d304:	441a      	add	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d316:	441a      	add	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b086      	sub	sp, #24
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	3320      	adds	r3, #32
 800d33c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <dir_next+0x28>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d34c:	d301      	bcc.n	800d352 <dir_next+0x2c>
 800d34e:	2304      	movs	r3, #4
 800d350:	e0aa      	b.n	800d4a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f040 8098 	bne.w	800d48e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10b      	bne.n	800d388 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	095b      	lsrs	r3, r3, #5
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	8912      	ldrh	r2, [r2, #8]
 800d378:	4293      	cmp	r3, r2
 800d37a:	f0c0 8088 	bcc.w	800d48e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	61da      	str	r2, [r3, #28]
 800d384:	2304      	movs	r3, #4
 800d386:	e08f      	b.n	800d4a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	0a5b      	lsrs	r3, r3, #9
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	8952      	ldrh	r2, [r2, #10]
 800d390:	3a01      	subs	r2, #1
 800d392:	4013      	ands	r3, r2
 800d394:	2b00      	cmp	r3, #0
 800d396:	d17a      	bne.n	800d48e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f7ff fc80 	bl	800cca6 <get_fat>
 800d3a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d801      	bhi.n	800d3b2 <dir_next+0x8c>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	e07a      	b.n	800d4a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d101      	bne.n	800d3be <dir_next+0x98>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e074      	b.n	800d4a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d358      	bcc.n	800d47a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d104      	bne.n	800d3d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	61da      	str	r2, [r3, #28]
 800d3d4:	2304      	movs	r3, #4
 800d3d6:	e067      	b.n	800d4a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	f7ff fe59 	bl	800d098 <create_chain>
 800d3e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <dir_next+0xcc>
 800d3ee:	2307      	movs	r3, #7
 800d3f0:	e05a      	b.n	800d4a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d101      	bne.n	800d3fc <dir_next+0xd6>
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	e055      	b.n	800d4a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d402:	d101      	bne.n	800d408 <dir_next+0xe2>
 800d404:	2301      	movs	r3, #1
 800d406:	e04f      	b.n	800d4a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff fb4d 	bl	800caa8 <sync_window>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <dir_next+0xf2>
 800d414:	2301      	movs	r3, #1
 800d416:	e047      	b.n	800d4a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	3334      	adds	r3, #52	; 0x34
 800d41c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d420:	2100      	movs	r1, #0
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff f945 	bl	800c6b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d428:	2300      	movs	r3, #0
 800d42a:	613b      	str	r3, [r7, #16]
 800d42c:	6979      	ldr	r1, [r7, #20]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f7ff fc1a 	bl	800cc68 <clust2sect>
 800d434:	4602      	mov	r2, r0
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	631a      	str	r2, [r3, #48]	; 0x30
 800d43a:	e012      	b.n	800d462 <dir_next+0x13c>
						fs->wflag = 1;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2201      	movs	r2, #1
 800d440:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f7ff fb30 	bl	800caa8 <sync_window>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <dir_next+0x12c>
 800d44e:	2301      	movs	r3, #1
 800d450:	e02a      	b.n	800d4a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	3301      	adds	r3, #1
 800d456:	613b      	str	r3, [r7, #16]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	631a      	str	r2, [r3, #48]	; 0x30
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	895b      	ldrh	r3, [r3, #10]
 800d466:	461a      	mov	r2, r3
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d3e6      	bcc.n	800d43c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	1ad2      	subs	r2, r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d480:	6979      	ldr	r1, [r7, #20]
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f7ff fbf0 	bl	800cc68 <clust2sect>
 800d488:	4602      	mov	r2, r0
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a0:	441a      	add	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3718      	adds	r7, #24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff feb4 	bl	800d230 <dir_sdi>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d12b      	bne.n	800d52a <dir_alloc+0x7a>
		n = 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff fb27 	bl	800cb30 <move_window>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d11d      	bne.n	800d528 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a1b      	ldr	r3, [r3, #32]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	2be5      	cmp	r3, #229	; 0xe5
 800d4f4:	d004      	beq.n	800d500 <dir_alloc+0x50>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d107      	bne.n	800d510 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	3301      	adds	r3, #1
 800d504:	613b      	str	r3, [r7, #16]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d102      	bne.n	800d514 <dir_alloc+0x64>
 800d50e:	e00c      	b.n	800d52a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d510:	2300      	movs	r3, #0
 800d512:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d514:	2101      	movs	r1, #1
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ff05 	bl	800d326 <dir_next>
 800d51c:	4603      	mov	r3, r0
 800d51e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0d7      	beq.n	800d4d6 <dir_alloc+0x26>
 800d526:	e000      	b.n	800d52a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d528:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d101      	bne.n	800d534 <dir_alloc+0x84>
 800d530:	2307      	movs	r3, #7
 800d532:	75fb      	strb	r3, [r7, #23]
	return res;
 800d534:	7dfb      	ldrb	r3, [r7, #23]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b084      	sub	sp, #16
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	331a      	adds	r3, #26
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff f80d 	bl	800c56c <ld_word>
 800d552:	4603      	mov	r3, r0
 800d554:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d109      	bne.n	800d572 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	3314      	adds	r3, #20
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff f802 	bl	800c56c <ld_word>
 800d568:	4603      	mov	r3, r0
 800d56a:	041b      	lsls	r3, r3, #16
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	4313      	orrs	r3, r2
 800d570:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d572:	68fb      	ldr	r3, [r7, #12]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	331a      	adds	r3, #26
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	b292      	uxth	r2, r2
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff f825 	bl	800c5e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d109      	bne.n	800d5b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f103 0214 	add.w	r2, r3, #20
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f7ff f817 	bl	800c5e2 <st_word>
	}
}
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff fe2f 	bl	800d230 <dir_sdi>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <dir_find+0x24>
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	e03e      	b.n	800d65e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	69db      	ldr	r3, [r3, #28]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6938      	ldr	r0, [r7, #16]
 800d5e8:	f7ff faa2 	bl	800cb30 <move_window>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d12f      	bne.n	800d656 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <dir_find+0x4e>
 800d604:	2304      	movs	r3, #4
 800d606:	75fb      	strb	r3, [r7, #23]
 800d608:	e028      	b.n	800d65c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6a1b      	ldr	r3, [r3, #32]
 800d60e:	330b      	adds	r3, #11
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d616:	b2da      	uxtb	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a1b      	ldr	r3, [r3, #32]
 800d620:	330b      	adds	r3, #11
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 0308 	and.w	r3, r3, #8
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <dir_find+0x86>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a18      	ldr	r0, [r3, #32]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3324      	adds	r3, #36	; 0x24
 800d634:	220b      	movs	r2, #11
 800d636:	4619      	mov	r1, r3
 800d638:	f7ff f856 	bl	800c6e8 <mem_cmp>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00b      	beq.n	800d65a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d642:	2100      	movs	r1, #0
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff fe6e 	bl	800d326 <dir_next>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0c5      	beq.n	800d5e0 <dir_find+0x24>
 800d654:	e002      	b.n	800d65c <dir_find+0xa0>
		if (res != FR_OK) break;
 800d656:	bf00      	nop
 800d658:	e000      	b.n	800d65c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d65a:	bf00      	nop

	return res;
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d674:	2101      	movs	r1, #1
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff ff1a 	bl	800d4b0 <dir_alloc>
 800d67c:	4603      	mov	r3, r0
 800d67e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d11c      	bne.n	800d6c0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	4619      	mov	r1, r3
 800d68c:	68b8      	ldr	r0, [r7, #8]
 800d68e:	f7ff fa4f 	bl	800cb30 <move_window>
 800d692:	4603      	mov	r3, r0
 800d694:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d111      	bne.n	800d6c0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
 800d6a0:	2220      	movs	r2, #32
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff f804 	bl	800c6b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a18      	ldr	r0, [r3, #32]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3324      	adds	r3, #36	; 0x24
 800d6b2:	220b      	movs	r2, #11
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f7fe ffdb 	bl	800c670 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2201      	movs	r2, #1
 800d6be:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b088      	sub	sp, #32
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3324      	adds	r3, #36	; 0x24
 800d6e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d6e2:	220b      	movs	r2, #11
 800d6e4:	2120      	movs	r1, #32
 800d6e6:	68b8      	ldr	r0, [r7, #8]
 800d6e8:	f7fe ffe3 	bl	800c6b2 <mem_set>
	si = i = 0; ni = 8;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	613b      	str	r3, [r7, #16]
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	61fb      	str	r3, [r7, #28]
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	61fa      	str	r2, [r7, #28]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	4413      	add	r3, r2
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d706:	7efb      	ldrb	r3, [r7, #27]
 800d708:	2b20      	cmp	r3, #32
 800d70a:	d94e      	bls.n	800d7aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d70c:	7efb      	ldrb	r3, [r7, #27]
 800d70e:	2b2f      	cmp	r3, #47	; 0x2f
 800d710:	d006      	beq.n	800d720 <create_name+0x54>
 800d712:	7efb      	ldrb	r3, [r7, #27]
 800d714:	2b5c      	cmp	r3, #92	; 0x5c
 800d716:	d110      	bne.n	800d73a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d718:	e002      	b.n	800d720 <create_name+0x54>
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	3301      	adds	r3, #1
 800d71e:	61fb      	str	r3, [r7, #28]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	4413      	add	r3, r2
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b2f      	cmp	r3, #47	; 0x2f
 800d72a:	d0f6      	beq.n	800d71a <create_name+0x4e>
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	4413      	add	r3, r2
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b5c      	cmp	r3, #92	; 0x5c
 800d736:	d0f0      	beq.n	800d71a <create_name+0x4e>
			break;
 800d738:	e038      	b.n	800d7ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d73a:	7efb      	ldrb	r3, [r7, #27]
 800d73c:	2b2e      	cmp	r3, #46	; 0x2e
 800d73e:	d003      	beq.n	800d748 <create_name+0x7c>
 800d740:	693a      	ldr	r2, [r7, #16]
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	429a      	cmp	r2, r3
 800d746:	d30c      	bcc.n	800d762 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b0b      	cmp	r3, #11
 800d74c:	d002      	beq.n	800d754 <create_name+0x88>
 800d74e:	7efb      	ldrb	r3, [r7, #27]
 800d750:	2b2e      	cmp	r3, #46	; 0x2e
 800d752:	d001      	beq.n	800d758 <create_name+0x8c>
 800d754:	2306      	movs	r3, #6
 800d756:	e044      	b.n	800d7e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d758:	2308      	movs	r3, #8
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	230b      	movs	r3, #11
 800d75e:	617b      	str	r3, [r7, #20]
			continue;
 800d760:	e022      	b.n	800d7a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d762:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d766:	2b00      	cmp	r3, #0
 800d768:	da04      	bge.n	800d774 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d76a:	7efb      	ldrb	r3, [r7, #27]
 800d76c:	3b80      	subs	r3, #128	; 0x80
 800d76e:	4a1f      	ldr	r2, [pc, #124]	; (800d7ec <create_name+0x120>)
 800d770:	5cd3      	ldrb	r3, [r2, r3]
 800d772:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d774:	7efb      	ldrb	r3, [r7, #27]
 800d776:	4619      	mov	r1, r3
 800d778:	481d      	ldr	r0, [pc, #116]	; (800d7f0 <create_name+0x124>)
 800d77a:	f7fe ffdc 	bl	800c736 <chk_chr>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d001      	beq.n	800d788 <create_name+0xbc>
 800d784:	2306      	movs	r3, #6
 800d786:	e02c      	b.n	800d7e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d788:	7efb      	ldrb	r3, [r7, #27]
 800d78a:	2b60      	cmp	r3, #96	; 0x60
 800d78c:	d905      	bls.n	800d79a <create_name+0xce>
 800d78e:	7efb      	ldrb	r3, [r7, #27]
 800d790:	2b7a      	cmp	r3, #122	; 0x7a
 800d792:	d802      	bhi.n	800d79a <create_name+0xce>
 800d794:	7efb      	ldrb	r3, [r7, #27]
 800d796:	3b20      	subs	r3, #32
 800d798:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	613a      	str	r2, [r7, #16]
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	7efa      	ldrb	r2, [r7, #27]
 800d7a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d7a8:	e7a6      	b.n	800d6f8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d7aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	441a      	add	r2, r3
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <create_name+0xf4>
 800d7bc:	2306      	movs	r3, #6
 800d7be:	e010      	b.n	800d7e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2be5      	cmp	r3, #229	; 0xe5
 800d7c6:	d102      	bne.n	800d7ce <create_name+0x102>
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2205      	movs	r2, #5
 800d7cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d7ce:	7efb      	ldrb	r3, [r7, #27]
 800d7d0:	2b20      	cmp	r3, #32
 800d7d2:	d801      	bhi.n	800d7d8 <create_name+0x10c>
 800d7d4:	2204      	movs	r2, #4
 800d7d6:	e000      	b.n	800d7da <create_name+0x10e>
 800d7d8:	2200      	movs	r2, #0
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	330b      	adds	r3, #11
 800d7de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d7e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	080135f0 	.word	0x080135f0
 800d7f0:	0801351c 	.word	0x0801351c

0800d7f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d808:	e002      	b.n	800d810 <follow_path+0x1c>
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	3301      	adds	r3, #1
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b2f      	cmp	r3, #47	; 0x2f
 800d816:	d0f8      	beq.n	800d80a <follow_path+0x16>
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	2b5c      	cmp	r3, #92	; 0x5c
 800d81e:	d0f4      	beq.n	800d80a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	2200      	movs	r2, #0
 800d824:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b1f      	cmp	r3, #31
 800d82c:	d80a      	bhi.n	800d844 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2280      	movs	r2, #128	; 0x80
 800d832:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d836:	2100      	movs	r1, #0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff fcf9 	bl	800d230 <dir_sdi>
 800d83e:	4603      	mov	r3, r0
 800d840:	75fb      	strb	r3, [r7, #23]
 800d842:	e043      	b.n	800d8cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d844:	463b      	mov	r3, r7
 800d846:	4619      	mov	r1, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ff3f 	bl	800d6cc <create_name>
 800d84e:	4603      	mov	r3, r0
 800d850:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d852:	7dfb      	ldrb	r3, [r7, #23]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d134      	bne.n	800d8c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff feaf 	bl	800d5bc <dir_find>
 800d85e:	4603      	mov	r3, r0
 800d860:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d868:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00a      	beq.n	800d886 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	2b04      	cmp	r3, #4
 800d874:	d127      	bne.n	800d8c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d876:	7afb      	ldrb	r3, [r7, #11]
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d122      	bne.n	800d8c6 <follow_path+0xd2>
 800d880:	2305      	movs	r3, #5
 800d882:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d884:	e01f      	b.n	800d8c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d886:	7afb      	ldrb	r3, [r7, #11]
 800d888:	f003 0304 	and.w	r3, r3, #4
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d11c      	bne.n	800d8ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	799b      	ldrb	r3, [r3, #6]
 800d894:	f003 0310 	and.w	r3, r3, #16
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d89c:	2305      	movs	r3, #5
 800d89e:	75fb      	strb	r3, [r7, #23]
 800d8a0:	e014      	b.n	800d8cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7ff fe42 	bl	800d53e <ld_clust>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8c0:	e7c0      	b.n	800d844 <follow_path+0x50>
			if (res != FR_OK) break;
 800d8c2:	bf00      	nop
 800d8c4:	e002      	b.n	800d8cc <follow_path+0xd8>
				break;
 800d8c6:	bf00      	nop
 800d8c8:	e000      	b.n	800d8cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8ca:	bf00      	nop
			}
		}
	}

	return res;
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b087      	sub	sp, #28
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d031      	beq.n	800d950 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	617b      	str	r3, [r7, #20]
 800d8f2:	e002      	b.n	800d8fa <get_ldnumber+0x24>
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d903      	bls.n	800d90a <get_ldnumber+0x34>
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b3a      	cmp	r3, #58	; 0x3a
 800d908:	d1f4      	bne.n	800d8f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b3a      	cmp	r3, #58	; 0x3a
 800d910:	d11c      	bne.n	800d94c <get_ldnumber+0x76>
			tp = *path;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	60fa      	str	r2, [r7, #12]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	3b30      	subs	r3, #48	; 0x30
 800d922:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	2b09      	cmp	r3, #9
 800d928:	d80e      	bhi.n	800d948 <get_ldnumber+0x72>
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d10a      	bne.n	800d948 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d107      	bne.n	800d948 <get_ldnumber+0x72>
					vol = (int)i;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3301      	adds	r3, #1
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	697a      	ldr	r2, [r7, #20]
 800d946:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	e002      	b.n	800d952 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d94c:	2300      	movs	r3, #0
 800d94e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d950:	693b      	ldr	r3, [r7, #16]
}
 800d952:	4618      	mov	r0, r3
 800d954:	371c      	adds	r7, #28
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
	...

0800d960 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	70da      	strb	r2, [r3, #3]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f04f 32ff 	mov.w	r2, #4294967295
 800d976:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff f8d8 	bl	800cb30 <move_window>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <check_fs+0x2a>
 800d986:	2304      	movs	r3, #4
 800d988:	e038      	b.n	800d9fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3334      	adds	r3, #52	; 0x34
 800d98e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fdea 	bl	800c56c <ld_word>
 800d998:	4603      	mov	r3, r0
 800d99a:	461a      	mov	r2, r3
 800d99c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d001      	beq.n	800d9a8 <check_fs+0x48>
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e029      	b.n	800d9fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9ae:	2be9      	cmp	r3, #233	; 0xe9
 800d9b0:	d009      	beq.n	800d9c6 <check_fs+0x66>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9b8:	2beb      	cmp	r3, #235	; 0xeb
 800d9ba:	d11e      	bne.n	800d9fa <check_fs+0x9a>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d9c2:	2b90      	cmp	r3, #144	; 0x90
 800d9c4:	d119      	bne.n	800d9fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	3334      	adds	r3, #52	; 0x34
 800d9ca:	3336      	adds	r3, #54	; 0x36
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fe fde5 	bl	800c59c <ld_dword>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9d8:	4a0a      	ldr	r2, [pc, #40]	; (800da04 <check_fs+0xa4>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d101      	bne.n	800d9e2 <check_fs+0x82>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e00c      	b.n	800d9fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3334      	adds	r3, #52	; 0x34
 800d9e6:	3352      	adds	r3, #82	; 0x52
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fe fdd7 	bl	800c59c <ld_dword>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	4a05      	ldr	r2, [pc, #20]	; (800da08 <check_fs+0xa8>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d101      	bne.n	800d9fa <check_fs+0x9a>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e000      	b.n	800d9fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d9fa:	2302      	movs	r3, #2
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	00544146 	.word	0x00544146
 800da08:	33544146 	.word	0x33544146

0800da0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b096      	sub	sp, #88	; 0x58
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	4613      	mov	r3, r2
 800da18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2200      	movs	r2, #0
 800da1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f7ff ff58 	bl	800d8d6 <get_ldnumber>
 800da26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	da01      	bge.n	800da32 <find_volume+0x26>
 800da2e:	230b      	movs	r3, #11
 800da30:	e236      	b.n	800dea0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da32:	4aac      	ldr	r2, [pc, #688]	; (800dce4 <find_volume+0x2d8>)
 800da34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <find_volume+0x3a>
 800da42:	230c      	movs	r3, #12
 800da44:	e22c      	b.n	800dea0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800da46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da48:	f7fe fe90 	bl	800c76c <lock_fs>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <find_volume+0x4a>
 800da52:	230f      	movs	r3, #15
 800da54:	e224      	b.n	800dea0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d01a      	beq.n	800daa2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	785b      	ldrb	r3, [r3, #1]
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fcdd 	bl	800c430 <disk_status>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800da7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10c      	bne.n	800daa2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <find_volume+0x92>
 800da8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da92:	f003 0304 	and.w	r3, r3, #4
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800da9a:	230a      	movs	r3, #10
 800da9c:	e200      	b.n	800dea0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800da9e:	2300      	movs	r3, #0
 800daa0:	e1fe      	b.n	800dea0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800daa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	785b      	ldrb	r3, [r3, #1]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fcd5 	bl	800c464 <disk_initialize>
 800daba:	4603      	mov	r3, r0
 800dabc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dacc:	2303      	movs	r3, #3
 800dace:	e1e7      	b.n	800dea0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d007      	beq.n	800dae6 <find_volume+0xda>
 800dad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dada:	f003 0304 	and.w	r3, r3, #4
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dae2:	230a      	movs	r3, #10
 800dae4:	e1dc      	b.n	800dea0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800daea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daee:	f7ff ff37 	bl	800d960 <check_fs>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800daf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d14b      	bne.n	800db98 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db00:	2300      	movs	r3, #0
 800db02:	643b      	str	r3, [r7, #64]	; 0x40
 800db04:	e01f      	b.n	800db46 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db14:	4413      	add	r3, r2
 800db16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	3304      	adds	r3, #4
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <find_volume+0x124>
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	3308      	adds	r3, #8
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fd38 	bl	800c59c <ld_dword>
 800db2c:	4602      	mov	r2, r0
 800db2e:	e000      	b.n	800db32 <find_volume+0x126>
 800db30:	2200      	movs	r2, #0
 800db32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800db3a:	440b      	add	r3, r1
 800db3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db42:	3301      	adds	r3, #1
 800db44:	643b      	str	r3, [r7, #64]	; 0x40
 800db46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d9dc      	bls.n	800db06 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800db4c:	2300      	movs	r3, #0
 800db4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800db50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <find_volume+0x150>
 800db56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db58:	3b01      	subs	r3, #1
 800db5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800db64:	4413      	add	r3, r2
 800db66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800db6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800db6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <find_volume+0x172>
 800db72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db76:	f7ff fef3 	bl	800d960 <check_fs>
 800db7a:	4603      	mov	r3, r0
 800db7c:	e000      	b.n	800db80 <find_volume+0x174>
 800db7e:	2303      	movs	r3, #3
 800db80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800db84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d905      	bls.n	800db98 <find_volume+0x18c>
 800db8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db8e:	3301      	adds	r3, #1
 800db90:	643b      	str	r3, [r7, #64]	; 0x40
 800db92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db94:	2b03      	cmp	r3, #3
 800db96:	d9e1      	bls.n	800db5c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800db98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	d101      	bne.n	800dba4 <find_volume+0x198>
 800dba0:	2301      	movs	r3, #1
 800dba2:	e17d      	b.n	800dea0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d901      	bls.n	800dbb0 <find_volume+0x1a4>
 800dbac:	230d      	movs	r3, #13
 800dbae:	e177      	b.n	800dea0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	3334      	adds	r3, #52	; 0x34
 800dbb4:	330b      	adds	r3, #11
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fcd8 	bl	800c56c <ld_word>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbc2:	d001      	beq.n	800dbc8 <find_volume+0x1bc>
 800dbc4:	230d      	movs	r3, #13
 800dbc6:	e16b      	b.n	800dea0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	3334      	adds	r3, #52	; 0x34
 800dbcc:	3316      	adds	r3, #22
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fccc 	bl	800c56c <ld_word>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <find_volume+0x1e0>
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	3334      	adds	r3, #52	; 0x34
 800dbe2:	3324      	adds	r3, #36	; 0x24
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe fcd9 	bl	800c59c <ld_dword>
 800dbea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbf0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	789b      	ldrb	r3, [r3, #2]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d005      	beq.n	800dc10 <find_volume+0x204>
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	789b      	ldrb	r3, [r3, #2]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d001      	beq.n	800dc10 <find_volume+0x204>
 800dc0c:	230d      	movs	r3, #13
 800dc0e:	e147      	b.n	800dea0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	789b      	ldrb	r3, [r3, #2]
 800dc14:	461a      	mov	r2, r3
 800dc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc18:	fb02 f303 	mul.w	r3, r2, r3
 800dc1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	895b      	ldrh	r3, [r3, #10]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <find_volume+0x238>
 800dc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc34:	895b      	ldrh	r3, [r3, #10]
 800dc36:	461a      	mov	r2, r3
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	895b      	ldrh	r3, [r3, #10]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	4013      	ands	r3, r2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <find_volume+0x23c>
 800dc44:	230d      	movs	r3, #13
 800dc46:	e12b      	b.n	800dea0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	3334      	adds	r3, #52	; 0x34
 800dc4c:	3311      	adds	r3, #17
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe fc8c 	bl	800c56c <ld_word>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	891b      	ldrh	r3, [r3, #8]
 800dc60:	f003 030f 	and.w	r3, r3, #15
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <find_volume+0x262>
 800dc6a:	230d      	movs	r3, #13
 800dc6c:	e118      	b.n	800dea0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	3334      	adds	r3, #52	; 0x34
 800dc72:	3313      	adds	r3, #19
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fc79 	bl	800c56c <ld_word>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d106      	bne.n	800dc92 <find_volume+0x286>
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	3334      	adds	r3, #52	; 0x34
 800dc88:	3320      	adds	r3, #32
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe fc86 	bl	800c59c <ld_dword>
 800dc90:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	3334      	adds	r3, #52	; 0x34
 800dc96:	330e      	adds	r3, #14
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fe fc67 	bl	800c56c <ld_word>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <find_volume+0x2a0>
 800dca8:	230d      	movs	r3, #13
 800dcaa:	e0f9      	b.n	800dea0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dcac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb0:	4413      	add	r3, r2
 800dcb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcb4:	8912      	ldrh	r2, [r2, #8]
 800dcb6:	0912      	lsrs	r2, r2, #4
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	4413      	add	r3, r2
 800dcbc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dcbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d201      	bcs.n	800dcca <find_volume+0x2be>
 800dcc6:	230d      	movs	r3, #13
 800dcc8:	e0ea      	b.n	800dea0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dcca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcd2:	8952      	ldrh	r2, [r2, #10]
 800dcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d103      	bne.n	800dce8 <find_volume+0x2dc>
 800dce0:	230d      	movs	r3, #13
 800dce2:	e0dd      	b.n	800dea0 <find_volume+0x494>
 800dce4:	24008190 	.word	0x24008190
		fmt = FS_FAT32;
 800dce8:	2303      	movs	r3, #3
 800dcea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d802      	bhi.n	800dcfe <find_volume+0x2f2>
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d802      	bhi.n	800dd0e <find_volume+0x302>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	1c9a      	adds	r2, r3, #2
 800dd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd14:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd1a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd20:	441a      	add	r2, r3
 800dd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd24:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dd26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	441a      	add	r2, r3
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dd30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d11e      	bne.n	800dd76 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	3334      	adds	r3, #52	; 0x34
 800dd3c:	332a      	adds	r3, #42	; 0x2a
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fe fc14 	bl	800c56c <ld_word>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <find_volume+0x342>
 800dd4a:	230d      	movs	r3, #13
 800dd4c:	e0a8      	b.n	800dea0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd50:	891b      	ldrh	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <find_volume+0x34e>
 800dd56:	230d      	movs	r3, #13
 800dd58:	e0a2      	b.n	800dea0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5c:	3334      	adds	r3, #52	; 0x34
 800dd5e:	332c      	adds	r3, #44	; 0x2c
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fc1b 	bl	800c59c <ld_dword>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	647b      	str	r3, [r7, #68]	; 0x44
 800dd74:	e01f      	b.n	800ddb6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	891b      	ldrh	r3, [r3, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <find_volume+0x376>
 800dd7e:	230d      	movs	r3, #13
 800dd80:	e08e      	b.n	800dea0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd88:	441a      	add	r2, r3
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dd8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d103      	bne.n	800dd9e <find_volume+0x392>
 800dd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	e00a      	b.n	800ddb4 <find_volume+0x3a8>
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda0:	699a      	ldr	r2, [r3, #24]
 800dda2:	4613      	mov	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	4413      	add	r3, r2
 800dda8:	085a      	lsrs	r2, r3, #1
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ddb4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	69da      	ldr	r2, [r3, #28]
 800ddba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ddc0:	0a5b      	lsrs	r3, r3, #9
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d201      	bcs.n	800ddca <find_volume+0x3be>
 800ddc6:	230d      	movs	r3, #13
 800ddc8:	e06a      	b.n	800dea0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd0:	615a      	str	r2, [r3, #20]
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	695a      	ldr	r2, [r3, #20]
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ddda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dddc:	2280      	movs	r2, #128	; 0x80
 800ddde:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dde0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d149      	bne.n	800de7c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	3334      	adds	r3, #52	; 0x34
 800ddec:	3330      	adds	r3, #48	; 0x30
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe fbbc 	bl	800c56c <ld_word>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d140      	bne.n	800de7c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ddfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	4619      	mov	r1, r3
 800de00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de02:	f7fe fe95 	bl	800cb30 <move_window>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d137      	bne.n	800de7c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	2200      	movs	r2, #0
 800de10:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	3334      	adds	r3, #52	; 0x34
 800de16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fba6 	bl	800c56c <ld_word>
 800de20:	4603      	mov	r3, r0
 800de22:	461a      	mov	r2, r3
 800de24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de28:	429a      	cmp	r2, r3
 800de2a:	d127      	bne.n	800de7c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	3334      	adds	r3, #52	; 0x34
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fbb3 	bl	800c59c <ld_dword>
 800de36:	4603      	mov	r3, r0
 800de38:	4a1b      	ldr	r2, [pc, #108]	; (800dea8 <find_volume+0x49c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d11e      	bne.n	800de7c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	3334      	adds	r3, #52	; 0x34
 800de42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe fba8 	bl	800c59c <ld_dword>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4a17      	ldr	r2, [pc, #92]	; (800deac <find_volume+0x4a0>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d113      	bne.n	800de7c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	3334      	adds	r3, #52	; 0x34
 800de58:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fe fb9d 	bl	800c59c <ld_dword>
 800de62:	4602      	mov	r2, r0
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6a:	3334      	adds	r3, #52	; 0x34
 800de6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800de70:	4618      	mov	r0, r3
 800de72:	f7fe fb93 	bl	800c59c <ld_dword>
 800de76:	4602      	mov	r2, r0
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800de82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <find_volume+0x4a4>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	4b08      	ldr	r3, [pc, #32]	; (800deb0 <find_volume+0x4a4>)
 800de8e:	801a      	strh	r2, [r3, #0]
 800de90:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <find_volume+0x4a4>)
 800de92:	881a      	ldrh	r2, [r3, #0]
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800de98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de9a:	f7fe fde1 	bl	800ca60 <clear_lock>
#endif
	return FR_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3758      	adds	r7, #88	; 0x58
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	41615252 	.word	0x41615252
 800deac:	61417272 	.word	0x61417272
 800deb0:	24008194 	.word	0x24008194

0800deb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800debe:	2309      	movs	r3, #9
 800dec0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d02e      	beq.n	800df26 <validate+0x72>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d02a      	beq.n	800df26 <validate+0x72>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d025      	beq.n	800df26 <validate+0x72>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	889a      	ldrh	r2, [r3, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	88db      	ldrh	r3, [r3, #6]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d11e      	bne.n	800df26 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f7fe fc3d 	bl	800c76c <lock_fs>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d014      	beq.n	800df22 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	785b      	ldrb	r3, [r3, #1]
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fa96 	bl	800c430 <disk_status>
 800df04:	4603      	mov	r3, r0
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d102      	bne.n	800df14 <validate+0x60>
				res = FR_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]
 800df12:	e008      	b.n	800df26 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fc3c 	bl	800c798 <unlock_fs>
 800df20:	e001      	b.n	800df26 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800df22:	230f      	movs	r3, #15
 800df24:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d102      	bne.n	800df32 <validate+0x7e>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	e000      	b.n	800df34 <validate+0x80>
 800df32:	2300      	movs	r3, #0
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	6013      	str	r3, [r2, #0]
	return res;
 800df38:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800df56:	f107 0310 	add.w	r3, r7, #16
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fcbb 	bl	800d8d6 <get_ldnumber>
 800df60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	2b00      	cmp	r3, #0
 800df66:	da01      	bge.n	800df6c <f_mount+0x28>
 800df68:	230b      	movs	r3, #11
 800df6a:	e048      	b.n	800dffe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800df6c:	4a26      	ldr	r2, [pc, #152]	; (800e008 <f_mount+0xc4>)
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00f      	beq.n	800df9c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800df7c:	69b8      	ldr	r0, [r7, #24]
 800df7e:	f7fe fd6f 	bl	800ca60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	4618      	mov	r0, r3
 800df88:	f001 f904 	bl	800f194 <ff_del_syncobj>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <f_mount+0x52>
 800df92:	2302      	movs	r3, #2
 800df94:	e033      	b.n	800dffe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00f      	beq.n	800dfc2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	330c      	adds	r3, #12
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	f001 f8d3 	bl	800f15e <ff_cre_syncobj>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <f_mount+0x7e>
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e01d      	b.n	800dffe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	4910      	ldr	r1, [pc, #64]	; (800e008 <f_mount+0xc4>)
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <f_mount+0x94>
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d001      	beq.n	800dfdc <f_mount+0x98>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e010      	b.n	800dffe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dfdc:	f107 010c 	add.w	r1, r7, #12
 800dfe0:	f107 0308 	add.w	r3, r7, #8
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff fd10 	bl	800da0c <find_volume>
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	7dfa      	ldrb	r2, [r7, #23]
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fbce 	bl	800c798 <unlock_fs>
 800dffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3720      	adds	r7, #32
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	24008190 	.word	0x24008190

0800e00c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b098      	sub	sp, #96	; 0x60
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	4613      	mov	r3, r2
 800e018:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <f_open+0x18>
 800e020:	2309      	movs	r3, #9
 800e022:	e1b4      	b.n	800e38e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e02a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e02c:	79fa      	ldrb	r2, [r7, #7]
 800e02e:	f107 0110 	add.w	r1, r7, #16
 800e032:	f107 0308 	add.w	r3, r7, #8
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff fce8 	bl	800da0c <find_volume>
 800e03c:	4603      	mov	r3, r0
 800e03e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e046:	2b00      	cmp	r3, #0
 800e048:	f040 8191 	bne.w	800e36e <f_open+0x362>
		dj.obj.fs = fs;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	f107 0314 	add.w	r3, r7, #20
 800e056:	4611      	mov	r1, r2
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff fbcb 	bl	800d7f4 <follow_path>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11a      	bne.n	800e0a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e06c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e070:	b25b      	sxtb	r3, r3
 800e072:	2b00      	cmp	r3, #0
 800e074:	da03      	bge.n	800e07e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e076:	2306      	movs	r3, #6
 800e078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e07c:	e011      	b.n	800e0a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	f023 0301 	bic.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	461a      	mov	r2, r3
 800e090:	f107 0314 	add.w	r3, r7, #20
 800e094:	4611      	mov	r1, r2
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fb9a 	bl	800c7d0 <chk_lock>
 800e09c:	4603      	mov	r3, r0
 800e09e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	f003 031c 	and.w	r3, r3, #28
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d07f      	beq.n	800e1ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e0ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d017      	beq.n	800e0e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e0b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b8:	2b04      	cmp	r3, #4
 800e0ba:	d10e      	bne.n	800e0da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e0bc:	f7fe fbe4 	bl	800c888 <enq_lock>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <f_open+0xc8>
 800e0c6:	f107 0314 	add.w	r3, r7, #20
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff facb 	bl	800d666 <dir_register>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	e000      	b.n	800e0d6 <f_open+0xca>
 800e0d4:	2312      	movs	r3, #18
 800e0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	f043 0308 	orr.w	r3, r3, #8
 800e0e0:	71fb      	strb	r3, [r7, #7]
 800e0e2:	e010      	b.n	800e106 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e0e4:	7ebb      	ldrb	r3, [r7, #26]
 800e0e6:	f003 0311 	and.w	r3, r3, #17
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <f_open+0xea>
					res = FR_DENIED;
 800e0ee:	2307      	movs	r3, #7
 800e0f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e0f4:	e007      	b.n	800e106 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	f003 0304 	and.w	r3, r3, #4
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <f_open+0xfa>
 800e100:	2308      	movs	r3, #8
 800e102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d168      	bne.n	800e1e0 <f_open+0x1d4>
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	2b00      	cmp	r3, #0
 800e116:	d063      	beq.n	800e1e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e118:	f7fd ff34 	bl	800bf84 <get_fattime>
 800e11c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e120:	330e      	adds	r3, #14
 800e122:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fa77 	bl	800c618 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12c:	3316      	adds	r3, #22
 800e12e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fa71 	bl	800c618 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e138:	330b      	adds	r3, #11
 800e13a:	2220      	movs	r2, #32
 800e13c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e142:	4611      	mov	r1, r2
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff f9fa 	bl	800d53e <ld_clust>
 800e14a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e150:	2200      	movs	r2, #0
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fa12 	bl	800d57c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15a:	331c      	adds	r3, #28
 800e15c:	2100      	movs	r1, #0
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe fa5a 	bl	800c618 <st_dword>
					fs->wflag = 1;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	2201      	movs	r2, #1
 800e168:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d037      	beq.n	800e1e0 <f_open+0x1d4>
						dw = fs->winsect;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e174:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e176:	f107 0314 	add.w	r3, r7, #20
 800e17a:	2200      	movs	r2, #0
 800e17c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fe ff25 	bl	800cfce <remove_chain>
 800e184:	4603      	mov	r3, r0
 800e186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e18a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d126      	bne.n	800e1e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fcca 	bl	800cb30 <move_window>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1a6:	3a01      	subs	r2, #1
 800e1a8:	611a      	str	r2, [r3, #16]
 800e1aa:	e019      	b.n	800e1e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d115      	bne.n	800e1e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e1b4:	7ebb      	ldrb	r3, [r7, #26]
 800e1b6:	f003 0310 	and.w	r3, r3, #16
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e1be:	2304      	movs	r3, #4
 800e1c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e1c4:	e00c      	b.n	800e1e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e1c6:	79fb      	ldrb	r3, [r7, #7]
 800e1c8:	f003 0302 	and.w	r3, r3, #2
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d007      	beq.n	800e1e0 <f_open+0x1d4>
 800e1d0:	7ebb      	ldrb	r3, [r7, #26]
 800e1d2:	f003 0301 	and.w	r3, r3, #1
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <f_open+0x1d4>
						res = FR_DENIED;
 800e1da:	2307      	movs	r3, #7
 800e1dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e1e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d128      	bne.n	800e23a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	f003 0308 	and.w	r3, r3, #8
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	f023 0301 	bic.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	bf14      	ite	ne
 800e212:	2301      	movne	r3, #1
 800e214:	2300      	moveq	r3, #0
 800e216:	b2db      	uxtb	r3, r3
 800e218:	461a      	mov	r2, r3
 800e21a:	f107 0314 	add.w	r3, r7, #20
 800e21e:	4611      	mov	r1, r2
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fb53 	bl	800c8cc <inc_lock>
 800e226:	4602      	mov	r2, r0
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d102      	bne.n	800e23a <f_open+0x22e>
 800e234:	2302      	movs	r3, #2
 800e236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e23a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f040 8095 	bne.w	800e36e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e248:	4611      	mov	r1, r2
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff f977 	bl	800d53e <ld_clust>
 800e250:	4602      	mov	r2, r0
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e258:	331c      	adds	r3, #28
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f99e 	bl	800c59c <ld_dword>
 800e260:	4602      	mov	r2, r0
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	88da      	ldrh	r2, [r3, #6]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	79fa      	ldrb	r2, [r7, #7]
 800e27e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2200      	movs	r2, #0
 800e28a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	3330      	adds	r3, #48	; 0x30
 800e296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e29a:	2100      	movs	r1, #0
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fe fa08 	bl	800c6b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e2a2:	79fb      	ldrb	r3, [r7, #7]
 800e2a4:	f003 0320 	and.w	r3, r3, #32
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d060      	beq.n	800e36e <f_open+0x362>
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d05c      	beq.n	800e36e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	895b      	ldrh	r3, [r3, #10]
 800e2c0:	025b      	lsls	r3, r3, #9
 800e2c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	657b      	str	r3, [r7, #84]	; 0x54
 800e2d0:	e016      	b.n	800e300 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe fce5 	bl	800cca6 <get_fat>
 800e2dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e2de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d802      	bhi.n	800e2ea <f_open+0x2de>
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d102      	bne.n	800e2f8 <f_open+0x2ec>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	657b      	str	r3, [r7, #84]	; 0x54
 800e300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e304:	2b00      	cmp	r3, #0
 800e306:	d103      	bne.n	800e310 <f_open+0x304>
 800e308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d8e0      	bhi.n	800e2d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e314:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d127      	bne.n	800e36e <f_open+0x362>
 800e31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e324:	2b00      	cmp	r3, #0
 800e326:	d022      	beq.n	800e36e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe fc9b 	bl	800cc68 <clust2sect>
 800e332:	6478      	str	r0, [r7, #68]	; 0x44
 800e334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e336:	2b00      	cmp	r3, #0
 800e338:	d103      	bne.n	800e342 <f_open+0x336>
						res = FR_INT_ERR;
 800e33a:	2302      	movs	r3, #2
 800e33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e340:	e015      	b.n	800e36e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e344:	0a5a      	lsrs	r2, r3, #9
 800e346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e348:	441a      	add	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	7858      	ldrb	r0, [r3, #1]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6a1a      	ldr	r2, [r3, #32]
 800e35c:	2301      	movs	r3, #1
 800e35e:	f7fe f8a7 	bl	800c4b0 <disk_read>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <f_open+0x362>
 800e368:	2301      	movs	r3, #1
 800e36a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e36e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <f_open+0x370>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e382:	4611      	mov	r1, r2
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fa07 	bl	800c798 <unlock_fs>
 800e38a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3760      	adds	r7, #96	; 0x60
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b08c      	sub	sp, #48	; 0x30
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]
 800e3a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f107 0210 	add.w	r2, r7, #16
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff fd7c 	bl	800deb4 <validate>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d107      	bne.n	800e3da <f_write+0x44>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	7d5b      	ldrb	r3, [r3, #21]
 800e3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d009      	beq.n	800e3ee <f_write+0x58>
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fe f9d8 	bl	800c798 <unlock_fs>
 800e3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3ec:	e173      	b.n	800e6d6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
 800e3f2:	f003 0302 	and.w	r3, r3, #2
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <f_write+0x72>
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2107      	movs	r1, #7
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe f9ca 	bl	800c798 <unlock_fs>
 800e404:	2307      	movs	r3, #7
 800e406:	e166      	b.n	800e6d6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	699a      	ldr	r2, [r3, #24]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	441a      	add	r2, r3
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	429a      	cmp	r2, r3
 800e416:	f080 814b 	bcs.w	800e6b0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	699b      	ldr	r3, [r3, #24]
 800e41e:	43db      	mvns	r3, r3
 800e420:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e422:	e145      	b.n	800e6b0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f040 8101 	bne.w	800e634 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	0a5b      	lsrs	r3, r3, #9
 800e438:	693a      	ldr	r2, [r7, #16]
 800e43a:	8952      	ldrh	r2, [r2, #10]
 800e43c:	3a01      	subs	r2, #1
 800e43e:	4013      	ands	r3, r2
 800e440:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d14d      	bne.n	800e4e4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10c      	bne.n	800e46a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d11a      	bne.n	800e492 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2100      	movs	r1, #0
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe fe19 	bl	800d098 <create_chain>
 800e466:	62b8      	str	r0, [r7, #40]	; 0x28
 800e468:	e013      	b.n	800e492 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	4619      	mov	r1, r3
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7fe fea5 	bl	800d1c8 <clmt_clust>
 800e47e:	62b8      	str	r0, [r7, #40]	; 0x28
 800e480:	e007      	b.n	800e492 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	69db      	ldr	r3, [r3, #28]
 800e488:	4619      	mov	r1, r3
 800e48a:	4610      	mov	r0, r2
 800e48c:	f7fe fe04 	bl	800d098 <create_chain>
 800e490:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 8110 	beq.w	800e6ba <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d109      	bne.n	800e4b4 <f_write+0x11e>
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	755a      	strb	r2, [r3, #21]
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	2102      	movs	r1, #2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe f974 	bl	800c798 <unlock_fs>
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	e110      	b.n	800e6d6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ba:	d109      	bne.n	800e4d0 <f_write+0x13a>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	755a      	strb	r2, [r3, #21]
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe f966 	bl	800c798 <unlock_fs>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e102      	b.n	800e6d6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d102      	bne.n	800e4e4 <f_write+0x14e>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	7d1b      	ldrb	r3, [r3, #20]
 800e4e8:	b25b      	sxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	da1d      	bge.n	800e52a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	7858      	ldrb	r0, [r3, #1]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6a1a      	ldr	r2, [r3, #32]
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f7fd fff7 	bl	800c4f0 <disk_write>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <f_write+0x186>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2201      	movs	r2, #1
 800e50c:	755a      	strb	r2, [r3, #21]
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	2101      	movs	r1, #1
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe f940 	bl	800c798 <unlock_fs>
 800e518:	2301      	movs	r3, #1
 800e51a:	e0dc      	b.n	800e6d6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	7d1b      	ldrb	r3, [r3, #20]
 800e520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e524:	b2da      	uxtb	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e52a:	693a      	ldr	r2, [r7, #16]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	69db      	ldr	r3, [r3, #28]
 800e530:	4619      	mov	r1, r3
 800e532:	4610      	mov	r0, r2
 800e534:	f7fe fb98 	bl	800cc68 <clust2sect>
 800e538:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d109      	bne.n	800e554 <f_write+0x1be>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2202      	movs	r2, #2
 800e544:	755a      	strb	r2, [r3, #21]
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	2102      	movs	r1, #2
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f924 	bl	800c798 <unlock_fs>
 800e550:	2302      	movs	r3, #2
 800e552:	e0c0      	b.n	800e6d6 <f_write+0x340>
			sect += csect;
 800e554:	697a      	ldr	r2, [r7, #20]
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	4413      	add	r3, r2
 800e55a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	0a5b      	lsrs	r3, r3, #9
 800e560:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d041      	beq.n	800e5ec <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	4413      	add	r3, r2
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	8952      	ldrh	r2, [r2, #10]
 800e572:	4293      	cmp	r3, r2
 800e574:	d905      	bls.n	800e582 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	895b      	ldrh	r3, [r3, #10]
 800e57a:	461a      	mov	r2, r3
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	7858      	ldrb	r0, [r3, #1]
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	69f9      	ldr	r1, [r7, #28]
 800e58c:	f7fd ffb0 	bl	800c4f0 <disk_write>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <f_write+0x214>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2201      	movs	r2, #1
 800e59a:	755a      	strb	r2, [r3, #21]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	2101      	movs	r1, #1
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe f8f9 	bl	800c798 <unlock_fs>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e095      	b.n	800e6d6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6a1a      	ldr	r2, [r3, #32]
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	6a3a      	ldr	r2, [r7, #32]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d915      	bls.n	800e5e4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6a1a      	ldr	r2, [r3, #32]
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	025b      	lsls	r3, r3, #9
 800e5c8:	69fa      	ldr	r2, [r7, #28]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	f7fe f84d 	bl	800c670 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	7d1b      	ldrb	r3, [r3, #20]
 800e5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	025b      	lsls	r3, r3, #9
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e5ea:	e044      	b.n	800e676 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a1b      	ldr	r3, [r3, #32]
 800e5f0:	697a      	ldr	r2, [r7, #20]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d01b      	beq.n	800e62e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	699a      	ldr	r2, [r3, #24]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d215      	bcs.n	800e62e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	7858      	ldrb	r0, [r3, #1]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e60c:	2301      	movs	r3, #1
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	f7fd ff4e 	bl	800c4b0 <disk_read>
 800e614:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e616:	2b00      	cmp	r3, #0
 800e618:	d009      	beq.n	800e62e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2201      	movs	r2, #1
 800e61e:	755a      	strb	r2, [r3, #21]
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	2101      	movs	r1, #1
 800e624:	4618      	mov	r0, r3
 800e626:	f7fe f8b7 	bl	800c798 <unlock_fs>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e053      	b.n	800e6d6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e640:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	429a      	cmp	r2, r3
 800e648:	d901      	bls.n	800e64e <f_write+0x2b8>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	699b      	ldr	r3, [r3, #24]
 800e658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65c:	4413      	add	r3, r2
 800e65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e660:	69f9      	ldr	r1, [r7, #28]
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe f804 	bl	800c670 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	7d1b      	ldrb	r3, [r3, #20]
 800e66c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e670:	b2da      	uxtb	r2, r3
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e676:	69fa      	ldr	r2, [r7, #28]
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	4413      	add	r3, r2
 800e67c:	61fb      	str	r3, [r7, #28]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	699a      	ldr	r2, [r3, #24]
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	441a      	add	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	619a      	str	r2, [r3, #24]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	68da      	ldr	r2, [r3, #12]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	429a      	cmp	r2, r3
 800e694:	bf38      	it	cc
 800e696:	461a      	movcc	r2, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	60da      	str	r2, [r3, #12]
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	441a      	add	r2, r3
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	1ad3      	subs	r3, r2, r3
 800e6ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f47f aeb6 	bne.w	800e424 <f_write+0x8e>
 800e6b8:	e000      	b.n	800e6bc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e6ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	7d1b      	ldrb	r3, [r3, #20]
 800e6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe f862 	bl	800c798 <unlock_fs>
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3730      	adds	r7, #48	; 0x30
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b086      	sub	sp, #24
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f107 0208 	add.w	r2, r7, #8
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7ff fbe0 	bl	800deb4 <validate>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d16d      	bne.n	800e7da <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	7d1b      	ldrb	r3, [r3, #20]
 800e702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e706:	2b00      	cmp	r3, #0
 800e708:	d067      	beq.n	800e7da <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	7d1b      	ldrb	r3, [r3, #20]
 800e70e:	b25b      	sxtb	r3, r3
 800e710:	2b00      	cmp	r3, #0
 800e712:	da1a      	bge.n	800e74a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	7858      	ldrb	r0, [r3, #1]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1a      	ldr	r2, [r3, #32]
 800e722:	2301      	movs	r3, #1
 800e724:	f7fd fee4 	bl	800c4f0 <disk_write>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d006      	beq.n	800e73c <f_sync+0x5e>
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2101      	movs	r1, #1
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe f830 	bl	800c798 <unlock_fs>
 800e738:	2301      	movs	r3, #1
 800e73a:	e055      	b.n	800e7e8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	7d1b      	ldrb	r3, [r3, #20]
 800e740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e744:	b2da      	uxtb	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e74a:	f7fd fc1b 	bl	800bf84 <get_fattime>
 800e74e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f7fe f9e9 	bl	800cb30 <move_window>
 800e75e:	4603      	mov	r3, r0
 800e760:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d138      	bne.n	800e7da <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	330b      	adds	r3, #11
 800e772:	781a      	ldrb	r2, [r3, #0]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	330b      	adds	r3, #11
 800e778:	f042 0220 	orr.w	r2, r2, #32
 800e77c:	b2d2      	uxtb	r2, r2
 800e77e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6818      	ldr	r0, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	461a      	mov	r2, r3
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	f7fe fef6 	bl	800d57c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f103 021c 	add.w	r2, r3, #28
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	4619      	mov	r1, r3
 800e79c:	4610      	mov	r0, r2
 800e79e:	f7fd ff3b 	bl	800c618 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3316      	adds	r3, #22
 800e7a6:	6939      	ldr	r1, [r7, #16]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fd ff35 	bl	800c618 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	3312      	adds	r3, #18
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fd ff14 	bl	800c5e2 <st_word>
					fs->wflag = 1;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe f9e2 	bl	800cb8c <sync_fs>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	7d1b      	ldrb	r3, [r3, #20]
 800e7d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	7dfa      	ldrb	r2, [r7, #23]
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fd ffd9 	bl	800c798 <unlock_fs>
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff ff70 	bl	800e6de <f_sync>
 800e7fe:	4603      	mov	r3, r0
 800e800:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d11d      	bne.n	800e844 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f107 0208 	add.w	r2, r7, #8
 800e80e:	4611      	mov	r1, r2
 800e810:	4618      	mov	r0, r3
 800e812:	f7ff fb4f 	bl	800deb4 <validate>
 800e816:	4603      	mov	r3, r0
 800e818:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e81a:	7bfb      	ldrb	r3, [r7, #15]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d111      	bne.n	800e844 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe f8df 	bl	800c9e8 <dec_lock>
 800e82a:	4603      	mov	r3, r0
 800e82c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e82e:	7bfb      	ldrb	r3, [r7, #15]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d102      	bne.n	800e83a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2100      	movs	r1, #0
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fd ffaa 	bl	800c798 <unlock_fs>
#endif
		}
	}
	return res;
 800e844:	7bfb      	ldrb	r3, [r7, #15]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e850:	b590      	push	{r4, r7, lr}
 800e852:	b09d      	sub	sp, #116	; 0x74
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	607a      	str	r2, [r7, #4]
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	460b      	mov	r3, r1
 800e85e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e860:	2301      	movs	r3, #1
 800e862:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e868:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e86a:	f107 030c 	add.w	r3, r7, #12
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff f831 	bl	800d8d6 <get_ldnumber>
 800e874:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e878:	2b00      	cmp	r3, #0
 800e87a:	da02      	bge.n	800e882 <f_mkfs+0x32>
 800e87c:	230b      	movs	r3, #11
 800e87e:	f000 bc0d 	b.w	800f09c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e882:	4a94      	ldr	r2, [pc, #592]	; (800ead4 <f_mkfs+0x284>)
 800e884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d005      	beq.n	800e89a <f_mkfs+0x4a>
 800e88e:	4a91      	ldr	r2, [pc, #580]	; (800ead4 <f_mkfs+0x284>)
 800e890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e896:	2200      	movs	r2, #0
 800e898:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e8a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fd fdda 	bl	800c464 <disk_initialize>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e8b6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <f_mkfs+0x76>
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	e3ea      	b.n	800f09c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e8c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e8ca:	f003 0304 	and.w	r3, r3, #4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <f_mkfs+0x86>
 800e8d2:	230a      	movs	r3, #10
 800e8d4:	e3e2      	b.n	800f09c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e8d6:	f107 0214 	add.w	r2, r7, #20
 800e8da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e8de:	2103      	movs	r1, #3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fd fe25 	bl	800c530 <disk_ioctl>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10c      	bne.n	800e906 <f_mkfs+0xb6>
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <f_mkfs+0xb6>
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f8:	d805      	bhi.n	800e906 <f_mkfs+0xb6>
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	1e5a      	subs	r2, r3, #1
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	4013      	ands	r3, r2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <f_mkfs+0xba>
 800e906:	2301      	movs	r3, #1
 800e908:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e90a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e90e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <f_mkfs+0xce>
 800e916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d309      	bcc.n	800e932 <f_mkfs+0xe2>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e924:	d805      	bhi.n	800e932 <f_mkfs+0xe2>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	1e5a      	subs	r2, r3, #1
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4013      	ands	r3, r2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <f_mkfs+0xe6>
 800e932:	2313      	movs	r3, #19
 800e934:	e3b2      	b.n	800f09c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e936:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e93e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e950:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	fb02 f303 	mul.w	r3, r2, r3
 800e958:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <f_mkfs+0x114>
 800e960:	230e      	movs	r3, #14
 800e962:	e39b      	b.n	800f09c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e964:	f107 0210 	add.w	r2, r7, #16
 800e968:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e96c:	2101      	movs	r1, #1
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fd fdde 	bl	800c530 <disk_ioctl>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <f_mkfs+0x12e>
 800e97a:	2301      	movs	r3, #1
 800e97c:	e38e      	b.n	800f09c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e97e:	7afb      	ldrb	r3, [r7, #11]
 800e980:	f003 0308 	and.w	r3, r3, #8
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <f_mkfs+0x13c>
 800e988:	2300      	movs	r3, #0
 800e98a:	e000      	b.n	800e98e <f_mkfs+0x13e>
 800e98c:	233f      	movs	r3, #63	; 0x3f
 800e98e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e994:	429a      	cmp	r2, r3
 800e996:	d901      	bls.n	800e99c <f_mkfs+0x14c>
 800e998:	230e      	movs	r3, #14
 800e99a:	e37f      	b.n	800f09c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	2b7f      	cmp	r3, #127	; 0x7f
 800e9a8:	d801      	bhi.n	800e9ae <f_mkfs+0x15e>
 800e9aa:	230e      	movs	r3, #14
 800e9ac:	e376      	b.n	800f09c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b80      	cmp	r3, #128	; 0x80
 800e9b2:	d901      	bls.n	800e9b8 <f_mkfs+0x168>
 800e9b4:	2313      	movs	r3, #19
 800e9b6:	e371      	b.n	800f09c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e9b8:	7afb      	ldrb	r3, [r7, #11]
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00d      	beq.n	800e9de <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e9c2:	7afb      	ldrb	r3, [r7, #11]
 800e9c4:	f003 0307 	and.w	r3, r3, #7
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d004      	beq.n	800e9d6 <f_mkfs+0x186>
 800e9cc:	7afb      	ldrb	r3, [r7, #11]
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d103      	bne.n	800e9de <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e9dc:	e009      	b.n	800e9f2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e9de:	7afb      	ldrb	r3, [r7, #11]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d101      	bne.n	800e9ec <f_mkfs+0x19c>
 800e9e8:	2313      	movs	r3, #19
 800e9ea:	e357      	b.n	800f09c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e9ec:	2302      	movs	r3, #2
 800e9ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e9f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d13c      	bne.n	800ea78 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d11b      	bne.n	800ea3c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	0c5b      	lsrs	r3, r3, #17
 800ea08:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea0e:	2301      	movs	r3, #1
 800ea10:	653b      	str	r3, [r7, #80]	; 0x50
 800ea12:	e005      	b.n	800ea20 <f_mkfs+0x1d0>
 800ea14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea16:	3301      	adds	r3, #1
 800ea18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ea20:	4a2d      	ldr	r2, [pc, #180]	; (800ead8 <f_mkfs+0x288>)
 800ea22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <f_mkfs+0x1ec>
 800ea2c:	4a2a      	ldr	r2, [pc, #168]	; (800ead8 <f_mkfs+0x288>)
 800ea2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea34:	461a      	mov	r2, r3
 800ea36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d2eb      	bcs.n	800ea14 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea44:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	3302      	adds	r3, #2
 800ea4a:	009a      	lsls	r2, r3, #2
 800ea4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea4e:	4413      	add	r3, r2
 800ea50:	1e5a      	subs	r2, r3, #1
 800ea52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea58:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800ea5a:	2320      	movs	r3, #32
 800ea5c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ea5e:	2300      	movs	r3, #0
 800ea60:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d903      	bls.n	800ea74 <f_mkfs+0x224>
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	4a1b      	ldr	r2, [pc, #108]	; (800eadc <f_mkfs+0x28c>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d952      	bls.n	800eb1a <f_mkfs+0x2ca>
 800ea74:	230e      	movs	r3, #14
 800ea76:	e311      	b.n	800f09c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ea78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d11b      	bne.n	800eab6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	0b1b      	lsrs	r3, r3, #12
 800ea82:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ea84:	2300      	movs	r3, #0
 800ea86:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea88:	2301      	movs	r3, #1
 800ea8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ea8c:	e005      	b.n	800ea9a <f_mkfs+0x24a>
 800ea8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea90:	3301      	adds	r3, #1
 800ea92:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea96:	005b      	lsls	r3, r3, #1
 800ea98:	653b      	str	r3, [r7, #80]	; 0x50
 800ea9a:	4a11      	ldr	r2, [pc, #68]	; (800eae0 <f_mkfs+0x290>)
 800ea9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d007      	beq.n	800eab6 <f_mkfs+0x266>
 800eaa6:	4a0e      	ldr	r2, [pc, #56]	; (800eae0 <f_mkfs+0x290>)
 800eaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaae:	461a      	mov	r2, r3
 800eab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d2eb      	bcs.n	800ea8e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaba:	fbb2 f3f3 	udiv	r3, r2, r3
 800eabe:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d90c      	bls.n	800eae4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	3302      	adds	r3, #2
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ead2:	e012      	b.n	800eafa <f_mkfs+0x2aa>
 800ead4:	24008190 	.word	0x24008190
 800ead8:	08013670 	.word	0x08013670
 800eadc:	0ffffff5 	.word	0x0ffffff5
 800eae0:	08013680 	.word	0x08013680
				} else {
					fmt = FS_FAT12;
 800eae4:	2301      	movs	r3, #1
 800eae6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800eaea:	6a3a      	ldr	r2, [r7, #32]
 800eaec:	4613      	mov	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	085b      	lsrs	r3, r3, #1
 800eaf6:	3303      	adds	r3, #3
 800eaf8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800eafa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eafe:	4413      	add	r3, r2
 800eb00:	1e5a      	subs	r2, r3, #1
 800eb02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb04:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb08:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800eb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb10:	015a      	lsls	r2, r3, #5
 800eb12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb14:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb18:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800eb1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb1e:	4413      	add	r3, r2
 800eb20:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800eb22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb26:	fb02 f203 	mul.w	r2, r2, r3
 800eb2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb2c:	4413      	add	r3, r2
 800eb2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb30:	4413      	add	r3, r2
 800eb32:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	4413      	add	r3, r2
 800eb3a:	1e5a      	subs	r2, r3, #1
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	425b      	negs	r3, r3
 800eb40:	401a      	ands	r2, r3
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800eb48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d108      	bne.n	800eb62 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800eb50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb54:	4413      	add	r3, r2
 800eb56:	657b      	str	r3, [r7, #84]	; 0x54
 800eb58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb5c:	4413      	add	r3, r2
 800eb5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb60:	e006      	b.n	800eb70 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800eb62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb66:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb6c:	4413      	add	r3, r2
 800eb6e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800eb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb72:	011a      	lsls	r2, r3, #4
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	441a      	add	r2, r3
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d901      	bls.n	800eb86 <f_mkfs+0x336>
 800eb82:	230e      	movs	r3, #14
 800eb84:	e28a      	b.n	800f09c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb8a:	1ad2      	subs	r2, r2, r3
 800eb8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb90:	fb01 f303 	mul.w	r3, r1, r3
 800eb94:	1ad2      	subs	r2, r2, r3
 800eb96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb98:	1ad2      	subs	r2, r2, r3
 800eb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eba0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800eba2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d10f      	bne.n	800ebca <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d80a      	bhi.n	800ebca <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <f_mkfs+0x376>
 800ebba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebbc:	085b      	lsrs	r3, r3, #1
 800ebbe:	607b      	str	r3, [r7, #4]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d144      	bne.n	800ec50 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ebc6:	230e      	movs	r3, #14
 800ebc8:	e268      	b.n	800f09c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ebca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d133      	bne.n	800ec3a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ebd2:	6a3b      	ldr	r3, [r7, #32]
 800ebd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d91e      	bls.n	800ec1a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d107      	bne.n	800ebf2 <f_mkfs+0x3a2>
 800ebe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	2b40      	cmp	r3, #64	; 0x40
 800ebe8:	d803      	bhi.n	800ebf2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ebea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	607b      	str	r3, [r7, #4]
 800ebf0:	e033      	b.n	800ec5a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ebf2:	7afb      	ldrb	r3, [r7, #11]
 800ebf4:	f003 0302 	and.w	r3, r3, #2
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec02:	e02a      	b.n	800ec5a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d105      	bne.n	800ec16 <f_mkfs+0x3c6>
 800ec0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b80      	cmp	r3, #128	; 0x80
 800ec14:	d91e      	bls.n	800ec54 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ec16:	230e      	movs	r3, #14
 800ec18:	e240      	b.n	800f09c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d80a      	bhi.n	800ec3a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d105      	bne.n	800ec36 <f_mkfs+0x3e6>
 800ec2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	607b      	str	r3, [r7, #4]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b80      	cmp	r3, #128	; 0x80
 800ec34:	d910      	bls.n	800ec58 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ec36:	230e      	movs	r3, #14
 800ec38:	e230      	b.n	800f09c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ec3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d10c      	bne.n	800ec5c <f_mkfs+0x40c>
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d907      	bls.n	800ec5c <f_mkfs+0x40c>
 800ec4c:	230e      	movs	r3, #14
 800ec4e:	e225      	b.n	800f09c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ec50:	bf00      	nop
 800ec52:	e6ce      	b.n	800e9f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ec54:	bf00      	nop
 800ec56:	e6cc      	b.n	800e9f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ec58:	bf00      	nop
			pau = au;
 800ec5a:	e6ca      	b.n	800e9f2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ec5c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ec5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec60:	461a      	mov	r2, r3
 800ec62:	2100      	movs	r1, #0
 800ec64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec66:	f7fd fd24 	bl	800c6b2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ec6a:	220b      	movs	r2, #11
 800ec6c:	49bc      	ldr	r1, [pc, #752]	; (800ef60 <f_mkfs+0x710>)
 800ec6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec70:	f7fd fcfe 	bl	800c670 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ec74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec76:	330b      	adds	r3, #11
 800ec78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7fd fcb0 	bl	800c5e2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	330d      	adds	r3, #13
 800ec86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec88:	b2d2      	uxtb	r2, r2
 800ec8a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	330e      	adds	r3, #14
 800ec90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec92:	b292      	uxth	r2, r2
 800ec94:	4611      	mov	r1, r2
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fd fca3 	bl	800c5e2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9e:	3310      	adds	r3, #16
 800eca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eca2:	b2d2      	uxtb	r2, r2
 800eca4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	f103 0211 	add.w	r2, r3, #17
 800ecac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecb0:	2b03      	cmp	r3, #3
 800ecb2:	d002      	beq.n	800ecba <f_mkfs+0x46a>
 800ecb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	e000      	b.n	800ecbc <f_mkfs+0x46c>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f7fd fc8f 	bl	800c5e2 <st_word>
		if (sz_vol < 0x10000) {
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecca:	d208      	bcs.n	800ecde <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	3313      	adds	r3, #19
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	b292      	uxth	r2, r2
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd fc83 	bl	800c5e2 <st_word>
 800ecdc:	e006      	b.n	800ecec <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	3320      	adds	r3, #32
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd fc96 	bl	800c618 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	3315      	adds	r3, #21
 800ecf0:	22f8      	movs	r2, #248	; 0xf8
 800ecf2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	3318      	adds	r3, #24
 800ecf8:	213f      	movs	r1, #63	; 0x3f
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd fc71 	bl	800c5e2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	331a      	adds	r3, #26
 800ed04:	21ff      	movs	r1, #255	; 0xff
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fd fc6b 	bl	800c5e2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	331c      	adds	r3, #28
 800ed10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fd fc80 	bl	800c618 <st_dword>
		if (fmt == FS_FAT32) {
 800ed18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed1c:	2b03      	cmp	r3, #3
 800ed1e:	d131      	bne.n	800ed84 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ed26:	f7fd f92d 	bl	800bf84 <get_fattime>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7fd fc72 	bl	800c618 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	3324      	adds	r3, #36	; 0x24
 800ed38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fd fc6c 	bl	800c618 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	332c      	adds	r3, #44	; 0x2c
 800ed44:	2102      	movs	r1, #2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fd fc66 	bl	800c618 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	3330      	adds	r3, #48	; 0x30
 800ed50:	2101      	movs	r1, #1
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fd fc45 	bl	800c5e2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	3332      	adds	r3, #50	; 0x32
 800ed5c:	2106      	movs	r1, #6
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd fc3f 	bl	800c5e2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	3340      	adds	r3, #64	; 0x40
 800ed68:	2280      	movs	r2, #128	; 0x80
 800ed6a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	3342      	adds	r3, #66	; 0x42
 800ed70:	2229      	movs	r2, #41	; 0x29
 800ed72:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	3347      	adds	r3, #71	; 0x47
 800ed78:	2213      	movs	r2, #19
 800ed7a:	497a      	ldr	r1, [pc, #488]	; (800ef64 <f_mkfs+0x714>)
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fd fc77 	bl	800c670 <mem_cpy>
 800ed82:	e020      	b.n	800edc6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ed8a:	f7fd f8fb 	bl	800bf84 <get_fattime>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4619      	mov	r1, r3
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7fd fc40 	bl	800c618 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	3316      	adds	r3, #22
 800ed9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed9e:	b292      	uxth	r2, r2
 800eda0:	4611      	mov	r1, r2
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fd fc1d 	bl	800c5e2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	3324      	adds	r3, #36	; 0x24
 800edac:	2280      	movs	r2, #128	; 0x80
 800edae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	3326      	adds	r3, #38	; 0x26
 800edb4:	2229      	movs	r2, #41	; 0x29
 800edb6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800edb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edba:	332b      	adds	r3, #43	; 0x2b
 800edbc:	2213      	movs	r2, #19
 800edbe:	496a      	ldr	r1, [pc, #424]	; (800ef68 <f_mkfs+0x718>)
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd fc55 	bl	800c670 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edcc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fd fc06 	bl	800c5e2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800edd6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800edda:	2301      	movs	r3, #1
 800eddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ede0:	f7fd fb86 	bl	800c4f0 <disk_write>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <f_mkfs+0x59e>
 800edea:	2301      	movs	r3, #1
 800edec:	e156      	b.n	800f09c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800edee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d140      	bne.n	800ee78 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800edf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf8:	1d9a      	adds	r2, r3, #6
 800edfa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800edfe:	2301      	movs	r3, #1
 800ee00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee02:	f7fd fb75 	bl	800c4f0 <disk_write>
			mem_set(buf, 0, ss);
 800ee06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee08:	461a      	mov	r2, r3
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee0e:	f7fd fc50 	bl	800c6b2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ee12:	4956      	ldr	r1, [pc, #344]	; (800ef6c <f_mkfs+0x71c>)
 800ee14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee16:	f7fd fbff 	bl	800c618 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ee20:	4953      	ldr	r1, [pc, #332]	; (800ef70 <f_mkfs+0x720>)
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fd fbf8 	bl	800c618 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	3b01      	subs	r3, #1
 800ee32:	4619      	mov	r1, r3
 800ee34:	4610      	mov	r0, r2
 800ee36:	f7fd fbef 	bl	800c618 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ee40:	2102      	movs	r1, #2
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fd fbe8 	bl	800c618 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fd fbc5 	bl	800c5e2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	1dda      	adds	r2, r3, #7
 800ee5c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ee60:	2301      	movs	r3, #1
 800ee62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee64:	f7fd fb44 	bl	800c4f0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ee70:	2301      	movs	r3, #1
 800ee72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee74:	f7fd fb3c 	bl	800c4f0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ee78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee7e:	f7fd fc18 	bl	800c6b2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ee82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee84:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ee86:	2300      	movs	r3, #0
 800ee88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee8a:	e04b      	b.n	800ef24 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ee8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee90:	2b03      	cmp	r3, #3
 800ee92:	d113      	bne.n	800eebc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ee94:	f06f 0107 	mvn.w	r1, #7
 800ee98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee9a:	f7fd fbbd 	bl	800c618 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	3304      	adds	r3, #4
 800eea2:	f04f 31ff 	mov.w	r1, #4294967295
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fd fbb6 	bl	800c618 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	3308      	adds	r3, #8
 800eeb0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd fbaf 	bl	800c618 <st_dword>
 800eeba:	e00b      	b.n	800eed4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800eebc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <f_mkfs+0x678>
 800eec4:	4b2b      	ldr	r3, [pc, #172]	; (800ef74 <f_mkfs+0x724>)
 800eec6:	e001      	b.n	800eecc <f_mkfs+0x67c>
 800eec8:	f06f 0307 	mvn.w	r3, #7
 800eecc:	4619      	mov	r1, r3
 800eece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eed0:	f7fd fba2 	bl	800c618 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800eed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eed6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800eed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	4293      	cmp	r3, r2
 800eede:	bf28      	it	cs
 800eee0:	4613      	movcs	r3, r2
 800eee2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800eee4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eeec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eeee:	f7fd faff 	bl	800c4f0 <disk_write>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d001      	beq.n	800eefc <f_mkfs+0x6ac>
 800eef8:	2301      	movs	r3, #1
 800eefa:	e0cf      	b.n	800f09c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800eefc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eefe:	461a      	mov	r2, r3
 800ef00:	2100      	movs	r1, #0
 800ef02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef04:	f7fd fbd5 	bl	800c6b2 <mem_set>
				sect += n; nsect -= n;
 800ef08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef0c:	4413      	add	r3, r2
 800ef0e:	667b      	str	r3, [r7, #100]	; 0x64
 800ef10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ef18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1dc      	bne.n	800eed8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ef1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef20:	3301      	adds	r3, #1
 800ef22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d3af      	bcc.n	800ee8c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ef2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	d101      	bne.n	800ef38 <f_mkfs+0x6e8>
 800ef34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef36:	e000      	b.n	800ef3a <f_mkfs+0x6ea>
 800ef38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef3a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ef3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	4293      	cmp	r3, r2
 800ef42:	bf28      	it	cs
 800ef44:	4613      	movcs	r3, r2
 800ef46:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ef48:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ef4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef52:	f7fd facd 	bl	800c4f0 <disk_write>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00d      	beq.n	800ef78 <f_mkfs+0x728>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e09d      	b.n	800f09c <f_mkfs+0x84c>
 800ef60:	0801352c 	.word	0x0801352c
 800ef64:	08013538 	.word	0x08013538
 800ef68:	0801354c 	.word	0x0801354c
 800ef6c:	41615252 	.word	0x41615252
 800ef70:	61417272 	.word	0x61417272
 800ef74:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800ef78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7c:	4413      	add	r3, r2
 800ef7e:	667b      	str	r3, [r7, #100]	; 0x64
 800ef80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ef88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1d6      	bne.n	800ef3c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ef8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d103      	bne.n	800ef9e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800ef96:	230c      	movs	r3, #12
 800ef98:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ef9c:	e010      	b.n	800efc0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa4:	d303      	bcc.n	800efae <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800efa6:	2306      	movs	r3, #6
 800efa8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800efac:	e008      	b.n	800efc0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800efae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d101      	bne.n	800efba <f_mkfs+0x76a>
 800efb6:	2304      	movs	r3, #4
 800efb8:	e000      	b.n	800efbc <f_mkfs+0x76c>
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800efc0:	7afb      	ldrb	r3, [r7, #11]
 800efc2:	f003 0308 	and.w	r3, r3, #8
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d15b      	bne.n	800f082 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800efca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800efcc:	461a      	mov	r2, r3
 800efce:	2100      	movs	r1, #0
 800efd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efd2:	f7fd fb6e 	bl	800c6b2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800efdc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fd fafe 	bl	800c5e2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800efe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800efec:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	2200      	movs	r2, #0
 800eff2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	3301      	adds	r3, #1
 800eff8:	2201      	movs	r2, #1
 800effa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	3302      	adds	r3, #2
 800f000:	2201      	movs	r2, #1
 800f002:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	3303      	adds	r3, #3
 800f008:	2200      	movs	r2, #0
 800f00a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	3304      	adds	r3, #4
 800f010:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f014:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	441a      	add	r2, r3
 800f01c:	4b21      	ldr	r3, [pc, #132]	; (800f0a4 <f_mkfs+0x854>)
 800f01e:	fba3 1302 	umull	r1, r3, r3, r2
 800f022:	1ad2      	subs	r2, r2, r3
 800f024:	0852      	lsrs	r2, r2, #1
 800f026:	4413      	add	r3, r2
 800f028:	0b5b      	lsrs	r3, r3, #13
 800f02a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	3305      	adds	r3, #5
 800f030:	22fe      	movs	r2, #254	; 0xfe
 800f032:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f036:	089b      	lsrs	r3, r3, #2
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	3306      	adds	r3, #6
 800f03e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f042:	b2d2      	uxtb	r2, r2
 800f044:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	3307      	adds	r3, #7
 800f04a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f04c:	b2d2      	uxtb	r2, r2
 800f04e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	3308      	adds	r3, #8
 800f054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f056:	4618      	mov	r0, r3
 800f058:	f7fd fade 	bl	800c618 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	330c      	adds	r3, #12
 800f060:	693a      	ldr	r2, [r7, #16]
 800f062:	4611      	mov	r1, r2
 800f064:	4618      	mov	r0, r3
 800f066:	f7fd fad7 	bl	800c618 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f06a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f06e:	2301      	movs	r3, #1
 800f070:	2200      	movs	r2, #0
 800f072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f074:	f7fd fa3c 	bl	800c4f0 <disk_write>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <f_mkfs+0x832>
 800f07e:	2301      	movs	r3, #1
 800f080:	e00c      	b.n	800f09c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f082:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f086:	2200      	movs	r2, #0
 800f088:	2100      	movs	r1, #0
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fd fa50 	bl	800c530 <disk_ioctl>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <f_mkfs+0x84a>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <f_mkfs+0x84c>

	return FR_OK;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3774      	adds	r7, #116	; 0x74
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}
 800f0a4:	0515565b 	.word	0x0515565b

0800f0a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b087      	sub	sp, #28
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f0be:	4b1f      	ldr	r3, [pc, #124]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0c0:	7a5b      	ldrb	r3, [r3, #9]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d131      	bne.n	800f12c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f0c8:	4b1c      	ldr	r3, [pc, #112]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0ca:	7a5b      	ldrb	r3, [r3, #9]
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	4b1a      	ldr	r3, [pc, #104]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0d6:	4b19      	ldr	r3, [pc, #100]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0d8:	7a5b      	ldrb	r3, [r3, #9]
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	4a17      	ldr	r2, [pc, #92]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	4413      	add	r3, r2
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0e6:	4b15      	ldr	r3, [pc, #84]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0e8:	7a5b      	ldrb	r3, [r3, #9]
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0f0:	4413      	add	r3, r2
 800f0f2:	79fa      	ldrb	r2, [r7, #7]
 800f0f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0f6:	4b11      	ldr	r3, [pc, #68]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f0f8:	7a5b      	ldrb	r3, [r3, #9]
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	b2d1      	uxtb	r1, r2
 800f100:	4a0e      	ldr	r2, [pc, #56]	; (800f13c <FATFS_LinkDriverEx+0x94>)
 800f102:	7251      	strb	r1, [r2, #9]
 800f104:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f106:	7dbb      	ldrb	r3, [r7, #22]
 800f108:	3330      	adds	r3, #48	; 0x30
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	3301      	adds	r3, #1
 800f114:	223a      	movs	r2, #58	; 0x3a
 800f116:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	3302      	adds	r3, #2
 800f11c:	222f      	movs	r2, #47	; 0x2f
 800f11e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	3303      	adds	r3, #3
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	371c      	adds	r7, #28
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	240081b8 	.word	0x240081b8

0800f140 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f14a:	2200      	movs	r2, #0
 800f14c:	6839      	ldr	r1, [r7, #0]
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7ff ffaa 	bl	800f0a8 <FATFS_LinkDriverEx>
 800f154:	4603      	mov	r3, r0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	4603      	mov	r3, r0
 800f166:	6039      	str	r1, [r7, #0]
 800f168:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f16a:	2200      	movs	r2, #0
 800f16c:	2101      	movs	r1, #1
 800f16e:	2001      	movs	r0, #1
 800f170:	f000 f9ae 	bl	800f4d0 <osSemaphoreNew>
 800f174:	4602      	mov	r2, r0
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bf14      	ite	ne
 800f182:	2301      	movne	r3, #1
 800f184:	2300      	moveq	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	60fb      	str	r3, [r7, #12]

    return ret;
 800f18a:	68fb      	ldr	r3, [r7, #12]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fab7 	bl	800f710 <osSemaphoreDelete>
#endif
    return 1;
 800f1a2:	2301      	movs	r3, #1
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f1b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fa11 	bl	800f5e4 <osSemaphoreAcquire>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 fa52 	bl	800f688 <osSemaphoreRelease>
#endif
}
 800f1e4:	bf00      	nop
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <__NVIC_SetPriority>:
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f1f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	db0a      	blt.n	800f216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	b2da      	uxtb	r2, r3
 800f204:	490c      	ldr	r1, [pc, #48]	; (800f238 <__NVIC_SetPriority+0x4c>)
 800f206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f20a:	0112      	lsls	r2, r2, #4
 800f20c:	b2d2      	uxtb	r2, r2
 800f20e:	440b      	add	r3, r1
 800f210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f214:	e00a      	b.n	800f22c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	4908      	ldr	r1, [pc, #32]	; (800f23c <__NVIC_SetPriority+0x50>)
 800f21c:	88fb      	ldrh	r3, [r7, #6]
 800f21e:	f003 030f 	and.w	r3, r3, #15
 800f222:	3b04      	subs	r3, #4
 800f224:	0112      	lsls	r2, r2, #4
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	440b      	add	r3, r1
 800f22a:	761a      	strb	r2, [r3, #24]
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr
 800f238:	e000e100 	.word	0xe000e100
 800f23c:	e000ed00 	.word	0xe000ed00

0800f240 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f244:	4b05      	ldr	r3, [pc, #20]	; (800f25c <SysTick_Handler+0x1c>)
 800f246:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f248:	f002 fb08 	bl	801185c <xTaskGetSchedulerState>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d001      	beq.n	800f256 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f252:	f003 f9f1 	bl	8012638 <xPortSysTickHandler>
  }
}
 800f256:	bf00      	nop
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	e000e010 	.word	0xe000e010

0800f260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f264:	2100      	movs	r1, #0
 800f266:	f06f 0004 	mvn.w	r0, #4
 800f26a:	f7ff ffbf 	bl	800f1ec <__NVIC_SetPriority>
#endif
}
 800f26e:	bf00      	nop
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f27a:	f3ef 8305 	mrs	r3, IPSR
 800f27e:	603b      	str	r3, [r7, #0]
  return(result);
 800f280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f286:	f06f 0305 	mvn.w	r3, #5
 800f28a:	607b      	str	r3, [r7, #4]
 800f28c:	e00c      	b.n	800f2a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f28e:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <osKernelInitialize+0x44>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d105      	bne.n	800f2a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f296:	4b08      	ldr	r3, [pc, #32]	; (800f2b8 <osKernelInitialize+0x44>)
 800f298:	2201      	movs	r2, #1
 800f29a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	607b      	str	r3, [r7, #4]
 800f2a0:	e002      	b.n	800f2a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f2a8:	687b      	ldr	r3, [r7, #4]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	240081c4 	.word	0x240081c4

0800f2bc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f2c2:	f002 facb 	bl	801185c <xTaskGetSchedulerState>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <osKernelGetState+0x1a>
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	d105      	bne.n	800f2dc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	607b      	str	r3, [r7, #4]
      break;
 800f2d4:	e00c      	b.n	800f2f0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	607b      	str	r3, [r7, #4]
      break;
 800f2da:	e009      	b.n	800f2f0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <osKernelGetState+0x40>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d102      	bne.n	800f2ea <osKernelGetState+0x2e>
        state = osKernelReady;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f2e8:	e001      	b.n	800f2ee <osKernelGetState+0x32>
        state = osKernelInactive;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	607b      	str	r3, [r7, #4]
      break;
 800f2ee:	bf00      	nop
  }

  return (state);
 800f2f0:	687b      	ldr	r3, [r7, #4]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	240081c4 	.word	0x240081c4

0800f300 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f306:	f3ef 8305 	mrs	r3, IPSR
 800f30a:	603b      	str	r3, [r7, #0]
  return(result);
 800f30c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f312:	f06f 0305 	mvn.w	r3, #5
 800f316:	607b      	str	r3, [r7, #4]
 800f318:	e010      	b.n	800f33c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <osKernelStart+0x48>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d109      	bne.n	800f336 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f322:	f7ff ff9d 	bl	800f260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f326:	4b08      	ldr	r3, [pc, #32]	; (800f348 <osKernelStart+0x48>)
 800f328:	2202      	movs	r2, #2
 800f32a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f32c:	f001 fe28 	bl	8010f80 <vTaskStartScheduler>
      stat = osOK;
 800f330:	2300      	movs	r3, #0
 800f332:	607b      	str	r3, [r7, #4]
 800f334:	e002      	b.n	800f33c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f336:	f04f 33ff 	mov.w	r3, #4294967295
 800f33a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f33c:	687b      	ldr	r3, [r7, #4]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	240081c4 	.word	0x240081c4

0800f34c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f352:	f3ef 8305 	mrs	r3, IPSR
 800f356:	603b      	str	r3, [r7, #0]
  return(result);
 800f358:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f35e:	f001 ff3b 	bl	80111d8 <xTaskGetTickCountFromISR>
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	e002      	b.n	800f36c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f366:	f001 ff27 	bl	80111b8 <xTaskGetTickCount>
 800f36a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f36c:	687b      	ldr	r3, [r7, #4]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f376:	b580      	push	{r7, lr}
 800f378:	b08e      	sub	sp, #56	; 0x38
 800f37a:	af04      	add	r7, sp, #16
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f382:	2300      	movs	r3, #0
 800f384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f386:	f3ef 8305 	mrs	r3, IPSR
 800f38a:	617b      	str	r3, [r7, #20]
  return(result);
 800f38c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d17e      	bne.n	800f490 <osThreadNew+0x11a>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d07b      	beq.n	800f490 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f398:	2380      	movs	r3, #128	; 0x80
 800f39a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f39c:	2318      	movs	r3, #24
 800f39e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d045      	beq.n	800f43c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d002      	beq.n	800f3be <osThreadNew+0x48>
        name = attr->name;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	699b      	ldr	r3, [r3, #24]
 800f3ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d008      	beq.n	800f3e4 <osThreadNew+0x6e>
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	2b38      	cmp	r3, #56	; 0x38
 800f3d6:	d805      	bhi.n	800f3e4 <osThreadNew+0x6e>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	f003 0301 	and.w	r3, r3, #1
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <osThreadNew+0x72>
        return (NULL);
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e054      	b.n	800f492 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d003      	beq.n	800f3f8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	089b      	lsrs	r3, r3, #2
 800f3f6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00e      	beq.n	800f41e <osThreadNew+0xa8>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	2bbb      	cmp	r3, #187	; 0xbb
 800f406:	d90a      	bls.n	800f41e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d006      	beq.n	800f41e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	695b      	ldr	r3, [r3, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <osThreadNew+0xa8>
        mem = 1;
 800f418:	2301      	movs	r3, #1
 800f41a:	61bb      	str	r3, [r7, #24]
 800f41c:	e010      	b.n	800f440 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10c      	bne.n	800f440 <osThreadNew+0xca>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d108      	bne.n	800f440 <osThreadNew+0xca>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d104      	bne.n	800f440 <osThreadNew+0xca>
          mem = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	e001      	b.n	800f440 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d110      	bne.n	800f468 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f44e:	9202      	str	r2, [sp, #8]
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	6a3a      	ldr	r2, [r7, #32]
 800f45a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f001 fba3 	bl	8010ba8 <xTaskCreateStatic>
 800f462:	4603      	mov	r3, r0
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	e013      	b.n	800f490 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d110      	bne.n	800f490 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	b29a      	uxth	r2, r3
 800f472:	f107 0310 	add.w	r3, r7, #16
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f001 fbee 	bl	8010c62 <xTaskCreate>
 800f486:	4603      	mov	r3, r0
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d001      	beq.n	800f490 <osThreadNew+0x11a>
            hTask = NULL;
 800f48c:	2300      	movs	r3, #0
 800f48e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f490:	693b      	ldr	r3, [r7, #16]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3728      	adds	r7, #40	; 0x28
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4a2:	f3ef 8305 	mrs	r3, IPSR
 800f4a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f4a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <osDelay+0x1c>
    stat = osErrorISR;
 800f4ae:	f06f 0305 	mvn.w	r3, #5
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	e007      	b.n	800f4c6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f001 fd29 	bl	8010f18 <vTaskDelay>
    }
  }

  return (stat);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4e0:	f3ef 8305 	mrs	r3, IPSR
 800f4e4:	613b      	str	r3, [r7, #16]
  return(result);
 800f4e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d175      	bne.n	800f5d8 <osSemaphoreNew+0x108>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d072      	beq.n	800f5d8 <osSemaphoreNew+0x108>
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d86e      	bhi.n	800f5d8 <osSemaphoreNew+0x108>
    mem = -1;
 800f4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f4fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d015      	beq.n	800f532 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d006      	beq.n	800f51c <osSemaphoreNew+0x4c>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	2b4f      	cmp	r3, #79	; 0x4f
 800f514:	d902      	bls.n	800f51c <osSemaphoreNew+0x4c>
        mem = 1;
 800f516:	2301      	movs	r3, #1
 800f518:	61bb      	str	r3, [r7, #24]
 800f51a:	e00c      	b.n	800f536 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d108      	bne.n	800f536 <osSemaphoreNew+0x66>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d104      	bne.n	800f536 <osSemaphoreNew+0x66>
          mem = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	61bb      	str	r3, [r7, #24]
 800f530:	e001      	b.n	800f536 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53c:	d04c      	beq.n	800f5d8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d128      	bne.n	800f596 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d10a      	bne.n	800f560 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	2203      	movs	r2, #3
 800f550:	9200      	str	r2, [sp, #0]
 800f552:	2200      	movs	r2, #0
 800f554:	2100      	movs	r1, #0
 800f556:	2001      	movs	r0, #1
 800f558:	f000 fb80 	bl	800fc5c <xQueueGenericCreateStatic>
 800f55c:	61f8      	str	r0, [r7, #28]
 800f55e:	e005      	b.n	800f56c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f560:	2203      	movs	r2, #3
 800f562:	2100      	movs	r1, #0
 800f564:	2001      	movs	r0, #1
 800f566:	f000 fbf1 	bl	800fd4c <xQueueGenericCreate>
 800f56a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d022      	beq.n	800f5b8 <osSemaphoreNew+0xe8>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d01f      	beq.n	800f5b8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f578:	2300      	movs	r3, #0
 800f57a:	2200      	movs	r2, #0
 800f57c:	2100      	movs	r1, #0
 800f57e:	69f8      	ldr	r0, [r7, #28]
 800f580:	f000 fcac 	bl	800fedc <xQueueGenericSend>
 800f584:	4603      	mov	r3, r0
 800f586:	2b01      	cmp	r3, #1
 800f588:	d016      	beq.n	800f5b8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f58a:	69f8      	ldr	r0, [r7, #28]
 800f58c:	f001 f938 	bl	8010800 <vQueueDelete>
            hSemaphore = NULL;
 800f590:	2300      	movs	r3, #0
 800f592:	61fb      	str	r3, [r7, #28]
 800f594:	e010      	b.n	800f5b8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d108      	bne.n	800f5ae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f000 fc2e 	bl	800fe06 <xQueueCreateCountingSemaphoreStatic>
 800f5aa:	61f8      	str	r0, [r7, #28]
 800f5ac:	e004      	b.n	800f5b8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f5ae:	68b9      	ldr	r1, [r7, #8]
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f000 fc5f 	bl	800fe74 <xQueueCreateCountingSemaphore>
 800f5b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00c      	beq.n	800f5d8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d003      	beq.n	800f5cc <osSemaphoreNew+0xfc>
          name = attr->name;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	617b      	str	r3, [r7, #20]
 800f5ca:	e001      	b.n	800f5d0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f5d0:	6979      	ldr	r1, [r7, #20]
 800f5d2:	69f8      	ldr	r0, [r7, #28]
 800f5d4:	f001 fa60 	bl	8010a98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f5d8:	69fb      	ldr	r3, [r7, #28]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3720      	adds	r7, #32
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
	...

0800f5e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b086      	sub	sp, #24
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d103      	bne.n	800f604 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f5fc:	f06f 0303 	mvn.w	r3, #3
 800f600:	617b      	str	r3, [r7, #20]
 800f602:	e039      	b.n	800f678 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f604:	f3ef 8305 	mrs	r3, IPSR
 800f608:	60fb      	str	r3, [r7, #12]
  return(result);
 800f60a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d022      	beq.n	800f656 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f616:	f06f 0303 	mvn.w	r3, #3
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	e02c      	b.n	800f678 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f61e:	2300      	movs	r3, #0
 800f620:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f622:	f107 0308 	add.w	r3, r7, #8
 800f626:	461a      	mov	r2, r3
 800f628:	2100      	movs	r1, #0
 800f62a:	6938      	ldr	r0, [r7, #16]
 800f62c:	f001 f868 	bl	8010700 <xQueueReceiveFromISR>
 800f630:	4603      	mov	r3, r0
 800f632:	2b01      	cmp	r3, #1
 800f634:	d003      	beq.n	800f63e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f636:	f06f 0302 	mvn.w	r3, #2
 800f63a:	617b      	str	r3, [r7, #20]
 800f63c:	e01c      	b.n	800f678 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d019      	beq.n	800f678 <osSemaphoreAcquire+0x94>
 800f644:	4b0f      	ldr	r3, [pc, #60]	; (800f684 <osSemaphoreAcquire+0xa0>)
 800f646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f64a:	601a      	str	r2, [r3, #0]
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	e010      	b.n	800f678 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6938      	ldr	r0, [r7, #16]
 800f65a:	f000 ff45 	bl	80104e8 <xQueueSemaphoreTake>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b01      	cmp	r3, #1
 800f662:	d009      	beq.n	800f678 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d003      	beq.n	800f672 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f66a:	f06f 0301 	mvn.w	r3, #1
 800f66e:	617b      	str	r3, [r7, #20]
 800f670:	e002      	b.n	800f678 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f672:	f06f 0302 	mvn.w	r3, #2
 800f676:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f678:	697b      	ldr	r3, [r7, #20]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	e000ed04 	.word	0xe000ed04

0800f688 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f694:	2300      	movs	r3, #0
 800f696:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d103      	bne.n	800f6a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f69e:	f06f 0303 	mvn.w	r3, #3
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	e02c      	b.n	800f700 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6a6:	f3ef 8305 	mrs	r3, IPSR
 800f6aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d01a      	beq.n	800f6e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6b6:	f107 0308 	add.w	r3, r7, #8
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6938      	ldr	r0, [r7, #16]
 800f6be:	f000 fda6 	bl	801020e <xQueueGiveFromISR>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d003      	beq.n	800f6d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f6c8:	f06f 0302 	mvn.w	r3, #2
 800f6cc:	617b      	str	r3, [r7, #20]
 800f6ce:	e017      	b.n	800f700 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d014      	beq.n	800f700 <osSemaphoreRelease+0x78>
 800f6d6:	4b0d      	ldr	r3, [pc, #52]	; (800f70c <osSemaphoreRelease+0x84>)
 800f6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6dc:	601a      	str	r2, [r3, #0]
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	e00b      	b.n	800f700 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	6938      	ldr	r0, [r7, #16]
 800f6f0:	f000 fbf4 	bl	800fedc <xQueueGenericSend>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d002      	beq.n	800f700 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f6fa:	f06f 0302 	mvn.w	r3, #2
 800f6fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f700:	697b      	ldr	r3, [r7, #20]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3718      	adds	r7, #24
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	e000ed04 	.word	0xe000ed04

0800f710 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f71c:	f3ef 8305 	mrs	r3, IPSR
 800f720:	60fb      	str	r3, [r7, #12]
  return(result);
 800f722:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f724:	2b00      	cmp	r3, #0
 800f726:	d003      	beq.n	800f730 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f728:	f06f 0305 	mvn.w	r3, #5
 800f72c:	617b      	str	r3, [r7, #20]
 800f72e:	e00e      	b.n	800f74e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d103      	bne.n	800f73e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f736:	f06f 0303 	mvn.w	r3, #3
 800f73a:	617b      	str	r3, [r7, #20]
 800f73c:	e007      	b.n	800f74e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f73e:	6938      	ldr	r0, [r7, #16]
 800f740:	f001 f9d4 	bl	8010aec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f744:	2300      	movs	r3, #0
 800f746:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f748:	6938      	ldr	r0, [r7, #16]
 800f74a:	f001 f859 	bl	8010800 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f74e:	697b      	ldr	r3, [r7, #20]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08a      	sub	sp, #40	; 0x28
 800f75c:	af02      	add	r7, sp, #8
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f764:	2300      	movs	r3, #0
 800f766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f768:	f3ef 8305 	mrs	r3, IPSR
 800f76c:	613b      	str	r3, [r7, #16]
  return(result);
 800f76e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f770:	2b00      	cmp	r3, #0
 800f772:	d15f      	bne.n	800f834 <osMessageQueueNew+0xdc>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d05c      	beq.n	800f834 <osMessageQueueNew+0xdc>
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d059      	beq.n	800f834 <osMessageQueueNew+0xdc>
    mem = -1;
 800f780:	f04f 33ff 	mov.w	r3, #4294967295
 800f784:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d029      	beq.n	800f7e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d012      	beq.n	800f7ba <osMessageQueueNew+0x62>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	2b4f      	cmp	r3, #79	; 0x4f
 800f79a:	d90e      	bls.n	800f7ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00a      	beq.n	800f7ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	695a      	ldr	r2, [r3, #20]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	68b9      	ldr	r1, [r7, #8]
 800f7ac:	fb01 f303 	mul.w	r3, r1, r3
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d302      	bcc.n	800f7ba <osMessageQueueNew+0x62>
        mem = 1;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	61bb      	str	r3, [r7, #24]
 800f7b8:	e014      	b.n	800f7e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d110      	bne.n	800f7e4 <osMessageQueueNew+0x8c>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10c      	bne.n	800f7e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d108      	bne.n	800f7e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d104      	bne.n	800f7e4 <osMessageQueueNew+0x8c>
          mem = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	61bb      	str	r3, [r7, #24]
 800f7de:	e001      	b.n	800f7e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d10b      	bne.n	800f802 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691a      	ldr	r2, [r3, #16]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	9100      	str	r1, [sp, #0]
 800f7f6:	68b9      	ldr	r1, [r7, #8]
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f000 fa2f 	bl	800fc5c <xQueueGenericCreateStatic>
 800f7fe:	61f8      	str	r0, [r7, #28]
 800f800:	e008      	b.n	800f814 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f802:	69bb      	ldr	r3, [r7, #24]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d105      	bne.n	800f814 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f808:	2200      	movs	r2, #0
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 fa9d 	bl	800fd4c <xQueueGenericCreate>
 800f812:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00c      	beq.n	800f834 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d003      	beq.n	800f828 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	617b      	str	r3, [r7, #20]
 800f826:	e001      	b.n	800f82c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f828:	2300      	movs	r3, #0
 800f82a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f82c:	6979      	ldr	r1, [r7, #20]
 800f82e:	69f8      	ldr	r0, [r7, #28]
 800f830:	f001 f932 	bl	8010a98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f834:	69fb      	ldr	r3, [r7, #28]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3720      	adds	r7, #32
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
	...

0800f840 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	4613      	mov	r3, r2
 800f84e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f854:	2300      	movs	r3, #0
 800f856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f858:	f3ef 8305 	mrs	r3, IPSR
 800f85c:	617b      	str	r3, [r7, #20]
  return(result);
 800f85e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f860:	2b00      	cmp	r3, #0
 800f862:	d028      	beq.n	800f8b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d005      	beq.n	800f876 <osMessageQueuePut+0x36>
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <osMessageQueuePut+0x36>
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d003      	beq.n	800f87e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f876:	f06f 0303 	mvn.w	r3, #3
 800f87a:	61fb      	str	r3, [r7, #28]
 800f87c:	e038      	b.n	800f8f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f87e:	2300      	movs	r3, #0
 800f880:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f882:	f107 0210 	add.w	r2, r7, #16
 800f886:	2300      	movs	r3, #0
 800f888:	68b9      	ldr	r1, [r7, #8]
 800f88a:	69b8      	ldr	r0, [r7, #24]
 800f88c:	f000 fc24 	bl	80100d8 <xQueueGenericSendFromISR>
 800f890:	4603      	mov	r3, r0
 800f892:	2b01      	cmp	r3, #1
 800f894:	d003      	beq.n	800f89e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f896:	f06f 0302 	mvn.w	r3, #2
 800f89a:	61fb      	str	r3, [r7, #28]
 800f89c:	e028      	b.n	800f8f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d025      	beq.n	800f8f0 <osMessageQueuePut+0xb0>
 800f8a4:	4b15      	ldr	r3, [pc, #84]	; (800f8fc <osMessageQueuePut+0xbc>)
 800f8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	e01c      	b.n	800f8f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d002      	beq.n	800f8c2 <osMessageQueuePut+0x82>
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d103      	bne.n	800f8ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f8c2:	f06f 0303 	mvn.w	r3, #3
 800f8c6:	61fb      	str	r3, [r7, #28]
 800f8c8:	e012      	b.n	800f8f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	683a      	ldr	r2, [r7, #0]
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	69b8      	ldr	r0, [r7, #24]
 800f8d2:	f000 fb03 	bl	800fedc <xQueueGenericSend>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d009      	beq.n	800f8f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d003      	beq.n	800f8ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f8e2:	f06f 0301 	mvn.w	r3, #1
 800f8e6:	61fb      	str	r3, [r7, #28]
 800f8e8:	e002      	b.n	800f8f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f8ea:	f06f 0302 	mvn.w	r3, #2
 800f8ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f8f0:	69fb      	ldr	r3, [r7, #28]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3720      	adds	r7, #32
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	e000ed04 	.word	0xe000ed04

0800f900 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f900:	b580      	push	{r7, lr}
 800f902:	b088      	sub	sp, #32
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f912:	2300      	movs	r3, #0
 800f914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f916:	f3ef 8305 	mrs	r3, IPSR
 800f91a:	617b      	str	r3, [r7, #20]
  return(result);
 800f91c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d028      	beq.n	800f974 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d005      	beq.n	800f934 <osMessageQueueGet+0x34>
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <osMessageQueueGet+0x34>
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d003      	beq.n	800f93c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f934:	f06f 0303 	mvn.w	r3, #3
 800f938:	61fb      	str	r3, [r7, #28]
 800f93a:	e037      	b.n	800f9ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f93c:	2300      	movs	r3, #0
 800f93e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f940:	f107 0310 	add.w	r3, r7, #16
 800f944:	461a      	mov	r2, r3
 800f946:	68b9      	ldr	r1, [r7, #8]
 800f948:	69b8      	ldr	r0, [r7, #24]
 800f94a:	f000 fed9 	bl	8010700 <xQueueReceiveFromISR>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b01      	cmp	r3, #1
 800f952:	d003      	beq.n	800f95c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f954:	f06f 0302 	mvn.w	r3, #2
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	e027      	b.n	800f9ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d024      	beq.n	800f9ac <osMessageQueueGet+0xac>
 800f962:	4b15      	ldr	r3, [pc, #84]	; (800f9b8 <osMessageQueueGet+0xb8>)
 800f964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f968:	601a      	str	r2, [r3, #0]
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	f3bf 8f6f 	isb	sy
 800f972:	e01b      	b.n	800f9ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d002      	beq.n	800f980 <osMessageQueueGet+0x80>
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d103      	bne.n	800f988 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f980:	f06f 0303 	mvn.w	r3, #3
 800f984:	61fb      	str	r3, [r7, #28]
 800f986:	e011      	b.n	800f9ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	68b9      	ldr	r1, [r7, #8]
 800f98c:	69b8      	ldr	r0, [r7, #24]
 800f98e:	f000 fccb 	bl	8010328 <xQueueReceive>
 800f992:	4603      	mov	r3, r0
 800f994:	2b01      	cmp	r3, #1
 800f996:	d009      	beq.n	800f9ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f99e:	f06f 0301 	mvn.w	r3, #1
 800f9a2:	61fb      	str	r3, [r7, #28]
 800f9a4:	e002      	b.n	800f9ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f9a6:	f06f 0302 	mvn.w	r3, #2
 800f9aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f9ac:	69fb      	ldr	r3, [r7, #28]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3720      	adds	r7, #32
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	e000ed04 	.word	0xe000ed04

0800f9bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	4a07      	ldr	r2, [pc, #28]	; (800f9e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f9cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	4a06      	ldr	r2, [pc, #24]	; (800f9ec <vApplicationGetIdleTaskMemory+0x30>)
 800f9d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2280      	movs	r2, #128	; 0x80
 800f9d8:	601a      	str	r2, [r3, #0]
}
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	240081c8 	.word	0x240081c8
 800f9ec:	24008284 	.word	0x24008284

0800f9f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	4a07      	ldr	r2, [pc, #28]	; (800fa1c <vApplicationGetTimerTaskMemory+0x2c>)
 800fa00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	4a06      	ldr	r2, [pc, #24]	; (800fa20 <vApplicationGetTimerTaskMemory+0x30>)
 800fa06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa0e:	601a      	str	r2, [r3, #0]
}
 800fa10:	bf00      	nop
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	24008484 	.word	0x24008484
 800fa20:	24008540 	.word	0x24008540

0800fa24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f103 0208 	add.w	r2, r3, #8
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f103 0208 	add.w	r2, r3, #8
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f103 0208 	add.w	r2, r3, #8
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa72:	bf00      	nop
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b085      	sub	sp, #20
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	689a      	ldr	r2, [r3, #8]
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	1c5a      	adds	r2, r3, #1
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
}
 800faba:	bf00      	nop
 800fabc:	3714      	adds	r7, #20
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr

0800fac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
 800face:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fadc:	d103      	bne.n	800fae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	60fb      	str	r3, [r7, #12]
 800fae4:	e00c      	b.n	800fb00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	3308      	adds	r3, #8
 800faea:	60fb      	str	r3, [r7, #12]
 800faec:	e002      	b.n	800faf4 <vListInsert+0x2e>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	60fb      	str	r3, [r7, #12]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d2f6      	bcs.n	800faee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	683a      	ldr	r2, [r7, #0]
 800fb0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	601a      	str	r2, [r3, #0]
}
 800fb2c:	bf00      	nop
 800fb2e:	3714      	adds	r7, #20
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	6892      	ldr	r2, [r2, #8]
 800fb4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	6852      	ldr	r2, [r2, #4]
 800fb58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d103      	bne.n	800fb6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	689a      	ldr	r2, [r3, #8]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	1e5a      	subs	r2, r3, #1
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3714      	adds	r7, #20
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10a      	bne.n	800fbb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fbb2:	bf00      	nop
 800fbb4:	e7fe      	b.n	800fbb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fbb6:	f002 fcad 	bl	8012514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc2:	68f9      	ldr	r1, [r7, #12]
 800fbc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fbc6:	fb01 f303 	mul.w	r3, r1, r3
 800fbca:	441a      	add	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	68f9      	ldr	r1, [r7, #12]
 800fbea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fbec:	fb01 f303 	mul.w	r3, r1, r3
 800fbf0:	441a      	add	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	22ff      	movs	r2, #255	; 0xff
 800fbfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	22ff      	movs	r2, #255	; 0xff
 800fc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d114      	bne.n	800fc36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d01a      	beq.n	800fc4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3310      	adds	r3, #16
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f001 fc5d 	bl	80114d8 <xTaskRemoveFromEventList>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d012      	beq.n	800fc4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fc24:	4b0c      	ldr	r3, [pc, #48]	; (800fc58 <xQueueGenericReset+0xcc>)
 800fc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc2a:	601a      	str	r2, [r3, #0]
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	e009      	b.n	800fc4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	3310      	adds	r3, #16
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fef2 	bl	800fa24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	3324      	adds	r3, #36	; 0x24
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7ff feed 	bl	800fa24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc4a:	f002 fc93 	bl	8012574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc4e:	2301      	movs	r3, #1
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	e000ed04 	.word	0xe000ed04

0800fc5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b08e      	sub	sp, #56	; 0x38
 800fc60:	af02      	add	r7, sp, #8
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
 800fc68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10a      	bne.n	800fc86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc82:	bf00      	nop
 800fc84:	e7fe      	b.n	800fc84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <xQueueGenericCreateStatic+0x52>
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d001      	beq.n	800fcb2 <xQueueGenericCreateStatic+0x56>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e000      	b.n	800fcb4 <xQueueGenericCreateStatic+0x58>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d10a      	bne.n	800fcce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	623b      	str	r3, [r7, #32]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d102      	bne.n	800fcda <xQueueGenericCreateStatic+0x7e>
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <xQueueGenericCreateStatic+0x82>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e000      	b.n	800fce0 <xQueueGenericCreateStatic+0x84>
 800fcde:	2300      	movs	r3, #0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10a      	bne.n	800fcfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	61fb      	str	r3, [r7, #28]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fcfa:	2350      	movs	r3, #80	; 0x50
 800fcfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b50      	cmp	r3, #80	; 0x50
 800fd02:	d00a      	beq.n	800fd1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	61bb      	str	r3, [r7, #24]
}
 800fd16:	bf00      	nop
 800fd18:	e7fe      	b.n	800fd18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00d      	beq.n	800fd42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	4613      	mov	r3, r2
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	68b9      	ldr	r1, [r7, #8]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f000 f83f 	bl	800fdc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3730      	adds	r7, #48	; 0x30
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b08a      	sub	sp, #40	; 0x28
 800fd50:	af02      	add	r7, sp, #8
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	4613      	mov	r3, r2
 800fd58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d10a      	bne.n	800fd76 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
 800fd74:	e7fe      	b.n	800fd74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	fb02 f303 	mul.w	r3, r2, r3
 800fd7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	3350      	adds	r3, #80	; 0x50
 800fd84:	4618      	mov	r0, r3
 800fd86:	f002 fce7 	bl	8012758 <pvPortMalloc>
 800fd8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d011      	beq.n	800fdb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	3350      	adds	r3, #80	; 0x50
 800fd9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fda4:	79fa      	ldrb	r2, [r7, #7]
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	697a      	ldr	r2, [r7, #20]
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f000 f805 	bl	800fdc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdb6:	69bb      	ldr	r3, [r7, #24]
	}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3720      	adds	r7, #32
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d103      	bne.n	800fddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	69ba      	ldr	r2, [r7, #24]
 800fdd8:	601a      	str	r2, [r3, #0]
 800fdda:	e002      	b.n	800fde2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fdee:	2101      	movs	r1, #1
 800fdf0:	69b8      	ldr	r0, [r7, #24]
 800fdf2:	f7ff fecb 	bl	800fb8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	78fa      	ldrb	r2, [r7, #3]
 800fdfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fdfe:	bf00      	nop
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b08a      	sub	sp, #40	; 0x28
 800fe0a:	af02      	add	r7, sp, #8
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10a      	bne.n	800fe2e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	61bb      	str	r3, [r7, #24]
}
 800fe2a:	bf00      	nop
 800fe2c:	e7fe      	b.n	800fe2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d90a      	bls.n	800fe4c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	f383 8811 	msr	BASEPRI, r3
 800fe3e:	f3bf 8f6f 	isb	sy
 800fe42:	f3bf 8f4f 	dsb	sy
 800fe46:	617b      	str	r3, [r7, #20]
}
 800fe48:	bf00      	nop
 800fe4a:	e7fe      	b.n	800fe4a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	2100      	movs	r1, #0
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff ff00 	bl	800fc5c <xQueueGenericCreateStatic>
 800fe5c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fe6a:	69fb      	ldr	r3, [r7, #28]
	}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3720      	adds	r7, #32
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10a      	bne.n	800fe9a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	613b      	str	r3, [r7, #16]
}
 800fe96:	bf00      	nop
 800fe98:	e7fe      	b.n	800fe98 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d90a      	bls.n	800feb8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	60fb      	str	r3, [r7, #12]
}
 800feb4:	bf00      	nop
 800feb6:	e7fe      	b.n	800feb6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800feb8:	2202      	movs	r2, #2
 800feba:	2100      	movs	r1, #0
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff ff45 	bl	800fd4c <xQueueGenericCreate>
 800fec2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d002      	beq.n	800fed0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	683a      	ldr	r2, [r7, #0]
 800fece:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fed0:	697b      	ldr	r3, [r7, #20]
	}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08e      	sub	sp, #56	; 0x38
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
 800fee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800feea:	2300      	movs	r3, #0
 800feec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10a      	bne.n	800ff0e <xQueueGenericSend+0x32>
	__asm volatile
 800fef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefc:	f383 8811 	msr	BASEPRI, r3
 800ff00:	f3bf 8f6f 	isb	sy
 800ff04:	f3bf 8f4f 	dsb	sy
 800ff08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff0a:	bf00      	nop
 800ff0c:	e7fe      	b.n	800ff0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d103      	bne.n	800ff1c <xQueueGenericSend+0x40>
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <xQueueGenericSend+0x44>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <xQueueGenericSend+0x46>
 800ff20:	2300      	movs	r3, #0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d10a      	bne.n	800ff3c <xQueueGenericSend+0x60>
	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ff38:	bf00      	nop
 800ff3a:	e7fe      	b.n	800ff3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d103      	bne.n	800ff4a <xQueueGenericSend+0x6e>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d101      	bne.n	800ff4e <xQueueGenericSend+0x72>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e000      	b.n	800ff50 <xQueueGenericSend+0x74>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d10a      	bne.n	800ff6a <xQueueGenericSend+0x8e>
	__asm volatile
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	f383 8811 	msr	BASEPRI, r3
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	623b      	str	r3, [r7, #32]
}
 800ff66:	bf00      	nop
 800ff68:	e7fe      	b.n	800ff68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff6a:	f001 fc77 	bl	801185c <xTaskGetSchedulerState>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d102      	bne.n	800ff7a <xQueueGenericSend+0x9e>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <xQueueGenericSend+0xa2>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e000      	b.n	800ff80 <xQueueGenericSend+0xa4>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10a      	bne.n	800ff9a <xQueueGenericSend+0xbe>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff88:	f383 8811 	msr	BASEPRI, r3
 800ff8c:	f3bf 8f6f 	isb	sy
 800ff90:	f3bf 8f4f 	dsb	sy
 800ff94:	61fb      	str	r3, [r7, #28]
}
 800ff96:	bf00      	nop
 800ff98:	e7fe      	b.n	800ff98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff9a:	f002 fabb 	bl	8012514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d302      	bcc.n	800ffb0 <xQueueGenericSend+0xd4>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d129      	bne.n	8010004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffb6:	f000 fc5e 	bl	8010876 <prvCopyDataToQueue>
 800ffba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d010      	beq.n	800ffe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc6:	3324      	adds	r3, #36	; 0x24
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f001 fa85 	bl	80114d8 <xTaskRemoveFromEventList>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d013      	beq.n	800fffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffd4:	4b3f      	ldr	r3, [pc, #252]	; (80100d4 <xQueueGenericSend+0x1f8>)
 800ffd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	f3bf 8f6f 	isb	sy
 800ffe4:	e00a      	b.n	800fffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d007      	beq.n	800fffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ffec:	4b39      	ldr	r3, [pc, #228]	; (80100d4 <xQueueGenericSend+0x1f8>)
 800ffee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fffc:	f002 faba 	bl	8012574 <vPortExitCritical>
				return pdPASS;
 8010000:	2301      	movs	r3, #1
 8010002:	e063      	b.n	80100cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d103      	bne.n	8010012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801000a:	f002 fab3 	bl	8012574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801000e:	2300      	movs	r3, #0
 8010010:	e05c      	b.n	80100cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010014:	2b00      	cmp	r3, #0
 8010016:	d106      	bne.n	8010026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010018:	f107 0314 	add.w	r3, r7, #20
 801001c:	4618      	mov	r0, r3
 801001e:	f001 fabf 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010022:	2301      	movs	r3, #1
 8010024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010026:	f002 faa5 	bl	8012574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801002a:	f001 f819 	bl	8011060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801002e:	f002 fa71 	bl	8012514 <vPortEnterCritical>
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010038:	b25b      	sxtb	r3, r3
 801003a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003e:	d103      	bne.n	8010048 <xQueueGenericSend+0x16c>
 8010040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010042:	2200      	movs	r2, #0
 8010044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801004e:	b25b      	sxtb	r3, r3
 8010050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010054:	d103      	bne.n	801005e <xQueueGenericSend+0x182>
 8010056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010058:	2200      	movs	r2, #0
 801005a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801005e:	f002 fa89 	bl	8012574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010062:	1d3a      	adds	r2, r7, #4
 8010064:	f107 0314 	add.w	r3, r7, #20
 8010068:	4611      	mov	r1, r2
 801006a:	4618      	mov	r0, r3
 801006c:	f001 faae 	bl	80115cc <xTaskCheckForTimeOut>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d124      	bne.n	80100c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010078:	f000 fcf5 	bl	8010a66 <prvIsQueueFull>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d018      	beq.n	80100b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	3310      	adds	r3, #16
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f001 f9d4 	bl	8011438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010092:	f000 fc80 	bl	8010996 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010096:	f000 fff1 	bl	801107c <xTaskResumeAll>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	f47f af7c 	bne.w	800ff9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80100a2:	4b0c      	ldr	r3, [pc, #48]	; (80100d4 <xQueueGenericSend+0x1f8>)
 80100a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	e772      	b.n	800ff9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100b6:	f000 fc6e 	bl	8010996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100ba:	f000 ffdf 	bl	801107c <xTaskResumeAll>
 80100be:	e76c      	b.n	800ff9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100c2:	f000 fc68 	bl	8010996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100c6:	f000 ffd9 	bl	801107c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3738      	adds	r7, #56	; 0x38
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b090      	sub	sp, #64	; 0x40
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10a      	bne.n	8010106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010102:	bf00      	nop
 8010104:	e7fe      	b.n	8010104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d103      	bne.n	8010114 <xQueueGenericSendFromISR+0x3c>
 801010c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <xQueueGenericSendFromISR+0x40>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <xQueueGenericSendFromISR+0x42>
 8010118:	2300      	movs	r3, #0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10a      	bne.n	8010134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010130:	bf00      	nop
 8010132:	e7fe      	b.n	8010132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	2b02      	cmp	r3, #2
 8010138:	d103      	bne.n	8010142 <xQueueGenericSendFromISR+0x6a>
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013e:	2b01      	cmp	r3, #1
 8010140:	d101      	bne.n	8010146 <xQueueGenericSendFromISR+0x6e>
 8010142:	2301      	movs	r3, #1
 8010144:	e000      	b.n	8010148 <xQueueGenericSendFromISR+0x70>
 8010146:	2300      	movs	r3, #0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10a      	bne.n	8010162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801014c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010150:	f383 8811 	msr	BASEPRI, r3
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	f3bf 8f4f 	dsb	sy
 801015c:	623b      	str	r3, [r7, #32]
}
 801015e:	bf00      	nop
 8010160:	e7fe      	b.n	8010160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010162:	f002 fab9 	bl	80126d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010166:	f3ef 8211 	mrs	r2, BASEPRI
 801016a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	61fa      	str	r2, [r7, #28]
 801017c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801017e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801018a:	429a      	cmp	r2, r3
 801018c:	d302      	bcc.n	8010194 <xQueueGenericSendFromISR+0xbc>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d12f      	bne.n	80101f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801019a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801019e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	68b9      	ldr	r1, [r7, #8]
 80101a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101aa:	f000 fb64 	bl	8010876 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80101b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b6:	d112      	bne.n	80101de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d016      	beq.n	80101ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	3324      	adds	r3, #36	; 0x24
 80101c4:	4618      	mov	r0, r3
 80101c6:	f001 f987 	bl	80114d8 <xTaskRemoveFromEventList>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00e      	beq.n	80101ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00b      	beq.n	80101ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2201      	movs	r2, #1
 80101da:	601a      	str	r2, [r3, #0]
 80101dc:	e007      	b.n	80101ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80101e2:	3301      	adds	r3, #1
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	b25a      	sxtb	r2, r3
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101ee:	2301      	movs	r3, #1
 80101f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80101f2:	e001      	b.n	80101f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101f4:	2300      	movs	r3, #0
 80101f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010206:	4618      	mov	r0, r3
 8010208:	3740      	adds	r7, #64	; 0x40
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b08e      	sub	sp, #56	; 0x38
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10a      	bne.n	8010238 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010226:	f383 8811 	msr	BASEPRI, r3
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	623b      	str	r3, [r7, #32]
}
 8010234:	bf00      	nop
 8010236:	e7fe      	b.n	8010236 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00a      	beq.n	8010256 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	61fb      	str	r3, [r7, #28]
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d103      	bne.n	8010266 <xQueueGiveFromISR+0x58>
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <xQueueGiveFromISR+0x5c>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <xQueueGiveFromISR+0x5e>
 801026a:	2300      	movs	r3, #0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10a      	bne.n	8010286 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	61bb      	str	r3, [r7, #24]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010286:	f002 fa27 	bl	80126d8 <vPortValidateInterruptPriority>
	__asm volatile
 801028a:	f3ef 8211 	mrs	r2, BASEPRI
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	617a      	str	r2, [r7, #20]
 80102a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80102a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d22b      	bcs.n	801030e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	1c5a      	adds	r2, r3, #1
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80102cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d0:	d112      	bne.n	80102f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d016      	beq.n	8010308 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102dc:	3324      	adds	r3, #36	; 0x24
 80102de:	4618      	mov	r0, r3
 80102e0:	f001 f8fa 	bl	80114d8 <xTaskRemoveFromEventList>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00e      	beq.n	8010308 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00b      	beq.n	8010308 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	2201      	movs	r2, #1
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	e007      	b.n	8010308 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102fc:	3301      	adds	r3, #1
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	b25a      	sxtb	r2, r3
 8010302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010308:	2301      	movs	r3, #1
 801030a:	637b      	str	r3, [r7, #52]	; 0x34
 801030c:	e001      	b.n	8010312 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801030e:	2300      	movs	r3, #0
 8010310:	637b      	str	r3, [r7, #52]	; 0x34
 8010312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010314:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f383 8811 	msr	BASEPRI, r3
}
 801031c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010320:	4618      	mov	r0, r3
 8010322:	3738      	adds	r7, #56	; 0x38
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08c      	sub	sp, #48	; 0x30
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010334:	2300      	movs	r3, #0
 8010336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10a      	bne.n	8010358 <xQueueReceive+0x30>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	623b      	str	r3, [r7, #32]
}
 8010354:	bf00      	nop
 8010356:	e7fe      	b.n	8010356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d103      	bne.n	8010366 <xQueueReceive+0x3e>
 801035e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010362:	2b00      	cmp	r3, #0
 8010364:	d101      	bne.n	801036a <xQueueReceive+0x42>
 8010366:	2301      	movs	r3, #1
 8010368:	e000      	b.n	801036c <xQueueReceive+0x44>
 801036a:	2300      	movs	r3, #0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10a      	bne.n	8010386 <xQueueReceive+0x5e>
	__asm volatile
 8010370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010374:	f383 8811 	msr	BASEPRI, r3
 8010378:	f3bf 8f6f 	isb	sy
 801037c:	f3bf 8f4f 	dsb	sy
 8010380:	61fb      	str	r3, [r7, #28]
}
 8010382:	bf00      	nop
 8010384:	e7fe      	b.n	8010384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010386:	f001 fa69 	bl	801185c <xTaskGetSchedulerState>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d102      	bne.n	8010396 <xQueueReceive+0x6e>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <xQueueReceive+0x72>
 8010396:	2301      	movs	r3, #1
 8010398:	e000      	b.n	801039c <xQueueReceive+0x74>
 801039a:	2300      	movs	r3, #0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10a      	bne.n	80103b6 <xQueueReceive+0x8e>
	__asm volatile
 80103a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a4:	f383 8811 	msr	BASEPRI, r3
 80103a8:	f3bf 8f6f 	isb	sy
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	61bb      	str	r3, [r7, #24]
}
 80103b2:	bf00      	nop
 80103b4:	e7fe      	b.n	80103b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103b6:	f002 f8ad 	bl	8012514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d01f      	beq.n	8010406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103c6:	68b9      	ldr	r1, [r7, #8]
 80103c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103ca:	f000 fabe 	bl	801094a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d0:	1e5a      	subs	r2, r3, #1
 80103d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00f      	beq.n	80103fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e0:	3310      	adds	r3, #16
 80103e2:	4618      	mov	r0, r3
 80103e4:	f001 f878 	bl	80114d8 <xTaskRemoveFromEventList>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d007      	beq.n	80103fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103ee:	4b3d      	ldr	r3, [pc, #244]	; (80104e4 <xQueueReceive+0x1bc>)
 80103f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103f4:	601a      	str	r2, [r3, #0]
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80103fe:	f002 f8b9 	bl	8012574 <vPortExitCritical>
				return pdPASS;
 8010402:	2301      	movs	r3, #1
 8010404:	e069      	b.n	80104da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d103      	bne.n	8010414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801040c:	f002 f8b2 	bl	8012574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010410:	2300      	movs	r3, #0
 8010412:	e062      	b.n	80104da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801041a:	f107 0310 	add.w	r3, r7, #16
 801041e:	4618      	mov	r0, r3
 8010420:	f001 f8be 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010424:	2301      	movs	r3, #1
 8010426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010428:	f002 f8a4 	bl	8012574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801042c:	f000 fe18 	bl	8011060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010430:	f002 f870 	bl	8012514 <vPortEnterCritical>
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801043a:	b25b      	sxtb	r3, r3
 801043c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010440:	d103      	bne.n	801044a <xQueueReceive+0x122>
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	2200      	movs	r2, #0
 8010446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010450:	b25b      	sxtb	r3, r3
 8010452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010456:	d103      	bne.n	8010460 <xQueueReceive+0x138>
 8010458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045a:	2200      	movs	r2, #0
 801045c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010460:	f002 f888 	bl	8012574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010464:	1d3a      	adds	r2, r7, #4
 8010466:	f107 0310 	add.w	r3, r7, #16
 801046a:	4611      	mov	r1, r2
 801046c:	4618      	mov	r0, r3
 801046e:	f001 f8ad 	bl	80115cc <xTaskCheckForTimeOut>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d123      	bne.n	80104c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801047a:	f000 fade 	bl	8010a3a <prvIsQueueEmpty>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d017      	beq.n	80104b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	3324      	adds	r3, #36	; 0x24
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	4611      	mov	r1, r2
 801048c:	4618      	mov	r0, r3
 801048e:	f000 ffd3 	bl	8011438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010494:	f000 fa7f 	bl	8010996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010498:	f000 fdf0 	bl	801107c <xTaskResumeAll>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d189      	bne.n	80103b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80104a2:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <xQueueReceive+0x1bc>)
 80104a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	e780      	b.n	80103b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104b6:	f000 fa6e 	bl	8010996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104ba:	f000 fddf 	bl	801107c <xTaskResumeAll>
 80104be:	e77a      	b.n	80103b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c2:	f000 fa68 	bl	8010996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104c6:	f000 fdd9 	bl	801107c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104cc:	f000 fab5 	bl	8010a3a <prvIsQueueEmpty>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f43f af6f 	beq.w	80103b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3730      	adds	r7, #48	; 0x30
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	e000ed04 	.word	0xe000ed04

080104e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b08e      	sub	sp, #56	; 0x38
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80104f2:	2300      	movs	r3, #0
 80104f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80104fa:	2300      	movs	r3, #0
 80104fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80104fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10a      	bne.n	801051a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	623b      	str	r3, [r7, #32]
}
 8010516:	bf00      	nop
 8010518:	e7fe      	b.n	8010518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00a      	beq.n	8010538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	61fb      	str	r3, [r7, #28]
}
 8010534:	bf00      	nop
 8010536:	e7fe      	b.n	8010536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010538:	f001 f990 	bl	801185c <xTaskGetSchedulerState>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d102      	bne.n	8010548 <xQueueSemaphoreTake+0x60>
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <xQueueSemaphoreTake+0x64>
 8010548:	2301      	movs	r3, #1
 801054a:	e000      	b.n	801054e <xQueueSemaphoreTake+0x66>
 801054c:	2300      	movs	r3, #0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10a      	bne.n	8010568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	61bb      	str	r3, [r7, #24]
}
 8010564:	bf00      	nop
 8010566:	e7fe      	b.n	8010566 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010568:	f001 ffd4 	bl	8012514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010574:	2b00      	cmp	r3, #0
 8010576:	d024      	beq.n	80105c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057a:	1e5a      	subs	r2, r3, #1
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d104      	bne.n	8010592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010588:	f001 fade 	bl	8011b48 <pvTaskIncrementMutexHeldCount>
 801058c:	4602      	mov	r2, r0
 801058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010590:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00f      	beq.n	80105ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	3310      	adds	r3, #16
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 ff9a 	bl	80114d8 <xTaskRemoveFromEventList>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d007      	beq.n	80105ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105aa:	4b54      	ldr	r3, [pc, #336]	; (80106fc <xQueueSemaphoreTake+0x214>)
 80105ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105ba:	f001 ffdb 	bl	8012574 <vPortExitCritical>
				return pdPASS;
 80105be:	2301      	movs	r3, #1
 80105c0:	e097      	b.n	80106f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d111      	bne.n	80105ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00a      	beq.n	80105e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	617b      	str	r3, [r7, #20]
}
 80105e0:	bf00      	nop
 80105e2:	e7fe      	b.n	80105e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80105e4:	f001 ffc6 	bl	8012574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80105e8:	2300      	movs	r3, #0
 80105ea:	e082      	b.n	80106f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105f2:	f107 030c 	add.w	r3, r7, #12
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 ffd2 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105fc:	2301      	movs	r3, #1
 80105fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010600:	f001 ffb8 	bl	8012574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010604:	f000 fd2c 	bl	8011060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010608:	f001 ff84 	bl	8012514 <vPortEnterCritical>
 801060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010612:	b25b      	sxtb	r3, r3
 8010614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010618:	d103      	bne.n	8010622 <xQueueSemaphoreTake+0x13a>
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010628:	b25b      	sxtb	r3, r3
 801062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801062e:	d103      	bne.n	8010638 <xQueueSemaphoreTake+0x150>
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010638:	f001 ff9c 	bl	8012574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801063c:	463a      	mov	r2, r7
 801063e:	f107 030c 	add.w	r3, r7, #12
 8010642:	4611      	mov	r1, r2
 8010644:	4618      	mov	r0, r3
 8010646:	f000 ffc1 	bl	80115cc <xTaskCheckForTimeOut>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d132      	bne.n	80106b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010652:	f000 f9f2 	bl	8010a3a <prvIsQueueEmpty>
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d026      	beq.n	80106aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d109      	bne.n	8010678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010664:	f001 ff56 	bl	8012514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	4618      	mov	r0, r3
 801066e:	f001 f913 	bl	8011898 <xTaskPriorityInherit>
 8010672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010674:	f001 ff7e 	bl	8012574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	3324      	adds	r3, #36	; 0x24
 801067c:	683a      	ldr	r2, [r7, #0]
 801067e:	4611      	mov	r1, r2
 8010680:	4618      	mov	r0, r3
 8010682:	f000 fed9 	bl	8011438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010688:	f000 f985 	bl	8010996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801068c:	f000 fcf6 	bl	801107c <xTaskResumeAll>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	f47f af68 	bne.w	8010568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010698:	4b18      	ldr	r3, [pc, #96]	; (80106fc <xQueueSemaphoreTake+0x214>)
 801069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	e75e      	b.n	8010568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80106aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106ac:	f000 f973 	bl	8010996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106b0:	f000 fce4 	bl	801107c <xTaskResumeAll>
 80106b4:	e758      	b.n	8010568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80106b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106b8:	f000 f96d 	bl	8010996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106bc:	f000 fcde 	bl	801107c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c2:	f000 f9ba 	bl	8010a3a <prvIsQueueEmpty>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f43f af4d 	beq.w	8010568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00d      	beq.n	80106f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80106d4:	f001 ff1e 	bl	8012514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80106d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106da:	f000 f8b4 	bl	8010846 <prvGetDisinheritPriorityAfterTimeout>
 80106de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106e6:	4618      	mov	r0, r3
 80106e8:	f001 f9ac 	bl	8011a44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80106ec:	f001 ff42 	bl	8012574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80106f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3738      	adds	r7, #56	; 0x38
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	e000ed04 	.word	0xe000ed04

08010700 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b08e      	sub	sp, #56	; 0x38
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10a      	bne.n	801072c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	623b      	str	r3, [r7, #32]
}
 8010728:	bf00      	nop
 801072a:	e7fe      	b.n	801072a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d103      	bne.n	801073a <xQueueReceiveFromISR+0x3a>
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010736:	2b00      	cmp	r3, #0
 8010738:	d101      	bne.n	801073e <xQueueReceiveFromISR+0x3e>
 801073a:	2301      	movs	r3, #1
 801073c:	e000      	b.n	8010740 <xQueueReceiveFromISR+0x40>
 801073e:	2300      	movs	r3, #0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10a      	bne.n	801075a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	61fb      	str	r3, [r7, #28]
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801075a:	f001 ffbd 	bl	80126d8 <vPortValidateInterruptPriority>
	__asm volatile
 801075e:	f3ef 8211 	mrs	r2, BASEPRI
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	f383 8811 	msr	BASEPRI, r3
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	f3bf 8f4f 	dsb	sy
 8010772:	61ba      	str	r2, [r7, #24]
 8010774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	2b00      	cmp	r3, #0
 8010784:	d02f      	beq.n	80107e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801078c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010790:	68b9      	ldr	r1, [r7, #8]
 8010792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010794:	f000 f8d9 	bl	801094a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	1e5a      	subs	r2, r3, #1
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80107a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80107a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107a8:	d112      	bne.n	80107d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	691b      	ldr	r3, [r3, #16]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d016      	beq.n	80107e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	3310      	adds	r3, #16
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 fe8e 	bl	80114d8 <xTaskRemoveFromEventList>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d00e      	beq.n	80107e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00b      	beq.n	80107e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2201      	movs	r2, #1
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	e007      	b.n	80107e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80107d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107d4:	3301      	adds	r3, #1
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	b25a      	sxtb	r2, r3
 80107da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80107e0:	2301      	movs	r3, #1
 80107e2:	637b      	str	r3, [r7, #52]	; 0x34
 80107e4:	e001      	b.n	80107ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	637b      	str	r3, [r7, #52]	; 0x34
 80107ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	f383 8811 	msr	BASEPRI, r3
}
 80107f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3738      	adds	r7, #56	; 0x38
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10a      	bne.n	8010828 <vQueueDelete+0x28>
	__asm volatile
 8010812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010816:	f383 8811 	msr	BASEPRI, r3
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	f3bf 8f4f 	dsb	sy
 8010822:	60bb      	str	r3, [r7, #8]
}
 8010824:	bf00      	nop
 8010826:	e7fe      	b.n	8010826 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f000 f95f 	bl	8010aec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f002 f859 	bl	80128f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801083e:	bf00      	nop
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010846:	b480      	push	{r7}
 8010848:	b085      	sub	sp, #20
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010852:	2b00      	cmp	r3, #0
 8010854:	d006      	beq.n	8010864 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010860:	60fb      	str	r3, [r7, #12]
 8010862:	e001      	b.n	8010868 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010864:	2300      	movs	r3, #0
 8010866:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010868:	68fb      	ldr	r3, [r7, #12]
	}
 801086a:	4618      	mov	r0, r3
 801086c:	3714      	adds	r7, #20
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	60f8      	str	r0, [r7, #12]
 801087e:	60b9      	str	r1, [r7, #8]
 8010880:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010882:	2300      	movs	r3, #0
 8010884:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10d      	bne.n	80108b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d14d      	bne.n	8010938 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f001 f861 	bl	8011968 <xTaskPriorityDisinherit>
 80108a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2200      	movs	r2, #0
 80108ac:	609a      	str	r2, [r3, #8]
 80108ae:	e043      	b.n	8010938 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d119      	bne.n	80108ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6858      	ldr	r0, [r3, #4]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108be:	461a      	mov	r2, r3
 80108c0:	68b9      	ldr	r1, [r7, #8]
 80108c2:	f002 f95f 	bl	8012b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	685a      	ldr	r2, [r3, #4]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ce:	441a      	add	r2, r3
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	685a      	ldr	r2, [r3, #4]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d32b      	bcc.n	8010938 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	605a      	str	r2, [r3, #4]
 80108e8:	e026      	b.n	8010938 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	68d8      	ldr	r0, [r3, #12]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f2:	461a      	mov	r2, r3
 80108f4:	68b9      	ldr	r1, [r7, #8]
 80108f6:	f002 f945 	bl	8012b84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	68da      	ldr	r2, [r3, #12]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010902:	425b      	negs	r3, r3
 8010904:	441a      	add	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	68da      	ldr	r2, [r3, #12]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	429a      	cmp	r2, r3
 8010914:	d207      	bcs.n	8010926 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	689a      	ldr	r2, [r3, #8]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091e:	425b      	negs	r3, r3
 8010920:	441a      	add	r2, r3
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b02      	cmp	r3, #2
 801092a:	d105      	bne.n	8010938 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	3b01      	subs	r3, #1
 8010936:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010940:	697b      	ldr	r3, [r7, #20]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3718      	adds	r7, #24
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b082      	sub	sp, #8
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010958:	2b00      	cmp	r3, #0
 801095a:	d018      	beq.n	801098e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	68da      	ldr	r2, [r3, #12]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010964:	441a      	add	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68da      	ldr	r2, [r3, #12]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	429a      	cmp	r2, r3
 8010974:	d303      	bcc.n	801097e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68d9      	ldr	r1, [r3, #12]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010986:	461a      	mov	r2, r3
 8010988:	6838      	ldr	r0, [r7, #0]
 801098a:	f002 f8fb 	bl	8012b84 <memcpy>
	}
}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b084      	sub	sp, #16
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801099e:	f001 fdb9 	bl	8012514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109aa:	e011      	b.n	80109d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d012      	beq.n	80109da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3324      	adds	r3, #36	; 0x24
 80109b8:	4618      	mov	r0, r3
 80109ba:	f000 fd8d 	bl	80114d8 <xTaskRemoveFromEventList>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80109c4:	f000 fe64 	bl	8011690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
 80109ca:	3b01      	subs	r3, #1
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	dce9      	bgt.n	80109ac <prvUnlockQueue+0x16>
 80109d8:	e000      	b.n	80109dc <prvUnlockQueue+0x46>
					break;
 80109da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	22ff      	movs	r2, #255	; 0xff
 80109e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80109e4:	f001 fdc6 	bl	8012574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80109e8:	f001 fd94 	bl	8012514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80109f4:	e011      	b.n	8010a1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d012      	beq.n	8010a24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	3310      	adds	r3, #16
 8010a02:	4618      	mov	r0, r3
 8010a04:	f000 fd68 	bl	80114d8 <xTaskRemoveFromEventList>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a0e:	f000 fe3f 	bl	8011690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a12:	7bbb      	ldrb	r3, [r7, #14]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	dce9      	bgt.n	80109f6 <prvUnlockQueue+0x60>
 8010a22:	e000      	b.n	8010a26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010a24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	22ff      	movs	r2, #255	; 0xff
 8010a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010a2e:	f001 fda1 	bl	8012574 <vPortExitCritical>
}
 8010a32:	bf00      	nop
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a42:	f001 fd67 	bl	8012514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d102      	bne.n	8010a54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	60fb      	str	r3, [r7, #12]
 8010a52:	e001      	b.n	8010a58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010a54:	2300      	movs	r3, #0
 8010a56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a58:	f001 fd8c 	bl	8012574 <vPortExitCritical>

	return xReturn;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b084      	sub	sp, #16
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a6e:	f001 fd51 	bl	8012514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d102      	bne.n	8010a84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	60fb      	str	r3, [r7, #12]
 8010a82:	e001      	b.n	8010a88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010a84:	2300      	movs	r3, #0
 8010a86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a88:	f001 fd74 	bl	8012574 <vPortExitCritical>

	return xReturn;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	60fb      	str	r3, [r7, #12]
 8010aa6:	e014      	b.n	8010ad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010aa8:	4a0f      	ldr	r2, [pc, #60]	; (8010ae8 <vQueueAddToRegistry+0x50>)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10b      	bne.n	8010acc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ab4:	490c      	ldr	r1, [pc, #48]	; (8010ae8 <vQueueAddToRegistry+0x50>)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010abe:	4a0a      	ldr	r2, [pc, #40]	; (8010ae8 <vQueueAddToRegistry+0x50>)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010aca:	e006      	b.n	8010ada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b07      	cmp	r3, #7
 8010ad6:	d9e7      	bls.n	8010aa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010ad8:	bf00      	nop
 8010ada:	bf00      	nop
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	2400d5c8 	.word	0x2400d5c8

08010aec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010af4:	2300      	movs	r3, #0
 8010af6:	60fb      	str	r3, [r7, #12]
 8010af8:	e016      	b.n	8010b28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010afa:	4a10      	ldr	r2, [pc, #64]	; (8010b3c <vQueueUnregisterQueue+0x50>)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	00db      	lsls	r3, r3, #3
 8010b00:	4413      	add	r3, r2
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d10b      	bne.n	8010b22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010b0a:	4a0c      	ldr	r2, [pc, #48]	; (8010b3c <vQueueUnregisterQueue+0x50>)
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2100      	movs	r1, #0
 8010b10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010b14:	4a09      	ldr	r2, [pc, #36]	; (8010b3c <vQueueUnregisterQueue+0x50>)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	00db      	lsls	r3, r3, #3
 8010b1a:	4413      	add	r3, r2
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	605a      	str	r2, [r3, #4]
				break;
 8010b20:	e006      	b.n	8010b30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	3301      	adds	r3, #1
 8010b26:	60fb      	str	r3, [r7, #12]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2b07      	cmp	r3, #7
 8010b2c:	d9e5      	bls.n	8010afa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010b2e:	bf00      	nop
 8010b30:	bf00      	nop
 8010b32:	3714      	adds	r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	2400d5c8 	.word	0x2400d5c8

08010b40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010b50:	f001 fce0 	bl	8012514 <vPortEnterCritical>
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b5a:	b25b      	sxtb	r3, r3
 8010b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b60:	d103      	bne.n	8010b6a <vQueueWaitForMessageRestricted+0x2a>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b70:	b25b      	sxtb	r3, r3
 8010b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b76:	d103      	bne.n	8010b80 <vQueueWaitForMessageRestricted+0x40>
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b80:	f001 fcf8 	bl	8012574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d106      	bne.n	8010b9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	3324      	adds	r3, #36	; 0x24
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	68b9      	ldr	r1, [r7, #8]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 fc73 	bl	8011480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010b9a:	6978      	ldr	r0, [r7, #20]
 8010b9c:	f7ff fefb 	bl	8010996 <prvUnlockQueue>
	}
 8010ba0:	bf00      	nop
 8010ba2:	3718      	adds	r7, #24
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b08e      	sub	sp, #56	; 0x38
 8010bac:	af04      	add	r7, sp, #16
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10a      	bne.n	8010bd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc0:	f383 8811 	msr	BASEPRI, r3
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	f3bf 8f4f 	dsb	sy
 8010bcc:	623b      	str	r3, [r7, #32]
}
 8010bce:	bf00      	nop
 8010bd0:	e7fe      	b.n	8010bd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10a      	bne.n	8010bee <xTaskCreateStatic+0x46>
	__asm volatile
 8010bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	61fb      	str	r3, [r7, #28]
}
 8010bea:	bf00      	nop
 8010bec:	e7fe      	b.n	8010bec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010bee:	23bc      	movs	r3, #188	; 0xbc
 8010bf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2bbc      	cmp	r3, #188	; 0xbc
 8010bf6:	d00a      	beq.n	8010c0e <xTaskCreateStatic+0x66>
	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	61bb      	str	r3, [r7, #24]
}
 8010c0a:	bf00      	nop
 8010c0c:	e7fe      	b.n	8010c0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d01e      	beq.n	8010c54 <xTaskCreateStatic+0xac>
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d01b      	beq.n	8010c54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	2202      	movs	r2, #2
 8010c2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c2e:	2300      	movs	r3, #0
 8010c30:	9303      	str	r3, [sp, #12]
 8010c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c34:	9302      	str	r3, [sp, #8]
 8010c36:	f107 0314 	add.w	r3, r7, #20
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	68b9      	ldr	r1, [r7, #8]
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	f000 f850 	bl	8010cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c4e:	f000 f8f3 	bl	8010e38 <prvAddNewTaskToReadyList>
 8010c52:	e001      	b.n	8010c58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010c54:	2300      	movs	r3, #0
 8010c56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010c58:	697b      	ldr	r3, [r7, #20]
	}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3728      	adds	r7, #40	; 0x28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b08c      	sub	sp, #48	; 0x30
 8010c66:	af04      	add	r7, sp, #16
 8010c68:	60f8      	str	r0, [r7, #12]
 8010c6a:	60b9      	str	r1, [r7, #8]
 8010c6c:	603b      	str	r3, [r7, #0]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010c72:	88fb      	ldrh	r3, [r7, #6]
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f001 fd6e 	bl	8012758 <pvPortMalloc>
 8010c7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00e      	beq.n	8010ca2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010c84:	20bc      	movs	r0, #188	; 0xbc
 8010c86:	f001 fd67 	bl	8012758 <pvPortMalloc>
 8010c8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	697a      	ldr	r2, [r7, #20]
 8010c96:	631a      	str	r2, [r3, #48]	; 0x30
 8010c98:	e005      	b.n	8010ca6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010c9a:	6978      	ldr	r0, [r7, #20]
 8010c9c:	f001 fe28 	bl	80128f0 <vPortFree>
 8010ca0:	e001      	b.n	8010ca6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d017      	beq.n	8010cdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010cb4:	88fa      	ldrh	r2, [r7, #6]
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	9303      	str	r3, [sp, #12]
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	9302      	str	r3, [sp, #8]
 8010cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc0:	9301      	str	r3, [sp, #4]
 8010cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	68b9      	ldr	r1, [r7, #8]
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 f80e 	bl	8010cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cd0:	69f8      	ldr	r0, [r7, #28]
 8010cd2:	f000 f8b1 	bl	8010e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	61bb      	str	r3, [r7, #24]
 8010cda:	e002      	b.n	8010ce2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010ce2:	69bb      	ldr	r3, [r7, #24]
	}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3720      	adds	r7, #32
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b088      	sub	sp, #32
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
 8010cf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	461a      	mov	r2, r3
 8010d04:	21a5      	movs	r1, #165	; 0xa5
 8010d06:	f001 ff4b 	bl	8012ba0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010d14:	440b      	add	r3, r1
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	f023 0307 	bic.w	r3, r3, #7
 8010d22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	f003 0307 	and.w	r3, r3, #7
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00a      	beq.n	8010d44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	617b      	str	r3, [r7, #20]
}
 8010d40:	bf00      	nop
 8010d42:	e7fe      	b.n	8010d42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d01f      	beq.n	8010d8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	61fb      	str	r3, [r7, #28]
 8010d4e:	e012      	b.n	8010d76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	4413      	add	r3, r2
 8010d56:	7819      	ldrb	r1, [r3, #0]
 8010d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	3334      	adds	r3, #52	; 0x34
 8010d60:	460a      	mov	r2, r1
 8010d62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010d64:	68ba      	ldr	r2, [r7, #8]
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	4413      	add	r3, r2
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d006      	beq.n	8010d7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	3301      	adds	r3, #1
 8010d74:	61fb      	str	r3, [r7, #28]
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	2b0f      	cmp	r3, #15
 8010d7a:	d9e9      	bls.n	8010d50 <prvInitialiseNewTask+0x64>
 8010d7c:	e000      	b.n	8010d80 <prvInitialiseNewTask+0x94>
			{
				break;
 8010d7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010d88:	e003      	b.n	8010d92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	2b37      	cmp	r3, #55	; 0x37
 8010d96:	d901      	bls.n	8010d9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010d98:	2337      	movs	r3, #55	; 0x37
 8010d9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010da0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010da6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010daa:	2200      	movs	r2, #0
 8010dac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db0:	3304      	adds	r3, #4
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fe fe56 	bl	800fa64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dba:	3318      	adds	r3, #24
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fe fe51 	bl	800fa64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de2:	2200      	movs	r2, #0
 8010de4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dea:	3354      	adds	r3, #84	; 0x54
 8010dec:	2260      	movs	r2, #96	; 0x60
 8010dee:	2100      	movs	r1, #0
 8010df0:	4618      	mov	r0, r3
 8010df2:	f001 fed5 	bl	8012ba0 <memset>
 8010df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df8:	4a0c      	ldr	r2, [pc, #48]	; (8010e2c <prvInitialiseNewTask+0x140>)
 8010dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8010dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfe:	4a0c      	ldr	r2, [pc, #48]	; (8010e30 <prvInitialiseNewTask+0x144>)
 8010e00:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e04:	4a0b      	ldr	r2, [pc, #44]	; (8010e34 <prvInitialiseNewTask+0x148>)
 8010e06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e08:	683a      	ldr	r2, [r7, #0]
 8010e0a:	68f9      	ldr	r1, [r7, #12]
 8010e0c:	69b8      	ldr	r0, [r7, #24]
 8010e0e:	f001 fa51 	bl	80122b4 <pxPortInitialiseStack>
 8010e12:	4602      	mov	r2, r0
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e24:	bf00      	nop
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	080136b0 	.word	0x080136b0
 8010e30:	080136d0 	.word	0x080136d0
 8010e34:	08013690 	.word	0x08013690

08010e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010e40:	f001 fb68 	bl	8012514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010e44:	4b2d      	ldr	r3, [pc, #180]	; (8010efc <prvAddNewTaskToReadyList+0xc4>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	4a2c      	ldr	r2, [pc, #176]	; (8010efc <prvAddNewTaskToReadyList+0xc4>)
 8010e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010e4e:	4b2c      	ldr	r3, [pc, #176]	; (8010f00 <prvAddNewTaskToReadyList+0xc8>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d109      	bne.n	8010e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010e56:	4a2a      	ldr	r2, [pc, #168]	; (8010f00 <prvAddNewTaskToReadyList+0xc8>)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010e5c:	4b27      	ldr	r3, [pc, #156]	; (8010efc <prvAddNewTaskToReadyList+0xc4>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d110      	bne.n	8010e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010e64:	f000 fc38 	bl	80116d8 <prvInitialiseTaskLists>
 8010e68:	e00d      	b.n	8010e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010e6a:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <prvAddNewTaskToReadyList+0xcc>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d109      	bne.n	8010e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010e72:	4b23      	ldr	r3, [pc, #140]	; (8010f00 <prvAddNewTaskToReadyList+0xc8>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d802      	bhi.n	8010e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010e80:	4a1f      	ldr	r2, [pc, #124]	; (8010f00 <prvAddNewTaskToReadyList+0xc8>)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010e86:	4b20      	ldr	r3, [pc, #128]	; (8010f08 <prvAddNewTaskToReadyList+0xd0>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	4a1e      	ldr	r2, [pc, #120]	; (8010f08 <prvAddNewTaskToReadyList+0xd0>)
 8010e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010e90:	4b1d      	ldr	r3, [pc, #116]	; (8010f08 <prvAddNewTaskToReadyList+0xd0>)
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e9c:	4b1b      	ldr	r3, [pc, #108]	; (8010f0c <prvAddNewTaskToReadyList+0xd4>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d903      	bls.n	8010eac <prvAddNewTaskToReadyList+0x74>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea8:	4a18      	ldr	r2, [pc, #96]	; (8010f0c <prvAddNewTaskToReadyList+0xd4>)
 8010eaa:	6013      	str	r3, [r2, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	4413      	add	r3, r2
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4a15      	ldr	r2, [pc, #84]	; (8010f10 <prvAddNewTaskToReadyList+0xd8>)
 8010eba:	441a      	add	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3304      	adds	r3, #4
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	4610      	mov	r0, r2
 8010ec4:	f7fe fddb 	bl	800fa7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010ec8:	f001 fb54 	bl	8012574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010ecc:	4b0d      	ldr	r3, [pc, #52]	; (8010f04 <prvAddNewTaskToReadyList+0xcc>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00e      	beq.n	8010ef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <prvAddNewTaskToReadyList+0xc8>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d207      	bcs.n	8010ef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010ee2:	4b0c      	ldr	r3, [pc, #48]	; (8010f14 <prvAddNewTaskToReadyList+0xdc>)
 8010ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ee8:	601a      	str	r2, [r3, #0]
 8010eea:	f3bf 8f4f 	dsb	sy
 8010eee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ef2:	bf00      	nop
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	24008e14 	.word	0x24008e14
 8010f00:	24008940 	.word	0x24008940
 8010f04:	24008e20 	.word	0x24008e20
 8010f08:	24008e30 	.word	0x24008e30
 8010f0c:	24008e1c 	.word	0x24008e1c
 8010f10:	24008944 	.word	0x24008944
 8010f14:	e000ed04 	.word	0xe000ed04

08010f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f20:	2300      	movs	r3, #0
 8010f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d017      	beq.n	8010f5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f2a:	4b13      	ldr	r3, [pc, #76]	; (8010f78 <vTaskDelay+0x60>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00a      	beq.n	8010f48 <vTaskDelay+0x30>
	__asm volatile
 8010f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	60bb      	str	r3, [r7, #8]
}
 8010f44:	bf00      	nop
 8010f46:	e7fe      	b.n	8010f46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010f48:	f000 f88a 	bl	8011060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 fe0e 	bl	8011b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010f54:	f000 f892 	bl	801107c <xTaskResumeAll>
 8010f58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d107      	bne.n	8010f70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010f60:	4b06      	ldr	r3, [pc, #24]	; (8010f7c <vTaskDelay+0x64>)
 8010f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f66:	601a      	str	r2, [r3, #0]
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010f70:	bf00      	nop
 8010f72:	3710      	adds	r7, #16
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	24008e3c 	.word	0x24008e3c
 8010f7c:	e000ed04 	.word	0xe000ed04

08010f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b08a      	sub	sp, #40	; 0x28
 8010f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010f8e:	463a      	mov	r2, r7
 8010f90:	1d39      	adds	r1, r7, #4
 8010f92:	f107 0308 	add.w	r3, r7, #8
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fe fd10 	bl	800f9bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010f9c:	6839      	ldr	r1, [r7, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	9202      	str	r2, [sp, #8]
 8010fa4:	9301      	str	r3, [sp, #4]
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	2300      	movs	r3, #0
 8010fac:	460a      	mov	r2, r1
 8010fae:	4924      	ldr	r1, [pc, #144]	; (8011040 <vTaskStartScheduler+0xc0>)
 8010fb0:	4824      	ldr	r0, [pc, #144]	; (8011044 <vTaskStartScheduler+0xc4>)
 8010fb2:	f7ff fdf9 	bl	8010ba8 <xTaskCreateStatic>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	4a23      	ldr	r2, [pc, #140]	; (8011048 <vTaskStartScheduler+0xc8>)
 8010fba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010fbc:	4b22      	ldr	r3, [pc, #136]	; (8011048 <vTaskStartScheduler+0xc8>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	617b      	str	r3, [r7, #20]
 8010fc8:	e001      	b.n	8010fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d102      	bne.n	8010fda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010fd4:	f000 fe20 	bl	8011c18 <xTimerCreateTimerTask>
 8010fd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d11b      	bne.n	8011018 <vTaskStartScheduler+0x98>
	__asm volatile
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	613b      	str	r3, [r7, #16]
}
 8010ff2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010ff4:	4b15      	ldr	r3, [pc, #84]	; (801104c <vTaskStartScheduler+0xcc>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3354      	adds	r3, #84	; 0x54
 8010ffa:	4a15      	ldr	r2, [pc, #84]	; (8011050 <vTaskStartScheduler+0xd0>)
 8010ffc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010ffe:	4b15      	ldr	r3, [pc, #84]	; (8011054 <vTaskStartScheduler+0xd4>)
 8011000:	f04f 32ff 	mov.w	r2, #4294967295
 8011004:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011006:	4b14      	ldr	r3, [pc, #80]	; (8011058 <vTaskStartScheduler+0xd8>)
 8011008:	2201      	movs	r2, #1
 801100a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801100c:	4b13      	ldr	r3, [pc, #76]	; (801105c <vTaskStartScheduler+0xdc>)
 801100e:	2200      	movs	r2, #0
 8011010:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011012:	f001 f9dd 	bl	80123d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011016:	e00e      	b.n	8011036 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801101e:	d10a      	bne.n	8011036 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	60fb      	str	r3, [r7, #12]
}
 8011032:	bf00      	nop
 8011034:	e7fe      	b.n	8011034 <vTaskStartScheduler+0xb4>
}
 8011036:	bf00      	nop
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	08013560 	.word	0x08013560
 8011044:	080116a9 	.word	0x080116a9
 8011048:	24008e38 	.word	0x24008e38
 801104c:	24008940 	.word	0x24008940
 8011050:	24008040 	.word	0x24008040
 8011054:	24008e34 	.word	0x24008e34
 8011058:	24008e20 	.word	0x24008e20
 801105c:	24008e18 	.word	0x24008e18

08011060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011060:	b480      	push	{r7}
 8011062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011064:	4b04      	ldr	r3, [pc, #16]	; (8011078 <vTaskSuspendAll+0x18>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	3301      	adds	r3, #1
 801106a:	4a03      	ldr	r2, [pc, #12]	; (8011078 <vTaskSuspendAll+0x18>)
 801106c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801106e:	bf00      	nop
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	24008e3c 	.word	0x24008e3c

0801107c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011082:	2300      	movs	r3, #0
 8011084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011086:	2300      	movs	r3, #0
 8011088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801108a:	4b42      	ldr	r3, [pc, #264]	; (8011194 <xTaskResumeAll+0x118>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10a      	bne.n	80110a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	f383 8811 	msr	BASEPRI, r3
 801109a:	f3bf 8f6f 	isb	sy
 801109e:	f3bf 8f4f 	dsb	sy
 80110a2:	603b      	str	r3, [r7, #0]
}
 80110a4:	bf00      	nop
 80110a6:	e7fe      	b.n	80110a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80110a8:	f001 fa34 	bl	8012514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80110ac:	4b39      	ldr	r3, [pc, #228]	; (8011194 <xTaskResumeAll+0x118>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	4a38      	ldr	r2, [pc, #224]	; (8011194 <xTaskResumeAll+0x118>)
 80110b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110b6:	4b37      	ldr	r3, [pc, #220]	; (8011194 <xTaskResumeAll+0x118>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d162      	bne.n	8011184 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80110be:	4b36      	ldr	r3, [pc, #216]	; (8011198 <xTaskResumeAll+0x11c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d05e      	beq.n	8011184 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80110c6:	e02f      	b.n	8011128 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110c8:	4b34      	ldr	r3, [pc, #208]	; (801119c <xTaskResumeAll+0x120>)
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	3318      	adds	r3, #24
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fe fd2f 	bl	800fb38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	3304      	adds	r3, #4
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe fd2a 	bl	800fb38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e8:	4b2d      	ldr	r3, [pc, #180]	; (80111a0 <xTaskResumeAll+0x124>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d903      	bls.n	80110f8 <xTaskResumeAll+0x7c>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f4:	4a2a      	ldr	r2, [pc, #168]	; (80111a0 <xTaskResumeAll+0x124>)
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110fc:	4613      	mov	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4413      	add	r3, r2
 8011102:	009b      	lsls	r3, r3, #2
 8011104:	4a27      	ldr	r2, [pc, #156]	; (80111a4 <xTaskResumeAll+0x128>)
 8011106:	441a      	add	r2, r3
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3304      	adds	r3, #4
 801110c:	4619      	mov	r1, r3
 801110e:	4610      	mov	r0, r2
 8011110:	f7fe fcb5 	bl	800fa7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011118:	4b23      	ldr	r3, [pc, #140]	; (80111a8 <xTaskResumeAll+0x12c>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111e:	429a      	cmp	r2, r3
 8011120:	d302      	bcc.n	8011128 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011122:	4b22      	ldr	r3, [pc, #136]	; (80111ac <xTaskResumeAll+0x130>)
 8011124:	2201      	movs	r2, #1
 8011126:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011128:	4b1c      	ldr	r3, [pc, #112]	; (801119c <xTaskResumeAll+0x120>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1cb      	bne.n	80110c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011136:	f000 fb71 	bl	801181c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801113a:	4b1d      	ldr	r3, [pc, #116]	; (80111b0 <xTaskResumeAll+0x134>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d010      	beq.n	8011168 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011146:	f000 f859 	bl	80111fc <xTaskIncrementTick>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d002      	beq.n	8011156 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011150:	4b16      	ldr	r3, [pc, #88]	; (80111ac <xTaskResumeAll+0x130>)
 8011152:	2201      	movs	r2, #1
 8011154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3b01      	subs	r3, #1
 801115a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1f1      	bne.n	8011146 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011162:	4b13      	ldr	r3, [pc, #76]	; (80111b0 <xTaskResumeAll+0x134>)
 8011164:	2200      	movs	r2, #0
 8011166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011168:	4b10      	ldr	r3, [pc, #64]	; (80111ac <xTaskResumeAll+0x130>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d009      	beq.n	8011184 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011170:	2301      	movs	r3, #1
 8011172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011174:	4b0f      	ldr	r3, [pc, #60]	; (80111b4 <xTaskResumeAll+0x138>)
 8011176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011184:	f001 f9f6 	bl	8012574 <vPortExitCritical>

	return xAlreadyYielded;
 8011188:	68bb      	ldr	r3, [r7, #8]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	24008e3c 	.word	0x24008e3c
 8011198:	24008e14 	.word	0x24008e14
 801119c:	24008dd4 	.word	0x24008dd4
 80111a0:	24008e1c 	.word	0x24008e1c
 80111a4:	24008944 	.word	0x24008944
 80111a8:	24008940 	.word	0x24008940
 80111ac:	24008e28 	.word	0x24008e28
 80111b0:	24008e24 	.word	0x24008e24
 80111b4:	e000ed04 	.word	0xe000ed04

080111b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80111be:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <xTaskGetTickCount+0x1c>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80111c4:	687b      	ldr	r3, [r7, #4]
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	370c      	adds	r7, #12
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	24008e18 	.word	0x24008e18

080111d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111de:	f001 fa7b 	bl	80126d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80111e2:	2300      	movs	r3, #0
 80111e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80111e6:	4b04      	ldr	r3, [pc, #16]	; (80111f8 <xTaskGetTickCountFromISR+0x20>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80111ec:	683b      	ldr	r3, [r7, #0]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	24008e18 	.word	0x24008e18

080111fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011202:	2300      	movs	r3, #0
 8011204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011206:	4b4f      	ldr	r3, [pc, #316]	; (8011344 <xTaskIncrementTick+0x148>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f040 808f 	bne.w	801132e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011210:	4b4d      	ldr	r3, [pc, #308]	; (8011348 <xTaskIncrementTick+0x14c>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	3301      	adds	r3, #1
 8011216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011218:	4a4b      	ldr	r2, [pc, #300]	; (8011348 <xTaskIncrementTick+0x14c>)
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d120      	bne.n	8011266 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011224:	4b49      	ldr	r3, [pc, #292]	; (801134c <xTaskIncrementTick+0x150>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00a      	beq.n	8011244 <xTaskIncrementTick+0x48>
	__asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	603b      	str	r3, [r7, #0]
}
 8011240:	bf00      	nop
 8011242:	e7fe      	b.n	8011242 <xTaskIncrementTick+0x46>
 8011244:	4b41      	ldr	r3, [pc, #260]	; (801134c <xTaskIncrementTick+0x150>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	60fb      	str	r3, [r7, #12]
 801124a:	4b41      	ldr	r3, [pc, #260]	; (8011350 <xTaskIncrementTick+0x154>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4a3f      	ldr	r2, [pc, #252]	; (801134c <xTaskIncrementTick+0x150>)
 8011250:	6013      	str	r3, [r2, #0]
 8011252:	4a3f      	ldr	r2, [pc, #252]	; (8011350 <xTaskIncrementTick+0x154>)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	4b3e      	ldr	r3, [pc, #248]	; (8011354 <xTaskIncrementTick+0x158>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3301      	adds	r3, #1
 801125e:	4a3d      	ldr	r2, [pc, #244]	; (8011354 <xTaskIncrementTick+0x158>)
 8011260:	6013      	str	r3, [r2, #0]
 8011262:	f000 fadb 	bl	801181c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011266:	4b3c      	ldr	r3, [pc, #240]	; (8011358 <xTaskIncrementTick+0x15c>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	693a      	ldr	r2, [r7, #16]
 801126c:	429a      	cmp	r2, r3
 801126e:	d349      	bcc.n	8011304 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011270:	4b36      	ldr	r3, [pc, #216]	; (801134c <xTaskIncrementTick+0x150>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d104      	bne.n	8011284 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801127a:	4b37      	ldr	r3, [pc, #220]	; (8011358 <xTaskIncrementTick+0x15c>)
 801127c:	f04f 32ff 	mov.w	r2, #4294967295
 8011280:	601a      	str	r2, [r3, #0]
					break;
 8011282:	e03f      	b.n	8011304 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011284:	4b31      	ldr	r3, [pc, #196]	; (801134c <xTaskIncrementTick+0x150>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011294:	693a      	ldr	r2, [r7, #16]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	429a      	cmp	r2, r3
 801129a:	d203      	bcs.n	80112a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801129c:	4a2e      	ldr	r2, [pc, #184]	; (8011358 <xTaskIncrementTick+0x15c>)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80112a2:	e02f      	b.n	8011304 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	3304      	adds	r3, #4
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fe fc45 	bl	800fb38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d004      	beq.n	80112c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	3318      	adds	r3, #24
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fe fc3c 	bl	800fb38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c4:	4b25      	ldr	r3, [pc, #148]	; (801135c <xTaskIncrementTick+0x160>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d903      	bls.n	80112d4 <xTaskIncrementTick+0xd8>
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d0:	4a22      	ldr	r2, [pc, #136]	; (801135c <xTaskIncrementTick+0x160>)
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d8:	4613      	mov	r3, r2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4a1f      	ldr	r2, [pc, #124]	; (8011360 <xTaskIncrementTick+0x164>)
 80112e2:	441a      	add	r2, r3
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	3304      	adds	r3, #4
 80112e8:	4619      	mov	r1, r3
 80112ea:	4610      	mov	r0, r2
 80112ec:	f7fe fbc7 	bl	800fa7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f4:	4b1b      	ldr	r3, [pc, #108]	; (8011364 <xTaskIncrementTick+0x168>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d3b8      	bcc.n	8011270 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80112fe:	2301      	movs	r3, #1
 8011300:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011302:	e7b5      	b.n	8011270 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011304:	4b17      	ldr	r3, [pc, #92]	; (8011364 <xTaskIncrementTick+0x168>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801130a:	4915      	ldr	r1, [pc, #84]	; (8011360 <xTaskIncrementTick+0x164>)
 801130c:	4613      	mov	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	440b      	add	r3, r1
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2b01      	cmp	r3, #1
 801131a:	d901      	bls.n	8011320 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801131c:	2301      	movs	r3, #1
 801131e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011320:	4b11      	ldr	r3, [pc, #68]	; (8011368 <xTaskIncrementTick+0x16c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d007      	beq.n	8011338 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011328:	2301      	movs	r3, #1
 801132a:	617b      	str	r3, [r7, #20]
 801132c:	e004      	b.n	8011338 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801132e:	4b0f      	ldr	r3, [pc, #60]	; (801136c <xTaskIncrementTick+0x170>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	3301      	adds	r3, #1
 8011334:	4a0d      	ldr	r2, [pc, #52]	; (801136c <xTaskIncrementTick+0x170>)
 8011336:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011338:	697b      	ldr	r3, [r7, #20]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
 8011342:	bf00      	nop
 8011344:	24008e3c 	.word	0x24008e3c
 8011348:	24008e18 	.word	0x24008e18
 801134c:	24008dcc 	.word	0x24008dcc
 8011350:	24008dd0 	.word	0x24008dd0
 8011354:	24008e2c 	.word	0x24008e2c
 8011358:	24008e34 	.word	0x24008e34
 801135c:	24008e1c 	.word	0x24008e1c
 8011360:	24008944 	.word	0x24008944
 8011364:	24008940 	.word	0x24008940
 8011368:	24008e28 	.word	0x24008e28
 801136c:	24008e24 	.word	0x24008e24

08011370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011376:	4b2a      	ldr	r3, [pc, #168]	; (8011420 <vTaskSwitchContext+0xb0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d003      	beq.n	8011386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801137e:	4b29      	ldr	r3, [pc, #164]	; (8011424 <vTaskSwitchContext+0xb4>)
 8011380:	2201      	movs	r2, #1
 8011382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011384:	e046      	b.n	8011414 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011386:	4b27      	ldr	r3, [pc, #156]	; (8011424 <vTaskSwitchContext+0xb4>)
 8011388:	2200      	movs	r2, #0
 801138a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801138c:	4b26      	ldr	r3, [pc, #152]	; (8011428 <vTaskSwitchContext+0xb8>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	60fb      	str	r3, [r7, #12]
 8011392:	e010      	b.n	80113b6 <vTaskSwitchContext+0x46>
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10a      	bne.n	80113b0 <vTaskSwitchContext+0x40>
	__asm volatile
 801139a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139e:	f383 8811 	msr	BASEPRI, r3
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	607b      	str	r3, [r7, #4]
}
 80113ac:	bf00      	nop
 80113ae:	e7fe      	b.n	80113ae <vTaskSwitchContext+0x3e>
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	491d      	ldr	r1, [pc, #116]	; (801142c <vTaskSwitchContext+0xbc>)
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	4613      	mov	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4413      	add	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	440b      	add	r3, r1
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d0e4      	beq.n	8011394 <vTaskSwitchContext+0x24>
 80113ca:	68fa      	ldr	r2, [r7, #12]
 80113cc:	4613      	mov	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4413      	add	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	4a15      	ldr	r2, [pc, #84]	; (801142c <vTaskSwitchContext+0xbc>)
 80113d6:	4413      	add	r3, r2
 80113d8:	60bb      	str	r3, [r7, #8]
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	605a      	str	r2, [r3, #4]
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	685a      	ldr	r2, [r3, #4]
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	3308      	adds	r3, #8
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d104      	bne.n	80113fa <vTaskSwitchContext+0x8a>
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	605a      	str	r2, [r3, #4]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	4a0b      	ldr	r2, [pc, #44]	; (8011430 <vTaskSwitchContext+0xc0>)
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	4a08      	ldr	r2, [pc, #32]	; (8011428 <vTaskSwitchContext+0xb8>)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <vTaskSwitchContext+0xc0>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3354      	adds	r3, #84	; 0x54
 8011410:	4a08      	ldr	r2, [pc, #32]	; (8011434 <vTaskSwitchContext+0xc4>)
 8011412:	6013      	str	r3, [r2, #0]
}
 8011414:	bf00      	nop
 8011416:	3714      	adds	r7, #20
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr
 8011420:	24008e3c 	.word	0x24008e3c
 8011424:	24008e28 	.word	0x24008e28
 8011428:	24008e1c 	.word	0x24008e1c
 801142c:	24008944 	.word	0x24008944
 8011430:	24008940 	.word	0x24008940
 8011434:	24008040 	.word	0x24008040

08011438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10a      	bne.n	801145e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	60fb      	str	r3, [r7, #12]
}
 801145a:	bf00      	nop
 801145c:	e7fe      	b.n	801145c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <vTaskPlaceOnEventList+0x44>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3318      	adds	r3, #24
 8011464:	4619      	mov	r1, r3
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7fe fb2d 	bl	800fac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801146c:	2101      	movs	r1, #1
 801146e:	6838      	ldr	r0, [r7, #0]
 8011470:	f000 fb7e 	bl	8011b70 <prvAddCurrentTaskToDelayedList>
}
 8011474:	bf00      	nop
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	24008940 	.word	0x24008940

08011480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d10a      	bne.n	80114a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	617b      	str	r3, [r7, #20]
}
 80114a4:	bf00      	nop
 80114a6:	e7fe      	b.n	80114a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114a8:	4b0a      	ldr	r3, [pc, #40]	; (80114d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	3318      	adds	r3, #24
 80114ae:	4619      	mov	r1, r3
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f7fe fae4 	bl	800fa7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d002      	beq.n	80114c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80114bc:	f04f 33ff 	mov.w	r3, #4294967295
 80114c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80114c2:	6879      	ldr	r1, [r7, #4]
 80114c4:	68b8      	ldr	r0, [r7, #8]
 80114c6:	f000 fb53 	bl	8011b70 <prvAddCurrentTaskToDelayedList>
	}
 80114ca:	bf00      	nop
 80114cc:	3718      	adds	r7, #24
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	24008940 	.word	0x24008940

080114d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d10a      	bne.n	8011504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	60fb      	str	r3, [r7, #12]
}
 8011500:	bf00      	nop
 8011502:	e7fe      	b.n	8011502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	3318      	adds	r3, #24
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe fb15 	bl	800fb38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801150e:	4b1e      	ldr	r3, [pc, #120]	; (8011588 <xTaskRemoveFromEventList+0xb0>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d11d      	bne.n	8011552 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	3304      	adds	r3, #4
 801151a:	4618      	mov	r0, r3
 801151c:	f7fe fb0c 	bl	800fb38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011524:	4b19      	ldr	r3, [pc, #100]	; (801158c <xTaskRemoveFromEventList+0xb4>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	429a      	cmp	r2, r3
 801152a:	d903      	bls.n	8011534 <xTaskRemoveFromEventList+0x5c>
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011530:	4a16      	ldr	r2, [pc, #88]	; (801158c <xTaskRemoveFromEventList+0xb4>)
 8011532:	6013      	str	r3, [r2, #0]
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4a13      	ldr	r2, [pc, #76]	; (8011590 <xTaskRemoveFromEventList+0xb8>)
 8011542:	441a      	add	r2, r3
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	3304      	adds	r3, #4
 8011548:	4619      	mov	r1, r3
 801154a:	4610      	mov	r0, r2
 801154c:	f7fe fa97 	bl	800fa7e <vListInsertEnd>
 8011550:	e005      	b.n	801155e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	3318      	adds	r3, #24
 8011556:	4619      	mov	r1, r3
 8011558:	480e      	ldr	r0, [pc, #56]	; (8011594 <xTaskRemoveFromEventList+0xbc>)
 801155a:	f7fe fa90 	bl	800fa7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011562:	4b0d      	ldr	r3, [pc, #52]	; (8011598 <xTaskRemoveFromEventList+0xc0>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011568:	429a      	cmp	r2, r3
 801156a:	d905      	bls.n	8011578 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801156c:	2301      	movs	r3, #1
 801156e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011570:	4b0a      	ldr	r3, [pc, #40]	; (801159c <xTaskRemoveFromEventList+0xc4>)
 8011572:	2201      	movs	r2, #1
 8011574:	601a      	str	r2, [r3, #0]
 8011576:	e001      	b.n	801157c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011578:	2300      	movs	r3, #0
 801157a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801157c:	697b      	ldr	r3, [r7, #20]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3718      	adds	r7, #24
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	24008e3c 	.word	0x24008e3c
 801158c:	24008e1c 	.word	0x24008e1c
 8011590:	24008944 	.word	0x24008944
 8011594:	24008dd4 	.word	0x24008dd4
 8011598:	24008940 	.word	0x24008940
 801159c:	24008e28 	.word	0x24008e28

080115a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115a8:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <vTaskInternalSetTimeOutState+0x24>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115b0:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <vTaskInternalSetTimeOutState+0x28>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	605a      	str	r2, [r3, #4]
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	24008e2c 	.word	0x24008e2c
 80115c8:	24008e18 	.word	0x24008e18

080115cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b088      	sub	sp, #32
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d10a      	bne.n	80115f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80115dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e0:	f383 8811 	msr	BASEPRI, r3
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	613b      	str	r3, [r7, #16]
}
 80115ee:	bf00      	nop
 80115f0:	e7fe      	b.n	80115f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d10a      	bne.n	801160e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fc:	f383 8811 	msr	BASEPRI, r3
 8011600:	f3bf 8f6f 	isb	sy
 8011604:	f3bf 8f4f 	dsb	sy
 8011608:	60fb      	str	r3, [r7, #12]
}
 801160a:	bf00      	nop
 801160c:	e7fe      	b.n	801160c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801160e:	f000 ff81 	bl	8012514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011612:	4b1d      	ldr	r3, [pc, #116]	; (8011688 <xTaskCheckForTimeOut+0xbc>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801162a:	d102      	bne.n	8011632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	61fb      	str	r3, [r7, #28]
 8011630:	e023      	b.n	801167a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	4b15      	ldr	r3, [pc, #84]	; (801168c <xTaskCheckForTimeOut+0xc0>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	429a      	cmp	r2, r3
 801163c:	d007      	beq.n	801164e <xTaskCheckForTimeOut+0x82>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	69ba      	ldr	r2, [r7, #24]
 8011644:	429a      	cmp	r2, r3
 8011646:	d302      	bcc.n	801164e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011648:	2301      	movs	r3, #1
 801164a:	61fb      	str	r3, [r7, #28]
 801164c:	e015      	b.n	801167a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	429a      	cmp	r2, r3
 8011656:	d20b      	bcs.n	8011670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff ff9b 	bl	80115a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801166a:	2300      	movs	r3, #0
 801166c:	61fb      	str	r3, [r7, #28]
 801166e:	e004      	b.n	801167a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2200      	movs	r2, #0
 8011674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011676:	2301      	movs	r3, #1
 8011678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801167a:	f000 ff7b 	bl	8012574 <vPortExitCritical>

	return xReturn;
 801167e:	69fb      	ldr	r3, [r7, #28]
}
 8011680:	4618      	mov	r0, r3
 8011682:	3720      	adds	r7, #32
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	24008e18 	.word	0x24008e18
 801168c:	24008e2c 	.word	0x24008e2c

08011690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011690:	b480      	push	{r7}
 8011692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011694:	4b03      	ldr	r3, [pc, #12]	; (80116a4 <vTaskMissedYield+0x14>)
 8011696:	2201      	movs	r2, #1
 8011698:	601a      	str	r2, [r3, #0]
}
 801169a:	bf00      	nop
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	24008e28 	.word	0x24008e28

080116a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116b0:	f000 f852 	bl	8011758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <prvIdleTask+0x28>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d9f9      	bls.n	80116b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116bc:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <prvIdleTask+0x2c>)
 80116be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116c2:	601a      	str	r2, [r3, #0]
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116cc:	e7f0      	b.n	80116b0 <prvIdleTask+0x8>
 80116ce:	bf00      	nop
 80116d0:	24008944 	.word	0x24008944
 80116d4:	e000ed04 	.word	0xe000ed04

080116d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116de:	2300      	movs	r3, #0
 80116e0:	607b      	str	r3, [r7, #4]
 80116e2:	e00c      	b.n	80116fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	4613      	mov	r3, r2
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	4413      	add	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4a12      	ldr	r2, [pc, #72]	; (8011738 <prvInitialiseTaskLists+0x60>)
 80116f0:	4413      	add	r3, r2
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe f996 	bl	800fa24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3301      	adds	r3, #1
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b37      	cmp	r3, #55	; 0x37
 8011702:	d9ef      	bls.n	80116e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011704:	480d      	ldr	r0, [pc, #52]	; (801173c <prvInitialiseTaskLists+0x64>)
 8011706:	f7fe f98d 	bl	800fa24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801170a:	480d      	ldr	r0, [pc, #52]	; (8011740 <prvInitialiseTaskLists+0x68>)
 801170c:	f7fe f98a 	bl	800fa24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011710:	480c      	ldr	r0, [pc, #48]	; (8011744 <prvInitialiseTaskLists+0x6c>)
 8011712:	f7fe f987 	bl	800fa24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011716:	480c      	ldr	r0, [pc, #48]	; (8011748 <prvInitialiseTaskLists+0x70>)
 8011718:	f7fe f984 	bl	800fa24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801171c:	480b      	ldr	r0, [pc, #44]	; (801174c <prvInitialiseTaskLists+0x74>)
 801171e:	f7fe f981 	bl	800fa24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011722:	4b0b      	ldr	r3, [pc, #44]	; (8011750 <prvInitialiseTaskLists+0x78>)
 8011724:	4a05      	ldr	r2, [pc, #20]	; (801173c <prvInitialiseTaskLists+0x64>)
 8011726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011728:	4b0a      	ldr	r3, [pc, #40]	; (8011754 <prvInitialiseTaskLists+0x7c>)
 801172a:	4a05      	ldr	r2, [pc, #20]	; (8011740 <prvInitialiseTaskLists+0x68>)
 801172c:	601a      	str	r2, [r3, #0]
}
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	24008944 	.word	0x24008944
 801173c:	24008da4 	.word	0x24008da4
 8011740:	24008db8 	.word	0x24008db8
 8011744:	24008dd4 	.word	0x24008dd4
 8011748:	24008de8 	.word	0x24008de8
 801174c:	24008e00 	.word	0x24008e00
 8011750:	24008dcc 	.word	0x24008dcc
 8011754:	24008dd0 	.word	0x24008dd0

08011758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801175e:	e019      	b.n	8011794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011760:	f000 fed8 	bl	8012514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011764:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <prvCheckTasksWaitingTermination+0x50>)
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3304      	adds	r3, #4
 8011770:	4618      	mov	r0, r3
 8011772:	f7fe f9e1 	bl	800fb38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011776:	4b0d      	ldr	r3, [pc, #52]	; (80117ac <prvCheckTasksWaitingTermination+0x54>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3b01      	subs	r3, #1
 801177c:	4a0b      	ldr	r2, [pc, #44]	; (80117ac <prvCheckTasksWaitingTermination+0x54>)
 801177e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011780:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	3b01      	subs	r3, #1
 8011786:	4a0a      	ldr	r2, [pc, #40]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801178a:	f000 fef3 	bl	8012574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f000 f810 	bl	80117b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011794:	4b06      	ldr	r3, [pc, #24]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1e1      	bne.n	8011760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801179c:	bf00      	nop
 801179e:	bf00      	nop
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	24008de8 	.word	0x24008de8
 80117ac:	24008e14 	.word	0x24008e14
 80117b0:	24008dfc 	.word	0x24008dfc

080117b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3354      	adds	r3, #84	; 0x54
 80117c0:	4618      	mov	r0, r3
 80117c2:	f001 fa5d 	bl	8012c80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d108      	bne.n	80117e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d4:	4618      	mov	r0, r3
 80117d6:	f001 f88b 	bl	80128f0 <vPortFree>
				vPortFree( pxTCB );
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f001 f888 	bl	80128f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80117e0:	e018      	b.n	8011814 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d103      	bne.n	80117f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f001 f87f 	bl	80128f0 <vPortFree>
	}
 80117f2:	e00f      	b.n	8011814 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80117fa:	2b02      	cmp	r3, #2
 80117fc:	d00a      	beq.n	8011814 <prvDeleteTCB+0x60>
	__asm volatile
 80117fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011802:	f383 8811 	msr	BASEPRI, r3
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	60fb      	str	r3, [r7, #12]
}
 8011810:	bf00      	nop
 8011812:	e7fe      	b.n	8011812 <prvDeleteTCB+0x5e>
	}
 8011814:	bf00      	nop
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011822:	4b0c      	ldr	r3, [pc, #48]	; (8011854 <prvResetNextTaskUnblockTime+0x38>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d104      	bne.n	8011836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <prvResetNextTaskUnblockTime+0x3c>)
 801182e:	f04f 32ff 	mov.w	r2, #4294967295
 8011832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011834:	e008      	b.n	8011848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011836:	4b07      	ldr	r3, [pc, #28]	; (8011854 <prvResetNextTaskUnblockTime+0x38>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	4a04      	ldr	r2, [pc, #16]	; (8011858 <prvResetNextTaskUnblockTime+0x3c>)
 8011846:	6013      	str	r3, [r2, #0]
}
 8011848:	bf00      	nop
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	24008dcc 	.word	0x24008dcc
 8011858:	24008e34 	.word	0x24008e34

0801185c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011862:	4b0b      	ldr	r3, [pc, #44]	; (8011890 <xTaskGetSchedulerState+0x34>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d102      	bne.n	8011870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801186a:	2301      	movs	r3, #1
 801186c:	607b      	str	r3, [r7, #4]
 801186e:	e008      	b.n	8011882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011870:	4b08      	ldr	r3, [pc, #32]	; (8011894 <xTaskGetSchedulerState+0x38>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d102      	bne.n	801187e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011878:	2302      	movs	r3, #2
 801187a:	607b      	str	r3, [r7, #4]
 801187c:	e001      	b.n	8011882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801187e:	2300      	movs	r3, #0
 8011880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011882:	687b      	ldr	r3, [r7, #4]
	}
 8011884:	4618      	mov	r0, r3
 8011886:	370c      	adds	r7, #12
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr
 8011890:	24008e20 	.word	0x24008e20
 8011894:	24008e3c 	.word	0x24008e3c

08011898 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118a4:	2300      	movs	r3, #0
 80118a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d051      	beq.n	8011952 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118b2:	4b2a      	ldr	r3, [pc, #168]	; (801195c <xTaskPriorityInherit+0xc4>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d241      	bcs.n	8011940 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	699b      	ldr	r3, [r3, #24]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	db06      	blt.n	80118d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118c4:	4b25      	ldr	r3, [pc, #148]	; (801195c <xTaskPriorityInherit+0xc4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	6959      	ldr	r1, [r3, #20]
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118da:	4613      	mov	r3, r2
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	4413      	add	r3, r2
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4a1f      	ldr	r2, [pc, #124]	; (8011960 <xTaskPriorityInherit+0xc8>)
 80118e4:	4413      	add	r3, r2
 80118e6:	4299      	cmp	r1, r3
 80118e8:	d122      	bne.n	8011930 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	3304      	adds	r3, #4
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe f922 	bl	800fb38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80118f4:	4b19      	ldr	r3, [pc, #100]	; (801195c <xTaskPriorityInherit+0xc4>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011902:	4b18      	ldr	r3, [pc, #96]	; (8011964 <xTaskPriorityInherit+0xcc>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d903      	bls.n	8011912 <xTaskPriorityInherit+0x7a>
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801190e:	4a15      	ldr	r2, [pc, #84]	; (8011964 <xTaskPriorityInherit+0xcc>)
 8011910:	6013      	str	r3, [r2, #0]
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011916:	4613      	mov	r3, r2
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	4413      	add	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4a10      	ldr	r2, [pc, #64]	; (8011960 <xTaskPriorityInherit+0xc8>)
 8011920:	441a      	add	r2, r3
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	3304      	adds	r3, #4
 8011926:	4619      	mov	r1, r3
 8011928:	4610      	mov	r0, r2
 801192a:	f7fe f8a8 	bl	800fa7e <vListInsertEnd>
 801192e:	e004      	b.n	801193a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011930:	4b0a      	ldr	r3, [pc, #40]	; (801195c <xTaskPriorityInherit+0xc4>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801193a:	2301      	movs	r3, #1
 801193c:	60fb      	str	r3, [r7, #12]
 801193e:	e008      	b.n	8011952 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011944:	4b05      	ldr	r3, [pc, #20]	; (801195c <xTaskPriorityInherit+0xc4>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801194a:	429a      	cmp	r2, r3
 801194c:	d201      	bcs.n	8011952 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801194e:	2301      	movs	r3, #1
 8011950:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011952:	68fb      	ldr	r3, [r7, #12]
	}
 8011954:	4618      	mov	r0, r3
 8011956:	3710      	adds	r7, #16
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	24008940 	.word	0x24008940
 8011960:	24008944 	.word	0x24008944
 8011964:	24008e1c 	.word	0x24008e1c

08011968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011974:	2300      	movs	r3, #0
 8011976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d056      	beq.n	8011a2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801197e:	4b2e      	ldr	r3, [pc, #184]	; (8011a38 <xTaskPriorityDisinherit+0xd0>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	693a      	ldr	r2, [r7, #16]
 8011984:	429a      	cmp	r2, r3
 8011986:	d00a      	beq.n	801199e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198c:	f383 8811 	msr	BASEPRI, r3
 8011990:	f3bf 8f6f 	isb	sy
 8011994:	f3bf 8f4f 	dsb	sy
 8011998:	60fb      	str	r3, [r7, #12]
}
 801199a:	bf00      	nop
 801199c:	e7fe      	b.n	801199c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d10a      	bne.n	80119bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80119a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	60bb      	str	r3, [r7, #8]
}
 80119b8:	bf00      	nop
 80119ba:	e7fe      	b.n	80119ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119c0:	1e5a      	subs	r2, r3, #1
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d02c      	beq.n	8011a2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d128      	bne.n	8011a2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	3304      	adds	r3, #4
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fe f8aa 	bl	800fb38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119fc:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <xTaskPriorityDisinherit+0xd4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d903      	bls.n	8011a0c <xTaskPriorityDisinherit+0xa4>
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a08:	4a0c      	ldr	r2, [pc, #48]	; (8011a3c <xTaskPriorityDisinherit+0xd4>)
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a10:	4613      	mov	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4a09      	ldr	r2, [pc, #36]	; (8011a40 <xTaskPriorityDisinherit+0xd8>)
 8011a1a:	441a      	add	r2, r3
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4619      	mov	r1, r3
 8011a22:	4610      	mov	r0, r2
 8011a24:	f7fe f82b 	bl	800fa7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a2c:	697b      	ldr	r3, [r7, #20]
	}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3718      	adds	r7, #24
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	24008940 	.word	0x24008940
 8011a3c:	24008e1c 	.word	0x24008e1c
 8011a40:	24008944 	.word	0x24008944

08011a44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b088      	sub	sp, #32
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a52:	2301      	movs	r3, #1
 8011a54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d06a      	beq.n	8011b32 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10a      	bne.n	8011a7a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	60fb      	str	r3, [r7, #12]
}
 8011a76:	bf00      	nop
 8011a78:	e7fe      	b.n	8011a78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a7e:	683a      	ldr	r2, [r7, #0]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d902      	bls.n	8011a8a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	61fb      	str	r3, [r7, #28]
 8011a88:	e002      	b.n	8011a90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a94:	69fa      	ldr	r2, [r7, #28]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d04b      	beq.n	8011b32 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d146      	bne.n	8011b32 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011aa4:	4b25      	ldr	r3, [pc, #148]	; (8011b3c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	69ba      	ldr	r2, [r7, #24]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d10a      	bne.n	8011ac4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab2:	f383 8811 	msr	BASEPRI, r3
 8011ab6:	f3bf 8f6f 	isb	sy
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	60bb      	str	r3, [r7, #8]
}
 8011ac0:	bf00      	nop
 8011ac2:	e7fe      	b.n	8011ac2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	69fa      	ldr	r2, [r7, #28]
 8011ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	699b      	ldr	r3, [r3, #24]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	db04      	blt.n	8011ae2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	6959      	ldr	r1, [r3, #20]
 8011ae6:	693a      	ldr	r2, [r7, #16]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4a13      	ldr	r2, [pc, #76]	; (8011b40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011af2:	4413      	add	r3, r2
 8011af4:	4299      	cmp	r1, r3
 8011af6:	d11c      	bne.n	8011b32 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	3304      	adds	r3, #4
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7fe f81b 	bl	800fb38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b06:	4b0f      	ldr	r3, [pc, #60]	; (8011b44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d903      	bls.n	8011b16 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b12:	4a0c      	ldr	r2, [pc, #48]	; (8011b44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b14:	6013      	str	r3, [r2, #0]
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	4413      	add	r3, r2
 8011b20:	009b      	lsls	r3, r3, #2
 8011b22:	4a07      	ldr	r2, [pc, #28]	; (8011b40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b24:	441a      	add	r2, r3
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	3304      	adds	r3, #4
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4610      	mov	r0, r2
 8011b2e:	f7fd ffa6 	bl	800fa7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b32:	bf00      	nop
 8011b34:	3720      	adds	r7, #32
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	24008940 	.word	0x24008940
 8011b40:	24008944 	.word	0x24008944
 8011b44:	24008e1c 	.word	0x24008e1c

08011b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011b48:	b480      	push	{r7}
 8011b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b4c:	4b07      	ldr	r3, [pc, #28]	; (8011b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b54:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b5a:	3201      	adds	r2, #1
 8011b5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011b5e:	4b03      	ldr	r3, [pc, #12]	; (8011b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011b60:	681b      	ldr	r3, [r3, #0]
	}
 8011b62:	4618      	mov	r0, r3
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	24008940 	.word	0x24008940

08011b70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011b7a:	4b21      	ldr	r3, [pc, #132]	; (8011c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b80:	4b20      	ldr	r3, [pc, #128]	; (8011c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	3304      	adds	r3, #4
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fd ffd6 	bl	800fb38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b92:	d10a      	bne.n	8011baa <prvAddCurrentTaskToDelayedList+0x3a>
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d007      	beq.n	8011baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b9a:	4b1a      	ldr	r3, [pc, #104]	; (8011c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4819      	ldr	r0, [pc, #100]	; (8011c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ba4:	f7fd ff6b 	bl	800fa7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ba8:	e026      	b.n	8011bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	4413      	add	r3, r2
 8011bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011bb2:	4b14      	ldr	r3, [pc, #80]	; (8011c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	68ba      	ldr	r2, [r7, #8]
 8011bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d209      	bcs.n	8011bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bc2:	4b12      	ldr	r3, [pc, #72]	; (8011c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	4b0f      	ldr	r3, [pc, #60]	; (8011c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4610      	mov	r0, r2
 8011bd0:	f7fd ff79 	bl	800fac6 <vListInsert>
}
 8011bd4:	e010      	b.n	8011bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bd6:	4b0e      	ldr	r3, [pc, #56]	; (8011c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	4b0a      	ldr	r3, [pc, #40]	; (8011c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	3304      	adds	r3, #4
 8011be0:	4619      	mov	r1, r3
 8011be2:	4610      	mov	r0, r2
 8011be4:	f7fd ff6f 	bl	800fac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011be8:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d202      	bcs.n	8011bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011bf2:	4a08      	ldr	r2, [pc, #32]	; (8011c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	6013      	str	r3, [r2, #0]
}
 8011bf8:	bf00      	nop
 8011bfa:	3710      	adds	r7, #16
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	24008e18 	.word	0x24008e18
 8011c04:	24008940 	.word	0x24008940
 8011c08:	24008e00 	.word	0x24008e00
 8011c0c:	24008dd0 	.word	0x24008dd0
 8011c10:	24008dcc 	.word	0x24008dcc
 8011c14:	24008e34 	.word	0x24008e34

08011c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b08a      	sub	sp, #40	; 0x28
 8011c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011c22:	f000 fb07 	bl	8012234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011c26:	4b1c      	ldr	r3, [pc, #112]	; (8011c98 <xTimerCreateTimerTask+0x80>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d021      	beq.n	8011c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011c32:	2300      	movs	r3, #0
 8011c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011c36:	1d3a      	adds	r2, r7, #4
 8011c38:	f107 0108 	add.w	r1, r7, #8
 8011c3c:	f107 030c 	add.w	r3, r7, #12
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fd fed5 	bl	800f9f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011c46:	6879      	ldr	r1, [r7, #4]
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	9202      	str	r2, [sp, #8]
 8011c4e:	9301      	str	r3, [sp, #4]
 8011c50:	2302      	movs	r3, #2
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	2300      	movs	r3, #0
 8011c56:	460a      	mov	r2, r1
 8011c58:	4910      	ldr	r1, [pc, #64]	; (8011c9c <xTimerCreateTimerTask+0x84>)
 8011c5a:	4811      	ldr	r0, [pc, #68]	; (8011ca0 <xTimerCreateTimerTask+0x88>)
 8011c5c:	f7fe ffa4 	bl	8010ba8 <xTaskCreateStatic>
 8011c60:	4603      	mov	r3, r0
 8011c62:	4a10      	ldr	r2, [pc, #64]	; (8011ca4 <xTimerCreateTimerTask+0x8c>)
 8011c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011c66:	4b0f      	ldr	r3, [pc, #60]	; (8011ca4 <xTimerCreateTimerTask+0x8c>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d001      	beq.n	8011c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011c6e:	2301      	movs	r3, #1
 8011c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10a      	bne.n	8011c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7c:	f383 8811 	msr	BASEPRI, r3
 8011c80:	f3bf 8f6f 	isb	sy
 8011c84:	f3bf 8f4f 	dsb	sy
 8011c88:	613b      	str	r3, [r7, #16]
}
 8011c8a:	bf00      	nop
 8011c8c:	e7fe      	b.n	8011c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011c8e:	697b      	ldr	r3, [r7, #20]
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	24008e70 	.word	0x24008e70
 8011c9c:	08013568 	.word	0x08013568
 8011ca0:	08011ddd 	.word	0x08011ddd
 8011ca4:	24008e74 	.word	0x24008e74

08011ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b08a      	sub	sp, #40	; 0x28
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10a      	bne.n	8011cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	623b      	str	r3, [r7, #32]
}
 8011cd2:	bf00      	nop
 8011cd4:	e7fe      	b.n	8011cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011cd6:	4b1a      	ldr	r3, [pc, #104]	; (8011d40 <xTimerGenericCommand+0x98>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d02a      	beq.n	8011d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b05      	cmp	r3, #5
 8011cee:	dc18      	bgt.n	8011d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011cf0:	f7ff fdb4 	bl	801185c <xTaskGetSchedulerState>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	d109      	bne.n	8011d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011cfa:	4b11      	ldr	r3, [pc, #68]	; (8011d40 <xTimerGenericCommand+0x98>)
 8011cfc:	6818      	ldr	r0, [r3, #0]
 8011cfe:	f107 0110 	add.w	r1, r7, #16
 8011d02:	2300      	movs	r3, #0
 8011d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d06:	f7fe f8e9 	bl	800fedc <xQueueGenericSend>
 8011d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8011d0c:	e012      	b.n	8011d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011d0e:	4b0c      	ldr	r3, [pc, #48]	; (8011d40 <xTimerGenericCommand+0x98>)
 8011d10:	6818      	ldr	r0, [r3, #0]
 8011d12:	f107 0110 	add.w	r1, r7, #16
 8011d16:	2300      	movs	r3, #0
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f7fe f8df 	bl	800fedc <xQueueGenericSend>
 8011d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8011d20:	e008      	b.n	8011d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011d22:	4b07      	ldr	r3, [pc, #28]	; (8011d40 <xTimerGenericCommand+0x98>)
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	f107 0110 	add.w	r1, r7, #16
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	f7fe f9d3 	bl	80100d8 <xQueueGenericSendFromISR>
 8011d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3728      	adds	r7, #40	; 0x28
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	24008e70 	.word	0x24008e70

08011d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af02      	add	r7, sp, #8
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d4e:	4b22      	ldr	r3, [pc, #136]	; (8011dd8 <prvProcessExpiredTimer+0x94>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fd feeb 	bl	800fb38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d68:	f003 0304 	and.w	r3, r3, #4
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d022      	beq.n	8011db6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	699a      	ldr	r2, [r3, #24]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	18d1      	adds	r1, r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	6978      	ldr	r0, [r7, #20]
 8011d7e:	f000 f8d1 	bl	8011f24 <prvInsertTimerInActiveList>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d01f      	beq.n	8011dc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011d88:	2300      	movs	r3, #0
 8011d8a:	9300      	str	r3, [sp, #0]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	2100      	movs	r1, #0
 8011d92:	6978      	ldr	r0, [r7, #20]
 8011d94:	f7ff ff88 	bl	8011ca8 <xTimerGenericCommand>
 8011d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d113      	bne.n	8011dc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da4:	f383 8811 	msr	BASEPRI, r3
 8011da8:	f3bf 8f6f 	isb	sy
 8011dac:	f3bf 8f4f 	dsb	sy
 8011db0:	60fb      	str	r3, [r7, #12]
}
 8011db2:	bf00      	nop
 8011db4:	e7fe      	b.n	8011db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011dbc:	f023 0301 	bic.w	r3, r3, #1
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	6a1b      	ldr	r3, [r3, #32]
 8011dcc:	6978      	ldr	r0, [r7, #20]
 8011dce:	4798      	blx	r3
}
 8011dd0:	bf00      	nop
 8011dd2:	3718      	adds	r7, #24
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	24008e68 	.word	0x24008e68

08011ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011de4:	f107 0308 	add.w	r3, r7, #8
 8011de8:	4618      	mov	r0, r3
 8011dea:	f000 f857 	bl	8011e9c <prvGetNextExpireTime>
 8011dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	4619      	mov	r1, r3
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f000 f803 	bl	8011e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011dfa:	f000 f8d5 	bl	8011fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011dfe:	e7f1      	b.n	8011de4 <prvTimerTask+0x8>

08011e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011e0a:	f7ff f929 	bl	8011060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e0e:	f107 0308 	add.w	r3, r7, #8
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 f866 	bl	8011ee4 <prvSampleTimeNow>
 8011e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d130      	bne.n	8011e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d10a      	bne.n	8011e3c <prvProcessTimerOrBlockTask+0x3c>
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d806      	bhi.n	8011e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011e2e:	f7ff f925 	bl	801107c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011e32:	68f9      	ldr	r1, [r7, #12]
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff ff85 	bl	8011d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011e3a:	e024      	b.n	8011e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d008      	beq.n	8011e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011e42:	4b13      	ldr	r3, [pc, #76]	; (8011e90 <prvProcessTimerOrBlockTask+0x90>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <prvProcessTimerOrBlockTask+0x50>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e000      	b.n	8011e52 <prvProcessTimerOrBlockTask+0x52>
 8011e50:	2300      	movs	r3, #0
 8011e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011e54:	4b0f      	ldr	r3, [pc, #60]	; (8011e94 <prvProcessTimerOrBlockTask+0x94>)
 8011e56:	6818      	ldr	r0, [r3, #0]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	683a      	ldr	r2, [r7, #0]
 8011e60:	4619      	mov	r1, r3
 8011e62:	f7fe fe6d 	bl	8010b40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011e66:	f7ff f909 	bl	801107c <xTaskResumeAll>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10a      	bne.n	8011e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011e70:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <prvProcessTimerOrBlockTask+0x98>)
 8011e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e76:	601a      	str	r2, [r3, #0]
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	f3bf 8f6f 	isb	sy
}
 8011e80:	e001      	b.n	8011e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011e82:	f7ff f8fb 	bl	801107c <xTaskResumeAll>
}
 8011e86:	bf00      	nop
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	bf00      	nop
 8011e90:	24008e6c 	.word	0x24008e6c
 8011e94:	24008e70 	.word	0x24008e70
 8011e98:	e000ed04 	.word	0xe000ed04

08011e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011ea4:	4b0e      	ldr	r3, [pc, #56]	; (8011ee0 <prvGetNextExpireTime+0x44>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d101      	bne.n	8011eb2 <prvGetNextExpireTime+0x16>
 8011eae:	2201      	movs	r2, #1
 8011eb0:	e000      	b.n	8011eb4 <prvGetNextExpireTime+0x18>
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d105      	bne.n	8011ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011ec0:	4b07      	ldr	r3, [pc, #28]	; (8011ee0 <prvGetNextExpireTime+0x44>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	60fb      	str	r3, [r7, #12]
 8011eca:	e001      	b.n	8011ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3714      	adds	r7, #20
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop
 8011ee0:	24008e68 	.word	0x24008e68

08011ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011eec:	f7ff f964 	bl	80111b8 <xTaskGetTickCount>
 8011ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ef2:	4b0b      	ldr	r3, [pc, #44]	; (8011f20 <prvSampleTimeNow+0x3c>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d205      	bcs.n	8011f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011efc:	f000 f936 	bl	801216c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2201      	movs	r2, #1
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	e002      	b.n	8011f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011f0e:	4a04      	ldr	r2, [pc, #16]	; (8011f20 <prvSampleTimeNow+0x3c>)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011f14:	68fb      	ldr	r3, [r7, #12]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	24008e78 	.word	0x24008e78

08011f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011f32:	2300      	movs	r3, #0
 8011f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d812      	bhi.n	8011f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	1ad2      	subs	r2, r2, r3
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d302      	bcc.n	8011f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	617b      	str	r3, [r7, #20]
 8011f5c:	e01b      	b.n	8011f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011f5e:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <prvInsertTimerInActiveList+0x7c>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3304      	adds	r3, #4
 8011f66:	4619      	mov	r1, r3
 8011f68:	4610      	mov	r0, r2
 8011f6a:	f7fd fdac 	bl	800fac6 <vListInsert>
 8011f6e:	e012      	b.n	8011f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d206      	bcs.n	8011f86 <prvInsertTimerInActiveList+0x62>
 8011f78:	68ba      	ldr	r2, [r7, #8]
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d302      	bcc.n	8011f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011f80:	2301      	movs	r3, #1
 8011f82:	617b      	str	r3, [r7, #20]
 8011f84:	e007      	b.n	8011f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f86:	4b07      	ldr	r3, [pc, #28]	; (8011fa4 <prvInsertTimerInActiveList+0x80>)
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	3304      	adds	r3, #4
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7fd fd98 	bl	800fac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011f96:	697b      	ldr	r3, [r7, #20]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3718      	adds	r7, #24
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	24008e6c 	.word	0x24008e6c
 8011fa4:	24008e68 	.word	0x24008e68

08011fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08e      	sub	sp, #56	; 0x38
 8011fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011fae:	e0ca      	b.n	8012146 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	da18      	bge.n	8011fe8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011fb6:	1d3b      	adds	r3, r7, #4
 8011fb8:	3304      	adds	r3, #4
 8011fba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d10a      	bne.n	8011fd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	61fb      	str	r3, [r7, #28]
}
 8011fd4:	bf00      	nop
 8011fd6:	e7fe      	b.n	8011fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fde:	6850      	ldr	r0, [r2, #4]
 8011fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fe2:	6892      	ldr	r2, [r2, #8]
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f2c0 80aa 	blt.w	8012144 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff6:	695b      	ldr	r3, [r3, #20]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d004      	beq.n	8012006 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	3304      	adds	r3, #4
 8012000:	4618      	mov	r0, r3
 8012002:	f7fd fd99 	bl	800fb38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012006:	463b      	mov	r3, r7
 8012008:	4618      	mov	r0, r3
 801200a:	f7ff ff6b 	bl	8011ee4 <prvSampleTimeNow>
 801200e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b09      	cmp	r3, #9
 8012014:	f200 8097 	bhi.w	8012146 <prvProcessReceivedCommands+0x19e>
 8012018:	a201      	add	r2, pc, #4	; (adr r2, 8012020 <prvProcessReceivedCommands+0x78>)
 801201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801201e:	bf00      	nop
 8012020:	08012049 	.word	0x08012049
 8012024:	08012049 	.word	0x08012049
 8012028:	08012049 	.word	0x08012049
 801202c:	080120bd 	.word	0x080120bd
 8012030:	080120d1 	.word	0x080120d1
 8012034:	0801211b 	.word	0x0801211b
 8012038:	08012049 	.word	0x08012049
 801203c:	08012049 	.word	0x08012049
 8012040:	080120bd 	.word	0x080120bd
 8012044:	080120d1 	.word	0x080120d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801204e:	f043 0301 	orr.w	r3, r3, #1
 8012052:	b2da      	uxtb	r2, r3
 8012054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801205a:	68ba      	ldr	r2, [r7, #8]
 801205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205e:	699b      	ldr	r3, [r3, #24]
 8012060:	18d1      	adds	r1, r2, r3
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012068:	f7ff ff5c 	bl	8011f24 <prvInsertTimerInActiveList>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d069      	beq.n	8012146 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	6a1b      	ldr	r3, [r3, #32]
 8012076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012080:	f003 0304 	and.w	r3, r3, #4
 8012084:	2b00      	cmp	r3, #0
 8012086:	d05e      	beq.n	8012146 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012088:	68ba      	ldr	r2, [r7, #8]
 801208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208c:	699b      	ldr	r3, [r3, #24]
 801208e:	441a      	add	r2, r3
 8012090:	2300      	movs	r3, #0
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	2300      	movs	r3, #0
 8012096:	2100      	movs	r1, #0
 8012098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801209a:	f7ff fe05 	bl	8011ca8 <xTimerGenericCommand>
 801209e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80120a0:	6a3b      	ldr	r3, [r7, #32]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d14f      	bne.n	8012146 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80120a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120aa:	f383 8811 	msr	BASEPRI, r3
 80120ae:	f3bf 8f6f 	isb	sy
 80120b2:	f3bf 8f4f 	dsb	sy
 80120b6:	61bb      	str	r3, [r7, #24]
}
 80120b8:	bf00      	nop
 80120ba:	e7fe      	b.n	80120ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120c2:	f023 0301 	bic.w	r3, r3, #1
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80120ce:	e03a      	b.n	8012146 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120d6:	f043 0301 	orr.w	r3, r3, #1
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80120e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10a      	bne.n	8012106 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80120f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	617b      	str	r3, [r7, #20]
}
 8012102:	bf00      	nop
 8012104:	e7fe      	b.n	8012104 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012108:	699a      	ldr	r2, [r3, #24]
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	18d1      	adds	r1, r2, r3
 801210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012114:	f7ff ff06 	bl	8011f24 <prvInsertTimerInActiveList>
					break;
 8012118:	e015      	b.n	8012146 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012120:	f003 0302 	and.w	r3, r3, #2
 8012124:	2b00      	cmp	r3, #0
 8012126:	d103      	bne.n	8012130 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801212a:	f000 fbe1 	bl	80128f0 <vPortFree>
 801212e:	e00a      	b.n	8012146 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012136:	f023 0301 	bic.w	r3, r3, #1
 801213a:	b2da      	uxtb	r2, r3
 801213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012142:	e000      	b.n	8012146 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012146:	4b08      	ldr	r3, [pc, #32]	; (8012168 <prvProcessReceivedCommands+0x1c0>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	1d39      	adds	r1, r7, #4
 801214c:	2200      	movs	r2, #0
 801214e:	4618      	mov	r0, r3
 8012150:	f7fe f8ea 	bl	8010328 <xQueueReceive>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	f47f af2a 	bne.w	8011fb0 <prvProcessReceivedCommands+0x8>
	}
}
 801215c:	bf00      	nop
 801215e:	bf00      	nop
 8012160:	3730      	adds	r7, #48	; 0x30
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	24008e70 	.word	0x24008e70

0801216c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b088      	sub	sp, #32
 8012170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012172:	e048      	b.n	8012206 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012174:	4b2d      	ldr	r3, [pc, #180]	; (801222c <prvSwitchTimerLists+0xc0>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801217e:	4b2b      	ldr	r3, [pc, #172]	; (801222c <prvSwitchTimerLists+0xc0>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	3304      	adds	r3, #4
 801218c:	4618      	mov	r0, r3
 801218e:	f7fd fcd3 	bl	800fb38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	6a1b      	ldr	r3, [r3, #32]
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121a0:	f003 0304 	and.w	r3, r3, #4
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d02e      	beq.n	8012206 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	699b      	ldr	r3, [r3, #24]
 80121ac:	693a      	ldr	r2, [r7, #16]
 80121ae:	4413      	add	r3, r2
 80121b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d90e      	bls.n	80121d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121c6:	4b19      	ldr	r3, [pc, #100]	; (801222c <prvSwitchTimerLists+0xc0>)
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	3304      	adds	r3, #4
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fd fc78 	bl	800fac6 <vListInsert>
 80121d6:	e016      	b.n	8012206 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80121d8:	2300      	movs	r3, #0
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	2300      	movs	r3, #0
 80121de:	693a      	ldr	r2, [r7, #16]
 80121e0:	2100      	movs	r1, #0
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7ff fd60 	bl	8011ca8 <xTimerGenericCommand>
 80121e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10a      	bne.n	8012206 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80121f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	603b      	str	r3, [r7, #0]
}
 8012202:	bf00      	nop
 8012204:	e7fe      	b.n	8012204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012206:	4b09      	ldr	r3, [pc, #36]	; (801222c <prvSwitchTimerLists+0xc0>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1b1      	bne.n	8012174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012210:	4b06      	ldr	r3, [pc, #24]	; (801222c <prvSwitchTimerLists+0xc0>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012216:	4b06      	ldr	r3, [pc, #24]	; (8012230 <prvSwitchTimerLists+0xc4>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a04      	ldr	r2, [pc, #16]	; (801222c <prvSwitchTimerLists+0xc0>)
 801221c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801221e:	4a04      	ldr	r2, [pc, #16]	; (8012230 <prvSwitchTimerLists+0xc4>)
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	6013      	str	r3, [r2, #0]
}
 8012224:	bf00      	nop
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	24008e68 	.word	0x24008e68
 8012230:	24008e6c 	.word	0x24008e6c

08012234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801223a:	f000 f96b 	bl	8012514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801223e:	4b15      	ldr	r3, [pc, #84]	; (8012294 <prvCheckForValidListAndQueue+0x60>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d120      	bne.n	8012288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012246:	4814      	ldr	r0, [pc, #80]	; (8012298 <prvCheckForValidListAndQueue+0x64>)
 8012248:	f7fd fbec 	bl	800fa24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801224c:	4813      	ldr	r0, [pc, #76]	; (801229c <prvCheckForValidListAndQueue+0x68>)
 801224e:	f7fd fbe9 	bl	800fa24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012252:	4b13      	ldr	r3, [pc, #76]	; (80122a0 <prvCheckForValidListAndQueue+0x6c>)
 8012254:	4a10      	ldr	r2, [pc, #64]	; (8012298 <prvCheckForValidListAndQueue+0x64>)
 8012256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012258:	4b12      	ldr	r3, [pc, #72]	; (80122a4 <prvCheckForValidListAndQueue+0x70>)
 801225a:	4a10      	ldr	r2, [pc, #64]	; (801229c <prvCheckForValidListAndQueue+0x68>)
 801225c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801225e:	2300      	movs	r3, #0
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	4b11      	ldr	r3, [pc, #68]	; (80122a8 <prvCheckForValidListAndQueue+0x74>)
 8012264:	4a11      	ldr	r2, [pc, #68]	; (80122ac <prvCheckForValidListAndQueue+0x78>)
 8012266:	2110      	movs	r1, #16
 8012268:	200a      	movs	r0, #10
 801226a:	f7fd fcf7 	bl	800fc5c <xQueueGenericCreateStatic>
 801226e:	4603      	mov	r3, r0
 8012270:	4a08      	ldr	r2, [pc, #32]	; (8012294 <prvCheckForValidListAndQueue+0x60>)
 8012272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012274:	4b07      	ldr	r3, [pc, #28]	; (8012294 <prvCheckForValidListAndQueue+0x60>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d005      	beq.n	8012288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801227c:	4b05      	ldr	r3, [pc, #20]	; (8012294 <prvCheckForValidListAndQueue+0x60>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	490b      	ldr	r1, [pc, #44]	; (80122b0 <prvCheckForValidListAndQueue+0x7c>)
 8012282:	4618      	mov	r0, r3
 8012284:	f7fe fc08 	bl	8010a98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012288:	f000 f974 	bl	8012574 <vPortExitCritical>
}
 801228c:	bf00      	nop
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	24008e70 	.word	0x24008e70
 8012298:	24008e40 	.word	0x24008e40
 801229c:	24008e54 	.word	0x24008e54
 80122a0:	24008e68 	.word	0x24008e68
 80122a4:	24008e6c 	.word	0x24008e6c
 80122a8:	24008f1c 	.word	0x24008f1c
 80122ac:	24008e7c 	.word	0x24008e7c
 80122b0:	08013570 	.word	0x08013570

080122b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122b4:	b480      	push	{r7}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3b04      	subs	r3, #4
 80122c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80122cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	3b04      	subs	r3, #4
 80122d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	f023 0201 	bic.w	r2, r3, #1
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	3b04      	subs	r3, #4
 80122e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80122e4:	4a0c      	ldr	r2, [pc, #48]	; (8012318 <pxPortInitialiseStack+0x64>)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	3b14      	subs	r3, #20
 80122ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	3b04      	subs	r3, #4
 80122fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f06f 0202 	mvn.w	r2, #2
 8012302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	3b20      	subs	r3, #32
 8012308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801230a:	68fb      	ldr	r3, [r7, #12]
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr
 8012318:	0801231d 	.word	0x0801231d

0801231c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801231c:	b480      	push	{r7}
 801231e:	b085      	sub	sp, #20
 8012320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012322:	2300      	movs	r3, #0
 8012324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012326:	4b12      	ldr	r3, [pc, #72]	; (8012370 <prvTaskExitError+0x54>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232e:	d00a      	beq.n	8012346 <prvTaskExitError+0x2a>
	__asm volatile
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	f383 8811 	msr	BASEPRI, r3
 8012338:	f3bf 8f6f 	isb	sy
 801233c:	f3bf 8f4f 	dsb	sy
 8012340:	60fb      	str	r3, [r7, #12]
}
 8012342:	bf00      	nop
 8012344:	e7fe      	b.n	8012344 <prvTaskExitError+0x28>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	60bb      	str	r3, [r7, #8]
}
 8012358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801235a:	bf00      	nop
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d0fc      	beq.n	801235c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012362:	bf00      	nop
 8012364:	bf00      	nop
 8012366:	3714      	adds	r7, #20
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	2400803c 	.word	0x2400803c
	...

08012380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012380:	4b07      	ldr	r3, [pc, #28]	; (80123a0 <pxCurrentTCBConst2>)
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	f380 8809 	msr	PSP, r0
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f04f 0000 	mov.w	r0, #0
 8012396:	f380 8811 	msr	BASEPRI, r0
 801239a:	4770      	bx	lr
 801239c:	f3af 8000 	nop.w

080123a0 <pxCurrentTCBConst2>:
 80123a0:	24008940 	.word	0x24008940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123a4:	bf00      	nop
 80123a6:	bf00      	nop

080123a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80123a8:	4808      	ldr	r0, [pc, #32]	; (80123cc <prvPortStartFirstTask+0x24>)
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	6800      	ldr	r0, [r0, #0]
 80123ae:	f380 8808 	msr	MSP, r0
 80123b2:	f04f 0000 	mov.w	r0, #0
 80123b6:	f380 8814 	msr	CONTROL, r0
 80123ba:	b662      	cpsie	i
 80123bc:	b661      	cpsie	f
 80123be:	f3bf 8f4f 	dsb	sy
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	df00      	svc	0
 80123c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80123ca:	bf00      	nop
 80123cc:	e000ed08 	.word	0xe000ed08

080123d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b086      	sub	sp, #24
 80123d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80123d6:	4b46      	ldr	r3, [pc, #280]	; (80124f0 <xPortStartScheduler+0x120>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a46      	ldr	r2, [pc, #280]	; (80124f4 <xPortStartScheduler+0x124>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d10a      	bne.n	80123f6 <xPortStartScheduler+0x26>
	__asm volatile
 80123e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e4:	f383 8811 	msr	BASEPRI, r3
 80123e8:	f3bf 8f6f 	isb	sy
 80123ec:	f3bf 8f4f 	dsb	sy
 80123f0:	613b      	str	r3, [r7, #16]
}
 80123f2:	bf00      	nop
 80123f4:	e7fe      	b.n	80123f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80123f6:	4b3e      	ldr	r3, [pc, #248]	; (80124f0 <xPortStartScheduler+0x120>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4a3f      	ldr	r2, [pc, #252]	; (80124f8 <xPortStartScheduler+0x128>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d10a      	bne.n	8012416 <xPortStartScheduler+0x46>
	__asm volatile
 8012400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	60fb      	str	r3, [r7, #12]
}
 8012412:	bf00      	nop
 8012414:	e7fe      	b.n	8012414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012416:	4b39      	ldr	r3, [pc, #228]	; (80124fc <xPortStartScheduler+0x12c>)
 8012418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	b2db      	uxtb	r3, r3
 8012420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	22ff      	movs	r2, #255	; 0xff
 8012426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	b2db      	uxtb	r3, r3
 801242e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012430:	78fb      	ldrb	r3, [r7, #3]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012438:	b2da      	uxtb	r2, r3
 801243a:	4b31      	ldr	r3, [pc, #196]	; (8012500 <xPortStartScheduler+0x130>)
 801243c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801243e:	4b31      	ldr	r3, [pc, #196]	; (8012504 <xPortStartScheduler+0x134>)
 8012440:	2207      	movs	r2, #7
 8012442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012444:	e009      	b.n	801245a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012446:	4b2f      	ldr	r3, [pc, #188]	; (8012504 <xPortStartScheduler+0x134>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3b01      	subs	r3, #1
 801244c:	4a2d      	ldr	r2, [pc, #180]	; (8012504 <xPortStartScheduler+0x134>)
 801244e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	b2db      	uxtb	r3, r3
 8012454:	005b      	lsls	r3, r3, #1
 8012456:	b2db      	uxtb	r3, r3
 8012458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801245a:	78fb      	ldrb	r3, [r7, #3]
 801245c:	b2db      	uxtb	r3, r3
 801245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012462:	2b80      	cmp	r3, #128	; 0x80
 8012464:	d0ef      	beq.n	8012446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012466:	4b27      	ldr	r3, [pc, #156]	; (8012504 <xPortStartScheduler+0x134>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f1c3 0307 	rsb	r3, r3, #7
 801246e:	2b04      	cmp	r3, #4
 8012470:	d00a      	beq.n	8012488 <xPortStartScheduler+0xb8>
	__asm volatile
 8012472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012476:	f383 8811 	msr	BASEPRI, r3
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	f3bf 8f4f 	dsb	sy
 8012482:	60bb      	str	r3, [r7, #8]
}
 8012484:	bf00      	nop
 8012486:	e7fe      	b.n	8012486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012488:	4b1e      	ldr	r3, [pc, #120]	; (8012504 <xPortStartScheduler+0x134>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	021b      	lsls	r3, r3, #8
 801248e:	4a1d      	ldr	r2, [pc, #116]	; (8012504 <xPortStartScheduler+0x134>)
 8012490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012492:	4b1c      	ldr	r3, [pc, #112]	; (8012504 <xPortStartScheduler+0x134>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801249a:	4a1a      	ldr	r2, [pc, #104]	; (8012504 <xPortStartScheduler+0x134>)
 801249c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80124a6:	4b18      	ldr	r3, [pc, #96]	; (8012508 <xPortStartScheduler+0x138>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a17      	ldr	r2, [pc, #92]	; (8012508 <xPortStartScheduler+0x138>)
 80124ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80124b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80124b2:	4b15      	ldr	r3, [pc, #84]	; (8012508 <xPortStartScheduler+0x138>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4a14      	ldr	r2, [pc, #80]	; (8012508 <xPortStartScheduler+0x138>)
 80124b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80124bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80124be:	f000 f8dd 	bl	801267c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80124c2:	4b12      	ldr	r3, [pc, #72]	; (801250c <xPortStartScheduler+0x13c>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80124c8:	f000 f8fc 	bl	80126c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80124cc:	4b10      	ldr	r3, [pc, #64]	; (8012510 <xPortStartScheduler+0x140>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4a0f      	ldr	r2, [pc, #60]	; (8012510 <xPortStartScheduler+0x140>)
 80124d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80124d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80124d8:	f7ff ff66 	bl	80123a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80124dc:	f7fe ff48 	bl	8011370 <vTaskSwitchContext>
	prvTaskExitError();
 80124e0:	f7ff ff1c 	bl	801231c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3718      	adds	r7, #24
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	e000ed00 	.word	0xe000ed00
 80124f4:	410fc271 	.word	0x410fc271
 80124f8:	410fc270 	.word	0x410fc270
 80124fc:	e000e400 	.word	0xe000e400
 8012500:	24008f6c 	.word	0x24008f6c
 8012504:	24008f70 	.word	0x24008f70
 8012508:	e000ed20 	.word	0xe000ed20
 801250c:	2400803c 	.word	0x2400803c
 8012510:	e000ef34 	.word	0xe000ef34

08012514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012514:	b480      	push	{r7}
 8012516:	b083      	sub	sp, #12
 8012518:	af00      	add	r7, sp, #0
	__asm volatile
 801251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801251e:	f383 8811 	msr	BASEPRI, r3
 8012522:	f3bf 8f6f 	isb	sy
 8012526:	f3bf 8f4f 	dsb	sy
 801252a:	607b      	str	r3, [r7, #4]
}
 801252c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801252e:	4b0f      	ldr	r3, [pc, #60]	; (801256c <vPortEnterCritical+0x58>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	3301      	adds	r3, #1
 8012534:	4a0d      	ldr	r2, [pc, #52]	; (801256c <vPortEnterCritical+0x58>)
 8012536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012538:	4b0c      	ldr	r3, [pc, #48]	; (801256c <vPortEnterCritical+0x58>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d10f      	bne.n	8012560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012540:	4b0b      	ldr	r3, [pc, #44]	; (8012570 <vPortEnterCritical+0x5c>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	b2db      	uxtb	r3, r3
 8012546:	2b00      	cmp	r3, #0
 8012548:	d00a      	beq.n	8012560 <vPortEnterCritical+0x4c>
	__asm volatile
 801254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801254e:	f383 8811 	msr	BASEPRI, r3
 8012552:	f3bf 8f6f 	isb	sy
 8012556:	f3bf 8f4f 	dsb	sy
 801255a:	603b      	str	r3, [r7, #0]
}
 801255c:	bf00      	nop
 801255e:	e7fe      	b.n	801255e <vPortEnterCritical+0x4a>
	}
}
 8012560:	bf00      	nop
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr
 801256c:	2400803c 	.word	0x2400803c
 8012570:	e000ed04 	.word	0xe000ed04

08012574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012574:	b480      	push	{r7}
 8012576:	b083      	sub	sp, #12
 8012578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801257a:	4b12      	ldr	r3, [pc, #72]	; (80125c4 <vPortExitCritical+0x50>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10a      	bne.n	8012598 <vPortExitCritical+0x24>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012586:	f383 8811 	msr	BASEPRI, r3
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	f3bf 8f4f 	dsb	sy
 8012592:	607b      	str	r3, [r7, #4]
}
 8012594:	bf00      	nop
 8012596:	e7fe      	b.n	8012596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012598:	4b0a      	ldr	r3, [pc, #40]	; (80125c4 <vPortExitCritical+0x50>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3b01      	subs	r3, #1
 801259e:	4a09      	ldr	r2, [pc, #36]	; (80125c4 <vPortExitCritical+0x50>)
 80125a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80125a2:	4b08      	ldr	r3, [pc, #32]	; (80125c4 <vPortExitCritical+0x50>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d105      	bne.n	80125b6 <vPortExitCritical+0x42>
 80125aa:	2300      	movs	r3, #0
 80125ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	f383 8811 	msr	BASEPRI, r3
}
 80125b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80125b6:	bf00      	nop
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	2400803c 	.word	0x2400803c
	...

080125d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80125d0:	f3ef 8009 	mrs	r0, PSP
 80125d4:	f3bf 8f6f 	isb	sy
 80125d8:	4b15      	ldr	r3, [pc, #84]	; (8012630 <pxCurrentTCBConst>)
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	f01e 0f10 	tst.w	lr, #16
 80125e0:	bf08      	it	eq
 80125e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80125e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ea:	6010      	str	r0, [r2, #0]
 80125ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80125f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80125f4:	f380 8811 	msr	BASEPRI, r0
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f7fe feb6 	bl	8011370 <vTaskSwitchContext>
 8012604:	f04f 0000 	mov.w	r0, #0
 8012608:	f380 8811 	msr	BASEPRI, r0
 801260c:	bc09      	pop	{r0, r3}
 801260e:	6819      	ldr	r1, [r3, #0]
 8012610:	6808      	ldr	r0, [r1, #0]
 8012612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012616:	f01e 0f10 	tst.w	lr, #16
 801261a:	bf08      	it	eq
 801261c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012620:	f380 8809 	msr	PSP, r0
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	f3af 8000 	nop.w

08012630 <pxCurrentTCBConst>:
 8012630:	24008940 	.word	0x24008940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012634:	bf00      	nop
 8012636:	bf00      	nop

08012638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
	__asm volatile
 801263e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012642:	f383 8811 	msr	BASEPRI, r3
 8012646:	f3bf 8f6f 	isb	sy
 801264a:	f3bf 8f4f 	dsb	sy
 801264e:	607b      	str	r3, [r7, #4]
}
 8012650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012652:	f7fe fdd3 	bl	80111fc <xTaskIncrementTick>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d003      	beq.n	8012664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801265c:	4b06      	ldr	r3, [pc, #24]	; (8012678 <xPortSysTickHandler+0x40>)
 801265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012662:	601a      	str	r2, [r3, #0]
 8012664:	2300      	movs	r3, #0
 8012666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	f383 8811 	msr	BASEPRI, r3
}
 801266e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012670:	bf00      	nop
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	e000ed04 	.word	0xe000ed04

0801267c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801267c:	b480      	push	{r7}
 801267e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012680:	4b0b      	ldr	r3, [pc, #44]	; (80126b0 <vPortSetupTimerInterrupt+0x34>)
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012686:	4b0b      	ldr	r3, [pc, #44]	; (80126b4 <vPortSetupTimerInterrupt+0x38>)
 8012688:	2200      	movs	r2, #0
 801268a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801268c:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <vPortSetupTimerInterrupt+0x3c>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4a0a      	ldr	r2, [pc, #40]	; (80126bc <vPortSetupTimerInterrupt+0x40>)
 8012692:	fba2 2303 	umull	r2, r3, r2, r3
 8012696:	099b      	lsrs	r3, r3, #6
 8012698:	4a09      	ldr	r2, [pc, #36]	; (80126c0 <vPortSetupTimerInterrupt+0x44>)
 801269a:	3b01      	subs	r3, #1
 801269c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801269e:	4b04      	ldr	r3, [pc, #16]	; (80126b0 <vPortSetupTimerInterrupt+0x34>)
 80126a0:	2207      	movs	r2, #7
 80126a2:	601a      	str	r2, [r3, #0]
}
 80126a4:	bf00      	nop
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	e000e010 	.word	0xe000e010
 80126b4:	e000e018 	.word	0xe000e018
 80126b8:	2400802c 	.word	0x2400802c
 80126bc:	10624dd3 	.word	0x10624dd3
 80126c0:	e000e014 	.word	0xe000e014

080126c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80126c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80126d4 <vPortEnableVFP+0x10>
 80126c8:	6801      	ldr	r1, [r0, #0]
 80126ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80126ce:	6001      	str	r1, [r0, #0]
 80126d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80126d2:	bf00      	nop
 80126d4:	e000ed88 	.word	0xe000ed88

080126d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80126de:	f3ef 8305 	mrs	r3, IPSR
 80126e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2b0f      	cmp	r3, #15
 80126e8:	d914      	bls.n	8012714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80126ea:	4a17      	ldr	r2, [pc, #92]	; (8012748 <vPortValidateInterruptPriority+0x70>)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	4413      	add	r3, r2
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80126f4:	4b15      	ldr	r3, [pc, #84]	; (801274c <vPortValidateInterruptPriority+0x74>)
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	7afa      	ldrb	r2, [r7, #11]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d20a      	bcs.n	8012714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80126fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012702:	f383 8811 	msr	BASEPRI, r3
 8012706:	f3bf 8f6f 	isb	sy
 801270a:	f3bf 8f4f 	dsb	sy
 801270e:	607b      	str	r3, [r7, #4]
}
 8012710:	bf00      	nop
 8012712:	e7fe      	b.n	8012712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012714:	4b0e      	ldr	r3, [pc, #56]	; (8012750 <vPortValidateInterruptPriority+0x78>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801271c:	4b0d      	ldr	r3, [pc, #52]	; (8012754 <vPortValidateInterruptPriority+0x7c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	429a      	cmp	r2, r3
 8012722:	d90a      	bls.n	801273a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012728:	f383 8811 	msr	BASEPRI, r3
 801272c:	f3bf 8f6f 	isb	sy
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	603b      	str	r3, [r7, #0]
}
 8012736:	bf00      	nop
 8012738:	e7fe      	b.n	8012738 <vPortValidateInterruptPriority+0x60>
	}
 801273a:	bf00      	nop
 801273c:	3714      	adds	r7, #20
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	e000e3f0 	.word	0xe000e3f0
 801274c:	24008f6c 	.word	0x24008f6c
 8012750:	e000ed0c 	.word	0xe000ed0c
 8012754:	24008f70 	.word	0x24008f70

08012758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08a      	sub	sp, #40	; 0x28
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012760:	2300      	movs	r3, #0
 8012762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012764:	f7fe fc7c 	bl	8011060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012768:	4b5b      	ldr	r3, [pc, #364]	; (80128d8 <pvPortMalloc+0x180>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d101      	bne.n	8012774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012770:	f000 f920 	bl	80129b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012774:	4b59      	ldr	r3, [pc, #356]	; (80128dc <pvPortMalloc+0x184>)
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4013      	ands	r3, r2
 801277c:	2b00      	cmp	r3, #0
 801277e:	f040 8093 	bne.w	80128a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d01d      	beq.n	80127c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012788:	2208      	movs	r2, #8
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4413      	add	r3, r2
 801278e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f003 0307 	and.w	r3, r3, #7
 8012796:	2b00      	cmp	r3, #0
 8012798:	d014      	beq.n	80127c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f023 0307 	bic.w	r3, r3, #7
 80127a0:	3308      	adds	r3, #8
 80127a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f003 0307 	and.w	r3, r3, #7
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d00a      	beq.n	80127c4 <pvPortMalloc+0x6c>
	__asm volatile
 80127ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	617b      	str	r3, [r7, #20]
}
 80127c0:	bf00      	nop
 80127c2:	e7fe      	b.n	80127c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d06e      	beq.n	80128a8 <pvPortMalloc+0x150>
 80127ca:	4b45      	ldr	r3, [pc, #276]	; (80128e0 <pvPortMalloc+0x188>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d869      	bhi.n	80128a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80127d4:	4b43      	ldr	r3, [pc, #268]	; (80128e4 <pvPortMalloc+0x18c>)
 80127d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80127d8:	4b42      	ldr	r3, [pc, #264]	; (80128e4 <pvPortMalloc+0x18c>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127de:	e004      	b.n	80127ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80127e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d903      	bls.n	80127fc <pvPortMalloc+0xa4>
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1f1      	bne.n	80127e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80127fc:	4b36      	ldr	r3, [pc, #216]	; (80128d8 <pvPortMalloc+0x180>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012802:	429a      	cmp	r2, r3
 8012804:	d050      	beq.n	80128a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012806:	6a3b      	ldr	r3, [r7, #32]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2208      	movs	r2, #8
 801280c:	4413      	add	r3, r2
 801280e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	6a3b      	ldr	r3, [r7, #32]
 8012816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281a:	685a      	ldr	r2, [r3, #4]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	1ad2      	subs	r2, r2, r3
 8012820:	2308      	movs	r3, #8
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	429a      	cmp	r2, r3
 8012826:	d91f      	bls.n	8012868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4413      	add	r3, r2
 801282e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	f003 0307 	and.w	r3, r3, #7
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00a      	beq.n	8012850 <pvPortMalloc+0xf8>
	__asm volatile
 801283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	613b      	str	r3, [r7, #16]
}
 801284c:	bf00      	nop
 801284e:	e7fe      	b.n	801284e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	685a      	ldr	r2, [r3, #4]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	1ad2      	subs	r2, r2, r3
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012862:	69b8      	ldr	r0, [r7, #24]
 8012864:	f000 f908 	bl	8012a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012868:	4b1d      	ldr	r3, [pc, #116]	; (80128e0 <pvPortMalloc+0x188>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	4a1b      	ldr	r2, [pc, #108]	; (80128e0 <pvPortMalloc+0x188>)
 8012874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012876:	4b1a      	ldr	r3, [pc, #104]	; (80128e0 <pvPortMalloc+0x188>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	4b1b      	ldr	r3, [pc, #108]	; (80128e8 <pvPortMalloc+0x190>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	429a      	cmp	r2, r3
 8012880:	d203      	bcs.n	801288a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012882:	4b17      	ldr	r3, [pc, #92]	; (80128e0 <pvPortMalloc+0x188>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4a18      	ldr	r2, [pc, #96]	; (80128e8 <pvPortMalloc+0x190>)
 8012888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	685a      	ldr	r2, [r3, #4]
 801288e:	4b13      	ldr	r3, [pc, #76]	; (80128dc <pvPortMalloc+0x184>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	431a      	orrs	r2, r3
 8012894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	2200      	movs	r2, #0
 801289c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801289e:	4b13      	ldr	r3, [pc, #76]	; (80128ec <pvPortMalloc+0x194>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	3301      	adds	r3, #1
 80128a4:	4a11      	ldr	r2, [pc, #68]	; (80128ec <pvPortMalloc+0x194>)
 80128a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80128a8:	f7fe fbe8 	bl	801107c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	f003 0307 	and.w	r3, r3, #7
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00a      	beq.n	80128cc <pvPortMalloc+0x174>
	__asm volatile
 80128b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	60fb      	str	r3, [r7, #12]
}
 80128c8:	bf00      	nop
 80128ca:	e7fe      	b.n	80128ca <pvPortMalloc+0x172>
	return pvReturn;
 80128cc:	69fb      	ldr	r3, [r7, #28]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3728      	adds	r7, #40	; 0x28
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	2400cb7c 	.word	0x2400cb7c
 80128dc:	2400cb90 	.word	0x2400cb90
 80128e0:	2400cb80 	.word	0x2400cb80
 80128e4:	2400cb74 	.word	0x2400cb74
 80128e8:	2400cb84 	.word	0x2400cb84
 80128ec:	2400cb88 	.word	0x2400cb88

080128f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b086      	sub	sp, #24
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d04d      	beq.n	801299e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012902:	2308      	movs	r3, #8
 8012904:	425b      	negs	r3, r3
 8012906:	697a      	ldr	r2, [r7, #20]
 8012908:	4413      	add	r3, r2
 801290a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	685a      	ldr	r2, [r3, #4]
 8012914:	4b24      	ldr	r3, [pc, #144]	; (80129a8 <vPortFree+0xb8>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	4013      	ands	r3, r2
 801291a:	2b00      	cmp	r3, #0
 801291c:	d10a      	bne.n	8012934 <vPortFree+0x44>
	__asm volatile
 801291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012922:	f383 8811 	msr	BASEPRI, r3
 8012926:	f3bf 8f6f 	isb	sy
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	60fb      	str	r3, [r7, #12]
}
 8012930:	bf00      	nop
 8012932:	e7fe      	b.n	8012932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00a      	beq.n	8012952 <vPortFree+0x62>
	__asm volatile
 801293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	60bb      	str	r3, [r7, #8]
}
 801294e:	bf00      	nop
 8012950:	e7fe      	b.n	8012950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	685a      	ldr	r2, [r3, #4]
 8012956:	4b14      	ldr	r3, [pc, #80]	; (80129a8 <vPortFree+0xb8>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4013      	ands	r3, r2
 801295c:	2b00      	cmp	r3, #0
 801295e:	d01e      	beq.n	801299e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d11a      	bne.n	801299e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	4b0e      	ldr	r3, [pc, #56]	; (80129a8 <vPortFree+0xb8>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	43db      	mvns	r3, r3
 8012972:	401a      	ands	r2, r3
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012978:	f7fe fb72 	bl	8011060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	685a      	ldr	r2, [r3, #4]
 8012980:	4b0a      	ldr	r3, [pc, #40]	; (80129ac <vPortFree+0xbc>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4413      	add	r3, r2
 8012986:	4a09      	ldr	r2, [pc, #36]	; (80129ac <vPortFree+0xbc>)
 8012988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801298a:	6938      	ldr	r0, [r7, #16]
 801298c:	f000 f874 	bl	8012a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012990:	4b07      	ldr	r3, [pc, #28]	; (80129b0 <vPortFree+0xc0>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	4a06      	ldr	r2, [pc, #24]	; (80129b0 <vPortFree+0xc0>)
 8012998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801299a:	f7fe fb6f 	bl	801107c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801299e:	bf00      	nop
 80129a0:	3718      	adds	r7, #24
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	2400cb90 	.word	0x2400cb90
 80129ac:	2400cb80 	.word	0x2400cb80
 80129b0:	2400cb8c 	.word	0x2400cb8c

080129b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80129ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80129be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80129c0:	4b27      	ldr	r3, [pc, #156]	; (8012a60 <prvHeapInit+0xac>)
 80129c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	f003 0307 	and.w	r3, r3, #7
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00c      	beq.n	80129e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	3307      	adds	r3, #7
 80129d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	f023 0307 	bic.w	r3, r3, #7
 80129da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80129dc:	68ba      	ldr	r2, [r7, #8]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	4a1f      	ldr	r2, [pc, #124]	; (8012a60 <prvHeapInit+0xac>)
 80129e4:	4413      	add	r3, r2
 80129e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80129ec:	4a1d      	ldr	r2, [pc, #116]	; (8012a64 <prvHeapInit+0xb0>)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80129f2:	4b1c      	ldr	r3, [pc, #112]	; (8012a64 <prvHeapInit+0xb0>)
 80129f4:	2200      	movs	r2, #0
 80129f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	4413      	add	r3, r2
 80129fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a00:	2208      	movs	r2, #8
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	1a9b      	subs	r3, r3, r2
 8012a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f023 0307 	bic.w	r3, r3, #7
 8012a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	4a15      	ldr	r2, [pc, #84]	; (8012a68 <prvHeapInit+0xb4>)
 8012a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012a16:	4b14      	ldr	r3, [pc, #80]	; (8012a68 <prvHeapInit+0xb4>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a1e:	4b12      	ldr	r3, [pc, #72]	; (8012a68 <prvHeapInit+0xb4>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	1ad2      	subs	r2, r2, r3
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a34:	4b0c      	ldr	r3, [pc, #48]	; (8012a68 <prvHeapInit+0xb4>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	4a0a      	ldr	r2, [pc, #40]	; (8012a6c <prvHeapInit+0xb8>)
 8012a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	4a09      	ldr	r2, [pc, #36]	; (8012a70 <prvHeapInit+0xbc>)
 8012a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a4c:	4b09      	ldr	r3, [pc, #36]	; (8012a74 <prvHeapInit+0xc0>)
 8012a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012a52:	601a      	str	r2, [r3, #0]
}
 8012a54:	bf00      	nop
 8012a56:	3714      	adds	r7, #20
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr
 8012a60:	24008f74 	.word	0x24008f74
 8012a64:	2400cb74 	.word	0x2400cb74
 8012a68:	2400cb7c 	.word	0x2400cb7c
 8012a6c:	2400cb84 	.word	0x2400cb84
 8012a70:	2400cb80 	.word	0x2400cb80
 8012a74:	2400cb90 	.word	0x2400cb90

08012a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a80:	4b28      	ldr	r3, [pc, #160]	; (8012b24 <prvInsertBlockIntoFreeList+0xac>)
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	e002      	b.n	8012a8c <prvInsertBlockIntoFreeList+0x14>
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	60fb      	str	r3, [r7, #12]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d8f7      	bhi.n	8012a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	68ba      	ldr	r2, [r7, #8]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	687a      	ldr	r2, [r7, #4]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d108      	bne.n	8012aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	685a      	ldr	r2, [r3, #4]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	441a      	add	r2, r3
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	441a      	add	r2, r3
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d118      	bne.n	8012b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	4b15      	ldr	r3, [pc, #84]	; (8012b28 <prvInsertBlockIntoFreeList+0xb0>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d00d      	beq.n	8012af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	685a      	ldr	r2, [r3, #4]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	441a      	add	r2, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	601a      	str	r2, [r3, #0]
 8012af4:	e008      	b.n	8012b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012af6:	4b0c      	ldr	r3, [pc, #48]	; (8012b28 <prvInsertBlockIntoFreeList+0xb0>)
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	e003      	b.n	8012b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d002      	beq.n	8012b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b16:	bf00      	nop
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	2400cb74 	.word	0x2400cb74
 8012b28:	2400cb7c 	.word	0x2400cb7c

08012b2c <__errno>:
 8012b2c:	4b01      	ldr	r3, [pc, #4]	; (8012b34 <__errno+0x8>)
 8012b2e:	6818      	ldr	r0, [r3, #0]
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	24008040 	.word	0x24008040

08012b38 <__libc_init_array>:
 8012b38:	b570      	push	{r4, r5, r6, lr}
 8012b3a:	4d0d      	ldr	r5, [pc, #52]	; (8012b70 <__libc_init_array+0x38>)
 8012b3c:	4c0d      	ldr	r4, [pc, #52]	; (8012b74 <__libc_init_array+0x3c>)
 8012b3e:	1b64      	subs	r4, r4, r5
 8012b40:	10a4      	asrs	r4, r4, #2
 8012b42:	2600      	movs	r6, #0
 8012b44:	42a6      	cmp	r6, r4
 8012b46:	d109      	bne.n	8012b5c <__libc_init_array+0x24>
 8012b48:	4d0b      	ldr	r5, [pc, #44]	; (8012b78 <__libc_init_array+0x40>)
 8012b4a:	4c0c      	ldr	r4, [pc, #48]	; (8012b7c <__libc_init_array+0x44>)
 8012b4c:	f000 fcb8 	bl	80134c0 <_init>
 8012b50:	1b64      	subs	r4, r4, r5
 8012b52:	10a4      	asrs	r4, r4, #2
 8012b54:	2600      	movs	r6, #0
 8012b56:	42a6      	cmp	r6, r4
 8012b58:	d105      	bne.n	8012b66 <__libc_init_array+0x2e>
 8012b5a:	bd70      	pop	{r4, r5, r6, pc}
 8012b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b60:	4798      	blx	r3
 8012b62:	3601      	adds	r6, #1
 8012b64:	e7ee      	b.n	8012b44 <__libc_init_array+0xc>
 8012b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b6a:	4798      	blx	r3
 8012b6c:	3601      	adds	r6, #1
 8012b6e:	e7f2      	b.n	8012b56 <__libc_init_array+0x1e>
 8012b70:	0801372c 	.word	0x0801372c
 8012b74:	0801372c 	.word	0x0801372c
 8012b78:	0801372c 	.word	0x0801372c
 8012b7c:	08013730 	.word	0x08013730

08012b80 <__retarget_lock_acquire_recursive>:
 8012b80:	4770      	bx	lr

08012b82 <__retarget_lock_release_recursive>:
 8012b82:	4770      	bx	lr

08012b84 <memcpy>:
 8012b84:	440a      	add	r2, r1
 8012b86:	4291      	cmp	r1, r2
 8012b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b8c:	d100      	bne.n	8012b90 <memcpy+0xc>
 8012b8e:	4770      	bx	lr
 8012b90:	b510      	push	{r4, lr}
 8012b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b9a:	4291      	cmp	r1, r2
 8012b9c:	d1f9      	bne.n	8012b92 <memcpy+0xe>
 8012b9e:	bd10      	pop	{r4, pc}

08012ba0 <memset>:
 8012ba0:	4402      	add	r2, r0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d100      	bne.n	8012baa <memset+0xa>
 8012ba8:	4770      	bx	lr
 8012baa:	f803 1b01 	strb.w	r1, [r3], #1
 8012bae:	e7f9      	b.n	8012ba4 <memset+0x4>

08012bb0 <_malloc_r>:
 8012bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb2:	1ccd      	adds	r5, r1, #3
 8012bb4:	f025 0503 	bic.w	r5, r5, #3
 8012bb8:	3508      	adds	r5, #8
 8012bba:	2d0c      	cmp	r5, #12
 8012bbc:	bf38      	it	cc
 8012bbe:	250c      	movcc	r5, #12
 8012bc0:	2d00      	cmp	r5, #0
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	db01      	blt.n	8012bca <_malloc_r+0x1a>
 8012bc6:	42a9      	cmp	r1, r5
 8012bc8:	d903      	bls.n	8012bd2 <_malloc_r+0x22>
 8012bca:	230c      	movs	r3, #12
 8012bcc:	6033      	str	r3, [r6, #0]
 8012bce:	2000      	movs	r0, #0
 8012bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd2:	f000 f8e1 	bl	8012d98 <__malloc_lock>
 8012bd6:	4921      	ldr	r1, [pc, #132]	; (8012c5c <_malloc_r+0xac>)
 8012bd8:	680a      	ldr	r2, [r1, #0]
 8012bda:	4614      	mov	r4, r2
 8012bdc:	b99c      	cbnz	r4, 8012c06 <_malloc_r+0x56>
 8012bde:	4f20      	ldr	r7, [pc, #128]	; (8012c60 <_malloc_r+0xb0>)
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	b923      	cbnz	r3, 8012bee <_malloc_r+0x3e>
 8012be4:	4621      	mov	r1, r4
 8012be6:	4630      	mov	r0, r6
 8012be8:	f000 f8a6 	bl	8012d38 <_sbrk_r>
 8012bec:	6038      	str	r0, [r7, #0]
 8012bee:	4629      	mov	r1, r5
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f000 f8a1 	bl	8012d38 <_sbrk_r>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	d123      	bne.n	8012c42 <_malloc_r+0x92>
 8012bfa:	230c      	movs	r3, #12
 8012bfc:	6033      	str	r3, [r6, #0]
 8012bfe:	4630      	mov	r0, r6
 8012c00:	f000 f8d0 	bl	8012da4 <__malloc_unlock>
 8012c04:	e7e3      	b.n	8012bce <_malloc_r+0x1e>
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	1b5b      	subs	r3, r3, r5
 8012c0a:	d417      	bmi.n	8012c3c <_malloc_r+0x8c>
 8012c0c:	2b0b      	cmp	r3, #11
 8012c0e:	d903      	bls.n	8012c18 <_malloc_r+0x68>
 8012c10:	6023      	str	r3, [r4, #0]
 8012c12:	441c      	add	r4, r3
 8012c14:	6025      	str	r5, [r4, #0]
 8012c16:	e004      	b.n	8012c22 <_malloc_r+0x72>
 8012c18:	6863      	ldr	r3, [r4, #4]
 8012c1a:	42a2      	cmp	r2, r4
 8012c1c:	bf0c      	ite	eq
 8012c1e:	600b      	streq	r3, [r1, #0]
 8012c20:	6053      	strne	r3, [r2, #4]
 8012c22:	4630      	mov	r0, r6
 8012c24:	f000 f8be 	bl	8012da4 <__malloc_unlock>
 8012c28:	f104 000b 	add.w	r0, r4, #11
 8012c2c:	1d23      	adds	r3, r4, #4
 8012c2e:	f020 0007 	bic.w	r0, r0, #7
 8012c32:	1ac2      	subs	r2, r0, r3
 8012c34:	d0cc      	beq.n	8012bd0 <_malloc_r+0x20>
 8012c36:	1a1b      	subs	r3, r3, r0
 8012c38:	50a3      	str	r3, [r4, r2]
 8012c3a:	e7c9      	b.n	8012bd0 <_malloc_r+0x20>
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	6864      	ldr	r4, [r4, #4]
 8012c40:	e7cc      	b.n	8012bdc <_malloc_r+0x2c>
 8012c42:	1cc4      	adds	r4, r0, #3
 8012c44:	f024 0403 	bic.w	r4, r4, #3
 8012c48:	42a0      	cmp	r0, r4
 8012c4a:	d0e3      	beq.n	8012c14 <_malloc_r+0x64>
 8012c4c:	1a21      	subs	r1, r4, r0
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f000 f872 	bl	8012d38 <_sbrk_r>
 8012c54:	3001      	adds	r0, #1
 8012c56:	d1dd      	bne.n	8012c14 <_malloc_r+0x64>
 8012c58:	e7cf      	b.n	8012bfa <_malloc_r+0x4a>
 8012c5a:	bf00      	nop
 8012c5c:	2400cb94 	.word	0x2400cb94
 8012c60:	2400cb98 	.word	0x2400cb98

08012c64 <cleanup_glue>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	460c      	mov	r4, r1
 8012c68:	6809      	ldr	r1, [r1, #0]
 8012c6a:	4605      	mov	r5, r0
 8012c6c:	b109      	cbz	r1, 8012c72 <cleanup_glue+0xe>
 8012c6e:	f7ff fff9 	bl	8012c64 <cleanup_glue>
 8012c72:	4621      	mov	r1, r4
 8012c74:	4628      	mov	r0, r5
 8012c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c7a:	f000 b899 	b.w	8012db0 <_free_r>
	...

08012c80 <_reclaim_reent>:
 8012c80:	4b2c      	ldr	r3, [pc, #176]	; (8012d34 <_reclaim_reent+0xb4>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	4283      	cmp	r3, r0
 8012c86:	b570      	push	{r4, r5, r6, lr}
 8012c88:	4604      	mov	r4, r0
 8012c8a:	d051      	beq.n	8012d30 <_reclaim_reent+0xb0>
 8012c8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012c8e:	b143      	cbz	r3, 8012ca2 <_reclaim_reent+0x22>
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d14a      	bne.n	8012d2c <_reclaim_reent+0xac>
 8012c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c98:	6819      	ldr	r1, [r3, #0]
 8012c9a:	b111      	cbz	r1, 8012ca2 <_reclaim_reent+0x22>
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f000 f887 	bl	8012db0 <_free_r>
 8012ca2:	6961      	ldr	r1, [r4, #20]
 8012ca4:	b111      	cbz	r1, 8012cac <_reclaim_reent+0x2c>
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f000 f882 	bl	8012db0 <_free_r>
 8012cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012cae:	b111      	cbz	r1, 8012cb6 <_reclaim_reent+0x36>
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 f87d 	bl	8012db0 <_free_r>
 8012cb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012cb8:	b111      	cbz	r1, 8012cc0 <_reclaim_reent+0x40>
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 f878 	bl	8012db0 <_free_r>
 8012cc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012cc2:	b111      	cbz	r1, 8012cca <_reclaim_reent+0x4a>
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f000 f873 	bl	8012db0 <_free_r>
 8012cca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012ccc:	b111      	cbz	r1, 8012cd4 <_reclaim_reent+0x54>
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f000 f86e 	bl	8012db0 <_free_r>
 8012cd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012cd6:	b111      	cbz	r1, 8012cde <_reclaim_reent+0x5e>
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f000 f869 	bl	8012db0 <_free_r>
 8012cde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012ce0:	b111      	cbz	r1, 8012ce8 <_reclaim_reent+0x68>
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f000 f864 	bl	8012db0 <_free_r>
 8012ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cea:	b111      	cbz	r1, 8012cf2 <_reclaim_reent+0x72>
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 f85f 	bl	8012db0 <_free_r>
 8012cf2:	69a3      	ldr	r3, [r4, #24]
 8012cf4:	b1e3      	cbz	r3, 8012d30 <_reclaim_reent+0xb0>
 8012cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	4798      	blx	r3
 8012cfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012cfe:	b1b9      	cbz	r1, 8012d30 <_reclaim_reent+0xb0>
 8012d00:	4620      	mov	r0, r4
 8012d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d06:	f7ff bfad 	b.w	8012c64 <cleanup_glue>
 8012d0a:	5949      	ldr	r1, [r1, r5]
 8012d0c:	b941      	cbnz	r1, 8012d20 <_reclaim_reent+0xa0>
 8012d0e:	3504      	adds	r5, #4
 8012d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d12:	2d80      	cmp	r5, #128	; 0x80
 8012d14:	68d9      	ldr	r1, [r3, #12]
 8012d16:	d1f8      	bne.n	8012d0a <_reclaim_reent+0x8a>
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f000 f849 	bl	8012db0 <_free_r>
 8012d1e:	e7ba      	b.n	8012c96 <_reclaim_reent+0x16>
 8012d20:	680e      	ldr	r6, [r1, #0]
 8012d22:	4620      	mov	r0, r4
 8012d24:	f000 f844 	bl	8012db0 <_free_r>
 8012d28:	4631      	mov	r1, r6
 8012d2a:	e7ef      	b.n	8012d0c <_reclaim_reent+0x8c>
 8012d2c:	2500      	movs	r5, #0
 8012d2e:	e7ef      	b.n	8012d10 <_reclaim_reent+0x90>
 8012d30:	bd70      	pop	{r4, r5, r6, pc}
 8012d32:	bf00      	nop
 8012d34:	24008040 	.word	0x24008040

08012d38 <_sbrk_r>:
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	4d06      	ldr	r5, [pc, #24]	; (8012d54 <_sbrk_r+0x1c>)
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4604      	mov	r4, r0
 8012d40:	4608      	mov	r0, r1
 8012d42:	602b      	str	r3, [r5, #0]
 8012d44:	f7ee fc84 	bl	8001650 <_sbrk>
 8012d48:	1c43      	adds	r3, r0, #1
 8012d4a:	d102      	bne.n	8012d52 <_sbrk_r+0x1a>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	b103      	cbz	r3, 8012d52 <_sbrk_r+0x1a>
 8012d50:	6023      	str	r3, [r4, #0]
 8012d52:	bd38      	pop	{r3, r4, r5, pc}
 8012d54:	2400d614 	.word	0x2400d614

08012d58 <siprintf>:
 8012d58:	b40e      	push	{r1, r2, r3}
 8012d5a:	b500      	push	{lr}
 8012d5c:	b09c      	sub	sp, #112	; 0x70
 8012d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8012d60:	9002      	str	r0, [sp, #8]
 8012d62:	9006      	str	r0, [sp, #24]
 8012d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d68:	4809      	ldr	r0, [pc, #36]	; (8012d90 <siprintf+0x38>)
 8012d6a:	9107      	str	r1, [sp, #28]
 8012d6c:	9104      	str	r1, [sp, #16]
 8012d6e:	4909      	ldr	r1, [pc, #36]	; (8012d94 <siprintf+0x3c>)
 8012d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d74:	9105      	str	r1, [sp, #20]
 8012d76:	6800      	ldr	r0, [r0, #0]
 8012d78:	9301      	str	r3, [sp, #4]
 8012d7a:	a902      	add	r1, sp, #8
 8012d7c:	f000 f8c4 	bl	8012f08 <_svfiprintf_r>
 8012d80:	9b02      	ldr	r3, [sp, #8]
 8012d82:	2200      	movs	r2, #0
 8012d84:	701a      	strb	r2, [r3, #0]
 8012d86:	b01c      	add	sp, #112	; 0x70
 8012d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d8c:	b003      	add	sp, #12
 8012d8e:	4770      	bx	lr
 8012d90:	24008040 	.word	0x24008040
 8012d94:	ffff0208 	.word	0xffff0208

08012d98 <__malloc_lock>:
 8012d98:	4801      	ldr	r0, [pc, #4]	; (8012da0 <__malloc_lock+0x8>)
 8012d9a:	f7ff bef1 	b.w	8012b80 <__retarget_lock_acquire_recursive>
 8012d9e:	bf00      	nop
 8012da0:	2400d60c 	.word	0x2400d60c

08012da4 <__malloc_unlock>:
 8012da4:	4801      	ldr	r0, [pc, #4]	; (8012dac <__malloc_unlock+0x8>)
 8012da6:	f7ff beec 	b.w	8012b82 <__retarget_lock_release_recursive>
 8012daa:	bf00      	nop
 8012dac:	2400d60c 	.word	0x2400d60c

08012db0 <_free_r>:
 8012db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012db2:	2900      	cmp	r1, #0
 8012db4:	d048      	beq.n	8012e48 <_free_r+0x98>
 8012db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dba:	9001      	str	r0, [sp, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8012dc2:	bfb8      	it	lt
 8012dc4:	18e4      	addlt	r4, r4, r3
 8012dc6:	f7ff ffe7 	bl	8012d98 <__malloc_lock>
 8012dca:	4a20      	ldr	r2, [pc, #128]	; (8012e4c <_free_r+0x9c>)
 8012dcc:	9801      	ldr	r0, [sp, #4]
 8012dce:	6813      	ldr	r3, [r2, #0]
 8012dd0:	4615      	mov	r5, r2
 8012dd2:	b933      	cbnz	r3, 8012de2 <_free_r+0x32>
 8012dd4:	6063      	str	r3, [r4, #4]
 8012dd6:	6014      	str	r4, [r2, #0]
 8012dd8:	b003      	add	sp, #12
 8012dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dde:	f7ff bfe1 	b.w	8012da4 <__malloc_unlock>
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	d90b      	bls.n	8012dfe <_free_r+0x4e>
 8012de6:	6821      	ldr	r1, [r4, #0]
 8012de8:	1862      	adds	r2, r4, r1
 8012dea:	4293      	cmp	r3, r2
 8012dec:	bf04      	itt	eq
 8012dee:	681a      	ldreq	r2, [r3, #0]
 8012df0:	685b      	ldreq	r3, [r3, #4]
 8012df2:	6063      	str	r3, [r4, #4]
 8012df4:	bf04      	itt	eq
 8012df6:	1852      	addeq	r2, r2, r1
 8012df8:	6022      	streq	r2, [r4, #0]
 8012dfa:	602c      	str	r4, [r5, #0]
 8012dfc:	e7ec      	b.n	8012dd8 <_free_r+0x28>
 8012dfe:	461a      	mov	r2, r3
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	b10b      	cbz	r3, 8012e08 <_free_r+0x58>
 8012e04:	42a3      	cmp	r3, r4
 8012e06:	d9fa      	bls.n	8012dfe <_free_r+0x4e>
 8012e08:	6811      	ldr	r1, [r2, #0]
 8012e0a:	1855      	adds	r5, r2, r1
 8012e0c:	42a5      	cmp	r5, r4
 8012e0e:	d10b      	bne.n	8012e28 <_free_r+0x78>
 8012e10:	6824      	ldr	r4, [r4, #0]
 8012e12:	4421      	add	r1, r4
 8012e14:	1854      	adds	r4, r2, r1
 8012e16:	42a3      	cmp	r3, r4
 8012e18:	6011      	str	r1, [r2, #0]
 8012e1a:	d1dd      	bne.n	8012dd8 <_free_r+0x28>
 8012e1c:	681c      	ldr	r4, [r3, #0]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	6053      	str	r3, [r2, #4]
 8012e22:	4421      	add	r1, r4
 8012e24:	6011      	str	r1, [r2, #0]
 8012e26:	e7d7      	b.n	8012dd8 <_free_r+0x28>
 8012e28:	d902      	bls.n	8012e30 <_free_r+0x80>
 8012e2a:	230c      	movs	r3, #12
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	e7d3      	b.n	8012dd8 <_free_r+0x28>
 8012e30:	6825      	ldr	r5, [r4, #0]
 8012e32:	1961      	adds	r1, r4, r5
 8012e34:	428b      	cmp	r3, r1
 8012e36:	bf04      	itt	eq
 8012e38:	6819      	ldreq	r1, [r3, #0]
 8012e3a:	685b      	ldreq	r3, [r3, #4]
 8012e3c:	6063      	str	r3, [r4, #4]
 8012e3e:	bf04      	itt	eq
 8012e40:	1949      	addeq	r1, r1, r5
 8012e42:	6021      	streq	r1, [r4, #0]
 8012e44:	6054      	str	r4, [r2, #4]
 8012e46:	e7c7      	b.n	8012dd8 <_free_r+0x28>
 8012e48:	b003      	add	sp, #12
 8012e4a:	bd30      	pop	{r4, r5, pc}
 8012e4c:	2400cb94 	.word	0x2400cb94

08012e50 <__ssputs_r>:
 8012e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e54:	688e      	ldr	r6, [r1, #8]
 8012e56:	429e      	cmp	r6, r3
 8012e58:	4682      	mov	sl, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	4690      	mov	r8, r2
 8012e5e:	461f      	mov	r7, r3
 8012e60:	d838      	bhi.n	8012ed4 <__ssputs_r+0x84>
 8012e62:	898a      	ldrh	r2, [r1, #12]
 8012e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e68:	d032      	beq.n	8012ed0 <__ssputs_r+0x80>
 8012e6a:	6825      	ldr	r5, [r4, #0]
 8012e6c:	6909      	ldr	r1, [r1, #16]
 8012e6e:	eba5 0901 	sub.w	r9, r5, r1
 8012e72:	6965      	ldr	r5, [r4, #20]
 8012e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	444b      	add	r3, r9
 8012e80:	106d      	asrs	r5, r5, #1
 8012e82:	429d      	cmp	r5, r3
 8012e84:	bf38      	it	cc
 8012e86:	461d      	movcc	r5, r3
 8012e88:	0553      	lsls	r3, r2, #21
 8012e8a:	d531      	bpl.n	8012ef0 <__ssputs_r+0xa0>
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ff fe8f 	bl	8012bb0 <_malloc_r>
 8012e92:	4606      	mov	r6, r0
 8012e94:	b950      	cbnz	r0, 8012eac <__ssputs_r+0x5c>
 8012e96:	230c      	movs	r3, #12
 8012e98:	f8ca 3000 	str.w	r3, [sl]
 8012e9c:	89a3      	ldrh	r3, [r4, #12]
 8012e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ea2:	81a3      	strh	r3, [r4, #12]
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eac:	6921      	ldr	r1, [r4, #16]
 8012eae:	464a      	mov	r2, r9
 8012eb0:	f7ff fe68 	bl	8012b84 <memcpy>
 8012eb4:	89a3      	ldrh	r3, [r4, #12]
 8012eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ebe:	81a3      	strh	r3, [r4, #12]
 8012ec0:	6126      	str	r6, [r4, #16]
 8012ec2:	6165      	str	r5, [r4, #20]
 8012ec4:	444e      	add	r6, r9
 8012ec6:	eba5 0509 	sub.w	r5, r5, r9
 8012eca:	6026      	str	r6, [r4, #0]
 8012ecc:	60a5      	str	r5, [r4, #8]
 8012ece:	463e      	mov	r6, r7
 8012ed0:	42be      	cmp	r6, r7
 8012ed2:	d900      	bls.n	8012ed6 <__ssputs_r+0x86>
 8012ed4:	463e      	mov	r6, r7
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	6820      	ldr	r0, [r4, #0]
 8012eda:	4641      	mov	r1, r8
 8012edc:	f000 faa8 	bl	8013430 <memmove>
 8012ee0:	68a3      	ldr	r3, [r4, #8]
 8012ee2:	6822      	ldr	r2, [r4, #0]
 8012ee4:	1b9b      	subs	r3, r3, r6
 8012ee6:	4432      	add	r2, r6
 8012ee8:	60a3      	str	r3, [r4, #8]
 8012eea:	6022      	str	r2, [r4, #0]
 8012eec:	2000      	movs	r0, #0
 8012eee:	e7db      	b.n	8012ea8 <__ssputs_r+0x58>
 8012ef0:	462a      	mov	r2, r5
 8012ef2:	f000 fab7 	bl	8013464 <_realloc_r>
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d1e1      	bne.n	8012ec0 <__ssputs_r+0x70>
 8012efc:	6921      	ldr	r1, [r4, #16]
 8012efe:	4650      	mov	r0, sl
 8012f00:	f7ff ff56 	bl	8012db0 <_free_r>
 8012f04:	e7c7      	b.n	8012e96 <__ssputs_r+0x46>
	...

08012f08 <_svfiprintf_r>:
 8012f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f0c:	4698      	mov	r8, r3
 8012f0e:	898b      	ldrh	r3, [r1, #12]
 8012f10:	061b      	lsls	r3, r3, #24
 8012f12:	b09d      	sub	sp, #116	; 0x74
 8012f14:	4607      	mov	r7, r0
 8012f16:	460d      	mov	r5, r1
 8012f18:	4614      	mov	r4, r2
 8012f1a:	d50e      	bpl.n	8012f3a <_svfiprintf_r+0x32>
 8012f1c:	690b      	ldr	r3, [r1, #16]
 8012f1e:	b963      	cbnz	r3, 8012f3a <_svfiprintf_r+0x32>
 8012f20:	2140      	movs	r1, #64	; 0x40
 8012f22:	f7ff fe45 	bl	8012bb0 <_malloc_r>
 8012f26:	6028      	str	r0, [r5, #0]
 8012f28:	6128      	str	r0, [r5, #16]
 8012f2a:	b920      	cbnz	r0, 8012f36 <_svfiprintf_r+0x2e>
 8012f2c:	230c      	movs	r3, #12
 8012f2e:	603b      	str	r3, [r7, #0]
 8012f30:	f04f 30ff 	mov.w	r0, #4294967295
 8012f34:	e0d1      	b.n	80130da <_svfiprintf_r+0x1d2>
 8012f36:	2340      	movs	r3, #64	; 0x40
 8012f38:	616b      	str	r3, [r5, #20]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f3e:	2320      	movs	r3, #32
 8012f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f48:	2330      	movs	r3, #48	; 0x30
 8012f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80130f4 <_svfiprintf_r+0x1ec>
 8012f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f52:	f04f 0901 	mov.w	r9, #1
 8012f56:	4623      	mov	r3, r4
 8012f58:	469a      	mov	sl, r3
 8012f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f5e:	b10a      	cbz	r2, 8012f64 <_svfiprintf_r+0x5c>
 8012f60:	2a25      	cmp	r2, #37	; 0x25
 8012f62:	d1f9      	bne.n	8012f58 <_svfiprintf_r+0x50>
 8012f64:	ebba 0b04 	subs.w	fp, sl, r4
 8012f68:	d00b      	beq.n	8012f82 <_svfiprintf_r+0x7a>
 8012f6a:	465b      	mov	r3, fp
 8012f6c:	4622      	mov	r2, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	4638      	mov	r0, r7
 8012f72:	f7ff ff6d 	bl	8012e50 <__ssputs_r>
 8012f76:	3001      	adds	r0, #1
 8012f78:	f000 80aa 	beq.w	80130d0 <_svfiprintf_r+0x1c8>
 8012f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f7e:	445a      	add	r2, fp
 8012f80:	9209      	str	r2, [sp, #36]	; 0x24
 8012f82:	f89a 3000 	ldrb.w	r3, [sl]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 80a2 	beq.w	80130d0 <_svfiprintf_r+0x1c8>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f96:	f10a 0a01 	add.w	sl, sl, #1
 8012f9a:	9304      	str	r3, [sp, #16]
 8012f9c:	9307      	str	r3, [sp, #28]
 8012f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8012fa4:	4654      	mov	r4, sl
 8012fa6:	2205      	movs	r2, #5
 8012fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fac:	4851      	ldr	r0, [pc, #324]	; (80130f4 <_svfiprintf_r+0x1ec>)
 8012fae:	f7ed f9b7 	bl	8000320 <memchr>
 8012fb2:	9a04      	ldr	r2, [sp, #16]
 8012fb4:	b9d8      	cbnz	r0, 8012fee <_svfiprintf_r+0xe6>
 8012fb6:	06d0      	lsls	r0, r2, #27
 8012fb8:	bf44      	itt	mi
 8012fba:	2320      	movmi	r3, #32
 8012fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fc0:	0711      	lsls	r1, r2, #28
 8012fc2:	bf44      	itt	mi
 8012fc4:	232b      	movmi	r3, #43	; 0x2b
 8012fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fca:	f89a 3000 	ldrb.w	r3, [sl]
 8012fce:	2b2a      	cmp	r3, #42	; 0x2a
 8012fd0:	d015      	beq.n	8012ffe <_svfiprintf_r+0xf6>
 8012fd2:	9a07      	ldr	r2, [sp, #28]
 8012fd4:	4654      	mov	r4, sl
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	f04f 0c0a 	mov.w	ip, #10
 8012fdc:	4621      	mov	r1, r4
 8012fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fe2:	3b30      	subs	r3, #48	; 0x30
 8012fe4:	2b09      	cmp	r3, #9
 8012fe6:	d94e      	bls.n	8013086 <_svfiprintf_r+0x17e>
 8012fe8:	b1b0      	cbz	r0, 8013018 <_svfiprintf_r+0x110>
 8012fea:	9207      	str	r2, [sp, #28]
 8012fec:	e014      	b.n	8013018 <_svfiprintf_r+0x110>
 8012fee:	eba0 0308 	sub.w	r3, r0, r8
 8012ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	9304      	str	r3, [sp, #16]
 8012ffa:	46a2      	mov	sl, r4
 8012ffc:	e7d2      	b.n	8012fa4 <_svfiprintf_r+0x9c>
 8012ffe:	9b03      	ldr	r3, [sp, #12]
 8013000:	1d19      	adds	r1, r3, #4
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	9103      	str	r1, [sp, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	bfbb      	ittet	lt
 801300a:	425b      	neglt	r3, r3
 801300c:	f042 0202 	orrlt.w	r2, r2, #2
 8013010:	9307      	strge	r3, [sp, #28]
 8013012:	9307      	strlt	r3, [sp, #28]
 8013014:	bfb8      	it	lt
 8013016:	9204      	strlt	r2, [sp, #16]
 8013018:	7823      	ldrb	r3, [r4, #0]
 801301a:	2b2e      	cmp	r3, #46	; 0x2e
 801301c:	d10c      	bne.n	8013038 <_svfiprintf_r+0x130>
 801301e:	7863      	ldrb	r3, [r4, #1]
 8013020:	2b2a      	cmp	r3, #42	; 0x2a
 8013022:	d135      	bne.n	8013090 <_svfiprintf_r+0x188>
 8013024:	9b03      	ldr	r3, [sp, #12]
 8013026:	1d1a      	adds	r2, r3, #4
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	9203      	str	r2, [sp, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	bfb8      	it	lt
 8013030:	f04f 33ff 	movlt.w	r3, #4294967295
 8013034:	3402      	adds	r4, #2
 8013036:	9305      	str	r3, [sp, #20]
 8013038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013104 <_svfiprintf_r+0x1fc>
 801303c:	7821      	ldrb	r1, [r4, #0]
 801303e:	2203      	movs	r2, #3
 8013040:	4650      	mov	r0, sl
 8013042:	f7ed f96d 	bl	8000320 <memchr>
 8013046:	b140      	cbz	r0, 801305a <_svfiprintf_r+0x152>
 8013048:	2340      	movs	r3, #64	; 0x40
 801304a:	eba0 000a 	sub.w	r0, r0, sl
 801304e:	fa03 f000 	lsl.w	r0, r3, r0
 8013052:	9b04      	ldr	r3, [sp, #16]
 8013054:	4303      	orrs	r3, r0
 8013056:	3401      	adds	r4, #1
 8013058:	9304      	str	r3, [sp, #16]
 801305a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801305e:	4826      	ldr	r0, [pc, #152]	; (80130f8 <_svfiprintf_r+0x1f0>)
 8013060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013064:	2206      	movs	r2, #6
 8013066:	f7ed f95b 	bl	8000320 <memchr>
 801306a:	2800      	cmp	r0, #0
 801306c:	d038      	beq.n	80130e0 <_svfiprintf_r+0x1d8>
 801306e:	4b23      	ldr	r3, [pc, #140]	; (80130fc <_svfiprintf_r+0x1f4>)
 8013070:	bb1b      	cbnz	r3, 80130ba <_svfiprintf_r+0x1b2>
 8013072:	9b03      	ldr	r3, [sp, #12]
 8013074:	3307      	adds	r3, #7
 8013076:	f023 0307 	bic.w	r3, r3, #7
 801307a:	3308      	adds	r3, #8
 801307c:	9303      	str	r3, [sp, #12]
 801307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013080:	4433      	add	r3, r6
 8013082:	9309      	str	r3, [sp, #36]	; 0x24
 8013084:	e767      	b.n	8012f56 <_svfiprintf_r+0x4e>
 8013086:	fb0c 3202 	mla	r2, ip, r2, r3
 801308a:	460c      	mov	r4, r1
 801308c:	2001      	movs	r0, #1
 801308e:	e7a5      	b.n	8012fdc <_svfiprintf_r+0xd4>
 8013090:	2300      	movs	r3, #0
 8013092:	3401      	adds	r4, #1
 8013094:	9305      	str	r3, [sp, #20]
 8013096:	4619      	mov	r1, r3
 8013098:	f04f 0c0a 	mov.w	ip, #10
 801309c:	4620      	mov	r0, r4
 801309e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130a2:	3a30      	subs	r2, #48	; 0x30
 80130a4:	2a09      	cmp	r2, #9
 80130a6:	d903      	bls.n	80130b0 <_svfiprintf_r+0x1a8>
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d0c5      	beq.n	8013038 <_svfiprintf_r+0x130>
 80130ac:	9105      	str	r1, [sp, #20]
 80130ae:	e7c3      	b.n	8013038 <_svfiprintf_r+0x130>
 80130b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80130b4:	4604      	mov	r4, r0
 80130b6:	2301      	movs	r3, #1
 80130b8:	e7f0      	b.n	801309c <_svfiprintf_r+0x194>
 80130ba:	ab03      	add	r3, sp, #12
 80130bc:	9300      	str	r3, [sp, #0]
 80130be:	462a      	mov	r2, r5
 80130c0:	4b0f      	ldr	r3, [pc, #60]	; (8013100 <_svfiprintf_r+0x1f8>)
 80130c2:	a904      	add	r1, sp, #16
 80130c4:	4638      	mov	r0, r7
 80130c6:	f3af 8000 	nop.w
 80130ca:	1c42      	adds	r2, r0, #1
 80130cc:	4606      	mov	r6, r0
 80130ce:	d1d6      	bne.n	801307e <_svfiprintf_r+0x176>
 80130d0:	89ab      	ldrh	r3, [r5, #12]
 80130d2:	065b      	lsls	r3, r3, #25
 80130d4:	f53f af2c 	bmi.w	8012f30 <_svfiprintf_r+0x28>
 80130d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130da:	b01d      	add	sp, #116	; 0x74
 80130dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e0:	ab03      	add	r3, sp, #12
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	462a      	mov	r2, r5
 80130e6:	4b06      	ldr	r3, [pc, #24]	; (8013100 <_svfiprintf_r+0x1f8>)
 80130e8:	a904      	add	r1, sp, #16
 80130ea:	4638      	mov	r0, r7
 80130ec:	f000 f87a 	bl	80131e4 <_printf_i>
 80130f0:	e7eb      	b.n	80130ca <_svfiprintf_r+0x1c2>
 80130f2:	bf00      	nop
 80130f4:	080136f0 	.word	0x080136f0
 80130f8:	080136fa 	.word	0x080136fa
 80130fc:	00000000 	.word	0x00000000
 8013100:	08012e51 	.word	0x08012e51
 8013104:	080136f6 	.word	0x080136f6

08013108 <_printf_common>:
 8013108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801310c:	4616      	mov	r6, r2
 801310e:	4699      	mov	r9, r3
 8013110:	688a      	ldr	r2, [r1, #8]
 8013112:	690b      	ldr	r3, [r1, #16]
 8013114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013118:	4293      	cmp	r3, r2
 801311a:	bfb8      	it	lt
 801311c:	4613      	movlt	r3, r2
 801311e:	6033      	str	r3, [r6, #0]
 8013120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013124:	4607      	mov	r7, r0
 8013126:	460c      	mov	r4, r1
 8013128:	b10a      	cbz	r2, 801312e <_printf_common+0x26>
 801312a:	3301      	adds	r3, #1
 801312c:	6033      	str	r3, [r6, #0]
 801312e:	6823      	ldr	r3, [r4, #0]
 8013130:	0699      	lsls	r1, r3, #26
 8013132:	bf42      	ittt	mi
 8013134:	6833      	ldrmi	r3, [r6, #0]
 8013136:	3302      	addmi	r3, #2
 8013138:	6033      	strmi	r3, [r6, #0]
 801313a:	6825      	ldr	r5, [r4, #0]
 801313c:	f015 0506 	ands.w	r5, r5, #6
 8013140:	d106      	bne.n	8013150 <_printf_common+0x48>
 8013142:	f104 0a19 	add.w	sl, r4, #25
 8013146:	68e3      	ldr	r3, [r4, #12]
 8013148:	6832      	ldr	r2, [r6, #0]
 801314a:	1a9b      	subs	r3, r3, r2
 801314c:	42ab      	cmp	r3, r5
 801314e:	dc26      	bgt.n	801319e <_printf_common+0x96>
 8013150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013154:	1e13      	subs	r3, r2, #0
 8013156:	6822      	ldr	r2, [r4, #0]
 8013158:	bf18      	it	ne
 801315a:	2301      	movne	r3, #1
 801315c:	0692      	lsls	r2, r2, #26
 801315e:	d42b      	bmi.n	80131b8 <_printf_common+0xb0>
 8013160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013164:	4649      	mov	r1, r9
 8013166:	4638      	mov	r0, r7
 8013168:	47c0      	blx	r8
 801316a:	3001      	adds	r0, #1
 801316c:	d01e      	beq.n	80131ac <_printf_common+0xa4>
 801316e:	6823      	ldr	r3, [r4, #0]
 8013170:	68e5      	ldr	r5, [r4, #12]
 8013172:	6832      	ldr	r2, [r6, #0]
 8013174:	f003 0306 	and.w	r3, r3, #6
 8013178:	2b04      	cmp	r3, #4
 801317a:	bf08      	it	eq
 801317c:	1aad      	subeq	r5, r5, r2
 801317e:	68a3      	ldr	r3, [r4, #8]
 8013180:	6922      	ldr	r2, [r4, #16]
 8013182:	bf0c      	ite	eq
 8013184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013188:	2500      	movne	r5, #0
 801318a:	4293      	cmp	r3, r2
 801318c:	bfc4      	itt	gt
 801318e:	1a9b      	subgt	r3, r3, r2
 8013190:	18ed      	addgt	r5, r5, r3
 8013192:	2600      	movs	r6, #0
 8013194:	341a      	adds	r4, #26
 8013196:	42b5      	cmp	r5, r6
 8013198:	d11a      	bne.n	80131d0 <_printf_common+0xc8>
 801319a:	2000      	movs	r0, #0
 801319c:	e008      	b.n	80131b0 <_printf_common+0xa8>
 801319e:	2301      	movs	r3, #1
 80131a0:	4652      	mov	r2, sl
 80131a2:	4649      	mov	r1, r9
 80131a4:	4638      	mov	r0, r7
 80131a6:	47c0      	blx	r8
 80131a8:	3001      	adds	r0, #1
 80131aa:	d103      	bne.n	80131b4 <_printf_common+0xac>
 80131ac:	f04f 30ff 	mov.w	r0, #4294967295
 80131b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b4:	3501      	adds	r5, #1
 80131b6:	e7c6      	b.n	8013146 <_printf_common+0x3e>
 80131b8:	18e1      	adds	r1, r4, r3
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	2030      	movs	r0, #48	; 0x30
 80131be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131c2:	4422      	add	r2, r4
 80131c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131cc:	3302      	adds	r3, #2
 80131ce:	e7c7      	b.n	8013160 <_printf_common+0x58>
 80131d0:	2301      	movs	r3, #1
 80131d2:	4622      	mov	r2, r4
 80131d4:	4649      	mov	r1, r9
 80131d6:	4638      	mov	r0, r7
 80131d8:	47c0      	blx	r8
 80131da:	3001      	adds	r0, #1
 80131dc:	d0e6      	beq.n	80131ac <_printf_common+0xa4>
 80131de:	3601      	adds	r6, #1
 80131e0:	e7d9      	b.n	8013196 <_printf_common+0x8e>
	...

080131e4 <_printf_i>:
 80131e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131e8:	460c      	mov	r4, r1
 80131ea:	4691      	mov	r9, r2
 80131ec:	7e27      	ldrb	r7, [r4, #24]
 80131ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131f0:	2f78      	cmp	r7, #120	; 0x78
 80131f2:	4680      	mov	r8, r0
 80131f4:	469a      	mov	sl, r3
 80131f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131fa:	d807      	bhi.n	801320c <_printf_i+0x28>
 80131fc:	2f62      	cmp	r7, #98	; 0x62
 80131fe:	d80a      	bhi.n	8013216 <_printf_i+0x32>
 8013200:	2f00      	cmp	r7, #0
 8013202:	f000 80d8 	beq.w	80133b6 <_printf_i+0x1d2>
 8013206:	2f58      	cmp	r7, #88	; 0x58
 8013208:	f000 80a3 	beq.w	8013352 <_printf_i+0x16e>
 801320c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013214:	e03a      	b.n	801328c <_printf_i+0xa8>
 8013216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801321a:	2b15      	cmp	r3, #21
 801321c:	d8f6      	bhi.n	801320c <_printf_i+0x28>
 801321e:	a001      	add	r0, pc, #4	; (adr r0, 8013224 <_printf_i+0x40>)
 8013220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013224:	0801327d 	.word	0x0801327d
 8013228:	08013291 	.word	0x08013291
 801322c:	0801320d 	.word	0x0801320d
 8013230:	0801320d 	.word	0x0801320d
 8013234:	0801320d 	.word	0x0801320d
 8013238:	0801320d 	.word	0x0801320d
 801323c:	08013291 	.word	0x08013291
 8013240:	0801320d 	.word	0x0801320d
 8013244:	0801320d 	.word	0x0801320d
 8013248:	0801320d 	.word	0x0801320d
 801324c:	0801320d 	.word	0x0801320d
 8013250:	0801339d 	.word	0x0801339d
 8013254:	080132c1 	.word	0x080132c1
 8013258:	0801337f 	.word	0x0801337f
 801325c:	0801320d 	.word	0x0801320d
 8013260:	0801320d 	.word	0x0801320d
 8013264:	080133bf 	.word	0x080133bf
 8013268:	0801320d 	.word	0x0801320d
 801326c:	080132c1 	.word	0x080132c1
 8013270:	0801320d 	.word	0x0801320d
 8013274:	0801320d 	.word	0x0801320d
 8013278:	08013387 	.word	0x08013387
 801327c:	680b      	ldr	r3, [r1, #0]
 801327e:	1d1a      	adds	r2, r3, #4
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	600a      	str	r2, [r1, #0]
 8013284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801328c:	2301      	movs	r3, #1
 801328e:	e0a3      	b.n	80133d8 <_printf_i+0x1f4>
 8013290:	6825      	ldr	r5, [r4, #0]
 8013292:	6808      	ldr	r0, [r1, #0]
 8013294:	062e      	lsls	r6, r5, #24
 8013296:	f100 0304 	add.w	r3, r0, #4
 801329a:	d50a      	bpl.n	80132b2 <_printf_i+0xce>
 801329c:	6805      	ldr	r5, [r0, #0]
 801329e:	600b      	str	r3, [r1, #0]
 80132a0:	2d00      	cmp	r5, #0
 80132a2:	da03      	bge.n	80132ac <_printf_i+0xc8>
 80132a4:	232d      	movs	r3, #45	; 0x2d
 80132a6:	426d      	negs	r5, r5
 80132a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132ac:	485e      	ldr	r0, [pc, #376]	; (8013428 <_printf_i+0x244>)
 80132ae:	230a      	movs	r3, #10
 80132b0:	e019      	b.n	80132e6 <_printf_i+0x102>
 80132b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80132b6:	6805      	ldr	r5, [r0, #0]
 80132b8:	600b      	str	r3, [r1, #0]
 80132ba:	bf18      	it	ne
 80132bc:	b22d      	sxthne	r5, r5
 80132be:	e7ef      	b.n	80132a0 <_printf_i+0xbc>
 80132c0:	680b      	ldr	r3, [r1, #0]
 80132c2:	6825      	ldr	r5, [r4, #0]
 80132c4:	1d18      	adds	r0, r3, #4
 80132c6:	6008      	str	r0, [r1, #0]
 80132c8:	0628      	lsls	r0, r5, #24
 80132ca:	d501      	bpl.n	80132d0 <_printf_i+0xec>
 80132cc:	681d      	ldr	r5, [r3, #0]
 80132ce:	e002      	b.n	80132d6 <_printf_i+0xf2>
 80132d0:	0669      	lsls	r1, r5, #25
 80132d2:	d5fb      	bpl.n	80132cc <_printf_i+0xe8>
 80132d4:	881d      	ldrh	r5, [r3, #0]
 80132d6:	4854      	ldr	r0, [pc, #336]	; (8013428 <_printf_i+0x244>)
 80132d8:	2f6f      	cmp	r7, #111	; 0x6f
 80132da:	bf0c      	ite	eq
 80132dc:	2308      	moveq	r3, #8
 80132de:	230a      	movne	r3, #10
 80132e0:	2100      	movs	r1, #0
 80132e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132e6:	6866      	ldr	r6, [r4, #4]
 80132e8:	60a6      	str	r6, [r4, #8]
 80132ea:	2e00      	cmp	r6, #0
 80132ec:	bfa2      	ittt	ge
 80132ee:	6821      	ldrge	r1, [r4, #0]
 80132f0:	f021 0104 	bicge.w	r1, r1, #4
 80132f4:	6021      	strge	r1, [r4, #0]
 80132f6:	b90d      	cbnz	r5, 80132fc <_printf_i+0x118>
 80132f8:	2e00      	cmp	r6, #0
 80132fa:	d04d      	beq.n	8013398 <_printf_i+0x1b4>
 80132fc:	4616      	mov	r6, r2
 80132fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013302:	fb03 5711 	mls	r7, r3, r1, r5
 8013306:	5dc7      	ldrb	r7, [r0, r7]
 8013308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801330c:	462f      	mov	r7, r5
 801330e:	42bb      	cmp	r3, r7
 8013310:	460d      	mov	r5, r1
 8013312:	d9f4      	bls.n	80132fe <_printf_i+0x11a>
 8013314:	2b08      	cmp	r3, #8
 8013316:	d10b      	bne.n	8013330 <_printf_i+0x14c>
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	07df      	lsls	r7, r3, #31
 801331c:	d508      	bpl.n	8013330 <_printf_i+0x14c>
 801331e:	6923      	ldr	r3, [r4, #16]
 8013320:	6861      	ldr	r1, [r4, #4]
 8013322:	4299      	cmp	r1, r3
 8013324:	bfde      	ittt	le
 8013326:	2330      	movle	r3, #48	; 0x30
 8013328:	f806 3c01 	strble.w	r3, [r6, #-1]
 801332c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013330:	1b92      	subs	r2, r2, r6
 8013332:	6122      	str	r2, [r4, #16]
 8013334:	f8cd a000 	str.w	sl, [sp]
 8013338:	464b      	mov	r3, r9
 801333a:	aa03      	add	r2, sp, #12
 801333c:	4621      	mov	r1, r4
 801333e:	4640      	mov	r0, r8
 8013340:	f7ff fee2 	bl	8013108 <_printf_common>
 8013344:	3001      	adds	r0, #1
 8013346:	d14c      	bne.n	80133e2 <_printf_i+0x1fe>
 8013348:	f04f 30ff 	mov.w	r0, #4294967295
 801334c:	b004      	add	sp, #16
 801334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013352:	4835      	ldr	r0, [pc, #212]	; (8013428 <_printf_i+0x244>)
 8013354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	680e      	ldr	r6, [r1, #0]
 801335c:	061f      	lsls	r7, r3, #24
 801335e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013362:	600e      	str	r6, [r1, #0]
 8013364:	d514      	bpl.n	8013390 <_printf_i+0x1ac>
 8013366:	07d9      	lsls	r1, r3, #31
 8013368:	bf44      	itt	mi
 801336a:	f043 0320 	orrmi.w	r3, r3, #32
 801336e:	6023      	strmi	r3, [r4, #0]
 8013370:	b91d      	cbnz	r5, 801337a <_printf_i+0x196>
 8013372:	6823      	ldr	r3, [r4, #0]
 8013374:	f023 0320 	bic.w	r3, r3, #32
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	2310      	movs	r3, #16
 801337c:	e7b0      	b.n	80132e0 <_printf_i+0xfc>
 801337e:	6823      	ldr	r3, [r4, #0]
 8013380:	f043 0320 	orr.w	r3, r3, #32
 8013384:	6023      	str	r3, [r4, #0]
 8013386:	2378      	movs	r3, #120	; 0x78
 8013388:	4828      	ldr	r0, [pc, #160]	; (801342c <_printf_i+0x248>)
 801338a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801338e:	e7e3      	b.n	8013358 <_printf_i+0x174>
 8013390:	065e      	lsls	r6, r3, #25
 8013392:	bf48      	it	mi
 8013394:	b2ad      	uxthmi	r5, r5
 8013396:	e7e6      	b.n	8013366 <_printf_i+0x182>
 8013398:	4616      	mov	r6, r2
 801339a:	e7bb      	b.n	8013314 <_printf_i+0x130>
 801339c:	680b      	ldr	r3, [r1, #0]
 801339e:	6826      	ldr	r6, [r4, #0]
 80133a0:	6960      	ldr	r0, [r4, #20]
 80133a2:	1d1d      	adds	r5, r3, #4
 80133a4:	600d      	str	r5, [r1, #0]
 80133a6:	0635      	lsls	r5, r6, #24
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	d501      	bpl.n	80133b0 <_printf_i+0x1cc>
 80133ac:	6018      	str	r0, [r3, #0]
 80133ae:	e002      	b.n	80133b6 <_printf_i+0x1d2>
 80133b0:	0671      	lsls	r1, r6, #25
 80133b2:	d5fb      	bpl.n	80133ac <_printf_i+0x1c8>
 80133b4:	8018      	strh	r0, [r3, #0]
 80133b6:	2300      	movs	r3, #0
 80133b8:	6123      	str	r3, [r4, #16]
 80133ba:	4616      	mov	r6, r2
 80133bc:	e7ba      	b.n	8013334 <_printf_i+0x150>
 80133be:	680b      	ldr	r3, [r1, #0]
 80133c0:	1d1a      	adds	r2, r3, #4
 80133c2:	600a      	str	r2, [r1, #0]
 80133c4:	681e      	ldr	r6, [r3, #0]
 80133c6:	6862      	ldr	r2, [r4, #4]
 80133c8:	2100      	movs	r1, #0
 80133ca:	4630      	mov	r0, r6
 80133cc:	f7ec ffa8 	bl	8000320 <memchr>
 80133d0:	b108      	cbz	r0, 80133d6 <_printf_i+0x1f2>
 80133d2:	1b80      	subs	r0, r0, r6
 80133d4:	6060      	str	r0, [r4, #4]
 80133d6:	6863      	ldr	r3, [r4, #4]
 80133d8:	6123      	str	r3, [r4, #16]
 80133da:	2300      	movs	r3, #0
 80133dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133e0:	e7a8      	b.n	8013334 <_printf_i+0x150>
 80133e2:	6923      	ldr	r3, [r4, #16]
 80133e4:	4632      	mov	r2, r6
 80133e6:	4649      	mov	r1, r9
 80133e8:	4640      	mov	r0, r8
 80133ea:	47d0      	blx	sl
 80133ec:	3001      	adds	r0, #1
 80133ee:	d0ab      	beq.n	8013348 <_printf_i+0x164>
 80133f0:	6823      	ldr	r3, [r4, #0]
 80133f2:	079b      	lsls	r3, r3, #30
 80133f4:	d413      	bmi.n	801341e <_printf_i+0x23a>
 80133f6:	68e0      	ldr	r0, [r4, #12]
 80133f8:	9b03      	ldr	r3, [sp, #12]
 80133fa:	4298      	cmp	r0, r3
 80133fc:	bfb8      	it	lt
 80133fe:	4618      	movlt	r0, r3
 8013400:	e7a4      	b.n	801334c <_printf_i+0x168>
 8013402:	2301      	movs	r3, #1
 8013404:	4632      	mov	r2, r6
 8013406:	4649      	mov	r1, r9
 8013408:	4640      	mov	r0, r8
 801340a:	47d0      	blx	sl
 801340c:	3001      	adds	r0, #1
 801340e:	d09b      	beq.n	8013348 <_printf_i+0x164>
 8013410:	3501      	adds	r5, #1
 8013412:	68e3      	ldr	r3, [r4, #12]
 8013414:	9903      	ldr	r1, [sp, #12]
 8013416:	1a5b      	subs	r3, r3, r1
 8013418:	42ab      	cmp	r3, r5
 801341a:	dcf2      	bgt.n	8013402 <_printf_i+0x21e>
 801341c:	e7eb      	b.n	80133f6 <_printf_i+0x212>
 801341e:	2500      	movs	r5, #0
 8013420:	f104 0619 	add.w	r6, r4, #25
 8013424:	e7f5      	b.n	8013412 <_printf_i+0x22e>
 8013426:	bf00      	nop
 8013428:	08013701 	.word	0x08013701
 801342c:	08013712 	.word	0x08013712

08013430 <memmove>:
 8013430:	4288      	cmp	r0, r1
 8013432:	b510      	push	{r4, lr}
 8013434:	eb01 0402 	add.w	r4, r1, r2
 8013438:	d902      	bls.n	8013440 <memmove+0x10>
 801343a:	4284      	cmp	r4, r0
 801343c:	4623      	mov	r3, r4
 801343e:	d807      	bhi.n	8013450 <memmove+0x20>
 8013440:	1e43      	subs	r3, r0, #1
 8013442:	42a1      	cmp	r1, r4
 8013444:	d008      	beq.n	8013458 <memmove+0x28>
 8013446:	f811 2b01 	ldrb.w	r2, [r1], #1
 801344a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801344e:	e7f8      	b.n	8013442 <memmove+0x12>
 8013450:	4402      	add	r2, r0
 8013452:	4601      	mov	r1, r0
 8013454:	428a      	cmp	r2, r1
 8013456:	d100      	bne.n	801345a <memmove+0x2a>
 8013458:	bd10      	pop	{r4, pc}
 801345a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801345e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013462:	e7f7      	b.n	8013454 <memmove+0x24>

08013464 <_realloc_r>:
 8013464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013466:	4607      	mov	r7, r0
 8013468:	4614      	mov	r4, r2
 801346a:	460e      	mov	r6, r1
 801346c:	b921      	cbnz	r1, 8013478 <_realloc_r+0x14>
 801346e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013472:	4611      	mov	r1, r2
 8013474:	f7ff bb9c 	b.w	8012bb0 <_malloc_r>
 8013478:	b922      	cbnz	r2, 8013484 <_realloc_r+0x20>
 801347a:	f7ff fc99 	bl	8012db0 <_free_r>
 801347e:	4625      	mov	r5, r4
 8013480:	4628      	mov	r0, r5
 8013482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013484:	f000 f814 	bl	80134b0 <_malloc_usable_size_r>
 8013488:	42a0      	cmp	r0, r4
 801348a:	d20f      	bcs.n	80134ac <_realloc_r+0x48>
 801348c:	4621      	mov	r1, r4
 801348e:	4638      	mov	r0, r7
 8013490:	f7ff fb8e 	bl	8012bb0 <_malloc_r>
 8013494:	4605      	mov	r5, r0
 8013496:	2800      	cmp	r0, #0
 8013498:	d0f2      	beq.n	8013480 <_realloc_r+0x1c>
 801349a:	4631      	mov	r1, r6
 801349c:	4622      	mov	r2, r4
 801349e:	f7ff fb71 	bl	8012b84 <memcpy>
 80134a2:	4631      	mov	r1, r6
 80134a4:	4638      	mov	r0, r7
 80134a6:	f7ff fc83 	bl	8012db0 <_free_r>
 80134aa:	e7e9      	b.n	8013480 <_realloc_r+0x1c>
 80134ac:	4635      	mov	r5, r6
 80134ae:	e7e7      	b.n	8013480 <_realloc_r+0x1c>

080134b0 <_malloc_usable_size_r>:
 80134b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134b4:	1f18      	subs	r0, r3, #4
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	bfbc      	itt	lt
 80134ba:	580b      	ldrlt	r3, [r1, r0]
 80134bc:	18c0      	addlt	r0, r0, r3
 80134be:	4770      	bx	lr

080134c0 <_init>:
 80134c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c2:	bf00      	nop
 80134c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134c6:	bc08      	pop	{r3}
 80134c8:	469e      	mov	lr, r3
 80134ca:	4770      	bx	lr

080134cc <_fini>:
 80134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ce:	bf00      	nop
 80134d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134d2:	bc08      	pop	{r3}
 80134d4:	469e      	mov	lr, r3
 80134d6:	4770      	bx	lr
