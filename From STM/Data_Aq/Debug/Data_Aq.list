
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013758  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08013a28  08013a28  00023a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013c9c  08013c9c  00023c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013ca4  08013ca4  00023ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013ca8  08013ca8  00023ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000080a4  24000000  08013cac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240080a4  0801bd50  000380a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24008104  0801bdb0  00038104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fa0c  24008164  0801be10  00038164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24027b70  0801be10  00047b70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00038164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049cb4  00000000  00000000  00038192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ded  00000000  00000000  00081e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002438  00000000  00000000  00088c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002200  00000000  00000000  0008b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b16e  00000000  00000000  0008d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f089  00000000  00000000  000c83de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a5b2  00000000  00000000  000f7467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00261a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ecc  00000000  00000000  00261a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008164 	.word	0x24008164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013a10 	.word	0x08013a10

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24008168 	.word	0x24008168
 800030c:	08013a10 	.word	0x08013a10

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <ADS8588H_Init_Struct>:
		GPIO_TypeDef	*ADC_OS1_Port, uint16_t 	ADC_OS1_pin,
		GPIO_TypeDef	*ADC_OS2_Port, uint16_t 	ADC_OS2_pin,
		uint8_t OSR,
		OSPI_HandleTypeDef	*hopsi
		)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	807b      	strh	r3, [r7, #2]
	/*
	 * Link timer source to ADC driver
	 */
	ADC->ADC_Time.ADC_htim = htim;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	605a      	str	r2, [r3, #4]

	/*
	 * Load time delay base defaults
	 */
	ADS8588H_Time_Delay_Base(ADC);
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f848 	bl	8000762 <ADS8588H_Time_Delay_Base>

	/*
	 * Link OPSI source to ADC driver
	 */
	ADC->OPSI.hopsi = hopsi;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	/*
	 * Load OSR mask
	 */

	ADC->ADC_OSR.OSR = OSR;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80006e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/*
	 * Link Reset GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_Reset_Port = ADC_Reset_Port;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	609a      	str	r2, [r3, #8]
	ADC->ADC_GPIO.ADC_Reset_pin = ADC_Reset_pin;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	819a      	strh	r2, [r3, #12]

	/*
	 * Link Conv_AB GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_Conv_AB_Port = ADC_Conv_AB_Port;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	69ba      	ldr	r2, [r7, #24]
 80006f4:	611a      	str	r2, [r3, #16]
	ADC->ADC_GPIO.ADC_Conv_AB_pin = ADC_Conv_AB_pin;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	8bba      	ldrh	r2, [r7, #28]
 80006fa:	829a      	strh	r2, [r3, #20]

	/*
	 * Link CS GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_CS_Port = ADC_CS_Port;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6a3a      	ldr	r2, [r7, #32]
 8000700:	619a      	str	r2, [r3, #24]
	ADC->ADC_GPIO.ADC_CS_pin = ADC_CS_pin;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000706:	839a      	strh	r2, [r3, #28]

	/*
	 * Link BUSY 1 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_1_Port = ADC_BUSY_1_Port;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800070c:	621a      	str	r2, [r3, #32]
	ADC->ADC_GPIO.ADC_BUSY_1_pin = ADC_BUSY_1_pin;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000712:	849a      	strh	r2, [r3, #36]	; 0x24

	/*
	 * Link BUSY 2 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_2_Port = ADC_BUSY_2_Port;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
	ADC->ADC_GPIO.ADC_BUSY_2_pin = ADC_BUSY_2_pin;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800071e:	859a      	strh	r2, [r3, #44]	; 0x2c

	/*
	 * Link BUSY 3 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_3_Port = ADC_BUSY_3_Port;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
	ADC->ADC_GPIO.ADC_BUSY_3_pin = ADC_BUSY_3_pin;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800072a:	869a      	strh	r2, [r3, #52]	; 0x34

	/*
	 * Link OSR 0 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS0_Port = ADC_OS0_Port;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
	ADC->ADC_GPIO.ADC_OS0_pin = ADC_OS0_pin;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000738:	879a      	strh	r2, [r3, #60]	; 0x3c

	/*
	 * Link OSR 1 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS1_Port = ADC_OS1_Port;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800073e:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_GPIO.ADC_OS1_pin = ADC_OS1_pin;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8000746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	/*
	 * Link OSR 2 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS2_Port = ADC_OS2_Port;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800074e:	649a      	str	r2, [r3, #72]	; 0x48
	ADC->ADC_GPIO.ADC_OS2_pin = ADC_OS2_pin;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000756:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <ADS8588H_Time_Delay_Base>:

void ADS8588H_Time_Delay_Base(ADS8588H_Interface_t *ADC)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	ADC->ADC_Time.Delay.convAB_Delay = DEFAULT_CONVAB_DELAY;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	801a      	strh	r2, [r3, #0]
	ADC->ADC_Time.Delay.reset_Delay = DEFAULT_RESET_DELAY;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2201      	movs	r2, #1
 8000774:	805a      	strh	r2, [r3, #2]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <ADS8588H_Init>:

void ADS8588H_Init(ADS8588H_Interface_t *ADC)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	/*
	 * Initialize time delay source
	 */
	HAL_TIM_Base_Start(ADC->ADC_Time.ADC_htim);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f008 ff1c 	bl	80095cc <HAL_TIM_Base_Start>

	/*
	 * From section 7.3.7 of the data sheet
	 * Configure OSR bits for internal digital filtering
	 */
	ADS8588H_OSR_SETUP(ADC);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f807 	bl	80007a8 <ADS8588H_OSR_SETUP>

	/*
	* From section 7.4.1.6 of data sheet
	* Needed for settling internal references.
	*/
	ADS8588H_Reset(ADC);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f849 	bl	8000832 <ADS8588H_Reset>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ADS8588H_OSR_SETUP>:

void ADS8588H_OSR_SETUP(ADS8588H_Interface_t *ADC)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	/*
	 * First process bit field
	 */
	ADC->ADC_OSR.OS0 = ADC->ADC_OSR.OSR & OSR_BIT_0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ADC->ADC_OSR.OS1 = (ADC->ADC_OSR.OSR & OSR_BIT_1) >> OSR_BIT_1_MASK;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ADC->ADC_OSR.OS2 = (ADC->ADC_OSR.OSR & OSR_BIT_2) >> OSR_BIT_2_MASK;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80007de:	109b      	asrs	r3, r3, #2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/*
	 * Set OSR values.
	 */
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS0_Port,
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80007fc:	461a      	mov	r2, r3
 80007fe:	f003 ff05 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS0_pin,
			ADC->ADC_OSR.OS0);
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS1_Port,
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800080c:	2201      	movs	r2, #1
 800080e:	4619      	mov	r1, r3
 8000810:	f003 fefc 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS1_pin,
			SET);
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS2_Port,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000824:	461a      	mov	r2, r3
 8000826:	f003 fef1 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS2_pin,
			ADC->ADC_OSR.OS2);
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <ADS8588H_Reset>:

void ADS8588H_Reset(ADS8588H_Interface_t *ADC)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Reset_Port,
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6898      	ldr	r0, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	899b      	ldrh	r3, [r3, #12]
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	f003 fee1 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Reset_pin,
			SET);

	ADC_Delay_us(ADC,ADC->ADC_Time.Delay.reset_Delay);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	885b      	ldrh	r3, [r3, #2]
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f95d 	bl	8000b10 <ADC_Delay_us>

	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Reset_Port,
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6898      	ldr	r0, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	899b      	ldrh	r3, [r3, #12]
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	f003 fed3 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Reset_pin,
			RESET);
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <convert_data>:

void convert_data(ADS8588H_Interface_t *ADC)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	uint16_t temp1 = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	82fb      	strh	r3, [r7, #22]
	uint16_t temp2 = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	82bb      	strh	r3, [r7, #20]

	for(int x = 0; x < 4; x++)
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	e0a1      	b.n	80009ca <convert_data+0x15a>
	{
		for(int i = 0; i < 16; i++)
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e028      	b.n	80008de <convert_data+0x6e>
		{
			temp1 = temp1 | (uint16_t)((ADC->DATA.raw_data[i + 16*x] & 0x01) << (15 - i));
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	011a      	lsls	r2, r3, #4
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800089c:	f003 0201 	and.w	r2, r3, #1
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f1c3 030f 	rsb	r3, r3, #15
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	82fb      	strh	r3, [r7, #22]
			temp2 = temp2 | (uint16_t)((ADC->DATA.raw_data[i + 16*x] & 0x02) << (15 - i));
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	011a      	lsls	r2, r3, #4
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008c2:	f003 0202 	and.w	r2, r3, #2
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f1c3 030f 	rsb	r3, r3, #15
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	8abb      	ldrh	r3, [r7, #20]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	82bb      	strh	r3, [r7, #20]
		for(int i = 0; i < 16; i++)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	ddd3      	ble.n	800088c <convert_data+0x1c>
		}
		if( (temp1 & 0x8000) == 0x8000)
 80008e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da1b      	bge.n	8000924 <convert_data+0xb4>
		{
			/*negative*/
			ADC->DATA.data[x] = temp1 * 5.0/(1<<15) - 10.0;
 80008ec:	8afb      	ldrh	r3, [r7, #22]
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008f6:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80008fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008fe:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80009e0 <convert_data+0x170>
 8000902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000906:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800090a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800090e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	3324      	adds	r3, #36	; 0x24
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	3304      	adds	r3, #4
 800091e:	edc3 7a00 	vstr	s15, [r3]
 8000922:	e016      	b.n	8000952 <convert_data+0xe2>
		}
		else
		{
			/*positive*/
			ADC->DATA.data[x] = temp1 * 5.0/(1<<15);
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800092e:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000932:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000936:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80009e0 <convert_data+0x170>
 800093a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800093e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	3324      	adds	r3, #36	; 0x24
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	3304      	adds	r3, #4
 800094e:	edc3 7a00 	vstr	s15, [r3]
		}
		if( (temp2 & 0x8000) == 0x8000)
 8000952:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da1c      	bge.n	8000994 <convert_data+0x124>
		{
			/*negative*/
			ADC->DATA.data[x+4] = temp2 * 5.0/(1<<15) - 10.0;
 800095a:	8abb      	ldrh	r3, [r7, #20]
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000964:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000968:	ee27 6b06 	vmul.f64	d6, d7, d6
 800096c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80009e0 <convert_data+0x170>
 8000970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000974:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000978:	ee37 7b46 	vsub.f64	d7, d7, d6
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	3304      	adds	r3, #4
 8000980:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	3324      	adds	r3, #36	; 0x24
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	3304      	adds	r3, #4
 800098e:	edc3 7a00 	vstr	s15, [r3]
 8000992:	e017      	b.n	80009c4 <convert_data+0x154>
		}
		else
		{
			/*positive*/
			ADC->DATA.data[x+4] = temp2 * 5.0/(1<<15);
 8000994:	8abb      	ldrh	r3, [r7, #20]
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800099e:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80009a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009a6:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80009e0 <convert_data+0x170>
 80009aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	3304      	adds	r3, #4
 80009b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	3324      	adds	r3, #36	; 0x24
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	3304      	adds	r3, #4
 80009c0:	edc3 7a00 	vstr	s15, [r3]
	for(int x = 0; x < 4; x++)
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	3301      	adds	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	f77f af5a 	ble.w	8000886 <convert_data+0x16>
	}




}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40e00000 	.word	0x40e00000

080009e8 <ADC_SERVICE_ROUTINE>:

void ADC_SERVICE_ROUTINE(ADS8588H_Interface_t *ADC)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	ADS8588H_CONV_AB(ADC);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f840 	bl	8000a76 <ADS8588H_CONV_AB>
	ADS8588H_POLL_BUSY(ADC);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f85b 	bl	8000ab2 <ADS8588H_POLL_BUSY>
	ADS8588H_READ_ALL(ADC);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f807 	bl	8000a10 <ADS8588H_READ_ALL>
	convert_data(ADC);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ff34 	bl	8000870 <convert_data>

}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <ADS8588H_READ_ALL>:

void ADS8588H_READ_ALL(ADS8588H_Interface_t *ADC)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

	/*
	 * Select ADC, enable low
	 */
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_CS_Port,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6998      	ldr	r0, [r3, #24]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8b9b      	ldrh	r3, [r3, #28]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f003 fdf2 	bl	800460c <HAL_GPIO_WritePin>
			RESET);
	/*
	 * Read adc stuff
	 */

	ADC->OPSI.res = HAL_OSPI_Receive(ADC->OPSI.hopsi,ADC->DATA.raw_data ,HAL_MAX_DELAY-1);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3354      	adds	r3, #84	; 0x54
 8000a32:	f06f 0201 	mvn.w	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 fc4f 	bl	80022da <HAL_OSPI_Receive>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	if(ADC->OPSI.res != HAL_OK) Error_Handler();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <ADS8588H_READ_ALL+0x44>
 8000a50:	f000 fea2 	bl	8001798 <Error_Handler>
	ADC->OPSI.hopsi->State = HAL_OSPI_STATE_CMD_CFG;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	655a      	str	r2, [r3, #84]	; 0x54

	/*
	 * Release ADC
	 */
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_CS_Port,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6998      	ldr	r0, [r3, #24]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8b9b      	ldrh	r3, [r3, #28]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f003 fdcf 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_CS_pin,
			SET);
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <ADS8588H_CONV_AB>:

void ADS8588H_CONV_AB(ADS8588H_Interface_t *ADC)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Conv_AB_Port,
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6918      	ldr	r0, [r3, #16]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	8a9b      	ldrh	r3, [r3, #20]
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f003 fdbf 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Conv_AB_pin,
			RESET);

	ADC_Delay_us(ADC,ADC->ADC_Time.Delay.convAB_Delay);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f83b 	bl	8000b10 <ADC_Delay_us>

	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Conv_AB_Port,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6918      	ldr	r0, [r3, #16]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	8a9b      	ldrh	r3, [r3, #20]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f003 fdb1 	bl	800460c <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Conv_AB_pin,
			SET);
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <ADS8588H_POLL_BUSY>:

void ADS8588H_POLL_BUSY(ADS8588H_Interface_t *ADC)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	/*
	 * Wait until all 3 ADCs are ready
	 */
	while(!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_1_Port, ADC->ADC_GPIO.ADC_BUSY_1_pin) && !HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_2_Port, ADC->ADC_GPIO.ADC_BUSY_2_pin) && !HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_3_Port, ADC->ADC_GPIO.ADC_BUSY_3_pin));
 8000aba:	bf00      	nop
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	f003 fd88 	bl	80045dc <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d115      	bne.n	8000afe <ADS8588H_POLL_BUSY+0x4c>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	4610      	mov	r0, r2
 8000ade:	f003 fd7d 	bl	80045dc <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10a      	bne.n	8000afe <ADS8588H_POLL_BUSY+0x4c>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000af0:	4619      	mov	r1, r3
 8000af2:	4610      	mov	r0, r2
 8000af4:	f003 fd72 	bl	80045dc <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0de      	beq.n	8000abc <ADS8588H_POLL_BUSY+0xa>
	ADC_Delay_us(ADC,500);
 8000afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f804 	bl	8000b10 <ADC_Delay_us>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ADC_Delay_us>:



void ADC_Delay_us(ADS8588H_Interface_t *ADC, uint16_t us)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
	/*
	 * Reset timer counter
	 */
	__HAL_TIM_SET_COUNTER(ADC->ADC_Time.ADC_htim, WIPE_COUNTER);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
	/*
	 * Wait till time expires
	 */
	while ((uint16_t)__HAL_TIM_GET_COUNTER(ADC->ADC_Time.ADC_htim) < us);
 8000b26:	bf00      	nop
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <ADC_Delay_us+0x18>
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e024      	b.n	8000ba2 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	e01a      	b.n	8000b94 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2bff      	cmp	r3, #255	; 0xff
 8000b62:	dd0a      	ble.n	8000b7a <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	025a      	lsls	r2, r3, #9
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e009      	b.n	8000b8e <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	025a      	lsls	r2, r3, #9
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9a:	dbe0      	blt.n	8000b5e <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbd6      	blt.n	8000b58 <HalfKBWrite+0x12>
			}

		}

	}
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	483b      	ldr	r0, [pc, #236]	; (8000cb0 <main+0xf8>)
 8000bc2:	f7ff ffc0 	bl	8000b46 <HalfKBWrite>
  for(int i = 0; i <65;i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	e009      	b.n	8000be0 <main+0x28>
  {
  	  pData[i]=i;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b2d9      	uxtb	r1, r3
 8000bd0:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <main+0xfc>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <65;i++)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b40      	cmp	r3, #64	; 0x40
 8000be4:	ddf2      	ble.n	8000bcc <main+0x14>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f002 fdc7 	bl	8003778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f881 	bl	8000cf0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bee:	f000 f8f9 	bl	8000de4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 fb09 	bl	8001208 <MX_GPIO_Init>
  MX_ETH_Init();
 8000bf6:	f000 f925 	bl	8000e44 <MX_ETH_Init>
  MX_MDMA_Init();
 8000bfa:	f000 faa1 	bl	8001140 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000bfe:	f000 f9d1 	bl	8000fa4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000c02:	f00b fad3 	bl	800c1ac <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000c06:	f000 fa47 	bl	8001098 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000c0a:	f000 fa91 	bl	8001130 <MX_USB_OTG_HS_USB_Init>
  MX_OCTOSPI1_Init();
 8000c0e:	f000 f965 	bl	8000edc <MX_OCTOSPI1_Init>
  MX_TIM13_Init();
 8000c12:	f000 f9f5 	bl	8001000 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  EnableMemMappedQuadMode();
 8000c16:	f000 fd27 	bl	8001668 <EnableMemMappedQuadMode>
  //HAL_GPIO_WritePin(ADC_OS1_GPIO_Port,ADC_OS1_Pin,SET);
  ADS8588H_Init_Struct(&ADC,
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <main+0x100>)
 8000c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8000c1e:	2305      	movs	r3, #5
 8000c20:	9310      	str	r3, [sp, #64]	; 0x40
 8000c22:	2320      	movs	r3, #32
 8000c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <main+0x104>)
 8000c28:	930e      	str	r3, [sp, #56]	; 0x38
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0x104>)
 8000c30:	930c      	str	r3, [sp, #48]	; 0x30
 8000c32:	2308      	movs	r3, #8
 8000c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <main+0x104>)
 8000c38:	930a      	str	r3, [sp, #40]	; 0x28
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <main+0x104>)
 8000c40:	9308      	str	r3, [sp, #32]
 8000c42:	2302      	movs	r3, #2
 8000c44:	9307      	str	r3, [sp, #28]
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <main+0x104>)
 8000c48:	9306      	str	r3, [sp, #24]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	9305      	str	r3, [sp, #20]
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <main+0x104>)
 8000c50:	9304      	str	r3, [sp, #16]
 8000c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c56:	9303      	str	r3, [sp, #12]
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <main+0x108>)
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <main+0x10c>)
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2301      	movs	r3, #1
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <main+0x110>)
 8000c68:	4918      	ldr	r1, [pc, #96]	; (8000ccc <main+0x114>)
 8000c6a:	4819      	ldr	r0, [pc, #100]	; (8000cd0 <main+0x118>)
 8000c6c:	f7ff fd24 	bl	80006b8 <ADS8588H_Init_Struct>
		  ADC_OS1_GPIO_Port,	ADC_OS1_Pin,
		  ADC_OS2_GPIO_Port,	ADC_OS2_Pin,
		  OSR_32,
		  &hospi1
		  );
  ADS8588H_Init(&ADC);
 8000c70:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <main+0x118>)
 8000c72:	f7ff fd86 	bl	8000782 <ADS8588H_Init>


  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <main+0x11c>)
 8000c7c:	f003 fcc6 	bl	800460c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c80:	f00e fc1e 	bl	800f4c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDCard */
  SDCardHandle = osThreadNew(StartSDCardTask, NULL, &SDCard_attributes);
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <main+0x120>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4814      	ldr	r0, [pc, #80]	; (8000cdc <main+0x124>)
 8000c8a:	f00e fc9a 	bl	800f5c2 <osThreadNew>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <main+0x128>)
 8000c92:	6013      	str	r3, [r2, #0]

  /* creation of ServiceADC */
  ServiceADCHandle = osThreadNew(StartServiceADC, NULL, &ServiceADC_attributes);
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <main+0x12c>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <main+0x130>)
 8000c9a:	f00e fc92 	bl	800f5c2 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <main+0x134>)
 8000ca2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ca4:	f00e fc52 	bl	800f54c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  char str[80]={0};
  //  HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
    Error_Handler();
 8000ca8:	f000 fd76 	bl	8001798 <Error_Handler>
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0xf4>
 8000cae:	bf00      	nop
 8000cb0:	24000028 	.word	0x24000028
 8000cb4:	24008180 	.word	0x24008180
 8000cb8:	2402719c 	.word	0x2402719c
 8000cbc:	58021400 	.word	0x58021400
 8000cc0:	58021000 	.word	0x58021000
 8000cc4:	58020c00 	.word	0x58020c00
 8000cc8:	58021800 	.word	0x58021800
 8000ccc:	24027484 	.word	0x24027484
 8000cd0:	2402704c 	.word	0x2402704c
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	08013ad4 	.word	0x08013ad4
 8000cdc:	080016d1 	.word	0x080016d1
 8000ce0:	24027200 	.word	0x24027200
 8000ce4:	08013af8 	.word	0x08013af8
 8000ce8:	08001749 	.word	0x08001749
 8000cec:	24027534 	.word	0x24027534

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09c      	sub	sp, #112	; 0x70
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	224c      	movs	r2, #76	; 0x4c
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f012 f9f6 	bl	80130f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2220      	movs	r2, #32
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f012 f9f0 	bl	80130f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f003 ff61 	bl	8004bd8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <SystemClock_Config+0xec>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <SystemClock_Config+0xec>)
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <SystemClock_Config+0xec>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d32:	bf00      	nop
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <SystemClock_Config+0xec>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d40:	d1f8      	bne.n	8000d34 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <SystemClock_Config+0xf0>)
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <SystemClock_Config+0xf0>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d52:	2321      	movs	r3, #33	; 0x21
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d56:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d6c:	f240 1313 	movw	r3, #275	; 0x113
 8000d70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d76:	2304      	movs	r3, #4
 8000d78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 ff5c 	bl	8004c4c <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d9a:	f000 fcfd 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	233f      	movs	r3, #63	; 0x3f
 8000da0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2303      	movs	r3, #3
 8000da4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000daa:	2308      	movs	r3, #8
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 faed 	bl	80053a4 <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000dd0:	f000 fce2 	bl	8001798 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3770      	adds	r7, #112	; 0x70
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58024800 	.word	0x58024800
 8000de0:	58024400 	.word	0x58024400

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0ae      	sub	sp, #184	; 0xb8
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	22b4      	movs	r2, #180	; 0xb4
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f012 f97d 	bl	80130f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SDMMC;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <PeriphCommonClock_Config+0x5c>)
 8000df8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000dfe:	2319      	movs	r3, #25
 8000e00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 fe8a 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000e32:	f000 fcb1 	bl	8001798 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	37b8      	adds	r7, #184	; 0xb8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	02010000 	.word	0x02010000

08000e44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <MX_ETH_Init+0x84>)
 8000e4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e5c:	22e1      	movs	r2, #225	; 0xe1
 8000e5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_ETH_Init+0x88>)
 8000e76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <MX_ETH_Init+0x8c>)
 8000e82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_ETH_Init+0x90>)
 8000e88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_ETH_Init+0x80>)
 8000e94:	f002 fde4 	bl	8003a60 <HAL_ETH_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e9e:	f000 fc7b 	bl	8001798 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_ETH_Init+0x94>)
 8000ea8:	f012 f922 	bl	80130f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_ETH_Init+0x94>)
 8000eae:	2221      	movs	r2, #33	; 0x21
 8000eb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_ETH_Init+0x94>)
 8000eb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_ETH_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	240275a8 	.word	0x240275a8
 8000ec8:	40028000 	.word	0x40028000
 8000ecc:	240081c4 	.word	0x240081c4
 8000ed0:	24008104 	.word	0x24008104
 8000ed4:	240080a4 	.word	0x240080a4
 8000ed8:	24027630 	.word	0x24027630

08000edc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <MX_OCTOSPI1_Init+0xc0>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 8;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 30;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f2a:	221e      	movs	r2, #30
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f48:	2208      	movs	r2, #8
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f5a:	f000 ff31 	bl	8001dc0 <HAL_OSPI_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 fc18 	bl	8001798 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000f6c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000f70:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_OCTOSPI1_Init+0xc4>)
 8000f74:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_OCTOSPI1_Init+0xbc>)
 8000f80:	f001 faae 	bl	80024e0 <HAL_OSPIM_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_OCTOSPI1_Init+0xb2>
  {
    Error_Handler();
 8000f8a:	f000 fc05 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2402719c 	.word	0x2402719c
 8000f9c:	52005000 	.word	0x52005000
 8000fa0:	01000001 	.word	0x01000001

08000fa4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <MX_SDMMC1_SD_Init+0x54>)
 8000fac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fba:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_SDMMC1_SD_Init+0x50>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_SDMMC1_SD_Init+0x58>)
 8000fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <MX_SDMMC1_SD_Init+0x58>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_SDMMC1_SD_Init+0x58>)
 8000fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <MX_SDMMC1_SD_Init+0x58>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	24027204 	.word	0x24027204
 8000ff8:	52007000 	.word	0x52007000
 8000ffc:	58024400 	.word	0x58024400

08001000 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	615a      	str	r2, [r3, #20]
 8001016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM13_Init+0x90>)
 800101a:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <MX_TIM13_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_TIM13_Init+0x90>)
 8001020:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001024:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM13_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM13_Init+0x90>)
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM13_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM13_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM13_Init+0x90>)
 8001042:	f008 fa6b 	bl	800951c <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800104c:	f000 fba4 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <MX_TIM13_Init+0x90>)
 8001052:	f008 fbbf 	bl	80097d4 <HAL_TIM_OC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800105c:	f000 fb9c 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM13_Init+0x90>)
 8001078:	f008 fd2c 	bl	8009ad4 <HAL_TIM_OC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001082:	f000 fb89 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24027484 	.word	0x24027484
 8001094:	40001c00 	.word	0x40001c00

08001098 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_USART3_UART_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <MX_USART3_UART_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010e2:	f009 f933 	bl	800a34c <HAL_UART_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f000 fb54 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010f4:	f00a f9c6 	bl	800b484 <HAL_UARTEx_SetTxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f000 fb4b 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001106:	f00a f9fb 	bl	800b500 <HAL_UARTEx_SetRxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001110:	f000 fb42 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001116:	f00a f97c 	bl	800b412 <HAL_UARTEx_DisableFifoMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001120:	f000 fb3a 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24027108 	.word	0x24027108
 800112c:	40004800 	.word	0x40004800

08001130 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_MDMA_Init+0xbc>)
 8001148:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <MX_MDMA_Init+0xbc>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_MDMA_Init+0xbc>)
 8001158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <MX_MDMA_Init+0xc4>)
 8001168:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_MDMA_Init+0xc0>)
 800116c:	221d      	movs	r2, #29
 800116e:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_MDMA_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001184:	2202      	movs	r2, #2
 8001186:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_MDMA_Init+0xc0>)
 800118a:	2208      	movs	r2, #8
 800118c:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_MDMA_Init+0xc0>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_MDMA_Init+0xc0>)
 800119c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011c2:	f003 fa56 	bl	8004672 <HAL_MDMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fae4 	bl	8001798 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <MX_MDMA_Init+0xc0>)
 80011d6:	f003 fa98 	bl	800470a <HAL_MDMA_ConfigPostRequestMask>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 80011e0:	f000 fada 	bl	8001798 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2105      	movs	r1, #5
 80011e8:	207a      	movs	r0, #122	; 0x7a
 80011ea:	f002 fc11 	bl	8003a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011ee:	207a      	movs	r0, #122	; 0x7a
 80011f0:	f002 fc28 	bl	8003a44 <HAL_NVIC_EnableIRQ>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58024400 	.word	0x58024400
 8001200:	2402753c 	.word	0x2402753c
 8001204:	52000040 	.word	0x52000040

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4baf      	ldr	r3, [pc, #700]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	4aad      	ldr	r2, [pc, #692]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122e:	4bab      	ldr	r3, [pc, #684]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	623b      	str	r3, [r7, #32]
 800123a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	4ba7      	ldr	r3, [pc, #668]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4aa6      	ldr	r2, [pc, #664]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4ba3      	ldr	r3, [pc, #652]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125a:	4ba0      	ldr	r3, [pc, #640]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	4a9e      	ldr	r2, [pc, #632]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126a:	4b9c      	ldr	r3, [pc, #624]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001278:	4b98      	ldr	r3, [pc, #608]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	4a97      	ldr	r2, [pc, #604]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001288:	4b94      	ldr	r3, [pc, #592]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b91      	ldr	r3, [pc, #580]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	4a8f      	ldr	r2, [pc, #572]	; (80014dc <MX_GPIO_Init+0x2d4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a6:	4b8d      	ldr	r3, [pc, #564]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b89      	ldr	r3, [pc, #548]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a88      	ldr	r2, [pc, #544]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b85      	ldr	r3, [pc, #532]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d2:	4b82      	ldr	r3, [pc, #520]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a80      	ldr	r2, [pc, #512]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b7e      	ldr	r3, [pc, #504]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a79      	ldr	r2, [pc, #484]	; (80014dc <MX_GPIO_Init+0x2d4>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b76      	ldr	r3, [pc, #472]	; (80014dc <MX_GPIO_Init+0x2d4>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ADC_OS0_Pin|ADC_OS1_Pin|ADC_OS2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2138      	movs	r1, #56	; 0x38
 8001312:	4873      	ldr	r0, [pc, #460]	; (80014e0 <MX_GPIO_Init+0x2d8>)
 8001314:	f003 f97a 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f244 0101 	movw	r1, #16385	; 0x4001
 800131e:	4871      	ldr	r0, [pc, #452]	; (80014e4 <MX_GPIO_Init+0x2dc>)
 8001320:	f003 f974 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	486f      	ldr	r0, [pc, #444]	; (80014e8 <MX_GPIO_Init+0x2e0>)
 800132a:	f003 f96f 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dummy_Data_GPIO_Port, Dummy_Data_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2102      	movs	r1, #2
 8001332:	486d      	ldr	r0, [pc, #436]	; (80014e8 <MX_GPIO_Init+0x2e0>)
 8001334:	f003 f96a 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	486b      	ldr	r0, [pc, #428]	; (80014ec <MX_GPIO_Init+0x2e4>)
 8001340:	f003 f964 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	4869      	ldr	r0, [pc, #420]	; (80014f0 <MX_GPIO_Init+0x2e8>)
 800134c:	f003 f95e 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CONV_AB_GPIO_Port, ADC_CONV_AB_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4866      	ldr	r0, [pc, #408]	; (80014f0 <MX_GPIO_Init+0x2e8>)
 8001356:	f003 f959 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	4863      	ldr	r0, [pc, #396]	; (80014ec <MX_GPIO_Init+0x2e4>)
 8001360:	f003 f954 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	485e      	ldr	r0, [pc, #376]	; (80014f4 <MX_GPIO_Init+0x2ec>)
 800137a:	f002 ff87 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_BUSY_1_Pin ADC_BUSY_2_Pin ADC_BUSY_3_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY_1_Pin|ADC_BUSY_2_Pin|ADC_BUSY_3_Pin;
 800137e:	2307      	movs	r3, #7
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4853      	ldr	r0, [pc, #332]	; (80014e0 <MX_GPIO_Init+0x2d8>)
 8001392:	f002 ff7b 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_OS0_Pin ADC_OS1_Pin ADC_OS2_Pin */
  GPIO_InitStruct.Pin = ADC_OS0_Pin|ADC_OS1_Pin|ADC_OS2_Pin;
 8001396:	2338      	movs	r3, #56	; 0x38
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	484c      	ldr	r0, [pc, #304]	; (80014e0 <MX_GPIO_Init+0x2d8>)
 80013ae:	f002 ff6d 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013b2:	f244 0301 	movw	r3, #16385	; 0x4001
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4846      	ldr	r0, [pc, #280]	; (80014e4 <MX_GPIO_Init+0x2dc>)
 80013cc:	f002 ff5e 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RESET_Pin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013d8:	2302      	movs	r3, #2
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_RESET_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4840      	ldr	r0, [pc, #256]	; (80014e8 <MX_GPIO_Init+0x2e0>)
 80013e8:	f002 ff50 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : Dummy_Data_Pin */
  GPIO_InitStruct.Pin = Dummy_Data_Pin;
 80013ec:	2302      	movs	r3, #2
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Dummy_Data_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4839      	ldr	r0, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x2e0>)
 8001404:	f002 ff42 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001412:	2302      	movs	r3, #2
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	4832      	ldr	r0, [pc, #200]	; (80014ec <MX_GPIO_Init+0x2e4>)
 8001422:	f002 ff33 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	482c      	ldr	r0, [pc, #176]	; (80014f0 <MX_GPIO_Init+0x2e8>)
 8001440:	f002 ff24 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001448:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_GPIO_Init+0x2e0>)
 800145a:	f002 ff17 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800145e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4821      	ldr	r0, [pc, #132]	; (80014f8 <MX_GPIO_Init+0x2f0>)
 8001474:	f002 ff0a 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800148a:	230a      	movs	r3, #10
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_GPIO_Init+0x2f0>)
 8001496:	f002 fef9 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CONV_AB_Pin */
  GPIO_InitStruct.Pin = ADC_CONV_AB_Pin;
 800149a:	2301      	movs	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CONV_AB_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480f      	ldr	r0, [pc, #60]	; (80014f0 <MX_GPIO_Init+0x2e8>)
 80014b2:	f002 feeb 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80014b6:	2302      	movs	r3, #2
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_GPIO_Init+0x2e4>)
 80014ce:	f002 fedd 	bl	800428c <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	; 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58021400 	.word	0x58021400
 80014e4:	58020400 	.word	0x58020400
 80014e8:	58021800 	.word	0x58021800
 80014ec:	58021000 	.word	0x58021000
 80014f0:	58020c00 	.word	0x58020c00
 80014f4:	58020800 	.word	0x58020800
 80014f8:	58020000 	.word	0x58020000

080014fc <WriteTime>:

/* USER CODE BEGIN 4 */

void WriteTime()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8001500:	2233      	movs	r2, #51	; 0x33
 8001502:	4918      	ldr	r1, [pc, #96]	; (8001564 <WriteTime+0x68>)
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <WriteTime+0x6c>)
 8001506:	f00c fea7 	bl	800e258 <f_open>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <WriteTime+0x70>)
 8001510:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <WriteTime+0x70>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <WriteTime+0x22>
	{
		Error_Handler();
 800151a:	f000 f93d 	bl	8001798 <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",(uint)HAL_GetTick());
 800151e:	f002 f97b 	bl	8003818 <HAL_GetTick>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4912      	ldr	r1, [pc, #72]	; (8001570 <WriteTime+0x74>)
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <WriteTime+0x78>)
 800152a:	f011 febd 	bl	80132a8 <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <WriteTime+0x78>)
 8001530:	f7fe feee 	bl	8000310 <strlen>
 8001534:	4602      	mov	r2, r0
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <WriteTime+0x7c>)
 8001538:	490e      	ldr	r1, [pc, #56]	; (8001574 <WriteTime+0x78>)
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <WriteTime+0x6c>)
 800153c:	f00d f851 	bl	800e5e2 <f_write>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <WriteTime+0x70>)
 8001546:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <WriteTime+0x7c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <WriteTime+0x62>
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <WriteTime+0x70>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <WriteTime+0x6c>)
 800155a:	f00d fa6f 	bl	800ea3c <f_close>
	}
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08013a48 	.word	0x08013a48
 8001568:	240276bc 	.word	0x240276bc
 800156c:	24027538 	.word	0x24027538
 8001570:	08013a50 	.word	0x08013a50
 8001574:	24000000 	.word	0x24000000
 8001578:	24027198 	.word	0x24027198

0800157c <FS_MOUNT>:



static void FS_MOUNT(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	4914      	ldr	r1, [pc, #80]	; (80015d8 <FS_MOUNT+0x5c>)
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <FS_MOUNT+0x60>)
 8001588:	f00c fe02 	bl	800e190 <f_mount>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <FS_MOUNT+0x64>)
 8001592:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <FS_MOUNT+0x64>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d119      	bne.n	80015d0 <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <FS_MOUNT+0x68>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d115      	bne.n	80015d0 <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <FS_MOUNT+0x6c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	2107      	movs	r1, #7
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <FS_MOUNT+0x5c>)
 80015b2:	f00d fa73 	bl	800ea9c <f_mkfs>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <FS_MOUNT+0x64>)
 80015bc:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <FS_MOUNT+0x64>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <FS_MOUNT+0x4e>
			{
				Error_Handler();
 80015c6:	f000 f8e7 	bl	8001798 <Error_Handler>
			}
		isFsCreated = 1;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <FS_MOUNT+0x68>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	240276b8 	.word	0x240276b8
 80015dc:	240278ec 	.word	0x240278ec
 80015e0:	24027538 	.word	0x24027538
 80015e4:	24008028 	.word	0x24008028
 80015e8:	24027284 	.word	0x24027284

080015ec <FS_SPAM>:

static void FS_SPAM(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 80015f2:	2233      	movs	r2, #51	; 0x33
 80015f4:	4917      	ldr	r1, [pc, #92]	; (8001654 <FS_SPAM+0x68>)
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <FS_SPAM+0x6c>)
 80015f8:	f00c fe2e 	bl	800e258 <f_open>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <FS_SPAM+0x70>)
 8001602:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <FS_SPAM+0x70>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11e      	bne.n	800164a <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e00d      	b.n	800162e <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <FS_SPAM+0x74>)
 8001614:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001618:	4912      	ldr	r1, [pc, #72]	; (8001664 <FS_SPAM+0x78>)
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <FS_SPAM+0x6c>)
 800161c:	f00c ffe1 	bl	800e5e2 <f_write>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <FS_SPAM+0x70>)
 8001626:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b63      	cmp	r3, #99	; 0x63
 8001632:	ddee      	ble.n	8001612 <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <FS_SPAM+0x74>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <FS_SPAM+0x5e>
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <FS_SPAM+0x70>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <FS_SPAM+0x6c>)
 8001646:	f00d f9f9 	bl	800ea3c <f_close>
		}
	}
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08013a6c 	.word	0x08013a6c
 8001658:	240276bc 	.word	0x240276bc
 800165c:	24027538 	.word	0x24027538
 8001660:	24027198 	.word	0x24027198
 8001664:	24000028 	.word	0x24000028

08001668 <EnableMemMappedQuadMode>:


void EnableMemMappedQuadMode(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b096      	sub	sp, #88	; 0x58
 800166c:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	HAL_StatusTypeDef res;
//	OSPI_MemoryMappedTypeDef sMemMappedCfg;

	sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
	sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
	// sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
	// sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
	// sCommand.Instruction = 0;

	sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
	// sCommand.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
	// sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
	// sCommand.Address = 0xF;
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30

	sCommand.DataMode = HAL_OSPI_DATA_8_LINES;
 800168a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800168e:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Using Single Data Rate (SDR)
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_ONLY_FIRST_CMD;
 8001694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001698:	653b      	str	r3, [r7, #80]	; 0x50

	sCommand.NbData = 64;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48

	res = HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4619      	mov	r1, r3
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <EnableMemMappedQuadMode+0x64>)
 80016ac:	f000 fd88 	bl	80021c0 <HAL_OSPI_Command>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res != HAL_OK)
 80016b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <EnableMemMappedQuadMode+0x5a>
	{
		Error_Handler();
 80016be:	f000 f86b 	bl	8001798 <Error_Handler>
	}
}
 80016c2:	bf00      	nop
 80016c4:	3758      	adds	r7, #88	; 0x58
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2402719c 	.word	0x2402719c

080016d0 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Disable SD card task when integrating ADC
	vTaskSuspend(NULL);
 80016d8:	2000      	movs	r0, #0
 80016da:	f00f fdf5 	bl	80112c8 <vTaskSuspend>
	int counter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(ServiceADCHandle);
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <StartSDCardTask+0x6c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00f fdee 	bl	80112c8 <vTaskSuspend>
	FS_MOUNT();
 80016ec:	f7ff ff46 	bl	800157c <FS_MOUNT>
	vTaskResume(ServiceADCHandle);
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <StartSDCardTask+0x6c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00f fe8f 	bl	8011418 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {
	counter++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2102      	movs	r1, #2
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <StartSDCardTask+0x70>)
 8001706:	f002 ff81 	bl	800460c <HAL_GPIO_WritePin>
	WriteTime();
 800170a:	f7ff fef7 	bl	80014fc <WriteTime>
	FS_SPAM();
 800170e:	f7ff ff6d 	bl	80015ec <FS_SPAM>
	WriteTime();
 8001712:	f7ff fef3 	bl	80014fc <WriteTime>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2102      	movs	r1, #2
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <StartSDCardTask+0x70>)
 800171c:	f002 ff76 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8001720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <StartSDCardTask+0x74>)
 8001726:	f002 ff8a 	bl	800463e <HAL_GPIO_TogglePin>
	if(counter>=1){
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dde4      	ble.n	80016fa <StartSDCardTask+0x2a>
		osDelay(10000);
 8001730:	f242 7010 	movw	r0, #10000	; 0x2710
 8001734:	f00d ffd7 	bl	800f6e6 <osDelay>
	counter++;
 8001738:	e7df      	b.n	80016fa <StartSDCardTask+0x2a>
 800173a:	bf00      	nop
 800173c:	24027534 	.word	0x24027534
 8001740:	58021000 	.word	0x58021000
 8001744:	58020400 	.word	0x58020400

08001748 <StartServiceADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServiceADC */
void StartServiceADC(void *argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	//vTaskSuspend(NULL);
  /* Infinite loop */
	/*
	* Perform task every xFrequency ticks
	*/
	const TickType_t xFrequency = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001754:	f00f ffda 	bl	801170c <xTaskGetTickCount>
 8001758:	4603      	mov	r3, r0
 800175a:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	ADC_SERVICE_ROUTINE(&ADC);
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <StartServiceADC+0x28>)
 800175e:	f7ff f943 	bl	80009e8 <ADC_SERVICE_ROUTINE>
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	68f9      	ldr	r1, [r7, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	f00f fcfb 	bl	8011164 <vTaskDelayUntil>
	ADC_SERVICE_ROUTINE(&ADC);
 800176e:	e7f5      	b.n	800175c <StartServiceADC+0x14>
 8001770:	2402704c 	.word	0x2402704c

08001774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001786:	f002 f833 	bl	80037f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40010000 	.word	0x40010000

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2101      	movs	r1, #1
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <Error_Handler+0x2c>)
 80017a2:	f002 ff33 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2102      	movs	r1, #2
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <Error_Handler+0x30>)
 80017ac:	f002 ff2e 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <Error_Handler+0x2c>)
 80017b8:	f002 ff28 	bl	800460c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x28>
 80017c2:	bf00      	nop
 80017c4:	58020400 	.word	0x58020400
 80017c8:	58021000 	.word	0x58021000

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x38>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_MspInit+0x38>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_MspInit+0x38>)
 80017e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	210f      	movs	r1, #15
 80017f4:	f06f 0001 	mvn.w	r0, #1
 80017f8:	f002 f90a 	bl	8003a10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400

08001808 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a59      	ldr	r2, [pc, #356]	; (800198c <HAL_ETH_MspInit+0x184>)
 8001826:	4293      	cmp	r3, r2
 8001828:	f040 80ab 	bne.w	8001982 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800182c:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800182e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001832:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_ETH_MspInit+0x188>)
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800183c:	4b54      	ldr	r3, [pc, #336]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800183e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800184a:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800184c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_ETH_MspInit+0x188>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800185a:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800185c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800186a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800186e:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_ETH_MspInit+0x188>)
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800187a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_ETH_MspInit+0x188>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188c:	4a40      	ldr	r2, [pc, #256]	; (8001990 <HAL_ETH_MspInit+0x188>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <HAL_ETH_MspInit+0x188>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	4a39      	ldr	r2, [pc, #228]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_ETH_MspInit+0x188>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018fe:	2332      	movs	r3, #50	; 0x32
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190e:	230b      	movs	r3, #11
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	481e      	ldr	r0, [pc, #120]	; (8001994 <HAL_ETH_MspInit+0x18c>)
 800191a:	f002 fcb7 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800191e:	2386      	movs	r3, #134	; 0x86
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800192e:	230b      	movs	r3, #11
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <HAL_ETH_MspInit+0x190>)
 800193a:	f002 fca7 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001950:	230b      	movs	r3, #11
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <HAL_ETH_MspInit+0x194>)
 800195c:	f002 fc96 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001960:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001972:	230b      	movs	r3, #11
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <HAL_ETH_MspInit+0x198>)
 800197e:	f002 fc85 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40028000 	.word	0x40028000
 8001990:	58024400 	.word	0x58024400
 8001994:	58020800 	.word	0x58020800
 8001998:	58020000 	.word	0x58020000
 800199c:	58020400 	.word	0x58020400
 80019a0:	58021800 	.word	0x58021800

080019a4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_OSPI_MspInit+0x208>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f040 80ee 	bne.w	8001ba4 <HAL_OSPI_MspInit+0x200>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019ce:	4a78      	ldr	r2, [pc, #480]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80019d8:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019ec:	4a70      	ldr	r2, [pc, #448]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80019f6:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 80019f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a04:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a69      	ldr	r2, [pc, #420]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a61      	ldr	r2, [pc, #388]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_OSPI_MspInit+0x20c>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> OCTOSPIM_P1_IO5
    PC3_C     ------> OCTOSPIM_P1_IO6
    PE7     ------> OCTOSPIM_P1_IO4
    PE10     ------> OCTOSPIM_P1_IO7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a6e:	2309      	movs	r3, #9
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	484e      	ldr	r0, [pc, #312]	; (8001bb4 <HAL_OSPI_MspInit+0x210>)
 8001a7a:	f002 fc07 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001a7e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a90:	230a      	movs	r3, #10
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4847      	ldr	r0, [pc, #284]	; (8001bb8 <HAL_OSPI_MspInit+0x214>)
 8001a9c:	f002 fbf6 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <HAL_OSPI_MspInit+0x214>)
 8001abe:	f002 fbe5 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4837      	ldr	r0, [pc, #220]	; (8001bbc <HAL_OSPI_MspInit+0x218>)
 8001ade:	f002 fbd5 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001ae2:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001af4:	230a      	movs	r3, #10
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	482d      	ldr	r0, [pc, #180]	; (8001bb4 <HAL_OSPI_MspInit+0x210>)
 8001b00:	f002 fbc4 	bl	800428c <HAL_GPIO_Init>

    /* OCTOSPI1 MDMA Init */
    /* OCTOSPI1_FIFO_TH Init */
    hmdma_octospi1_fifo_th.Instance = MDMA_Channel1;
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b06:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <HAL_OSPI_MspInit+0x220>)
 8001b08:	601a      	str	r2, [r3, #0]
    hmdma_octospi1_fifo_th.Init.Request = MDMA_REQUEST_OCTOSPI1_FIFO_TH;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b0c:	2216      	movs	r2, #22
 8001b0e:	605a      	str	r2, [r3, #4]
    hmdma_octospi1_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    hmdma_octospi1_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    hmdma_octospi1_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
    hmdma_octospi1_fifo_th.Init.SourceInc = MDMA_SRC_INC_DOUBLEWORD;
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b24:	f240 3202 	movw	r2, #770	; 0x302
 8001b28:	615a      	str	r2, [r3, #20]
    hmdma_octospi1_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DOUBLEWORD;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b2c:	f640 4208 	movw	r2, #3080	; 0xc08
 8001b30:	619a      	str	r2, [r3, #24]
    hmdma_octospi1_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b34:	2220      	movs	r2, #32
 8001b36:	61da      	str	r2, [r3, #28]
    hmdma_octospi1_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	621a      	str	r2, [r3, #32]
    hmdma_octospi1_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_octospi1_fifo_th.Init.BufferTransferLength = 1;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_octospi1_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_octospi1_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_octospi1_fifo_th.Init.SourceBlockAddressOffset = 0;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_octospi1_fifo_th.Init.DestBlockAddressOffset = 0;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_octospi1_fifo_th) != HAL_OK)
 8001b64:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b66:	f002 fd84 	bl	8004672 <HAL_MDMA_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_OSPI_MspInit+0x1d0>
    {
      Error_Handler();
 8001b70:	f7ff fe12 	bl	8001798 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_octospi1_fifo_th, 0, 0) != HAL_OK)
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b7a:	f002 fdc6 	bl	800470a <HAL_MDMA_ConfigPostRequestMask>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_OSPI_MspInit+0x1e4>
    {
      Error_Handler();
 8001b84:	f7ff fe08 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(hospi,hmdma,hmdma_octospi1_fifo_th);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_OSPI_MspInit+0x21c>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2105      	movs	r1, #5
 8001b98:	205c      	movs	r0, #92	; 0x5c
 8001b9a:	f001 ff39 	bl	8003a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001b9e:	205c      	movs	r0, #92	; 0x5c
 8001ba0:	f001 ff50 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	52005000 	.word	0x52005000
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58021000 	.word	0x58021000
 8001bb8:	58021400 	.word	0x58021400
 8001bbc:	58020800 	.word	0x58020800
 8001bc0:	24026fe0 	.word	0x24026fe0
 8001bc4:	52000080 	.word	0x52000080

08001bc8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <HAL_SD_MspInit+0xd8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d155      	bne.n	8001c96 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001bec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bf0:	4a2c      	ldr	r2, [pc, #176]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001bfc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_SD_MspInit+0xdc>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c44:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c56:	230c      	movs	r3, #12
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <HAL_SD_MspInit+0xe0>)
 8001c62:	f002 fb13 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c66:	2304      	movs	r3, #4
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c76:	230c      	movs	r3, #12
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <HAL_SD_MspInit+0xe4>)
 8001c82:	f002 fb03 	bl	800428c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2105      	movs	r1, #5
 8001c8a:	2031      	movs	r0, #49	; 0x31
 8001c8c:	f001 fec0 	bl	8003a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001c90:	2031      	movs	r0, #49	; 0x31
 8001c92:	f001 fed7 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	52007000 	.word	0x52007000
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58020800 	.word	0x58020800
 8001cac:	58020c00 	.word	0x58020c00

08001cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_TIM_Base_MspInit+0x3c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_TIM_Base_MspInit+0x40>)
 8001cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc8:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_TIM_Base_MspInit+0x40>)
 8001cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_TIM_Base_MspInit+0x40>)
 8001cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40001c00 	.word	0x40001c00
 8001cf0:	58024400 	.word	0x58024400

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0b6      	sub	sp, #216	; 0xd8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	22b4      	movs	r2, #180	; 0xb4
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f011 f9eb 	bl	80130f0 <memset>
  if(huart->Instance==USART3)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_UART_MspInit+0xc0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d142      	bne.n	8001daa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 ff04 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d3e:	f7ff fd2b 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_UART_MspInit+0xc4>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_UART_MspInit+0xc8>)
 8001da6:	f002 fa71 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	37d8      	adds	r7, #216	; 0xd8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004800 	.word	0x40004800
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58020c00 	.word	0x58020c00

08001dc0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f001 fd24 	bl	8003818 <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e0a6      	b.n	8001f2c <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 809f 	bne.w	8001f2c <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fdd8 	bl	80019a4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001df4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fb61 	bl	80024c0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_OSPI_Init+0x178>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68d1      	ldr	r1, [r2, #12]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6912      	ldr	r2, [r2, #16]
 8001e10:	3a01      	subs	r2, #1
 8001e12:	0412      	lsls	r2, r2, #16
 8001e14:	4311      	orrs	r1, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6952      	ldr	r2, [r2, #20]
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0212      	lsls	r2, r2, #8
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	69d2      	ldr	r2, [r2, #28]
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1a      	ldr	r2, [r3, #32]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e66:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f001 f878 	bl	8002f84 <OSPI_WaitFlagStateUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d146      	bne.n	8001f2c <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ed4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d107      	bne.n	8001f14 <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0202 	orr.w	r2, r2, #2
 8001f12:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1c:	d103      	bne.n	8001f26 <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
 8001f24:	e002      	b.n	8001f2c <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	f8e0f88c 	.word	0xf8e0f88c

08001f3c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3350      	adds	r3, #80	; 0x50
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03a      	beq.n	8001fe2 <HAL_OSPI_IRQHandler+0xa6>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d035      	beq.n	8001fe2 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b18      	cmp	r3, #24
 8001f7a:	d10f      	bne.n	8001f9c <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f9a:	e012      	b.n	8001fc2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b28      	cmp	r3, #40	; 0x28
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa34 	bl	8002448 <HAL_OSPI_FifoThresholdCallback>
 8001fe0:	e0e7      	b.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d067      	beq.n	80020bc <HAL_OSPI_IRQHandler+0x180>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d062      	beq.n	80020bc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b28      	cmp	r3, #40	; 0x28
 8001ffa:	d131      	bne.n	8002060 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_OSPI_IRQHandler+0xf4>
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800202e:	e0bd      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 80b9 	bne.w	80021ac <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2202      	movs	r2, #2
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002050:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa09 	bl	8002470 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800205e:	e0a5      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002076:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b18      	cmp	r3, #24
 8002082:	d103      	bne.n	800208c <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f9fd 	bl	8002484 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800208a:	e08f      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d103      	bne.n	800209a <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9e2 	bl	800245c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8002098:	e088      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	f040 8084 	bne.w	80021ac <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9c1 	bl	8002434 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80020b2:	e07b      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f9b3 	bl	8002420 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80020ba:	e077      	b.n	80021ac <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01e      	beq.n	8002104 <HAL_OSPI_IRQHandler+0x1c8>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d019      	beq.n	8002104 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2208      	movs	r2, #8
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80020f4:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9cb 	bl	8002498 <HAL_OSPI_StatusMatchCallback>
 8002102:	e056      	b.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_OSPI_IRQHandler+0x24c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d037      	beq.n	8002188 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800212e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01a      	beq.n	800217a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_OSPI_IRQHandler+0x280>)
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	4618      	mov	r0, r3
 8002162:	f002 fb24 	bl	80047ae <HAL_MDMA_Abort_IT>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d021      	beq.n	80021b0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f954 	bl	8002420 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002178:	e01a      	b.n	80021b0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f94d 	bl	8002420 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002186:	e013      	b.n	80021b0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f981 	bl	80024ac <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021aa:	e002      	b.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80021b0:	bf00      	nop
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	08002f0d 	.word	0x08002f0d

080021c0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f001 fb24 	bl	8003818 <HAL_GetTick>
 80021d0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d104      	bne.n	80021ee <HAL_OSPI_Command+0x2e>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ec:	d115      	bne.n	800221a <HAL_OSPI_Command+0x5a>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b14      	cmp	r3, #20
 80021f2:	d107      	bne.n	8002204 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d00e      	beq.n	800221a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d00a      	beq.n	800221a <HAL_OSPI_Command+0x5a>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b24      	cmp	r3, #36	; 0x24
 8002208:	d15b      	bne.n	80022c2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d003      	beq.n	800221a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8002216:	2b03      	cmp	r3, #3
 8002218:	d153      	bne.n	80022c2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2200      	movs	r2, #0
 8002222:	2120      	movs	r1, #32
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fead 	bl	8002f84 <OSPI_WaitFlagStateUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d14c      	bne.n	80022ce <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fed9 	bl	8002ff4 <OSPI_ConfigCmd>
 8002242:	4603      	mov	r3, r0
 8002244:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d140      	bne.n	80022ce <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10e      	bne.n	8002272 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2201      	movs	r2, #1
 800225c:	2102      	movs	r1, #2
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fe90 	bl	8002f84 <OSPI_WaitFlagStateUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2202      	movs	r2, #2
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002270:	e02d      	b.n	80022ce <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2204      	movs	r2, #4
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8002280:	e025      	b.n	80022ce <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10b      	bne.n	80022a2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	2b24      	cmp	r3, #36	; 0x24
 8002290:	d103      	bne.n	800229a <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2204      	movs	r2, #4
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8002298:	e019      	b.n	80022ce <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2214      	movs	r2, #20
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80022a0:	e015      	b.n	80022ce <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d111      	bne.n	80022ce <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	2b14      	cmp	r3, #20
 80022b0:	d103      	bne.n	80022ba <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2204      	movs	r2, #4
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80022b8:	e009      	b.n	80022ce <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2224      	movs	r2, #36	; 0x24
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80022c0:	e005      	b.n	80022ce <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
 80022cc:	e000      	b.n	80022d0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80022ce:	bf00      	nop
  }

  /* Return function status */
  return status;
 80022d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08c      	sub	sp, #48	; 0x30
 80022de:	af02      	add	r7, sp, #8
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022e6:	f001 fa97 	bl	8003818 <HAL_GetTick>
 80022ea:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3350      	adds	r3, #80	; 0x50
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002304:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2208      	movs	r2, #8
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
 8002318:	e07c      	b.n	8002414 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	2b04      	cmp	r3, #4
 8002320:	d172      	bne.n	8002408 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800234e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002358:	d104      	bne.n	8002364 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	649a      	str	r2, [r3, #72]	; 0x48
 8002362:	e011      	b.n	8002388 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800236c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	649a      	str	r2, [r3, #72]	; 0x48
 800237c:	e004      	b.n	8002388 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	2201      	movs	r2, #1
 8002390:	2106      	movs	r1, #6
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fdf6 	bl	8002f84 <OSPI_WaitFlagStateUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d114      	bne.n	80023d0 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1dc      	bne.n	8002388 <HAL_OSPI_Receive+0xae>
 80023ce:	e000      	b.n	80023d2 <HAL_OSPI_Receive+0xf8>
          break;
 80023d0:	bf00      	nop

      if (status == HAL_OK)
 80023d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11c      	bne.n	8002414 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2201      	movs	r2, #1
 80023e2:	2102      	movs	r1, #2
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fdcd 	bl	8002f84 <OSPI_WaitFlagStateUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80023f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2202      	movs	r2, #2
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2202      	movs	r2, #2
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
 8002406:	e005      	b.n	8002414 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2210      	movs	r2, #16
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 8002414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002418:	4618      	mov	r0, r3
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b094      	sub	sp, #80	; 0x50
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4aa3      	ldr	r2, [pc, #652]	; (800278c <HAL_OSPIM_Config+0x2ac>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d105      	bne.n	800250e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800250c:	e004      	b.n	8002518 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800250e:	2301      	movs	r3, #1
 8002510:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800251e:	e01d      	b.n	800255c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002520:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002524:	3301      	adds	r3, #1
 8002526:	b2d8      	uxtb	r0, r3
 8002528:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800252c:	f107 0114 	add.w	r1, r7, #20
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	4619      	mov	r1, r3
 800253c:	f000 fee6 	bl	800330c <OSPIM_GetConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2208      	movs	r2, #8
 8002550:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002556:	3301      	adds	r3, #1
 8002558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800255c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002560:	2b01      	cmp	r3, #1
 8002562:	d9dd      	bls.n	8002520 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002564:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 84c3 	bne.w	8002ef4 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800256e:	4b87      	ldr	r3, [pc, #540]	; (800278c <HAL_OSPIM_Config+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800257a:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_OSPIM_Config+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a83      	ldr	r2, [pc, #524]	; (800278c <HAL_OSPIM_Config+0x2ac>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002586:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002592:	4b7f      	ldr	r3, [pc, #508]	; (8002790 <HAL_OSPIM_Config+0x2b0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800259e:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <HAL_OSPIM_Config+0x2b0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7b      	ldr	r2, [pc, #492]	; (8002790 <HAL_OSPIM_Config+0x2b0>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80025aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80025b6:	4977      	ldr	r1, [pc, #476]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 80025b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025c6:	4413      	add	r3, r2
 80025c8:	3b34      	subs	r3, #52	; 0x34
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	486f      	ldr	r0, [pc, #444]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 80025d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025e4:	4413      	add	r3, r2
 80025e6:	3b34      	subs	r3, #52	; 0x34
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80ca 	beq.w	8002798 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002604:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a62      	ldr	r2, [pc, #392]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002610:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 8178 	bne.w	800290a <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800261a:	495e      	ldr	r1, [pc, #376]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 800261c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800262c:	4413      	add	r3, r2
 800262e:	3b3c      	subs	r3, #60	; 0x3c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	4856      	ldr	r0, [pc, #344]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 800263c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800264c:	4413      	add	r3, r2
 800264e:	3b3c      	subs	r3, #60	; 0x3c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	f041 0202 	orr.w	r2, r1, #2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800265e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800266e:	4413      	add	r3, r2
 8002670:	3b38      	subs	r3, #56	; 0x38
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d021      	beq.n	80026bc <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8002678:	4946      	ldr	r1, [pc, #280]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 800267a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800268a:	4413      	add	r3, r2
 800268c:	3b38      	subs	r3, #56	; 0x38
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	483e      	ldr	r0, [pc, #248]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 800269a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026aa:	4413      	add	r3, r2
 80026ac:	3b38      	subs	r3, #56	; 0x38
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	f041 0220 	orr.w	r2, r1, #32
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4403      	add	r3, r0
 80026ba:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80026bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026cc:	4413      	add	r3, r2
 80026ce:	3b30      	subs	r3, #48	; 0x30
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d025      	beq.n	8002722 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 80026d6:	492f      	ldr	r1, [pc, #188]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 80026d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026e8:	4413      	add	r3, r2
 80026ea:	3b30      	subs	r3, #48	; 0x30
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	4826      	ldr	r0, [pc, #152]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 80026fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800270c:	4413      	add	r3, r2
 800270e:	3b30      	subs	r3, #48	; 0x30
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002722:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002732:	4413      	add	r3, r2
 8002734:	3b2c      	subs	r3, #44	; 0x2c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80e6 	beq.w	800290a <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800273e:	4915      	ldr	r1, [pc, #84]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 8002740:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002750:	4413      	add	r3, r2
 8002752:	3b2c      	subs	r3, #44	; 0x2c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3b01      	subs	r3, #1
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	480c      	ldr	r0, [pc, #48]	; (8002794 <HAL_OSPIM_Config+0x2b4>)
 8002764:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002774:	4413      	add	r3, r2
 8002776:	3b2c      	subs	r3, #44	; 0x2c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e0be      	b.n	800290a <HAL_OSPIM_Config+0x42a>
 800278c:	52005000 	.word	0x52005000
 8002790:	5200a000 	.word	0x5200a000
 8002794:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027a6:	4413      	add	r3, r2
 80027a8:	3b3c      	subs	r3, #60	; 0x3c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80ac 	beq.w	800290a <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80027b2:	499d      	ldr	r1, [pc, #628]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 80027b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027c2:	4413      	add	r3, r2
 80027c4:	3b3c      	subs	r3, #60	; 0x3c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	4895      	ldr	r0, [pc, #596]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 80027d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027e0:	4413      	add	r3, r2
 80027e2:	3b3c      	subs	r3, #60	; 0x3c
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f021 0201 	bic.w	r2, r1, #1
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4403      	add	r3, r0
 80027f0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80027f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002800:	4413      	add	r3, r2
 8002802:	3b38      	subs	r3, #56	; 0x38
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01f      	beq.n	800284a <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800280a:	4987      	ldr	r1, [pc, #540]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 800280c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800281a:	4413      	add	r3, r2
 800281c:	3b38      	subs	r3, #56	; 0x38
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3b01      	subs	r3, #1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	487f      	ldr	r0, [pc, #508]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 800282a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002838:	4413      	add	r3, r2
 800283a:	3b38      	subs	r3, #56	; 0x38
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3b01      	subs	r3, #1
 8002840:	f021 0210 	bic.w	r2, r1, #16
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4403      	add	r3, r0
 8002848:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002858:	4413      	add	r3, r2
 800285a:	3b30      	subs	r3, #48	; 0x30
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d023      	beq.n	80028aa <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002862:	4971      	ldr	r1, [pc, #452]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 8002864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002872:	4413      	add	r3, r2
 8002874:	3b30      	subs	r3, #48	; 0x30
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	4868      	ldr	r0, [pc, #416]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 8002886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002894:	4413      	add	r3, r2
 8002896:	3b30      	subs	r3, #48	; 0x30
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3b01      	subs	r3, #1
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4403      	add	r3, r0
 80028a8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80028aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028b8:	4413      	add	r3, r2
 80028ba:	3b2c      	subs	r3, #44	; 0x2c
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d023      	beq.n	800290a <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80028c2:	4959      	ldr	r1, [pc, #356]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 80028c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028d2:	4413      	add	r3, r2
 80028d4:	3b2c      	subs	r3, #44	; 0x2c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	4850      	ldr	r0, [pc, #320]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 80028e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028f4:	4413      	add	r3, r2
 80028f6:	3b2c      	subs	r3, #44	; 0x2c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4403      	add	r3, r0
 8002908:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800291e:	4413      	add	r3, r2
 8002920:	3b3c      	subs	r3, #60	; 0x3c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4299      	cmp	r1, r3
 8002926:	d03c      	beq.n	80029a2 <HAL_OSPIM_Config+0x4c2>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800293c:	4413      	add	r3, r2
 800293e:	3b38      	subs	r3, #56	; 0x38
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4299      	cmp	r1, r3
 8002944:	d02d      	beq.n	80029a2 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800295a:	4413      	add	r3, r2
 800295c:	3b34      	subs	r3, #52	; 0x34
 800295e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002960:	4299      	cmp	r1, r3
 8002962:	d01e      	beq.n	80029a2 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	68d9      	ldr	r1, [r3, #12]
 8002968:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002978:	4413      	add	r3, r2
 800297a:	3b30      	subs	r3, #48	; 0x30
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4299      	cmp	r1, r3
 8002980:	d00f      	beq.n	80029a2 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002996:	4413      	add	r3, r2
 8002998:	3b2c      	subs	r3, #44	; 0x2c
 800299a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800299c:	4299      	cmp	r1, r3
 800299e:	f040 811e 	bne.w	8002bde <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029b6:	4413      	add	r3, r2
 80029b8:	3b3c      	subs	r3, #60	; 0x3c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4299      	cmp	r1, r3
 80029be:	d135      	bne.n	8002a2c <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029d4:	4413      	add	r3, r2
 80029d6:	3b38      	subs	r3, #56	; 0x38
 80029d8:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80029da:	4299      	cmp	r1, r3
 80029dc:	d126      	bne.n	8002a2c <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029f2:	4413      	add	r3, r2
 80029f4:	3b30      	subs	r3, #48	; 0x30
 80029f6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80029f8:	4299      	cmp	r1, r3
 80029fa:	d117      	bne.n	8002a2c <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6919      	ldr	r1, [r3, #16]
 8002a00:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a10:	4413      	add	r3, r2
 8002a12:	3b2c      	subs	r3, #44	; 0x2c
 8002a14:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002a16:	4299      	cmp	r1, r3
 8002a18:	d108      	bne.n	8002a2c <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002a1a:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_OSPIM_Config+0x548>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e0da      	b.n	8002bde <HAL_OSPIM_Config+0x6fe>
 8002a28:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002a2c:	49c2      	ldr	r1, [pc, #776]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002a2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b3c      	subs	r3, #60	; 0x3c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	48ba      	ldr	r0, [pc, #744]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002a4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b3c      	subs	r3, #60	; 0x3c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	f021 0201 	bic.w	r2, r1, #1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4403      	add	r3, r0
 8002a6e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002a70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a80:	4413      	add	r3, r2
 8002a82:	3b38      	subs	r3, #56	; 0x38
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d021      	beq.n	8002ace <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002a8a:	49ab      	ldr	r1, [pc, #684]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002a8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b38      	subs	r3, #56	; 0x38
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	48a3      	ldr	r0, [pc, #652]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002aac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002abc:	4413      	add	r3, r2
 8002abe:	3b38      	subs	r3, #56	; 0x38
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f021 0210 	bic.w	r2, r1, #16
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002ace:	499a      	ldr	r1, [pc, #616]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002ad0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b34      	subs	r3, #52	; 0x34
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	4892      	ldr	r0, [pc, #584]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002af0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b00:	4413      	add	r3, r2
 8002b02:	3b34      	subs	r3, #52	; 0x34
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b22:	4413      	add	r3, r2
 8002b24:	3b30      	subs	r3, #48	; 0x30
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d025      	beq.n	8002b78 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b2c:	4982      	ldr	r1, [pc, #520]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002b2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b30      	subs	r3, #48	; 0x30
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	4879      	ldr	r0, [pc, #484]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002b52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b62:	4413      	add	r3, r2
 8002b64:	3b30      	subs	r3, #48	; 0x30
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4403      	add	r3, r0
 8002b76:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b2c      	subs	r3, #44	; 0x2c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d025      	beq.n	8002bde <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b92:	4969      	ldr	r1, [pc, #420]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002b94:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b2c      	subs	r3, #44	; 0x2c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	4860      	ldr	r0, [pc, #384]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002bb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bc8:	4413      	add	r3, r2
 8002bca:	3b2c      	subs	r3, #44	; 0x2c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002bde:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	4950      	ldr	r1, [pc, #320]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0c1b      	lsrs	r3, r3, #16
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d90a      	bls.n	8002c30 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	4943      	ldr	r1, [pc, #268]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 809b 	beq.w	8002d74 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002c6a:	4a33      	ldr	r2, [pc, #204]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c7c:	492e      	ldr	r1, [pc, #184]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f042 0210 	orr.w	r2, r2, #16
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002cb0:	4921      	ldr	r1, [pc, #132]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	e019      	b.n	8002cfc <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ce6:	4914      	ldr	r1, [pc, #80]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d019      	beq.n	8002d3c <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d1e:	4906      	ldr	r1, [pc, #24]	; (8002d38 <HAL_OSPIM_Config+0x858>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	e0c6      	b.n	8002ec4 <HAL_OSPIM_Config+0x9e4>
 8002d36:	bf00      	nop
 8002d38:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80bf 	beq.w	8002ec4 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002d46:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002d5c:	4968      	ldr	r1, [pc, #416]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	e0a7      	b.n	8002ec4 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002d74:	4a62      	ldr	r2, [pc, #392]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	495c      	ldr	r1, [pc, #368]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002da6:	4a56      	ldr	r2, [pc, #344]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dba:	015b      	lsls	r3, r3, #5
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	4950      	ldr	r1, [pc, #320]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	f042 0210 	orr.w	r2, r2, #16
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002ddc:	4a48      	ldr	r2, [pc, #288]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	049b      	lsls	r3, r3, #18
 8002df6:	431a      	orrs	r2, r3
 8002df8:	4941      	ldr	r1, [pc, #260]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e01c      	b.n	8002e4a <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e18:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e30:	069b      	lsls	r3, r3, #26
 8002e32:	431a      	orrs	r2, r3
 8002e34:	4932      	ldr	r1, [pc, #200]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d019      	beq.n	8002e8a <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e56:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	049b      	lsls	r3, r3, #18
 8002e70:	431a      	orrs	r2, r3
 8002e72:	4923      	ldr	r1, [pc, #140]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	e01c      	b.n	8002ec4 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e92:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	431a      	orrs	r2, r3
 8002eae:	4914      	ldr	r1, [pc, #80]	; (8002f00 <HAL_OSPIM_Config+0xa20>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002ec4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_OSPIM_Config+0xa24>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_OSPIM_Config+0xa24>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002edc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_OSPIM_Config+0xa28>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <HAL_OSPIM_Config+0xa28>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002ef4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3750      	adds	r7, #80	; 0x50
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	5200b400 	.word	0x5200b400
 8002f04:	52005000 	.word	0x52005000
 8002f08:	5200a000 	.word	0x5200a000

08002f0c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f28:	d122      	bne.n	8002f70 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0202 	orr.w	r2, r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8002f60:	e00c      	b.n	8002f7c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fa63 	bl	8002434 <HAL_OSPI_AbortCpltCallback>
}
 8002f6e:	e005      	b.n	8002f7c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2202      	movs	r2, #2
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fa52 	bl	8002420 <HAL_OSPI_ErrorCallback>
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002f94:	e01a      	b.n	8002fcc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d016      	beq.n	8002fcc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f000 fc3b 	bl	8003818 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e00e      	b.n	8002fea <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1d6      	bne.n	8002f96 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003010:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d114      	bne.n	8003062 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003040:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800304a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003054:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e02c      	b.n	80030bc <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d114      	bne.n	8003094 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003072:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800307c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003086:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e013      	b.n	80030bc <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800309c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80030a6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80030b0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	431a      	orrs	r2, r3
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d012      	beq.n	80030f8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	4319      	orrs	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	430b      	orrs	r3, r1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 021f 	bic.w	r2, r3, #31
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	431a      	orrs	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3a01      	subs	r2, #1
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8095 	beq.w	800325a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d053      	beq.n	80031e0 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01e      	beq.n	800317e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <OSPI_ConfigCmd+0x308>)
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	68d1      	ldr	r1, [r2, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6952      	ldr	r2, [r2, #20]
 8003150:	4311      	orrs	r1, r2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	6912      	ldr	r2, [r2, #16]
 8003156:	4311      	orrs	r1, r2
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	69d2      	ldr	r2, [r2, #28]
 800315c:	4311      	orrs	r1, r2
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003162:	4311      	orrs	r1, r2
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	6a12      	ldr	r2, [r2, #32]
 8003168:	4311      	orrs	r1, r2
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800316e:	4311      	orrs	r1, r2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003174:	430a      	orrs	r2, r1
 8003176:	431a      	orrs	r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e026      	b.n	80031cc <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <OSPI_ConfigCmd+0x30c>)
 8003184:	4013      	ands	r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	68d1      	ldr	r1, [r2, #12]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	6952      	ldr	r2, [r2, #20]
 800318e:	4311      	orrs	r1, r2
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	6912      	ldr	r2, [r2, #16]
 8003194:	4311      	orrs	r1, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	69d2      	ldr	r2, [r2, #28]
 800319a:	4311      	orrs	r1, r2
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a0:	4311      	orrs	r1, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	6a12      	ldr	r2, [r2, #32]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b6:	d109      	bne.n	80031cc <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d105      	bne.n	80031cc <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	6992      	ldr	r2, [r2, #24]
 80031dc:	649a      	str	r2, [r3, #72]	; 0x48
 80031de:	e085      	b.n	80032ec <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d015      	beq.n	8003214 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b45      	ldr	r3, [pc, #276]	; (8003304 <OSPI_ConfigCmd+0x310>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	68d1      	ldr	r1, [r2, #12]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	6952      	ldr	r2, [r2, #20]
 80031f8:	4311      	orrs	r1, r2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	6912      	ldr	r2, [r2, #16]
 80031fe:	4311      	orrs	r1, r2
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003204:	4311      	orrs	r1, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800320a:	430a      	orrs	r2, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e01d      	b.n	8003250 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	4319      	orrs	r1, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	430b      	orrs	r3, r1
 800322c:	431a      	orrs	r2, r3
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323a:	d109      	bne.n	8003250 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003240:	2b08      	cmp	r3, #8
 8003242:	d105      	bne.n	8003250 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e048      	b.n	80032ec <OSPI_ConfigCmd+0x2f8>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d02e      	beq.n	80032c0 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <OSPI_ConfigCmd+0x314>)
 8003270:	4013      	ands	r3, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	69d1      	ldr	r1, [r2, #28]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800327a:	4311      	orrs	r1, r2
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	6a12      	ldr	r2, [r2, #32]
 8003280:	4311      	orrs	r1, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003286:	4311      	orrs	r1, r2
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800328c:	430a      	orrs	r2, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e00e      	b.n	80032b4 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	69d9      	ldr	r1, [r3, #28]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	4319      	orrs	r1, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6992      	ldr	r2, [r2, #24]
 80032bc:	649a      	str	r2, [r3, #72]	; 0x48
 80032be:	e015      	b.n	80032ec <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
		if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00c      	beq.n	80032e2 <OSPI_ConfigCmd+0x2ee>
		{
			// ---- Command with data ----

			// Configure the CCR register with all communication parameters
			MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_DMODE  | OCTOSPI_CCR_DDTR),
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	430b      	orrs	r3, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e004      	b.n	80032ec <OSPI_ConfigCmd+0x2f8>
								 (cmd->DataMode    | cmd->DataDtrMode));
		}else{
		      /* ---- Invalid command configuration (no instruction, no address) ---- */
		      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77fb      	strb	r3, [r7, #31]
		      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2208      	movs	r2, #8
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58
		}
    }
  }

  /* Return function status */
  return status;
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	f0ffc0c0 	.word	0xf0ffc0c0
 8003300:	ffffc0c0 	.word	0xffffc0c0
 8003304:	f0ffffc0 	.word	0xf0ffffc0
 8003308:	f0ffc0ff 	.word	0xf0ffc0ff

0800330c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <OSPIM_GetConfig+0x26>
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d802      	bhi.n	8003332 <OSPIM_GetConfig+0x26>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	e098      	b.n	800346a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d10b      	bne.n	8003374 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <OSPIM_GetConfig+0x16c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003368:	4b44      	ldr	r3, [pc, #272]	; (800347c <OSPIM_GetConfig+0x170>)
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	e002      	b.n	8003374 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800336e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003372:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e074      	b.n	8003464 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800337a:	4a3f      	ldr	r2, [pc, #252]	; (8003478 <OSPIM_GetConfig+0x16c>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4053      	eors	r3, r2
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4053      	eors	r3, r2
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4053      	eors	r3, r2
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d018      	beq.n	8003422 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4053      	eors	r3, r2
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d111      	bne.n	8003422 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e005      	b.n	8003422 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3301      	adds	r3, #1
 800341a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4053      	eors	r3, r2
 8003432:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d111      	bne.n	800345e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3301      	adds	r3, #1
 8003448:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	611a      	str	r2, [r3, #16]
 8003450:	e005      	b.n	800345e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3301      	adds	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d987      	bls.n	800337a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	5200b400 	.word	0x5200b400
 800347c:	04040222 	.word	0x04040222

08003480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	d844      	bhi.n	8003518 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800348e:	2200      	movs	r2, #0
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	2019      	movs	r0, #25
 8003494:	f000 fabc 	bl	8003a10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003498:	2019      	movs	r0, #25
 800349a:	f000 fad3 	bl	8003a44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800349e:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_InitTick+0xb0>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <HAL_InitTick+0xb4>)
 80034a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_InitTick+0xb4>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034b4:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <HAL_InitTick+0xb4>)
 80034b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034c2:	f107 020c 	add.w	r2, r7, #12
 80034c6:	f107 0310 	add.w	r3, r7, #16
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f002 faf5 	bl	8005abc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80034d2:	f002 fadd 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 80034d6:	4603      	mov	r3, r0
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_InitTick+0xb8>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	3b01      	subs	r3, #1
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_InitTick+0xbc>)
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_InitTick+0xc0>)
 80034ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_InitTick+0xbc>)
 80034f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80034f8:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_InitTick+0xbc>)
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_InitTick+0xbc>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_InitTick+0xbc>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800350a:	480c      	ldr	r0, [pc, #48]	; (800353c <HAL_InitTick+0xbc>)
 800350c:	f006 f806 	bl	800951c <HAL_TIM_Base_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <HAL_InitTick+0xa6>
 8003516:	e001      	b.n	800351c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e005      	b.n	8003528 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800351c:	4807      	ldr	r0, [pc, #28]	; (800353c <HAL_InitTick+0xbc>)
 800351e:	f006 f8d3 	bl	80096c8 <HAL_TIM_Base_Start_IT>
 8003522:	4603      	mov	r3, r0
 8003524:	e000      	b.n	8003528 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3738      	adds	r7, #56	; 0x38
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	24008034 	.word	0x24008034
 8003534:	58024400 	.word	0x58024400
 8003538:	431bde83 	.word	0x431bde83
 800353c:	24027664 	.word	0x24027664
 8003540:	40010000 	.word	0x40010000

08003544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <NMI_Handler+0x4>

0800354a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <MemManage_Handler+0x4>

08003556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355a:	e7fe      	b.n	800355a <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <UsageFault_Handler+0x4>

08003562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <TIM1_UP_IRQHandler+0x10>)
 8003576:	f006 f98e 	bl	8009896 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	24027664 	.word	0x24027664

08003584 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <SDMMC1_IRQHandler+0x10>)
 800358a:	f004 fdd5 	bl	8008138 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	24027204 	.word	0x24027204

08003598 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <OCTOSPI1_IRQHandler+0x10>)
 800359e:	f7fe fccd 	bl	8001f3c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2402719c 	.word	0x2402719c

080035ac <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <MDMA_IRQHandler+0x14>)
 80035b2:	f001 f923 	bl	80047fc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_octospi1_fifo_th);
 80035b6:	4803      	ldr	r0, [pc, #12]	; (80035c4 <MDMA_IRQHandler+0x18>)
 80035b8:	f001 f920 	bl	80047fc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	2402753c 	.word	0x2402753c
 80035c4:	24026fe0 	.word	0x24026fe0

080035c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f8:	f00f fd40 	bl	801307c <__errno>
 80035fc:	4603      	mov	r3, r0
 80035fe:	220c      	movs	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	24050000 	.word	0x24050000
 8003628:	00000400 	.word	0x00000400
 800362c:	240081cc 	.word	0x240081cc
 8003630:	24027b70 	.word	0x24027b70

08003634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <SystemInit+0xd0>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <SystemInit+0xd0>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <SystemInit+0xd4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	2b06      	cmp	r3, #6
 8003652:	d807      	bhi.n	8003664 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <SystemInit+0xd4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 030f 	bic.w	r3, r3, #15
 800365c:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <SystemInit+0xd4>)
 800365e:	f043 0307 	orr.w	r3, r3, #7
 8003662:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <SystemInit+0xd8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <SystemInit+0xd8>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <SystemInit+0xd8>)
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <SystemInit+0xd8>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4924      	ldr	r1, [pc, #144]	; (800370c <SystemInit+0xd8>)
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <SystemInit+0xdc>)
 800367e:	4013      	ands	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003682:	4b21      	ldr	r3, [pc, #132]	; (8003708 <SystemInit+0xd4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <SystemInit+0xd4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 030f 	bic.w	r3, r3, #15
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <SystemInit+0xd4>)
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <SystemInit+0xd8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <SystemInit+0xd8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <SystemInit+0xd8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <SystemInit+0xd8>)
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <SystemInit+0xe0>)
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <SystemInit+0xd8>)
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <SystemInit+0xe4>)
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <SystemInit+0xd8>)
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <SystemInit+0xe8>)
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <SystemInit+0xd8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <SystemInit+0xd8>)
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <SystemInit+0xe8>)
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <SystemInit+0xd8>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <SystemInit+0xd8>)
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <SystemInit+0xe8>)
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <SystemInit+0xd8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <SystemInit+0xd8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <SystemInit+0xd8>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <SystemInit+0xd8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <SystemInit+0xec>)
 80036f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036f8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	52002000 	.word	0x52002000
 800370c:	58024400 	.word	0x58024400
 8003710:	eaf6ed7f 	.word	0xeaf6ed7f
 8003714:	02020200 	.word	0x02020200
 8003718:	01ff0000 	.word	0x01ff0000
 800371c:	01010280 	.word	0x01010280
 8003720:	52004000 	.word	0x52004000

08003724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800375c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003728:	f7ff ff84 	bl	8003634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003734:	e002      	b.n	800373c <LoopCopyDataInit>

08003736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373a:	3304      	adds	r3, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800373c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003740:	d3f9      	bcc.n	8003736 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003744:	4c0a      	ldr	r4, [pc, #40]	; (8003770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003748:	e001      	b.n	800374e <LoopFillZerobss>

0800374a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800374c:	3204      	adds	r2, #4

0800374e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003750:	d3fb      	bcc.n	800374a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003752:	f00f fc99 	bl	8013088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003756:	f7fd fa2f 	bl	8000bb8 <main>
  bx  lr
 800375a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800375c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003760:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003764:	240080a4 	.word	0x240080a4
  ldr r2, =_sidata
 8003768:	08013cac 	.word	0x08013cac
  ldr r2, =_sbss
 800376c:	24008164 	.word	0x24008164
  ldr r4, =_ebss
 8003770:	24027b70 	.word	0x24027b70

08003774 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003774:	e7fe      	b.n	8003774 <ADC3_IRQHandler>
	...

08003778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377e:	2003      	movs	r0, #3
 8003780:	f000 f93b 	bl	80039fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003784:	f001 ffc4 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_Init+0x68>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	4913      	ldr	r1, [pc, #76]	; (80037e4 <HAL_Init+0x6c>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_Init+0x68>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_Init+0x6c>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_Init+0x70>)
 80037ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_Init+0x74>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c2:	200f      	movs	r0, #15
 80037c4:	f7ff fe5c 	bl	8003480 <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e002      	b.n	80037d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037d2:	f7fd fffb 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	58024400 	.word	0x58024400
 80037e4:	08013b1c 	.word	0x08013b1c
 80037e8:	24008030 	.word	0x24008030
 80037ec:	2400802c 	.word	0x2400802c

080037f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	24008038 	.word	0x24008038
 8003814:	240276b0 	.word	0x240276b0

08003818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	240276b0 	.word	0x240276b0

08003830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff ffee 	bl	8003818 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d005      	beq.n	8003856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_Delay+0x44>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003856:	bf00      	nop
 8003858:	f7ff ffde 	bl	8003818 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d8f7      	bhi.n	8003858 <HAL_Delay+0x28>
  {
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	24008038 	.word	0x24008038

08003878 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	58000400 	.word	0x58000400

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00
 80038e4:	05fa0000 	.word	0x05fa0000

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	; (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	; (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	; (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ff4c 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1e:	f7ff ff63 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	6978      	ldr	r0, [r7, #20]
 8003a2a:	f7ff ffb3 	bl	8003994 <NVIC_EncodePriority>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ff82 	bl	8003940 <__NVIC_SetPriority>
}
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff56 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0c6      	b.n	8003c00 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fec4 	bl	8001808 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2223      	movs	r2, #35	; 0x23
 8003a84:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <HAL_ETH_Init+0x1a8>)
 8003a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	; (8003c08 <HAL_ETH_Init+0x1a8>)
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a96:	4b5c      	ldr	r3, [pc, #368]	; (8003c08 <HAL_ETH_Init+0x1a8>)
 8003a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7a1b      	ldrb	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003aac:	2000      	movs	r0, #0
 8003aae:	f7ff fee3 	bl	8003878 <HAL_SYSCFG_ETHInterfaceSelect>
 8003ab2:	e003      	b.n	8003abc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ab4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ab8:	f7ff fede 	bl	8003878 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad4:	f7ff fea0 	bl	8003818 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ada:	e00f      	b.n	8003afc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003adc:	f7ff fe9c 	bl	8003818 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003aea:	d907      	bls.n	8003afc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	22e0      	movs	r2, #224	; 0xe0
 8003af6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e081      	b.n	8003c00 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e6      	bne.n	8003adc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fac0 	bl	8004094 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b14:	f001 ff76 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <HAL_ETH_Init+0x1ac>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9a      	lsrs	r2, r3, #18
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3a01      	subs	r2, #1
 8003b28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa13 	bl	8003f58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b48:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	22e0      	movs	r2, #224	; 0xe0
 8003b64:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e04a      	b.n	8003c00 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b72:	4413      	add	r3, r2
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <HAL_ETH_Init+0x1b0>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6952      	ldr	r2, [r2, #20]
 8003b7e:	0052      	lsls	r2, r2, #1
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	6809      	ldr	r1, [r1, #0]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b8a:	440b      	add	r3, r1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fad8 	bl	8004144 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fb1c 	bl	80041d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	3305      	adds	r3, #5
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	061a      	lsls	r2, r3, #24
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bd8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003be6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003be8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	ffff8001 	.word	0xffff8001

08003c14 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003c26:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	791b      	ldrb	r3, [r3, #4]
 8003c2c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003c2e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
 8003c34:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003c36:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	7b5b      	ldrb	r3, [r3, #13]
 8003c3c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c3e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7b9b      	ldrb	r3, [r3, #14]
 8003c44:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7bdb      	ldrb	r3, [r3, #15]
 8003c4c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c4e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	7c12      	ldrb	r2, [r2, #16]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d102      	bne.n	8003c5e <ETH_SetMACConfig+0x4a>
 8003c58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c5c:	e000      	b.n	8003c60 <ETH_SetMACConfig+0x4c>
 8003c5e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c60:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	7c52      	ldrb	r2, [r2, #17]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d102      	bne.n	8003c70 <ETH_SetMACConfig+0x5c>
 8003c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c6e:	e000      	b.n	8003c72 <ETH_SetMACConfig+0x5e>
 8003c70:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c72:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7c9b      	ldrb	r3, [r3, #18]
 8003c78:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c7a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003c80:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003c86:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7f1b      	ldrb	r3, [r3, #28]
 8003c8c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003c8e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	7f5b      	ldrb	r3, [r3, #29]
 8003c94:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003c96:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	7f92      	ldrb	r2, [r2, #30]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d102      	bne.n	8003ca6 <ETH_SetMACConfig+0x92>
 8003ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca4:	e000      	b.n	8003ca8 <ETH_SetMACConfig+0x94>
 8003ca6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003ca8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	7fdb      	ldrb	r3, [r3, #31]
 8003cae:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003cb0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d102      	bne.n	8003cc2 <ETH_SetMACConfig+0xae>
 8003cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc0:	e000      	b.n	8003cc4 <ETH_SetMACConfig+0xb0>
 8003cc2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003cc4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003cca:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003cd4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <ETH_SetMACConfig+0x22c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cfe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003d00:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003d0a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d12:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003d14:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d102      	bne.n	8003d26 <ETH_SetMACConfig+0x112>
 8003d20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d24:	e000      	b.n	8003d28 <ETH_SetMACConfig+0x114>
 8003d26:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003d28:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <ETH_SetMACConfig+0x230>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <ETH_SetMACConfig+0x234>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d76:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d101      	bne.n	8003d86 <ETH_SetMACConfig+0x172>
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	e000      	b.n	8003d88 <ETH_SetMACConfig+0x174>
 8003d86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d88:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003db0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003db8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f023 0103 	bic.w	r1, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003dde:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d101      	bne.n	8003e02 <ETH_SetMACConfig+0x1ee>
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	e000      	b.n	8003e04 <ETH_SetMACConfig+0x1f0>
 8003e02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e04:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e0e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003e16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003e24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	00048083 	.word	0x00048083
 8003e44:	c0f88000 	.word	0xc0f88000
 8003e48:	fffffef0 	.word	0xfffffef0

08003e4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <ETH_SetDMAConfig+0xf8>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6809      	ldr	r1, [r1, #0]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003e72:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e7e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b1b      	ldrb	r3, [r3, #12]
 8003e84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003e92:	4413      	add	r3, r2
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <ETH_SetDMAConfig+0xfc>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ea6:	440b      	add	r3, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	7b5b      	ldrb	r3, [r3, #13]
 8003eae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <ETH_SetDMAConfig+0x100>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6811      	ldr	r1, [r2, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003ed2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	7d1b      	ldrb	r3, [r3, #20]
 8003edc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ede:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	7f5b      	ldrb	r3, [r3, #29]
 8003ee4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f241 1304 	movw	r3, #4356	; 0x1104
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <ETH_SetDMAConfig+0x104>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6811      	ldr	r1, [r2, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f06:	440b      	add	r3, r1
 8003f08:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7f1b      	ldrb	r3, [r3, #28]
 8003f0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f20:	4413      	add	r3, r2
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <ETH_SetDMAConfig+0x108>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6811      	ldr	r1, [r2, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f34:	440b      	add	r3, r1
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	ffff87fd 	.word	0xffff87fd
 8003f48:	ffff2ffe 	.word	0xffff2ffe
 8003f4c:	fffec000 	.word	0xfffec000
 8003f50:	ffc0efef 	.word	0xffc0efef
 8003f54:	7fc0ffff 	.word	0x7fc0ffff

08003f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0a4      	sub	sp, #144	; 0x90
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f66:	2300      	movs	r3, #0
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003fb0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003fb4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004002:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800400c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004032:	2300      	movs	r3, #0
 8004034:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800403c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fde6 	bl	8003c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004048:	2301      	movs	r3, #1
 800404a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800404c:	2301      	movs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004062:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004066:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800406c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004070:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004078:	f44f 7306 	mov.w	r3, #536	; 0x218
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fee1 	bl	8003e4c <ETH_SetDMAConfig>
}
 800408a:	bf00      	nop
 800408c:	3790      	adds	r7, #144	; 0x90
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80040ae:	f001 fca9 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 80040b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d908      	bls.n	80040ce <ETH_MAC_MDIO_ClkConfig+0x3a>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d804      	bhi.n	80040ce <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e027      	b.n	800411e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d908      	bls.n	80040e8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4a17      	ldr	r2, [pc, #92]	; (8004138 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d204      	bcs.n	80040e8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e01a      	b.n	800411e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d303      	bcc.n	80040f8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d911      	bls.n	800411c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d908      	bls.n	8004112 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d804      	bhi.n	8004112 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e005      	b.n	800411e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e000      	b.n	800411e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800411c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	01312cff 	.word	0x01312cff
 8004134:	02160ebf 	.word	0x02160ebf
 8004138:	03938700 	.word	0x03938700
 800413c:	05f5e0ff 	.word	0x05f5e0ff
 8004140:	08f0d17f 	.word	0x08f0d17f

08004144 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e01d      	b.n	800418e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	440b      	add	r3, r1
 8004162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	3206      	adds	r2, #6
 8004184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d9de      	bls.n	8004152 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f241 132c 	movw	r3, #4396	; 0x112c
 80041a2:	4413      	add	r3, r2
 80041a4:	2203      	movs	r2, #3
 80041a6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	f241 1314 	movw	r3, #4372	; 0x1114
 80041b4:	4413      	add	r3, r2
 80041b6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	e024      	b.n	800422a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6919      	ldr	r1, [r3, #16]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3310      	adds	r3, #16
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d9d7      	bls.n	80041e0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f241 1330 	movw	r3, #4400	; 0x1130
 8004256:	4413      	add	r3, r2
 8004258:	2203      	movs	r2, #3
 800425a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6919      	ldr	r1, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f241 131c 	movw	r3, #4380	; 0x111c
 8004268:	4413      	add	r3, r2
 800426a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	f241 1328 	movw	r3, #4392	; 0x1128
 800427c:	4413      	add	r3, r2
 800427e:	6019      	str	r1, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800429a:	4b86      	ldr	r3, [pc, #536]	; (80044b4 <HAL_GPIO_Init+0x228>)
 800429c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800429e:	e18c      	b.n	80045ba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 817e 	beq.w	80045b4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d005      	beq.n	80042d0 <HAL_GPIO_Init+0x44>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d130      	bne.n	8004332 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2203      	movs	r2, #3
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004306:	2201      	movs	r2, #1
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0201 	and.w	r2, r3, #1
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b03      	cmp	r3, #3
 800433c:	d017      	beq.n	800436e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d123      	bne.n	80043c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0203 	and.w	r2, r3, #3
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80d8 	beq.w	80045b4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <HAL_GPIO_Init+0x22c>)
 8004406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800440a:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <HAL_GPIO_Init+0x22c>)
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_GPIO_Init+0x22c>)
 8004416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_GPIO_Init+0x230>)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_GPIO_Init+0x234>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d04a      	beq.n	80044e4 <HAL_GPIO_Init+0x258>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_GPIO_Init+0x238>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02b      	beq.n	80044ae <HAL_GPIO_Init+0x222>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_GPIO_Init+0x23c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d025      	beq.n	80044aa <HAL_GPIO_Init+0x21e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_GPIO_Init+0x240>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01f      	beq.n	80044a6 <HAL_GPIO_Init+0x21a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_GPIO_Init+0x244>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d019      	beq.n	80044a2 <HAL_GPIO_Init+0x216>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_GPIO_Init+0x248>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_GPIO_Init+0x212>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_GPIO_Init+0x24c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00d      	beq.n	800449a <HAL_GPIO_Init+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_GPIO_Init+0x250>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <HAL_GPIO_Init+0x20a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_GPIO_Init+0x254>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_GPIO_Init+0x206>
 800448e:	2309      	movs	r3, #9
 8004490:	e029      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 8004492:	230a      	movs	r3, #10
 8004494:	e027      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 8004496:	2307      	movs	r3, #7
 8004498:	e025      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 800449a:	2306      	movs	r3, #6
 800449c:	e023      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 800449e:	2305      	movs	r3, #5
 80044a0:	e021      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 80044a2:	2304      	movs	r3, #4
 80044a4:	e01f      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e01d      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e01b      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e019      	b.n	80044e6 <HAL_GPIO_Init+0x25a>
 80044b2:	bf00      	nop
 80044b4:	58000080 	.word	0x58000080
 80044b8:	58024400 	.word	0x58024400
 80044bc:	58000400 	.word	0x58000400
 80044c0:	58020000 	.word	0x58020000
 80044c4:	58020400 	.word	0x58020400
 80044c8:	58020800 	.word	0x58020800
 80044cc:	58020c00 	.word	0x58020c00
 80044d0:	58021000 	.word	0x58021000
 80044d4:	58021400 	.word	0x58021400
 80044d8:	58021800 	.word	0x58021800
 80044dc:	58021c00 	.word	0x58021c00
 80044e0:	58022400 	.word	0x58022400
 80044e4:	2300      	movs	r3, #0
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	f002 0203 	and.w	r2, r2, #3
 80044ec:	0092      	lsls	r2, r2, #2
 80044ee:	4093      	lsls	r3, r2
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f6:	4938      	ldr	r1, [pc, #224]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	3302      	adds	r3, #2
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800452a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f ae6b 	bne.w	80042a0 <HAL_GPIO_Init+0x14>
  }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3724      	adds	r7, #36	; 0x24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	58000400 	.word	0x58000400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4013      	ands	r3, r2
 8004656:	041a      	lsls	r2, r3, #16
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43d9      	mvns	r1, r3
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	400b      	ands	r3, r1
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800467a:	f7ff f8cd 	bl	8003818 <HAL_GetTick>
 800467e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e03b      	b.n	8004702 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80046aa:	e00f      	b.n	80046cc <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80046ac:	f7ff f8b4 	bl	8003818 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d908      	bls.n	80046cc <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2240      	movs	r2, #64	; 0x40
 80046be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2203      	movs	r2, #3
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e01a      	b.n	8004702 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e8      	bne.n	80046ac <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f9e4 	bl	8004aa8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e03e      	b.n	80047a2 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800472e:	2302      	movs	r3, #2
 8004730:	e037      	b.n	80047a2 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d126      	bne.n	8004794 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11c      	bne.n	800478e <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004778:	611a      	str	r2, [r3, #16]
 800477a:	e00d      	b.n	8004798 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800478a:	611a      	str	r2, [r3, #16]
 800478c:	e004      	b.n	8004798 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
 8004792:	e001      	b.n	8004798 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e017      	b.n	80047f0 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d004      	beq.n	80047d6 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e00c      	b.n	80047f0 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2204      	movs	r2, #4
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004808:	4b9a      	ldr	r3, [pc, #616]	; (8004a74 <HAL_MDMA_IRQHandler+0x278>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a9a      	ldr	r2, [pc, #616]	; (8004a78 <HAL_MDMA_IRQHandler+0x27c>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <HAL_MDMA_IRQHandler+0x280>)
 800481e:	4413      	add	r3, r2
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2201      	movs	r2, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800482e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 812e 	beq.w	8004a9a <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d054      	beq.n	80048f6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d04d      	beq.n	80048f6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0202 	bic.w	r2, r2, #2
 8004868:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	669a      	str	r2, [r3, #104]	; 0x68
 8004888:	e005      	b.n	8004896 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ba:	f043 0208 	orr.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2210      	movs	r2, #16
 8004918:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2208      	movs	r2, #8
 800494c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2204      	movs	r2, #4
 8004980:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d039      	beq.n	8004a14 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d032      	beq.n	8004a14 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80049bc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d110      	bne.n	80049ec <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d05d      	beq.n	8004a9e <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
        }
        return;
 80049ea:	e058      	b.n	8004a9e <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d041      	beq.n	8004aa0 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2204      	movs	r2, #4
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3301      	adds	r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d307      	bcc.n	8004a50 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f2      	bne.n	8004a34 <HAL_MDMA_IRQHandler+0x238>
 8004a4e:	e000      	b.n	8004a52 <HAL_MDMA_IRQHandler+0x256>
        break;
 8004a50:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a70:	e00a      	b.n	8004a88 <HAL_MDMA_IRQHandler+0x28c>
 8004a72:	bf00      	nop
 8004a74:	2400802c 	.word	0x2400802c
 8004a78:	1b4e81b5 	.word	0x1b4e81b5
 8004a7c:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
 8004a98:	e002      	b.n	8004aa0 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8004a9e:	bf00      	nop
    }
  }
}
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop

08004aa8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68d9      	ldr	r1, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004ace:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004ada:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004ae6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004af0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004afc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004afe:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b08:	d107      	bne.n	8004b1a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004b18:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da11      	bge.n	8004b4e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b38:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	425b      	negs	r3, r3
 8004b40:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	621a      	str	r2, [r3, #32]
 8004b4c:	e006      	b.n	8004b5c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	da15      	bge.n	8004b90 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004b72:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	425b      	negs	r3, r3
 8004b7a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a19      	ldr	r1, [r3, #32]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	621a      	str	r2, [r3, #32]
 8004b8e:	e009      	b.n	8004ba4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a19      	ldr	r1, [r3, #32]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	041a      	lsls	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d006      	beq.n	8004bbc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8004bba:	e003      	b.n	8004bc4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_PWREx_ConfigSupply+0x70>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d00a      	beq.n	8004c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bec:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <HAL_PWREx_ConfigSupply+0x70>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d001      	beq.n	8004bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e01f      	b.n	8004c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e01d      	b.n	8004c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_PWREx_ConfigSupply+0x70>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 0207 	bic.w	r2, r3, #7
 8004c0a:	490f      	ldr	r1, [pc, #60]	; (8004c48 <HAL_PWREx_ConfigSupply+0x70>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c12:	f7fe fe01 	bl	8003818 <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c18:	e009      	b.n	8004c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c1a:	f7fe fdfd 	bl	8003818 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c28:	d901      	bls.n	8004c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e007      	b.n	8004c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_PWREx_ConfigSupply+0x70>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3a:	d1ee      	bne.n	8004c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	58024800 	.word	0x58024800

08004c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e397      	b.n	800538e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8087 	beq.w	8004d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6c:	4b9e      	ldr	r3, [pc, #632]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c76:	4b9c      	ldr	r3, [pc, #624]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d007      	beq.n	8004c92 <HAL_RCC_OscConfig+0x46>
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	2b18      	cmp	r3, #24
 8004c86:	d110      	bne.n	8004caa <HAL_RCC_OscConfig+0x5e>
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d10b      	bne.n	8004caa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c92:	4b95      	ldr	r3, [pc, #596]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d06c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x12c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d168      	bne.n	8004d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e371      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x76>
 8004cb4:	4b8c      	ldr	r3, [pc, #560]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8b      	ldr	r2, [pc, #556]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	e02e      	b.n	8004d20 <HAL_RCC_OscConfig+0xd4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x98>
 8004cca:	4b87      	ldr	r3, [pc, #540]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a86      	ldr	r2, [pc, #536]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b84      	ldr	r3, [pc, #528]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a83      	ldr	r2, [pc, #524]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e01d      	b.n	8004d20 <HAL_RCC_OscConfig+0xd4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0xbc>
 8004cee:	4b7e      	ldr	r3, [pc, #504]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7d      	ldr	r2, [pc, #500]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b7b      	ldr	r3, [pc, #492]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0xd4>
 8004d08:	4b77      	ldr	r3, [pc, #476]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a76      	ldr	r2, [pc, #472]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b74      	ldr	r3, [pc, #464]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a73      	ldr	r2, [pc, #460]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d28:	f7fe fd76 	bl	8003818 <HAL_GetTick>
 8004d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d30:	f7fe fd72 	bl	8003818 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	; 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e325      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d42:	4b69      	ldr	r3, [pc, #420]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0xe4>
 8004d4e:	e014      	b.n	8004d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fe fd62 	bl	8003818 <HAL_GetTick>
 8004d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fe fd5e 	bl	8003818 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e311      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x10c>
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 808a 	beq.w	8004e9c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d88:	4b57      	ldr	r3, [pc, #348]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d92:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_RCC_OscConfig+0x162>
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2b18      	cmp	r3, #24
 8004da2:	d137      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1c8>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d132      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dae:	4b4e      	ldr	r3, [pc, #312]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x17a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e2e3      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc6:	4b48      	ldr	r3, [pc, #288]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0219 	bic.w	r2, r3, #25
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4945      	ldr	r1, [pc, #276]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dd8:	f7fe fd1e 	bl	8003818 <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fe fd1a 	bl	8003818 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e2cd      	b.n	800538e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	4936      	ldr	r1, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e12:	e043      	b.n	8004e9c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d026      	beq.n	8004e6a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 0219 	bic.w	r2, r3, #25
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	492f      	ldr	r1, [pc, #188]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fe fcf3 	bl	8003818 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e36:	f7fe fcef 	bl	8003818 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e2a2      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e48:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	4921      	ldr	r1, [pc, #132]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
 8004e68:	e018      	b.n	8004e9c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fe fccf 	bl	8003818 <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fe fccb 	bl	8003818 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e27e      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d06d      	beq.n	8004f84 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d007      	beq.n	8004ece <HAL_RCC_OscConfig+0x282>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d11e      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2b6>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d119      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_OscConfig+0x29c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCC_OscConfig+0x2a0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d004      	beq.n	8004eec <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e253      	b.n	800538e <HAL_RCC_OscConfig+0x742>
 8004ee6:	bf00      	nop
 8004ee8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eec:	4ba3      	ldr	r3, [pc, #652]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	49a0      	ldr	r1, [pc, #640]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f00:	e040      	b.n	8004f84 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d023      	beq.n	8004f52 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f0a:	4b9c      	ldr	r3, [pc, #624]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a9b      	ldr	r2, [pc, #620]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fe fc7f 	bl	8003818 <HAL_GetTick>
 8004f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f1e:	f7fe fc7b 	bl	8003818 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e22e      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f30:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f3c:	4b8f      	ldr	r3, [pc, #572]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	498c      	ldr	r1, [pc, #560]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60cb      	str	r3, [r1, #12]
 8004f50:	e018      	b.n	8004f84 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f52:	4b8a      	ldr	r3, [pc, #552]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a89      	ldr	r2, [pc, #548]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fc5b 	bl	8003818 <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f66:	f7fe fc57 	bl	8003818 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e20a      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f78:	4b80      	ldr	r3, [pc, #512]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d036      	beq.n	8004ffe <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d019      	beq.n	8004fcc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f98:	4b78      	ldr	r3, [pc, #480]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9c:	4a77      	ldr	r2, [pc, #476]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fe fc38 	bl	8003818 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fe fc34 	bl	8003818 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1e7      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fbe:	4b6f      	ldr	r3, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x360>
 8004fca:	e018      	b.n	8004ffe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fcc:	4b6b      	ldr	r3, [pc, #428]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	4a6a      	ldr	r2, [pc, #424]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fe fc1e 	bl	8003818 <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fe fc1a 	bl	8003818 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e1cd      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ff2:	4b62      	ldr	r3, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d019      	beq.n	8005046 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005012:	4b5a      	ldr	r3, [pc, #360]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a59      	ldr	r2, [pc, #356]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800501c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800501e:	f7fe fbfb 	bl	8003818 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005026:	f7fe fbf7 	bl	8003818 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1aa      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_OscConfig+0x530>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x3da>
 8005044:	e018      	b.n	8005078 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005046:	4b4d      	ldr	r3, [pc, #308]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4c      	ldr	r2, [pc, #304]	; (800517c <HAL_RCC_OscConfig+0x530>)
 800504c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005050:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005052:	f7fe fbe1 	bl	8003818 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800505a:	f7fe fbdd 	bl	8003818 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e190      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800506c:	4b43      	ldr	r3, [pc, #268]	; (800517c <HAL_RCC_OscConfig+0x530>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8085 	beq.w	8005190 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <HAL_RCC_OscConfig+0x534>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <HAL_RCC_OscConfig+0x534>)
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005092:	f7fe fbc1 	bl	8003818 <HAL_GetTick>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800509a:	f7fe fbbd 	bl	8003818 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b64      	cmp	r3, #100	; 0x64
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e170      	b.n	800538e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ac:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_OscConfig+0x534>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <HAL_RCC_OscConfig+0x482>
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	e02d      	b.n	800512a <HAL_RCC_OscConfig+0x4de>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4a4>
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a28      	ldr	r2, [pc, #160]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a25      	ldr	r2, [pc, #148]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	e01c      	b.n	800512a <HAL_RCC_OscConfig+0x4de>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d10c      	bne.n	8005112 <HAL_RCC_OscConfig+0x4c6>
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_RCC_OscConfig+0x530>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_RCC_OscConfig+0x530>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	e00b      	b.n	800512a <HAL_RCC_OscConfig+0x4de>
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b17      	ldr	r3, [pc, #92]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d015      	beq.n	800515e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fe fb71 	bl	8003818 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fe fb6d 	bl	8003818 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e11e      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_RCC_OscConfig+0x530>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCC_OscConfig+0x4ee>
 800515c:	e018      	b.n	8005190 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fe fb5b 	bl	8003818 <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005164:	e00e      	b.n	8005184 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fe fb57 	bl	8003818 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d905      	bls.n	8005184 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e108      	b.n	800538e <HAL_RCC_OscConfig+0x742>
 800517c:	58024400 	.word	0x58024400
 8005180:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005184:	4b84      	ldr	r3, [pc, #528]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ea      	bne.n	8005166 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80f9 	beq.w	800538c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800519a:	4b7f      	ldr	r3, [pc, #508]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a2:	2b18      	cmp	r3, #24
 80051a4:	f000 80b4 	beq.w	8005310 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	f040 8095 	bne.w	80052dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b2:	4b79      	ldr	r3, [pc, #484]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a78      	ldr	r2, [pc, #480]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80051b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051be:	f7fe fb2b 	bl	8003818 <HAL_GetTick>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fe fb27 	bl	8003818 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0da      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d8:	4b6f      	ldr	r3, [pc, #444]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e4:	4b6c      	ldr	r3, [pc, #432]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80051e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e8:	4b6c      	ldr	r3, [pc, #432]	; (800539c <HAL_RCC_OscConfig+0x750>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	430a      	orrs	r2, r1
 80051f8:	4967      	ldr	r1, [pc, #412]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	628b      	str	r3, [r1, #40]	; 0x28
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	3b01      	subs	r3, #1
 8005204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	3b01      	subs	r3, #1
 800520e:	025b      	lsls	r3, r3, #9
 8005210:	b29b      	uxth	r3, r3
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	3b01      	subs	r3, #1
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	3b01      	subs	r3, #1
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800522e:	495a      	ldr	r1, [pc, #360]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005234:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005240:	4b55      	ldr	r3, [pc, #340]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005244:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <HAL_RCC_OscConfig+0x754>)
 8005246:	4013      	ands	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800524c:	00d2      	lsls	r2, r2, #3
 800524e:	4952      	ldr	r1, [pc, #328]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005250:	4313      	orrs	r3, r2
 8005252:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005254:	4b50      	ldr	r3, [pc, #320]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	f023 020c 	bic.w	r2, r3, #12
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	494d      	ldr	r1, [pc, #308]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005266:	4b4c      	ldr	r3, [pc, #304]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	f023 0202 	bic.w	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	4949      	ldr	r1, [pc, #292]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005274:	4313      	orrs	r3, r2
 8005276:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005278:	4b47      	ldr	r3, [pc, #284]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a46      	ldr	r2, [pc, #280]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800527e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005284:	4b44      	ldr	r3, [pc, #272]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	4a43      	ldr	r2, [pc, #268]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800528a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005290:	4b41      	ldr	r3, [pc, #260]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	4a40      	ldr	r2, [pc, #256]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800529a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a8:	4b3b      	ldr	r3, [pc, #236]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3a      	ldr	r2, [pc, #232]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fe fab0 	bl	8003818 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fe faac 	bl	8003818 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e05f      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ce:	4b32      	ldr	r3, [pc, #200]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x670>
 80052da:	e057      	b.n	800538c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052dc:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2d      	ldr	r2, [pc, #180]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fe fa96 	bl	8003818 <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fe fa92 	bl	8003818 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e045      	b.n	800538e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005302:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a4>
 800530e:	e03d      	b.n	800538c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_OscConfig+0x74c>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d031      	beq.n	8005388 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f003 0203 	and.w	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d12a      	bne.n	8005388 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d122      	bne.n	8005388 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d11a      	bne.n	8005388 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d111      	bne.n	8005388 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d108      	bne.n	8005388 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	0e1b      	lsrs	r3, r3, #24
 800537a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3730      	adds	r7, #48	; 0x30
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	58024400 	.word	0x58024400
 800539c:	fffffc0c 	.word	0xfffffc0c
 80053a0:	ffff0007 	.word	0xffff0007

080053a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e19c      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053b8:	4b8a      	ldr	r3, [pc, #552]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d910      	bls.n	80053e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b87      	ldr	r3, [pc, #540]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 020f 	bic.w	r2, r3, #15
 80053ce:	4985      	ldr	r1, [pc, #532]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	4b83      	ldr	r3, [pc, #524]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e184      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	4b7b      	ldr	r3, [pc, #492]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005400:	429a      	cmp	r2, r3
 8005402:	d908      	bls.n	8005416 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005404:	4b78      	ldr	r3, [pc, #480]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	4975      	ldr	r1, [pc, #468]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005412:	4313      	orrs	r3, r2
 8005414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	4b70      	ldr	r3, [pc, #448]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800542e:	429a      	cmp	r2, r3
 8005430:	d908      	bls.n	8005444 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005432:	4b6d      	ldr	r3, [pc, #436]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	496a      	ldr	r1, [pc, #424]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005440:	4313      	orrs	r3, r2
 8005442:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800545c:	429a      	cmp	r2, r3
 800545e:	d908      	bls.n	8005472 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005460:	4b61      	ldr	r3, [pc, #388]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	495e      	ldr	r1, [pc, #376]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800548a:	429a      	cmp	r2, r3
 800548c:	d908      	bls.n	80054a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800548e:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4953      	ldr	r1, [pc, #332]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d908      	bls.n	80054ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054bc:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f023 020f 	bic.w	r2, r3, #15
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4947      	ldr	r1, [pc, #284]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d055      	beq.n	8005586 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054da:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4940      	ldr	r1, [pc, #256]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d107      	bne.n	8005504 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d121      	bne.n	8005544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0f6      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d107      	bne.n	800551c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d115      	bne.n	8005544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0ea      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0de      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005534:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0d6      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005544:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f023 0207 	bic.w	r2, r3, #7
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4925      	ldr	r1, [pc, #148]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005556:	f7fe f95f 	bl	8003818 <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555c:	e00a      	b.n	8005574 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555e:	f7fe f95b 	bl	8003818 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e0be      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	429a      	cmp	r2, r3
 8005584:	d1eb      	bne.n	800555e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	429a      	cmp	r2, r3
 80055a0:	d208      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f023 020f 	bic.w	r2, r3, #15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	490e      	ldr	r1, [pc, #56]	; (80055e8 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d214      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	4906      	ldr	r1, [pc, #24]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <HAL_RCC_ClockConfig+0x240>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e086      	b.n	80056f2 <HAL_RCC_ClockConfig+0x34e>
 80055e4:	52002000 	.word	0x52002000
 80055e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005604:	429a      	cmp	r2, r3
 8005606:	d208      	bcs.n	800561a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005608:	4b3c      	ldr	r3, [pc, #240]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	4939      	ldr	r1, [pc, #228]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005616:	4313      	orrs	r3, r2
 8005618:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005632:	429a      	cmp	r2, r3
 8005634:	d208      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	492e      	ldr	r1, [pc, #184]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005644:	4313      	orrs	r3, r2
 8005646:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	4b28      	ldr	r3, [pc, #160]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005660:	429a      	cmp	r2, r3
 8005662:	d208      	bcs.n	8005676 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4922      	ldr	r1, [pc, #136]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005672:	4313      	orrs	r3, r2
 8005674:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800568e:	429a      	cmp	r2, r3
 8005690:	d208      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4917      	ldr	r1, [pc, #92]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056a4:	f000 f834 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	4912      	ldr	r1, [pc, #72]	; (8005700 <HAL_RCC_ClockConfig+0x35c>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056c2:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <HAL_RCC_ClockConfig+0x358>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <HAL_RCC_ClockConfig+0x35c>)
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <HAL_RCC_ClockConfig+0x360>)
 80056da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056dc:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x364>)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x368>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd feca 	bl	8003480 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	08013b1c 	.word	0x08013b1c
 8005704:	24008030 	.word	0x24008030
 8005708:	2400802c 	.word	0x2400802c
 800570c:	24008034 	.word	0x24008034

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005716:	4bb3      	ldr	r3, [pc, #716]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800571e:	2b18      	cmp	r3, #24
 8005720:	f200 8155 	bhi.w	80059ce <HAL_RCC_GetSysClockFreq+0x2be>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005791 	.word	0x08005791
 8005730:	080059cf 	.word	0x080059cf
 8005734:	080059cf 	.word	0x080059cf
 8005738:	080059cf 	.word	0x080059cf
 800573c:	080059cf 	.word	0x080059cf
 8005740:	080059cf 	.word	0x080059cf
 8005744:	080059cf 	.word	0x080059cf
 8005748:	080059cf 	.word	0x080059cf
 800574c:	080057b7 	.word	0x080057b7
 8005750:	080059cf 	.word	0x080059cf
 8005754:	080059cf 	.word	0x080059cf
 8005758:	080059cf 	.word	0x080059cf
 800575c:	080059cf 	.word	0x080059cf
 8005760:	080059cf 	.word	0x080059cf
 8005764:	080059cf 	.word	0x080059cf
 8005768:	080059cf 	.word	0x080059cf
 800576c:	080057bd 	.word	0x080057bd
 8005770:	080059cf 	.word	0x080059cf
 8005774:	080059cf 	.word	0x080059cf
 8005778:	080059cf 	.word	0x080059cf
 800577c:	080059cf 	.word	0x080059cf
 8005780:	080059cf 	.word	0x080059cf
 8005784:	080059cf 	.word	0x080059cf
 8005788:	080059cf 	.word	0x080059cf
 800578c:	080057c3 	.word	0x080057c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005790:	4b94      	ldr	r3, [pc, #592]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800579c:	4b91      	ldr	r3, [pc, #580]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	08db      	lsrs	r3, r3, #3
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	4a90      	ldr	r2, [pc, #576]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80057ae:	e111      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057b0:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057b2:	61bb      	str	r3, [r7, #24]
    break;
 80057b4:	e10e      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057b6:	4b8d      	ldr	r3, [pc, #564]	; (80059ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057b8:	61bb      	str	r3, [r7, #24]
    break;
 80057ba:	e10b      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057bc:	4b8c      	ldr	r3, [pc, #560]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057be:	61bb      	str	r3, [r7, #24]
    break;
 80057c0:	e108      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057c2:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80057cc:	4b85      	ldr	r3, [pc, #532]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057d8:	4b82      	ldr	r3, [pc, #520]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057e2:	4b80      	ldr	r3, [pc, #512]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	08db      	lsrs	r3, r3, #3
 80057e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80e1 	beq.w	80059c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b02      	cmp	r3, #2
 800580a:	f000 8083 	beq.w	8005914 <HAL_RCC_GetSysClockFreq+0x204>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b02      	cmp	r3, #2
 8005812:	f200 80a1 	bhi.w	8005958 <HAL_RCC_GetSysClockFreq+0x248>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0x114>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d056      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005822:	e099      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005824:	4b6f      	ldr	r3, [pc, #444]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d02d      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005830:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	4a6b      	ldr	r2, [pc, #428]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b62      	ldr	r3, [pc, #392]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a02 	vldr	s12, [r7, #8]
 800586e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800588a:	e087      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b51      	ldr	r3, [pc, #324]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80058b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ce:	e065      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b40      	ldr	r3, [pc, #256]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005912:	e043      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a02 	vldr	s12, [r7, #8]
 800593a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005956:	e021      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a02 	vldr	s12, [r7, #8]
 800597e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800599c:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a6:	3301      	adds	r3, #1
 80059a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c0:	ee17 3a90 	vmov	r3, s15
 80059c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80059c6:	e005      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    break;
 80059cc:	e002      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80059ce:	4b07      	ldr	r3, [pc, #28]	; (80059ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059d0:	61bb      	str	r3, [r7, #24]
    break;
 80059d2:	bf00      	nop
  }

  return sysclockfreq;
 80059d4:	69bb      	ldr	r3, [r7, #24]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	03d09000 	.word	0x03d09000
 80059ec:	003d0900 	.word	0x003d0900
 80059f0:	007a1200 	.word	0x007a1200
 80059f4:	46000000 	.word	0x46000000
 80059f8:	4c742400 	.word	0x4c742400
 80059fc:	4a742400 	.word	0x4a742400
 8005a00:	4af42400 	.word	0x4af42400

08005a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a0a:	f7ff fe81 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	490f      	ldr	r1, [pc, #60]	; (8005a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a42:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	58024400 	.word	0x58024400
 8005a58:	08013b1c 	.word	0x08013b1c
 8005a5c:	24008030 	.word	0x24008030
 8005a60:	2400802c 	.word	0x2400802c

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a68:	f7ff ffcc 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4904      	ldr	r1, [pc, #16]	; (8005a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	08013b1c 	.word	0x08013b1c

08005a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a94:	f7ff ffb6 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4904      	ldr	r1, [pc, #16]	; (8005ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	08013b1c 	.word	0x08013b1c

08005abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	223f      	movs	r2, #63	; 0x3f
 8005aca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0207 	and.w	r2, r3, #7
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005ae4:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005afc:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005b14:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_RCC_GetClockConfig+0x7c>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetClockConfig+0x80>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	52002000 	.word	0x52002000

08005b40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d03f      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b64:	d02a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b6a:	d824      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b70:	d018      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b76:	d81e      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b80:	d007      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b82:	e018      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4bab      	ldr	r3, [pc, #684]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4aaa      	ldr	r2, [pc, #680]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b90:	e015      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	2102      	movs	r1, #2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 feff 	bl	800799c <RCCEx_PLL2_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ba2:	e00c      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3324      	adds	r3, #36	; 0x24
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 ffa8 	bl	8007b00 <RCCEx_PLL3_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bb4:	e003      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bba:	e000      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bc4:	4b9b      	ldr	r3, [pc, #620]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	4998      	ldr	r1, [pc, #608]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	650b      	str	r3, [r1, #80]	; 0x50
 8005bd6:	e001      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d03d      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d826      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c0d 	.word	0x08005c0d
 8005bfc:	08005c1b 	.word	0x08005c1b
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c45 	.word	0x08005c45
 8005c08:	08005c45 	.word	0x08005c45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b89      	ldr	r3, [pc, #548]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a88      	ldr	r2, [pc, #544]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c18:	e015      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 febb 	bl	800799c <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c2a:	e00c      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3324      	adds	r3, #36	; 0x24
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 ff64 	bl	8007b00 <RCCEx_PLL3_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c3c:	e003      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
      break;
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c4c:	4b79      	ldr	r3, [pc, #484]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	f023 0207 	bic.w	r2, r3, #7
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	4976      	ldr	r1, [pc, #472]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c5e:	e001      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d051      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c76:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c7a:	d036      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c7c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c80:	d830      	bhi.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c86:	d032      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c8c:	d82a      	bhi.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c92:	d02e      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005c94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c98:	d824      	bhi.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9e:	d018      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca4:	d81e      	bhi.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cae:	d007      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005cb0:	e018      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	4a5f      	ldr	r2, [pc, #380]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cbe:	e019      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fe68 	bl	800799c <RCCEx_PLL2_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005cd0:	e010      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 ff11 	bl	8007b00 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ce2:	e007      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce8:	e004      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cfa:	4b4e      	ldr	r3, [pc, #312]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d08:	494a      	ldr	r1, [pc, #296]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d0e:	e001      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d051      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d26:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d2a:	d036      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005d2c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d30:	d830      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d36:	d032      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d3c:	d82a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005d3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d42:	d02e      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005d44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d48:	d824      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d4e:	d018      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d54:	d81e      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d60:	e018      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d62:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a33      	ldr	r2, [pc, #204]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d6e:	e019      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fe10 	bl	800799c <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d80:	e010      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3324      	adds	r3, #36	; 0x24
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 feb9 	bl	8007b00 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d92:	e007      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
      break;
 8005d98:	e004      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005db8:	491e      	ldr	r1, [pc, #120]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	658b      	str	r3, [r1, #88]	; 0x58
 8005dbe:	e001      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d035      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	2b30      	cmp	r3, #48	; 0x30
 8005dd6:	d01c      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d817      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d00c      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d813      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d016      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d10f      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005df8:	e00e      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	2102      	movs	r1, #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fdcb 	bl	800799c <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005e0a:	e005      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	e002      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	4902      	ldr	r1, [pc, #8]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e30:	e004      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e32:	bf00      	nop
 8005e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d047      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e50:	d030      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e56:	d82a      	bhi.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005e58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e5c:	d02c      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e62:	d824      	bhi.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d018      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6e:	d81e      	bhi.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e78:	d007      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e7a:	e018      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4bac      	ldr	r3, [pc, #688]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4aab      	ldr	r2, [pc, #684]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e88:	e017      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fd83 	bl	800799c <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e9a:	e00e      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fe2c 	bl	8007b00 <RCCEx_PLL3_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005eac:	e005      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e000      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec0:	4b9b      	ldr	r3, [pc, #620]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4998      	ldr	r1, [pc, #608]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ed2:	e001      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d049      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eec:	d02e      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef2:	d828      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ef8:	d02a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005efe:	d822      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f04:	d026      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005f06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f0a:	d81c      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f10:	d010      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f16:	d816      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01d      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f20:	d111      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3304      	adds	r3, #4
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 fd37 	bl	800799c <RCCEx_PLL2_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f32:	e012      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3324      	adds	r3, #36	; 0x24
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fde0 	bl	8007b00 <RCCEx_PLL3_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f44:	e009      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4a:	e006      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e004      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f60:	4b73      	ldr	r3, [pc, #460]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	4970      	ldr	r1, [pc, #448]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	650b      	str	r3, [r1, #80]	; 0x50
 8005f72:	e001      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d04b      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f8e:	d02e      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f94:	d828      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9a:	d02a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa0:	d822      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fa6:	d026      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fac:	d81c      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb8:	d816      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01d      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fce6 	bl	800799c <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fd4:	e012      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3324      	adds	r3, #36	; 0x24
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fd8f 	bl	8007b00 <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fe6:	e009      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
      break;
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006002:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006010:	4947      	ldr	r1, [pc, #284]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006012:	4313      	orrs	r3, r2
 8006014:	658b      	str	r3, [r1, #88]	; 0x58
 8006016:	e001      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02f      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006030:	d00e      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006036:	d814      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d015      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800603c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006040:	d10f      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006042:	4b3b      	ldr	r3, [pc, #236]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	4a3a      	ldr	r2, [pc, #232]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800604e:	e00c      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	2101      	movs	r1, #1
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fca0 	bl	800799c <RCCEx_PLL2_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006060:	e003      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
      break;
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006070:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607c:	492c      	ldr	r1, [pc, #176]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800607e:	4313      	orrs	r3, r2
 8006080:	650b      	str	r3, [r1, #80]	; 0x50
 8006082:	e001      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d032      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006098:	2b03      	cmp	r3, #3
 800609a:	d81b      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060b5 	.word	0x080060b5
 80060ac:	080060c3 	.word	0x080060c3
 80060b0:	080060db 	.word	0x080060db
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3304      	adds	r3, #4
 80060c6:	2102      	movs	r1, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fc67 	bl	800799c <RCCEx_PLL2_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060d2:	e003      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80060da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060e2:	4b13      	ldr	r3, [pc, #76]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e6:	f023 0203 	bic.w	r2, r3, #3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4910      	ldr	r1, [pc, #64]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060f4:	e001      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 808a 	beq.w	800621c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800610e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006114:	f7fd fb80 	bl	8003818 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800611a:	e00d      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611c:	f7fd fb7c 	bl	8003818 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	; 0x64
 8006128:	d906      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	75fb      	strb	r3, [r7, #23]
        break;
 800612e:	e009      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006130:	58024400 	.word	0x58024400
 8006134:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006138:	4bb9      	ldr	r3, [pc, #740]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0eb      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d166      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800614a:	4bb6      	ldr	r3, [pc, #728]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800614c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006154:	4053      	eors	r3, r2
 8006156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615a:	2b00      	cmp	r3, #0
 800615c:	d013      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800615e:	4bb1      	ldr	r3, [pc, #708]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006166:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006168:	4bae      	ldr	r3, [pc, #696]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	4aad      	ldr	r2, [pc, #692]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800616e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006172:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006174:	4bab      	ldr	r3, [pc, #684]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	4aaa      	ldr	r2, [pc, #680]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800617a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006180:	4aa8      	ldr	r2, [pc, #672]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800618c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006190:	d115      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fd fb41 	bl	8003818 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006198:	e00b      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fd fb3d 	bl	8003818 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d902      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	75fb      	strb	r3, [r7, #23]
            break;
 80061b0:	e005      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061b2:	4b9c      	ldr	r3, [pc, #624]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0ed      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d126      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d2:	d10d      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80061d4:	4b93      	ldr	r3, [pc, #588]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061e2:	0919      	lsrs	r1, r3, #4
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061e6:	400b      	ands	r3, r1
 80061e8:	498e      	ldr	r1, [pc, #568]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
 80061ee:	e005      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80061f0:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4a8b      	ldr	r2, [pc, #556]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061fa:	6113      	str	r3, [r2, #16]
 80061fc:	4b89      	ldr	r3, [pc, #548]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620a:	4986      	ldr	r1, [pc, #536]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	670b      	str	r3, [r1, #112]	; 0x70
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	75bb      	strb	r3, [r7, #22]
 8006216:	e001      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d07e      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622c:	2b28      	cmp	r3, #40	; 0x28
 800622e:	d867      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	08006307 	.word	0x08006307
 800623c:	08006301 	.word	0x08006301
 8006240:	08006301 	.word	0x08006301
 8006244:	08006301 	.word	0x08006301
 8006248:	08006301 	.word	0x08006301
 800624c:	08006301 	.word	0x08006301
 8006250:	08006301 	.word	0x08006301
 8006254:	08006301 	.word	0x08006301
 8006258:	080062dd 	.word	0x080062dd
 800625c:	08006301 	.word	0x08006301
 8006260:	08006301 	.word	0x08006301
 8006264:	08006301 	.word	0x08006301
 8006268:	08006301 	.word	0x08006301
 800626c:	08006301 	.word	0x08006301
 8006270:	08006301 	.word	0x08006301
 8006274:	08006301 	.word	0x08006301
 8006278:	080062ef 	.word	0x080062ef
 800627c:	08006301 	.word	0x08006301
 8006280:	08006301 	.word	0x08006301
 8006284:	08006301 	.word	0x08006301
 8006288:	08006301 	.word	0x08006301
 800628c:	08006301 	.word	0x08006301
 8006290:	08006301 	.word	0x08006301
 8006294:	08006301 	.word	0x08006301
 8006298:	08006307 	.word	0x08006307
 800629c:	08006301 	.word	0x08006301
 80062a0:	08006301 	.word	0x08006301
 80062a4:	08006301 	.word	0x08006301
 80062a8:	08006301 	.word	0x08006301
 80062ac:	08006301 	.word	0x08006301
 80062b0:	08006301 	.word	0x08006301
 80062b4:	08006301 	.word	0x08006301
 80062b8:	08006307 	.word	0x08006307
 80062bc:	08006301 	.word	0x08006301
 80062c0:	08006301 	.word	0x08006301
 80062c4:	08006301 	.word	0x08006301
 80062c8:	08006301 	.word	0x08006301
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006301 	.word	0x08006301
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006307 	.word	0x08006307
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	2101      	movs	r1, #1
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fb5a 	bl	800799c <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062ec:	e00c      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3324      	adds	r3, #36	; 0x24
 80062f2:	2101      	movs	r1, #1
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fc03 	bl	8007b00 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
      break;
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800630e:	4b45      	ldr	r3, [pc, #276]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631a:	4942      	ldr	r1, [pc, #264]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800631c:	4313      	orrs	r3, r2
 800631e:	654b      	str	r3, [r1, #84]	; 0x54
 8006320:	e001      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d037      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	2b05      	cmp	r3, #5
 8006338:	d820      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006383 	.word	0x08006383
 8006344:	08006359 	.word	0x08006359
 8006348:	0800636b 	.word	0x0800636b
 800634c:	08006383 	.word	0x08006383
 8006350:	08006383 	.word	0x08006383
 8006354:	08006383 	.word	0x08006383
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fb1c 	bl	800799c <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006368:	e00c      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3324      	adds	r3, #36	; 0x24
 800636e:	2101      	movs	r1, #1
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fbc5 	bl	8007b00 <RCCEx_PLL3_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800637a:	e003      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
      break;
 8006380:	e000      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800638a:	4b26      	ldr	r3, [pc, #152]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	f023 0207 	bic.w	r2, r3, #7
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	4923      	ldr	r1, [pc, #140]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006398:	4313      	orrs	r3, r2
 800639a:	654b      	str	r3, [r1, #84]	; 0x54
 800639c:	e001      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d040      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d821      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006403 	.word	0x08006403
 80063c4:	080063d9 	.word	0x080063d9
 80063c8:	080063eb 	.word	0x080063eb
 80063cc:	08006403 	.word	0x08006403
 80063d0:	08006403 	.word	0x08006403
 80063d4:	08006403 	.word	0x08006403
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	2101      	movs	r1, #1
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fadc 	bl	800799c <RCCEx_PLL2_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3324      	adds	r3, #36	; 0x24
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fb85 	bl	8007b00 <RCCEx_PLL3_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d110      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	f023 0207 	bic.w	r2, r3, #7
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006418:	4902      	ldr	r1, [pc, #8]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	658b      	str	r3, [r1, #88]	; 0x58
 800641e:	e007      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006420:	58024800 	.word	0x58024800
 8006424:	58024400 	.word	0x58024400
 8006428:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d04b      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006446:	d02e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800644c:	d828      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d02a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d822      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800645a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800645e:	d026      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006464:	d81c      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800646a:	d010      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800646c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006470:	d816      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01d      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800647a:	d111      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f001 fa8a 	bl	800799c <RCCEx_PLL2_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800648c:	e012      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3324      	adds	r3, #36	; 0x24
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f001 fb33 	bl	8007b00 <RCCEx_PLL3_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800649e:	e009      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	e006      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064a6:	bf00      	nop
 80064a8:	e004      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064aa:	bf00      	nop
 80064ac:	e002      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ba:	4bb2      	ldr	r3, [pc, #712]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	49ae      	ldr	r1, [pc, #696]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	654b      	str	r3, [r1, #84]	; 0x54
 80064ce:	e001      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d04b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064ea:	d02e      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80064ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064f0:	d828      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	d02a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fc:	d822      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80064fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006502:	d026      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006508:	d81c      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d010      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006514:	d816      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01d      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651e:	d111      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fa38 	bl	800799c <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006530:	e012      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	2102      	movs	r1, #2
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fae1 	bl	8007b00 <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006542:	e009      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75fb      	strb	r3, [r7, #23]
      break;
 8006548:	e006      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800654a:	bf00      	nop
 800654c:	e004      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800654e:	bf00      	nop
 8006550:	e002      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800655e:	4b89      	ldr	r3, [pc, #548]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006562:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800656c:	4985      	ldr	r1, [pc, #532]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800656e:	4313      	orrs	r3, r2
 8006570:	658b      	str	r3, [r1, #88]	; 0x58
 8006572:	e001      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04b      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800658a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800658e:	d02e      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006590:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006594:	d828      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659a:	d02a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800659c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a0:	d822      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065a6:	d026      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80065a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065ac:	d81c      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b2:	d010      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80065b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b8:	d816      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01d      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80065be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c2:	d111      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f9e6 	bl	800799c <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065d4:	e012      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	2102      	movs	r1, #2
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fa8f 	bl	8007b00 <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065e6:	e009      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80065ee:	bf00      	nop
 80065f0:	e004      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80065fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006602:	4b60      	ldr	r3, [pc, #384]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006610:	495c      	ldr	r1, [pc, #368]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006612:	4313      	orrs	r3, r2
 8006614:	658b      	str	r3, [r1, #88]	; 0x58
 8006616:	e001      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d10a      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3324      	adds	r3, #36	; 0x24
 8006636:	2102      	movs	r1, #2
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fa61 	bl	8007b00 <RCCEx_PLL3_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006648:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006654:	494b      	ldr	r1, [pc, #300]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006656:	4313      	orrs	r3, r2
 8006658:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01a      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d10a      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	2102      	movs	r1, #2
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fa41 	bl	8007b00 <RCCEx_PLL3_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006688:	4b3e      	ldr	r3, [pc, #248]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	493b      	ldr	r1, [pc, #236]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006698:	4313      	orrs	r3, r2
 800669a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d034      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b2:	d01d      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b8:	d817      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80066be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c2:	d009      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066c4:	e011      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 f965 	bl	800799c <RCCEx_PLL2_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066d6:	e00c      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3324      	adds	r3, #36	; 0x24
 80066dc:	2102      	movs	r1, #2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fa0e 	bl	8007b00 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
      break;
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80066f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066f8:	4b22      	ldr	r3, [pc, #136]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80066fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006706:	491f      	ldr	r1, [pc, #124]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006708:	4313      	orrs	r3, r2
 800670a:	658b      	str	r3, [r1, #88]	; 0x58
 800670c:	e001      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d036      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006728:	d01c      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800672a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800672e:	d816      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006734:	d003      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673a:	d007      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800673c:	e00f      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800674a:	e00c      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3324      	adds	r3, #36	; 0x24
 8006750:	2101      	movs	r1, #1
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f9d4 	bl	8007b00 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	75fb      	strb	r3, [r7, #23]
      break;
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	4902      	ldr	r1, [pc, #8]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800677c:	4313      	orrs	r3, r2
 800677e:	654b      	str	r3, [r1, #84]	; 0x54
 8006780:	e004      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d029      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d007      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80067a6:	e00f      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a8:	4b61      	ldr	r3, [pc, #388]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a60      	ldr	r2, [pc, #384]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067b4:	e00b      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f8ed 	bl	800799c <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067c6:	e002      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067d4:	4b56      	ldr	r3, [pc, #344]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e0:	4953      	ldr	r1, [pc, #332]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3324      	adds	r3, #36	; 0x24
 80067fc:	2102      	movs	r1, #2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 f97e 	bl	8007b00 <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d030      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006822:	d017      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006828:	d811      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800682a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682e:	d013      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d80b      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d106      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800684c:	e007      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
      break;
 8006852:	e004      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006854:	bf00      	nop
 8006856:	e002      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800685c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006864:	4b32      	ldr	r3, [pc, #200]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006870:	492f      	ldr	r1, [pc, #188]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006872:	4313      	orrs	r3, r2
 8006874:	654b      	str	r3, [r1, #84]	; 0x54
 8006876:	e001      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006888:	4b29      	ldr	r3, [pc, #164]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	4926      	ldr	r1, [pc, #152]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068a6:	4b22      	ldr	r3, [pc, #136]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b2:	491f      	ldr	r1, [pc, #124]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	4a19      	ldr	r2, [pc, #100]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ce:	6113      	str	r3, [r2, #16]
 80068d0:	4b17      	ldr	r3, [pc, #92]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068da:	4915      	ldr	r1, [pc, #84]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da08      	bge.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f4:	490e      	ldr	r1, [pc, #56]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006914:	4906      	ldr	r1, [pc, #24]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006916:	4313      	orrs	r3, r2
 8006918:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800691a:	7dbb      	ldrb	r3, [r7, #22]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	58024400 	.word	0x58024400

08006934 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b090      	sub	sp, #64	; 0x40
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	f040 8089 	bne.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006946:	4b95      	ldr	r3, [pc, #596]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	633b      	str	r3, [r7, #48]	; 0x30
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2b04      	cmp	r3, #4
 8006954:	d87d      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006971 	.word	0x08006971
 8006960:	08006995 	.word	0x08006995
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006a4d 	.word	0x08006a4d
 800696c:	080069dd 	.word	0x080069dd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006970:	4b8a      	ldr	r3, [pc, #552]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697c:	d107      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800697e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f000 feb8 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800698c:	e3ed      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006992:	e3ea      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006994:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800699c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a0:	d107      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a2:	f107 0318 	add.w	r3, r7, #24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fbfe 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069b0:	e3db      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b6:	e3d8      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b8:	4b78      	ldr	r3, [pc, #480]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c4:	d107      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fd40 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069d4:	e3c9      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069da:	e3c6      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069dc:	4b6f      	ldr	r3, [pc, #444]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069e6:	4b6d      	ldr	r3, [pc, #436]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80069f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069f8:	4b68      	ldr	r3, [pc, #416]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	08db      	lsrs	r3, r3, #3
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	4a67      	ldr	r2, [pc, #412]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0a:	e01e      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a0c:	4b63      	ldr	r3, [pc, #396]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a18:	d106      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a20:	d102      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a22:	4b60      	ldr	r3, [pc, #384]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a26:	e010      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a28:	4b5c      	ldr	r3, [pc, #368]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a3e:	4b5a      	ldr	r3, [pc, #360]	; (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a42:	e002      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a48:	e38f      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006a4a:	e38e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a4c:	4b57      	ldr	r3, [pc, #348]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a50:	e38b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a56:	e388      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5e:	f040 80a7 	bne.w	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006a62:	4b4e      	ldr	r3, [pc, #312]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006a6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a72:	d054      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a7a:	f200 808b 	bhi.w	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a84:	f000 8083 	beq.w	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a8e:	f200 8081 	bhi.w	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a98:	d02f      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aa0:	d878      	bhi.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aae:	d012      	beq.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006ab0:	e070      	b.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab2:	4b3a      	ldr	r3, [pc, #232]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006abe:	d107      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fe17 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ace:	e34c      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad4:	e349      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ad6:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ae2:	d107      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae4:	f107 0318 	add.w	r3, r7, #24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fb5d 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006af2:	e33a      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af8:	e337      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006afa:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b06:	d107      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fc9f 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b16:	e328      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1c:	e325      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b28:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d10c      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	08db      	lsrs	r3, r3, #3
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006b46:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4c:	e01e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5a:	d106      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b62:	d102      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b68:	e010      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b76:	d106      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7e:	d102      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b84:	e002      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b8a:	e2ee      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006b8c:	e2ed      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b92:	e2ea      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b98:	e2e7      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	03d09000 	.word	0x03d09000
 8006ba4:	003d0900 	.word	0x003d0900
 8006ba8:	007a1200 	.word	0x007a1200
 8006bac:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb6:	f040 809c 	bne.w	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006bba:	4b9e      	ldr	r3, [pc, #632]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bca:	d054      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd2:	f200 808b 	bhi.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bdc:	f000 8083 	beq.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006be6:	f200 8081 	bhi.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf0:	d02f      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf8:	d878      	bhi.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c06:	d012      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006c08:	e070      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c0a:	4b8a      	ldr	r3, [pc, #552]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c16:	d107      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fd6b 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c26:	e2a0      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2c:	e29d      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c2e:	4b81      	ldr	r3, [pc, #516]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3c:	f107 0318 	add.w	r3, r7, #24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fab1 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006c4a:	e28e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c50:	e28b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c52:	4b78      	ldr	r3, [pc, #480]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c60:	f107 030c 	add.w	r3, r7, #12
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fbf3 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c6e:	e27c      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c74:	e279      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c80:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d10c      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c92:	4b68      	ldr	r3, [pc, #416]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a66      	ldr	r2, [pc, #408]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca4:	e01e      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ca6:	4b63      	ldr	r3, [pc, #396]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cba:	d102      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006cbc:	4b5f      	ldr	r3, [pc, #380]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc0:	e010      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cc2:	4b5c      	ldr	r3, [pc, #368]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cce:	d106      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd6:	d102      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006cd8:	4b59      	ldr	r3, [pc, #356]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ce2:	e242      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006ce4:	e241      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ce6:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cea:	e23e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf0:	e23b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	f040 80a6 	bne.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d0c:	d054      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d14:	f200 808b 	bhi.w	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d1e:	f000 8083 	beq.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d28:	f200 8081 	bhi.w	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d32:	d02f      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	d878      	bhi.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d48:	d012      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006d4a:	e070      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d4c:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d58:	d107      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fcca 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d68:	e1ff      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6e:	e1fc      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d70:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7e:	f107 0318 	add.w	r3, r7, #24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fa10 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d8c:	e1ed      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d92:	e1ea      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da2:	f107 030c 	add.w	r3, r7, #12
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fb52 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006db0:	e1db      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db6:	e1d8      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dd4:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	08db      	lsrs	r3, r3, #3
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	4a16      	ldr	r2, [pc, #88]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de6:	e01e      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df4:	d106      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dfc:	d102      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e02:	e010      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e18:	d102      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e24:	e1a1      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006e26:	e1a0      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2c:	e19d      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e32:	e19a      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006e34:	58024400 	.word	0x58024400
 8006e38:	03d09000 	.word	0x03d09000
 8006e3c:	003d0900 	.word	0x003d0900
 8006e40:	007a1200 	.word	0x007a1200
 8006e44:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e4e:	d173      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006e50:	4b9a      	ldr	r3, [pc, #616]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e60:	d02f      	beq.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e68:	d863      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e76:	d012      	beq.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006e78:	e05b      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e7a:	4b90      	ldr	r3, [pc, #576]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e86:	d107      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e88:	f107 0318 	add.w	r3, r7, #24
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f98b 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e96:	e168      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e9c:	e165      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e9e:	4b87      	ldr	r3, [pc, #540]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eaa:	d107      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 facd 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eba:	e156      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec0:	e153      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ec2:	4b7e      	ldr	r3, [pc, #504]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ecc:	4b7b      	ldr	r3, [pc, #492]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d10c      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ede:	4b77      	ldr	r3, [pc, #476]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	4a75      	ldr	r2, [pc, #468]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef0:	e01e      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ef2:	4b72      	ldr	r3, [pc, #456]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efe:	d106      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f08:	4b6e      	ldr	r3, [pc, #440]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	e010      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f0e:	4b6b      	ldr	r3, [pc, #428]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d102      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f24:	4b68      	ldr	r3, [pc, #416]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f2e:	e11c      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006f30:	e11b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e118      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3e:	d133      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006f40:	4b5e      	ldr	r3, [pc, #376]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d012      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006f58:	e023      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f5a:	4b58      	ldr	r3, [pc, #352]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f66:	d107      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fbc3 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f76:	e0f8      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7c:	e0f5      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f7e:	4b4f      	ldr	r3, [pc, #316]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8c:	f107 0318 	add.w	r3, r7, #24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 f909 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f9a:	e0e6      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa0:	e0e3      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e0e0      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fae:	f040 808d 	bne.w	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006fb2:	4b42      	ldr	r3, [pc, #264]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006fba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fc2:	d06b      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fca:	d874      	bhi.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd2:	d056      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fda:	d86c      	bhi.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fe2:	d03b      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fea:	d864      	bhi.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff2:	d021      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffa:	d85c      	bhi.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007008:	d004      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800700a:	e054      	b.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800700c:	f000 f8b6 	bl	800717c <HAL_RCCEx_GetD3PCLK1Freq>
 8007010:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007012:	e0aa      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007014:	4b29      	ldr	r3, [pc, #164]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007020:	d107      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007022:	f107 0318 	add.w	r3, r7, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f8be 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007030:	e09b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007036:	e098      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007044:	d107      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007046:	f107 030c 	add.w	r3, r7, #12
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fa00 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007054:	e089      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800705a:	e086      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b04      	cmp	r3, #4
 8007066:	d109      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007068:	4b14      	ldr	r3, [pc, #80]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800707a:	e076      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007080:	e073      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007082:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708e:	d102      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007094:	e069      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709a:	e066      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800709c:	4b07      	ldr	r3, [pc, #28]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a8:	d102      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070ae:	e05c      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b4:	e059      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ba:	e056      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80070bc:	58024400 	.word	0x58024400
 80070c0:	03d09000 	.word	0x03d09000
 80070c4:	003d0900 	.word	0x003d0900
 80070c8:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d2:	d148      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80070d4:	4b27      	ldr	r3, [pc, #156]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e4:	d02a      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ec:	d838      	bhi.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070fa:	d00d      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80070fc:	e030      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800710a:	d102      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007110:	e02b      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007116:	e028      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007118:	4b16      	ldr	r3, [pc, #88]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007124:	d107      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fae4 	bl	80076f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007134:	e019      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	e016      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007148:	d107      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714a:	f107 0318 	add.w	r3, r7, #24
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f82a 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007158:	e007      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e004      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007164:	e001      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800716a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800716c:	4618      	mov	r0, r3
 800716e:	3740      	adds	r7, #64	; 0x40
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	58024400 	.word	0x58024400
 8007178:	007a1200 	.word	0x007a1200

0800717c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007180:	f7fe fc40 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	091b      	lsrs	r3, r3, #4
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4904      	ldr	r1, [pc, #16]	; (80071a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	58024400 	.word	0x58024400
 80071a4:	08013b1c 	.word	0x08013b1c

080071a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b089      	sub	sp, #36	; 0x24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071b0:	4ba1      	ldr	r3, [pc, #644]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071ba:	4b9f      	ldr	r3, [pc, #636]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	0b1b      	lsrs	r3, r3, #12
 80071c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071c6:	4b9c      	ldr	r3, [pc, #624]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	091b      	lsrs	r3, r3, #4
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071d2:	4b99      	ldr	r3, [pc, #612]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	08db      	lsrs	r3, r3, #3
 80071d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8111 	beq.w	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f000 8083 	beq.w	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f200 80a1 	bhi.w	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d056      	beq.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007212:	e099      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007214:	4b88      	ldr	r3, [pc, #544]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02d      	beq.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007220:	4b85      	ldr	r3, [pc, #532]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	08db      	lsrs	r3, r3, #3
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	4a84      	ldr	r2, [pc, #528]	; (800743c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b7b      	ldr	r3, [pc, #492]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800727a:	e087      	b.n	800738c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b6a      	ldr	r3, [pc, #424]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072be:	e065      	b.n	800738c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b59      	ldr	r3, [pc, #356]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007302:	e043      	b.n	800738c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800744c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007316:	4b48      	ldr	r3, [pc, #288]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007326:	ed97 6a03 	vldr	s12, [r7, #12]
 800732a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007346:	e021      	b.n	800738c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	4b37      	ldr	r3, [pc, #220]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736a:	ed97 6a03 	vldr	s12, [r7, #12]
 800736e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800737e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800738a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	0a5b      	lsrs	r3, r3, #9
 8007392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b2:	ee17 2a90 	vmov	r2, s15
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073ba:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	0c1b      	lsrs	r3, r3, #16
 80073c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e0:	ee17 2a90 	vmov	r2, s15
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	0e1b      	lsrs	r3, r3, #24
 80073ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	edd7 6a07 	vldr	s13, [r7, #28]
 8007406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007416:	e008      	b.n	800742a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	609a      	str	r2, [r3, #8]
}
 800742a:	bf00      	nop
 800742c:	3724      	adds	r7, #36	; 0x24
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
 800743c:	03d09000 	.word	0x03d09000
 8007440:	46000000 	.word	0x46000000
 8007444:	4c742400 	.word	0x4c742400
 8007448:	4a742400 	.word	0x4a742400
 800744c:	4af42400 	.word	0x4af42400

08007450 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007458:	4ba1      	ldr	r3, [pc, #644]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007462:	4b9f      	ldr	r3, [pc, #636]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	0d1b      	lsrs	r3, r3, #20
 8007468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800746c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800746e:	4b9c      	ldr	r3, [pc, #624]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800747a:	4b99      	ldr	r3, [pc, #612]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	08db      	lsrs	r3, r3, #3
 8007480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 8111 	beq.w	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	f000 8083 	beq.w	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	f200 80a1 	bhi.w	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d056      	beq.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074ba:	e099      	b.n	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074bc:	4b88      	ldr	r3, [pc, #544]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d02d      	beq.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074c8:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	08db      	lsrs	r3, r3, #3
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	4a84      	ldr	r2, [pc, #528]	; (80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
 80074d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b7b      	ldr	r3, [pc, #492]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a03 	vldr	s12, [r7, #12]
 8007506:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007522:	e087      	b.n	8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007536:	4b6a      	ldr	r3, [pc, #424]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007546:	ed97 6a03 	vldr	s12, [r7, #12]
 800754a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007566:	e065      	b.n	8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757a:	4b59      	ldr	r3, [pc, #356]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758a:	ed97 6a03 	vldr	s12, [r7, #12]
 800758e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800759e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075aa:	e043      	b.n	8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075be:	4b48      	ldr	r3, [pc, #288]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ee:	e021      	b.n	8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007602:	4b37      	ldr	r3, [pc, #220]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	ed97 6a03 	vldr	s12, [r7, #12]
 8007616:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800761a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007632:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007634:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	0a5b      	lsrs	r3, r3, #9
 800763a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800764e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765a:	ee17 2a90 	vmov	r2, s15
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007662:	4b1f      	ldr	r3, [pc, #124]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007688:	ee17 2a90 	vmov	r2, s15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	0e1b      	lsrs	r3, r3, #24
 8007696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b6:	ee17 2a90 	vmov	r2, s15
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076be:	e008      	b.n	80076d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	609a      	str	r2, [r3, #8]
}
 80076d2:	bf00      	nop
 80076d4:	3724      	adds	r7, #36	; 0x24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	58024400 	.word	0x58024400
 80076e4:	03d09000 	.word	0x03d09000
 80076e8:	46000000 	.word	0x46000000
 80076ec:	4c742400 	.word	0x4c742400
 80076f0:	4a742400 	.word	0x4a742400
 80076f4:	4af42400 	.word	0x4af42400

080076f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b089      	sub	sp, #36	; 0x24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007700:	4ba0      	ldr	r3, [pc, #640]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800770a:	4b9e      	ldr	r3, [pc, #632]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	091b      	lsrs	r3, r3, #4
 8007710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007714:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007716:	4b9b      	ldr	r3, [pc, #620]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007720:	4b98      	ldr	r3, [pc, #608]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
 8007730:	ee07 3a90 	vmov	s15, r3
 8007734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007738:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8111 	beq.w	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	f000 8083 	beq.w	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	2b02      	cmp	r3, #2
 8007750:	f200 80a1 	bhi.w	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d056      	beq.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007760:	e099      	b.n	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007762:	4b88      	ldr	r3, [pc, #544]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d02d      	beq.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800776e:	4b85      	ldr	r3, [pc, #532]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	4a83      	ldr	r2, [pc, #524]	; (8007988 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	4b7a      	ldr	r3, [pc, #488]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077c8:	e087      	b.n	80078da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007990 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077dc:	4b69      	ldr	r3, [pc, #420]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007808:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800780c:	e065      	b.n	80078da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007818:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007994 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800781c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007820:	4b58      	ldr	r3, [pc, #352]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007830:	ed97 6a03 	vldr	s12, [r7, #12]
 8007834:	eddf 5a55 	vldr	s11, [pc, #340]	; 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007850:	e043      	b.n	80078da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007864:	4b47      	ldr	r3, [pc, #284]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007874:	ed97 6a03 	vldr	s12, [r7, #12]
 8007878:	eddf 5a44 	vldr	s11, [pc, #272]	; 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800787c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007890:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007894:	e021      	b.n	80078da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007990 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a8:	4b36      	ldr	r3, [pc, #216]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	0a5b      	lsrs	r3, r3, #9
 80078e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007900:	ee17 2a90 	vmov	r2, s15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007908:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800791e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007922:	edd7 6a07 	vldr	s13, [r7, #28]
 8007926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800792a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792e:	ee17 2a90 	vmov	r2, s15
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	0e1b      	lsrs	r3, r3, #24
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800794c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007950:	edd7 6a07 	vldr	s13, [r7, #28]
 8007954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800795c:	ee17 2a90 	vmov	r2, s15
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007964:	e008      	b.n	8007978 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	3724      	adds	r7, #36	; 0x24
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	58024400 	.word	0x58024400
 8007988:	03d09000 	.word	0x03d09000
 800798c:	46000000 	.word	0x46000000
 8007990:	4c742400 	.word	0x4c742400
 8007994:	4a742400 	.word	0x4a742400
 8007998:	4af42400 	.word	0x4af42400

0800799c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079aa:	4b53      	ldr	r3, [pc, #332]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d101      	bne.n	80079ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e099      	b.n	8007aee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079ba:	4b4f      	ldr	r3, [pc, #316]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a4e      	ldr	r2, [pc, #312]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c6:	f7fb ff27 	bl	8003818 <HAL_GetTick>
 80079ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079cc:	e008      	b.n	80079e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079ce:	f7fb ff23 	bl	8003818 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e086      	b.n	8007aee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079e0:	4b45      	ldr	r3, [pc, #276]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079ec:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	493f      	ldr	r1, [pc, #252]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	628b      	str	r3, [r1, #40]	; 0x28
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	025b      	lsls	r3, r3, #9
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	061b      	lsls	r3, r3, #24
 8007a2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a30:	4931      	ldr	r1, [pc, #196]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a36:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	492d      	ldr	r1, [pc, #180]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a48:	4b2b      	ldr	r3, [pc, #172]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f023 0220 	bic.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	4928      	ldr	r1, [pc, #160]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a5a:	4b27      	ldr	r3, [pc, #156]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	4a26      	ldr	r2, [pc, #152]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a66:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <RCCEx_PLL2_Config+0x160>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	69d2      	ldr	r2, [r2, #28]
 8007a72:	00d2      	lsls	r2, r2, #3
 8007a74:	4920      	ldr	r1, [pc, #128]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a80:	f043 0310 	orr.w	r3, r3, #16
 8007a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d106      	bne.n	8007a9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a19      	ldr	r2, [pc, #100]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007a92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a98:	e00f      	b.n	8007aba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d106      	bne.n	8007aae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007aa0:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	4a14      	ldr	r2, [pc, #80]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007aac:	e005      	b.n	8007aba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007aae:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a11      	ldr	r2, [pc, #68]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007aba:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac6:	f7fb fea7 	bl	8003818 <HAL_GetTick>
 8007aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007acc:	e008      	b.n	8007ae0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ace:	f7fb fea3 	bl	8003818 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e006      	b.n	8007aee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	ffff0007 	.word	0xffff0007

08007b00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b0e:	4b53      	ldr	r3, [pc, #332]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d101      	bne.n	8007b1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e099      	b.n	8007c52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b1e:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4e      	ldr	r2, [pc, #312]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2a:	f7fb fe75 	bl	8003818 <HAL_GetTick>
 8007b2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b30:	e008      	b.n	8007b44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b32:	f7fb fe71 	bl	8003818 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e086      	b.n	8007c52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b44:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f0      	bne.n	8007b32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b50:	4b42      	ldr	r3, [pc, #264]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	051b      	lsls	r3, r3, #20
 8007b5e:	493f      	ldr	r1, [pc, #252]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	628b      	str	r3, [r1, #40]	; 0x28
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	025b      	lsls	r3, r3, #9
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	061b      	lsls	r3, r3, #24
 8007b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b94:	4931      	ldr	r1, [pc, #196]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b9a:	4b30      	ldr	r3, [pc, #192]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	492d      	ldr	r1, [pc, #180]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	4928      	ldr	r1, [pc, #160]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	4a26      	ldr	r2, [pc, #152]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <RCCEx_PLL3_Config+0x160>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	69d2      	ldr	r2, [r2, #28]
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	4920      	ldr	r1, [pc, #128]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d106      	bne.n	8007bfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a19      	ldr	r2, [pc, #100]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bfc:	e00f      	b.n	8007c1e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d106      	bne.n	8007c12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c04:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c10:	e005      	b.n	8007c1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a11      	ldr	r2, [pc, #68]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a0e      	ldr	r2, [pc, #56]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2a:	f7fb fdf5 	bl	8003818 <HAL_GetTick>
 8007c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c30:	e008      	b.n	8007c44 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c32:	f7fb fdf1 	bl	8003818 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <RCCEx_PLL3_Config+0x15c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0f0      	beq.n	8007c32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	ffff0007 	.word	0xffff0007

08007c64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e075      	b.n	8007d62 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7f9 ff9d 	bl	8001bc8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2204      	movs	r2, #4
 8007c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f868 	bl	8007d6c <HAL_SD_InitCard>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e05d      	b.n	8007d62 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fda7 	bl	8008800 <HAL_SD_GetCardStatus>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e052      	b.n	8007d62 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007cbc:	7e3b      	ldrb	r3, [r7, #24]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007cc2:	7e7b      	ldrb	r3, [r7, #25]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10a      	bne.n	8007ce6 <HAL_SD_Init+0x82>
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <HAL_SD_Init+0x78>
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ce4:	e00b      	b.n	8007cfe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d104      	bne.n	8007cf8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8007cf6:	e002      	b.n	8007cfe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe65 	bl	80089d4 <HAL_SD_ConfigWideBusOperation>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e026      	b.n	8007d62 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007d14:	f7fb fd80 	bl	8003818 <HAL_GetTick>
 8007d18:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d1a:	e011      	b.n	8007d40 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d1c:	f7fb fd7c 	bl	8003818 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d109      	bne.n	8007d40 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e010      	b.n	8007d62 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 ff59 	bl	8008bf8 <HAL_SD_GetCardState>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d1e7      	bne.n	8007d1c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b08d      	sub	sp, #52	; 0x34
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d8c:	f7fe fdd2 	bl	8006934 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d90:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007da6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e06a      	b.n	8007e82 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	4a36      	ldr	r2, [pc, #216]	; (8007e8c <HAL_SD_InitCard+0x120>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	091b      	lsrs	r3, r3, #4
 8007db8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681c      	ldr	r4, [r3, #0]
 8007dbe:	466a      	mov	r2, sp
 8007dc0:	f107 0318 	add.w	r3, r7, #24
 8007dc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007dc8:	e882 0003 	stmia.w	r2, {r0, r1}
 8007dcc:	f107 030c 	add.w	r3, r7, #12
 8007dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f003 fc20 	bl	800b618 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f003 fc63 	bl	800b6a8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007dee:	4a28      	ldr	r2, [pc, #160]	; (8007e90 <HAL_SD_InitCard+0x124>)
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	3301      	adds	r3, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fb fd19 	bl	8003830 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 ffe8 	bl	8008dd4 <SD_PowerON>
 8007e04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e02e      	b.n	8007e82 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 ff07 	bl	8008c38 <SD_InitCard>
 8007e2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e01b      	b.n	8007e82 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e52:	4618      	mov	r0, r3
 8007e54:	f003 fcbe 	bl	800b7d4 <SDMMC_CmdBlockLength>
 8007e58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00f      	beq.n	8007e80 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a0b      	ldr	r2, [pc, #44]	; (8007e94 <HAL_SD_InitCard+0x128>)
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	372c      	adds	r7, #44	; 0x2c
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd90      	pop	{r4, r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	014f8b59 	.word	0x014f8b59
 8007e90:	00012110 	.word	0x00012110
 8007e94:	1fe00fff 	.word	0x1fe00fff

08007e98 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08c      	sub	sp, #48	; 0x30
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e08d      	b.n	8007fdc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 8086 	bne.w	8007fda <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	441a      	add	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d907      	bls.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e074      	b.n	8007fdc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	025a      	lsls	r2, r3, #9
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d002      	beq.n	8007f1e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	025b      	lsls	r3, r3, #9
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	025b      	lsls	r3, r3, #9
 8007f28:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f2a:	2390      	movs	r3, #144	; 0x90
 8007f2c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f107 0210 	add.w	r2, r7, #16
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f003 fc19 	bl	800b77c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f58:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d90a      	bls.n	8007f86 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2282      	movs	r2, #130	; 0x82
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f003 fc6f 	bl	800b860 <SDMMC_CmdReadMultiBlock>
 8007f82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f84:	e009      	b.n	8007f9a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2281      	movs	r2, #129	; 0x81
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f92:	4618      	mov	r0, r3
 8007f94:	f003 fc41 	bl	800b81a <SDMMC_CmdReadSingleBlock>
 8007f98:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d012      	beq.n	8007fc6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a0f      	ldr	r2, [pc, #60]	; (8007fe4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e00a      	b.n	8007fdc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007fd4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e000      	b.n	8007fdc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
  }
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3730      	adds	r7, #48	; 0x30
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	1fe00fff 	.word	0x1fe00fff

08007fe8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	; 0x30
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008004:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e08d      	b.n	800812c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	f040 8086 	bne.w	800812a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	429a      	cmp	r2, r3
 8008030:	d907      	bls.n	8008042 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e074      	b.n	800812c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2203      	movs	r2, #3
 8008046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2200      	movs	r2, #0
 8008050:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	025a      	lsls	r2, r3, #9
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	2b01      	cmp	r3, #1
 8008066:	d002      	beq.n	800806e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	025b      	lsls	r3, r3, #9
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	025b      	lsls	r3, r3, #9
 8008078:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800807a:	2390      	movs	r3, #144	; 0x90
 800807c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008086:	2300      	movs	r3, #0
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f107 0210 	add.w	r2, r7, #16
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f003 fb71 	bl	800b77c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2201      	movs	r2, #1
 80080b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d90a      	bls.n	80080d6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	22a0      	movs	r2, #160	; 0xa0
 80080c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080cc:	4618      	mov	r0, r3
 80080ce:	f003 fc0d 	bl	800b8ec <SDMMC_CmdWriteMultiBlock>
 80080d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080d4:	e009      	b.n	80080ea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2290      	movs	r2, #144	; 0x90
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e2:	4618      	mov	r0, r3
 80080e4:	f003 fbdf 	bl	800b8a6 <SDMMC_CmdWriteSingleBlock>
 80080e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a0f      	ldr	r2, [pc, #60]	; (8008134 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	431a      	orrs	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e00a      	b.n	800812c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008124:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	e000      	b.n	800812c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800812a:	2302      	movs	r3, #2
  }
}
 800812c:	4618      	mov	r0, r3
 800812e:	3730      	adds	r7, #48	; 0x30
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	1fe00fff 	.word	0x1fe00fff

08008138 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f924 	bl	80093ac <SD_Read_IT>
 8008164:	e19a      	b.n	800849c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80ac 	beq.w	80082ce <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800817e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b9d      	ldr	r3, [pc, #628]	; (8008400 <HAL_SD_IRQHandler+0x2c8>)
 800818c:	400b      	ands	r3, r1
 800818e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800819e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d038      	beq.n	800822c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <HAL_SD_IRQHandler+0x96>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d011      	beq.n	80081f2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f003 fbae 	bl	800b934 <SDMMC_CmdStopTransfer>
 80081d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f959 	bl	80084a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a83      	ldr	r2, [pc, #524]	; (8008404 <HAL_SD_IRQHandler+0x2cc>)
 80081f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <HAL_SD_IRQHandler+0xe4>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f004 f861 	bl	800c2e4 <HAL_SD_RxCpltCallback>
 8008222:	e13b      	b.n	800849c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f004 f853 	bl	800c2d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800822a:	e137      	b.n	800849c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8132 	beq.w	800849c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2200      	movs	r2, #0
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2200      	movs	r2, #0
 800824e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_SD_IRQHandler+0x12c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d011      	beq.n	8008288 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f003 fb63 	bl	800b934 <SDMMC_CmdStopTransfer>
 800826e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f90e 	bl	80084a4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <HAL_SD_IRQHandler+0x172>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f004 f810 	bl	800c2d0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <HAL_SD_IRQHandler+0x18e>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80eb 	beq.w	800849c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f004 f80c 	bl	800c2e4 <HAL_SD_RxCpltCallback>
}
 80082cc:	e0e6      	b.n	800849c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_SD_IRQHandler+0x1b6>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f8a6 	bl	8009438 <SD_Write_IT>
 80082ec:	e0d6      	b.n	800849c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80a2 	beq.w	8008442 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	f043 0202 	orr.w	r2, r3, #2
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	f043 0208 	orr.w	r2, r3, #8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	f043 0220 	orr.w	r2, r3, #32
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835e:	f043 0210 	orr.w	r2, r3, #16
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <HAL_SD_IRQHandler+0x2cc>)
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800837c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800838c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800839c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083ac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f003 fabe 	bl	800b934 <SDMMC_CmdStopTransfer>
 80083b8:	4602      	mov	r2, r0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083d2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00f      	beq.n	8008408 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f854 	bl	80084a4 <HAL_SD_ErrorCallback>
}
 80083fc:	e04e      	b.n	800849c <HAL_SD_IRQHandler+0x364>
 80083fe:	bf00      	nop
 8008400:	ffff3ec5 	.word	0xffff3ec5
 8008404:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b00      	cmp	r3, #0
 8008410:	d044      	beq.n	800849c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	2b00      	cmp	r3, #0
 8008418:	d040      	beq.n	800849c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008428:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f832 	bl	80084a4 <HAL_SD_ErrorCallback>
}
 8008440:	e02c      	b.n	800849c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d025      	beq.n	800849c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f848 	bl	8009508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008478:	e010      	b.n	800849c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 f830 	bl	80094e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008480:	e00c      	b.n	800849c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f831 	bl	80094f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008492:	e003      	b.n	800849c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f819 	bl	80094cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800849a:	e7ff      	b.n	800849c <HAL_SD_IRQHandler+0x364>
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	0f9b      	lsrs	r3, r3, #30
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d2:	0e9b      	lsrs	r3, r3, #26
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e4:	0e1b      	lsrs	r3, r3, #24
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	f003 0303 	and.w	r3, r3, #3
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850e:	b2da      	uxtb	r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008518:	0d1b      	lsrs	r3, r3, #20
 800851a:	b29a      	uxth	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	b2da      	uxtb	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008536:	0bdb      	lsrs	r3, r3, #15
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	b2da      	uxtb	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008548:	0b9b      	lsrs	r3, r3, #14
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	b2da      	uxtb	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855a:	0b5b      	lsrs	r3, r3, #13
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856c:	0b1b      	lsrs	r3, r3, #12
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	b2da      	uxtb	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2200      	movs	r2, #0
 800857e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d163      	bne.n	8008650 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	009a      	lsls	r2, r3, #2
 800858e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008592:	4013      	ands	r3, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008598:	0f92      	lsrs	r2, r2, #30
 800859a:	431a      	orrs	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a4:	0edb      	lsrs	r3, r3, #27
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b6:	0e1b      	lsrs	r3, r3, #24
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c8:	0d5b      	lsrs	r3, r3, #21
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085da:	0c9b      	lsrs	r3, r3, #18
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ec:	0bdb      	lsrs	r3, r3, #15
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	7e1b      	ldrb	r3, [r3, #24]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	3302      	adds	r3, #2
 8008610:	2201      	movs	r2, #1
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800861a:	fb02 f203 	mul.w	r2, r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	7a1b      	ldrb	r3, [r3, #8]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	2201      	movs	r2, #1
 800862e:	409a      	lsls	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800863c:	0a52      	lsrs	r2, r2, #9
 800863e:	fb02 f203 	mul.w	r2, r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864c:	655a      	str	r2, [r3, #84]	; 0x54
 800864e:	e031      	b.n	80086b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	2b01      	cmp	r3, #1
 8008656:	d11d      	bne.n	8008694 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	041b      	lsls	r3, r3, #16
 800865e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008666:	0c1b      	lsrs	r3, r3, #16
 8008668:	431a      	orrs	r2, r3
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	3301      	adds	r3, #1
 8008674:	029a      	lsls	r2, r3, #10
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008688:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	655a      	str	r2, [r3, #84]	; 0x54
 8008692:	e00f      	b.n	80086b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a58      	ldr	r2, [pc, #352]	; (80087fc <HAL_SD_GetCardCSD+0x344>)
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e09d      	b.n	80087f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b8:	0b9b      	lsrs	r3, r3, #14
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ca:	09db      	lsrs	r3, r3, #7
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ec:	0fdb      	lsrs	r3, r3, #31
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086f8:	0f5b      	lsrs	r3, r3, #29
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	b2da      	uxtb	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800870a:	0e9b      	lsrs	r3, r3, #26
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	b2da      	uxtb	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800871c:	0d9b      	lsrs	r3, r3, #22
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800872e:	0d5b      	lsrs	r3, r3, #21
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875e:	0bdb      	lsrs	r3, r3, #15
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008772:	0b9b      	lsrs	r3, r3, #14
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008786:	0b5b      	lsrs	r3, r3, #13
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879a:	0b1b      	lsrs	r3, r3, #12
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ae:	0a9b      	lsrs	r3, r3, #10
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	1fe00fff 	.word	0x1fe00fff

08008800 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b094      	sub	sp, #80	; 0x50
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b03      	cmp	r3, #3
 800881a:	d101      	bne.n	8008820 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0a7      	b.n	8008970 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb62 	bl	8008ef0 <SD_SendSDStatus>
 800882c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800882e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a4f      	ldr	r2, [pc, #316]	; (8008978 <HAL_SD_GetCardStatus+0x178>)
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008856:	e070      	b.n	800893a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	099b      	lsrs	r3, r3, #6
 800885c:	b2db      	uxtb	r3, r3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	b2da      	uxtb	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	b2db      	uxtb	r3, r3
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	b2da      	uxtb	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008882:	b29a      	uxth	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	0e1b      	lsrs	r3, r3, #24
 8008888:	b29b      	uxth	r3, r3
 800888a:	4313      	orrs	r3, r2
 800888c:	b29a      	uxth	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	061a      	lsls	r2, r3, #24
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800889e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	0a1b      	lsrs	r3, r3, #8
 80088a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	0e1b      	lsrs	r3, r3, #24
 80088ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	0d1b      	lsrs	r3, r3, #20
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	0a9b      	lsrs	r3, r3, #10
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	091b      	lsrs	r3, r3, #4
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 030f 	and.w	r3, r3, #15
 800891c:	b2da      	uxtb	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	0e1b      	lsrs	r3, r3, #24
 8008934:	b2da      	uxtb	r2, r3
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008942:	4618      	mov	r0, r3
 8008944:	f002 ff46 	bl	800b7d4 <SDMMC_CmdBlockLength>
 8008948:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800894a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00d      	beq.n	800896c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a08      	ldr	r2, [pc, #32]	; (8008978 <HAL_SD_GetCardStatus+0x178>)
 8008956:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800895c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800896c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008970:	4618      	mov	r0, r3
 8008972:	3750      	adds	r7, #80	; 0x50
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	1fe00fff 	.word	0x1fe00fff

0800897c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b08d      	sub	sp, #52	; 0x34
 80089d8:	af02      	add	r7, sp, #8
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2203      	movs	r2, #3
 80089ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d02e      	beq.n	8008a56 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fe:	d106      	bne.n	8008a0e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8008a0c:	e029      	b.n	8008a62 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a14:	d10a      	bne.n	8008a2c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fb62 	bl	80090e0 <SD_WideBus_Enable>
 8008a1c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	635a      	str	r2, [r3, #52]	; 0x34
 8008a2a:	e01a      	b.n	8008a62 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fb9f 	bl	8009176 <SD_WideBus_Disable>
 8008a38:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	635a      	str	r2, [r3, #52]	; 0x34
 8008a46:	e00c      	b.n	8008a62 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	635a      	str	r2, [r3, #52]	; 0x34
 8008a54:	e005      	b.n	8008a62 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a5e      	ldr	r2, [pc, #376]	; (8008be8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a78:	e094      	b.n	8008ba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a7e:	f7fd ff59 	bl	8006934 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a82:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8083 	beq.w	8008b92 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695a      	ldr	r2, [r3, #20]
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4950      	ldr	r1, [pc, #320]	; (8008bec <HAL_SD_ConfigWideBusOperation+0x218>)
 8008aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8008aae:	0e1b      	lsrs	r3, r3, #24
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d303      	bcc.n	8008abc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	e05a      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac4:	d103      	bne.n	8008ace <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e051      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad6:	d126      	bne.n	8008b26 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10e      	bne.n	8008afe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	4a43      	ldr	r2, [pc, #268]	; (8008bf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d906      	bls.n	8008af6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <HAL_SD_ConfigWideBusOperation+0x218>)
 8008aec:	fba2 2303 	umull	r2, r3, r2, r3
 8008af0:	0e5b      	lsrs	r3, r3, #25
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	e03d      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	e039      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	6a3a      	ldr	r2, [r7, #32]
 8008b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0a:	4a39      	ldr	r2, [pc, #228]	; (8008bf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d906      	bls.n	8008b1e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	4a36      	ldr	r2, [pc, #216]	; (8008bec <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b14:	fba2 2303 	umull	r2, r3, r2, r3
 8008b18:	0e5b      	lsrs	r3, r3, #25
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	e029      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	e025      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10e      	bne.n	8008b4c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	4a30      	ldr	r2, [pc, #192]	; (8008bf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d906      	bls.n	8008b44 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	4a2c      	ldr	r2, [pc, #176]	; (8008bec <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	0e1b      	lsrs	r3, r3, #24
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e016      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	61bb      	str	r3, [r7, #24]
 8008b4a:	e012      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	4a26      	ldr	r2, [pc, #152]	; (8008bf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d906      	bls.n	8008b6c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	4a22      	ldr	r2, [pc, #136]	; (8008bec <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	0e1b      	lsrs	r3, r3, #24
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	e002      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	466a      	mov	r2, sp
 8008b78:	f107 0314 	add.w	r3, r7, #20
 8008b7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b80:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b84:	f107 0308 	add.w	r3, r7, #8
 8008b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f002 fd44 	bl	800b618 <SDMMC_Init>
 8008b90:	e008      	b.n	8008ba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 fe11 	bl	800b7d4 <SDMMC_CmdBlockLength>
 8008bb2:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a0a      	ldr	r2, [pc, #40]	; (8008be8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008bc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	372c      	adds	r7, #44	; 0x2c
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd90      	pop	{r4, r7, pc}
 8008be8:	1fe00fff 	.word	0x1fe00fff
 8008bec:	55e63b89 	.word	0x55e63b89
 8008bf0:	02faf080 	.word	0x02faf080
 8008bf4:	017d7840 	.word	0x017d7840

08008bf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c04:	f107 030c 	add.w	r3, r7, #12
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa40 	bl	8009090 <SD_SendStatus>
 8008c10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	0a5b      	lsrs	r3, r3, #9
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c2e:	693b      	ldr	r3, [r7, #16]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b090      	sub	sp, #64	; 0x40
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008c44:	f7fa fde8 	bl	8003818 <HAL_GetTick>
 8008c48:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f002 fd3b 	bl	800b6ca <SDMMC_GetPowerState>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c5e:	e0b5      	b.n	8008dcc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d02e      	beq.n	8008cc6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f002 ff86 	bl	800bb7e <SDMMC_CmdSendCID>
 8008c72:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <SD_InitCard+0x46>
    {
      return errorstate;
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	e0a6      	b.n	8008dcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fd66 	bl	800b756 <SDMMC_GetResponse>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2104      	movs	r1, #4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f002 fd5d 	bl	800b756 <SDMMC_GetResponse>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2108      	movs	r1, #8
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f002 fd54 	bl	800b756 <SDMMC_GetResponse>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	210c      	movs	r1, #12
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f002 fd4b 	bl	800b756 <SDMMC_GetResponse>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d01d      	beq.n	8008d0a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008cce:	e019      	b.n	8008d04 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f107 020a 	add.w	r2, r7, #10
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 ff8e 	bl	800bbfc <SDMMC_CmdSetRelAdd>
 8008ce0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <SD_InitCard+0xb4>
      {
        return errorstate;
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	e06f      	b.n	8008dcc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008cec:	f7fa fd94 	bl	8003818 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	f241 3287 	movw	r2, #4999	; 0x1387
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d902      	bls.n	8008d04 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008cfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d02:	e063      	b.n	8008dcc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008d04:	897b      	ldrh	r3, [r7, #10]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0e2      	beq.n	8008cd0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d036      	beq.n	8008d80 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d12:	897b      	ldrh	r3, [r7, #10]
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f002 ff48 	bl	800bbbc <SDMMC_CmdSendCSD>
 8008d2c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <SD_InitCard+0x100>
    {
      return errorstate;
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	e049      	b.n	8008dcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f002 fd09 	bl	800b756 <SDMMC_GetResponse>
 8008d44:	4602      	mov	r2, r0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2104      	movs	r1, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fd00 	bl	800b756 <SDMMC_GetResponse>
 8008d56:	4602      	mov	r2, r0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2108      	movs	r1, #8
 8008d62:	4618      	mov	r0, r3
 8008d64:	f002 fcf7 	bl	800b756 <SDMMC_GetResponse>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	210c      	movs	r1, #12
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 fcee 	bl	800b756 <SDMMC_GetResponse>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2104      	movs	r1, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 fce5 	bl	800b756 <SDMMC_GetResponse>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	0d1a      	lsrs	r2, r3, #20
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff fb8c 	bl	80084b8 <HAL_SD_GetCardCSD>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008da6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008daa:	e00f      	b.n	8008dcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db4:	041b      	lsls	r3, r3, #16
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f002 fdf7 	bl	800b9ac <SDMMC_CmdSelDesel>
 8008dbe:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <SD_InitCard+0x192>
  {
    return errorstate;
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	e000      	b.n	8008dcc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3740      	adds	r7, #64	; 0x40
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f002 fe00 	bl	800b9f2 <SDMMC_CmdGoIdleState>
 8008df2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <SD_PowerON+0x2a>
  {
    return errorstate;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	e072      	b.n	8008ee4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 fe13 	bl	800ba2e <SDMMC_CmdOperCond>
 8008e08:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e10:	d10d      	bne.n	8008e2e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 fde8 	bl	800b9f2 <SDMMC_CmdGoIdleState>
 8008e22:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d004      	beq.n	8008e34 <SD_PowerON+0x60>
    {
      return errorstate;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	e05a      	b.n	8008ee4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d137      	bne.n	8008eac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 fe13 	bl	800ba6e <SDMMC_CmdAppCommand>
 8008e48:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d02d      	beq.n	8008eac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e54:	e046      	b.n	8008ee4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 fe06 	bl	800ba6e <SDMMC_CmdAppCommand>
 8008e62:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	e03a      	b.n	8008ee4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	491e      	ldr	r1, [pc, #120]	; (8008eec <SD_PowerON+0x118>)
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fe1d 	bl	800bab4 <SDMMC_CmdAppOperCommand>
 8008e7a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e86:	e02d      	b.n	8008ee4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f002 fc61 	bl	800b756 <SDMMC_GetResponse>
 8008e94:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	0fdb      	lsrs	r3, r3, #31
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <SD_PowerON+0xce>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <SD_PowerON+0xd0>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	613b      	str	r3, [r7, #16]

    count++;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d802      	bhi.n	8008ebc <SD_PowerON+0xe8>
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0cc      	beq.n	8008e56 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d902      	bls.n	8008ecc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eca:	e00b      	b.n	8008ee4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	c1100000 	.word	0xc1100000

08008ef0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08c      	sub	sp, #48	; 0x30
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008efa:	f7fa fc8d 	bl	8003818 <HAL_GetTick>
 8008efe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f002 fc23 	bl	800b756 <SDMMC_GetResponse>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1a:	d102      	bne.n	8008f22 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f20:	e0b0      	b.n	8009084 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2140      	movs	r1, #64	; 0x40
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f002 fc53 	bl	800b7d4 <SDMMC_CmdBlockLength>
 8008f2e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	e0a0      	b.n	8009084 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f002 fd8d 	bl	800ba6e <SDMMC_CmdAppCommand>
 8008f54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	e08d      	b.n	8009084 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f68:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f72:	2360      	movs	r3, #96	; 0x60
 8008f74:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f76:	2302      	movs	r3, #2
 8008f78:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f107 0208 	add.w	r2, r7, #8
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 fbf5 	bl	800b77c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 fe75 	bl	800bc86 <SDMMC_CmdStatusRegister>
 8008f9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02b      	beq.n	8008ffc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	e069      	b.n	8009084 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d013      	beq.n	8008fe6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fc2:	e00d      	b.n	8008fe0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f002 fb4f 	bl	800b66c <SDMMC_ReadFIFO>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	601a      	str	r2, [r3, #0]
        pData++;
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	3301      	adds	r3, #1
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	2b07      	cmp	r3, #7
 8008fe4:	d9ee      	bls.n	8008fc4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fe6:	f7fa fc17 	bl	8003818 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d102      	bne.n	8008ffc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ffa:	e043      	b.n	8009084 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0d2      	beq.n	8008fb0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009018:	2308      	movs	r3, #8
 800901a:	e033      	b.n	8009084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800902a:	2302      	movs	r3, #2
 800902c:	e02a      	b.n	8009084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d017      	beq.n	800906c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800903c:	2320      	movs	r3, #32
 800903e:	e021      	b.n	8009084 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fb11 	bl	800b66c <SDMMC_ReadFIFO>
 800904a:	4602      	mov	r2, r0
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	601a      	str	r2, [r3, #0]
    pData++;
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	3304      	adds	r3, #4
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009056:	f7fa fbdf 	bl	8003818 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d102      	bne.n	800906c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009066:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800906a:	e00b      	b.n	8009084 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e2      	bne.n	8009040 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a03      	ldr	r2, [pc, #12]	; (800908c <SD_SendSDStatus+0x19c>)
 8009080:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3730      	adds	r7, #48	; 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	18000f3a 	.word	0x18000f3a

08009090 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d102      	bne.n	80090a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090a4:	e018      	b.n	80090d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	041b      	lsls	r3, r3, #16
 80090b0:	4619      	mov	r1, r3
 80090b2:	4610      	mov	r0, r2
 80090b4:	f002 fdc4 	bl	800bc40 <SDMMC_CmdSendStatus>
 80090b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	e009      	b.n	80090d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f002 fb43 	bl	800b756 <SDMMC_GetResponse>
 80090d0:	4602      	mov	r2, r0
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	2300      	movs	r3, #0
 80090ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 fb2d 	bl	800b756 <SDMMC_GetResponse>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009106:	d102      	bne.n	800910e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800910c:	e02f      	b.n	800916e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800910e:	f107 030c 	add.w	r3, r7, #12
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f879 	bl	800920c <SD_FindSCR>
 800911a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	e023      	b.n	800916e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01c      	beq.n	800916a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f002 fc96 	bl	800ba6e <SDMMC_CmdAppCommand>
 8009142:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	e00f      	b.n	800916e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2102      	movs	r1, #2
 8009154:	4618      	mov	r0, r3
 8009156:	f002 fccd 	bl	800baf4 <SDMMC_CmdBusWidth>
 800915a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	e003      	b.n	800916e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009166:	2300      	movs	r3, #0
 8009168:	e001      	b.n	800916e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800916a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b086      	sub	sp, #24
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	2300      	movs	r3, #0
 8009184:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2100      	movs	r1, #0
 800918c:	4618      	mov	r0, r3
 800918e:	f002 fae2 	bl	800b756 <SDMMC_GetResponse>
 8009192:	4603      	mov	r3, r0
 8009194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919c:	d102      	bne.n	80091a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800919e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091a2:	e02f      	b.n	8009204 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091a4:	f107 030c 	add.w	r3, r7, #12
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f82e 	bl	800920c <SD_FindSCR>
 80091b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	e023      	b.n	8009204 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01c      	beq.n	8009200 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f002 fc4b 	bl	800ba6e <SDMMC_CmdAppCommand>
 80091d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	e00f      	b.n	8009204 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f002 fc82 	bl	800baf4 <SDMMC_CmdBusWidth>
 80091f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	e003      	b.n	8009204 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	e001      	b.n	8009204 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	; 0x38
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009216:	f7fa faff 	bl	8003818 <HAL_GetTick>
 800921a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009220:	2300      	movs	r3, #0
 8009222:	60bb      	str	r3, [r7, #8]
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2108      	movs	r1, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f002 face 	bl	800b7d4 <SDMMC_CmdBlockLength>
 8009238:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	e0ad      	b.n	80093a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f002 fc0c 	bl	800ba6e <SDMMC_CmdAppCommand>
 8009256:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <SD_FindSCR+0x56>
  {
    return errorstate;
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	e09e      	b.n	80093a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009262:	f04f 33ff 	mov.w	r3, #4294967295
 8009266:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009268:	2308      	movs	r3, #8
 800926a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800926c:	2330      	movs	r3, #48	; 0x30
 800926e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009270:	2302      	movs	r3, #2
 8009272:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009274:	2300      	movs	r3, #0
 8009276:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009278:	2301      	movs	r3, #1
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f107 0210 	add.w	r2, r7, #16
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f002 fa78 	bl	800b77c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f002 fc52 	bl	800bb3a <SDMMC_CmdSendSCR>
 8009296:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d027      	beq.n	80092ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a0:	e07e      	b.n	80093a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d113      	bne.n	80092d8 <SD_FindSCR+0xcc>
 80092b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d110      	bne.n	80092d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 f9d6 	bl	800b66c <SDMMC_ReadFIFO>
 80092c0:	4603      	mov	r3, r0
 80092c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 f9cf 	bl	800b66c <SDMMC_ReadFIFO>
 80092ce:	4603      	mov	r3, r0
 80092d0:	60fb      	str	r3, [r7, #12]
      index++;
 80092d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d4:	3301      	adds	r3, #1
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092d8:	f7fa fa9e 	bl	8003818 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e6:	d102      	bne.n	80092ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092ec:	e058      	b.n	80093a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	f240 532a 	movw	r3, #1322	; 0x52a
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0d1      	beq.n	80092a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009314:	2308      	movs	r3, #8
 8009316:	e043      	b.n	80093a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2202      	movs	r2, #2
 800932c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800932e:	2302      	movs	r3, #2
 8009330:	e036      	b.n	80093a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2220      	movs	r2, #32
 8009346:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009348:	2320      	movs	r3, #32
 800934a:	e029      	b.n	80093a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <SD_FindSCR+0x19c>)
 8009352:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	061a      	lsls	r2, r3, #24
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009360:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	0a1b      	lsrs	r3, r3, #8
 8009366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800936a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	0e1b      	lsrs	r3, r3, #24
 8009370:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	601a      	str	r2, [r3, #0]
    scr++;
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	3304      	adds	r3, #4
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	061a      	lsls	r2, r3, #24
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009388:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	0a1b      	lsrs	r3, r3, #8
 800938e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009392:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	0e1b      	lsrs	r3, r3, #24
 8009398:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3738      	adds	r7, #56	; 0x38
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	18000f3a 	.word	0x18000f3a

080093ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	2b1f      	cmp	r3, #31
 80093c0:	d936      	bls.n	8009430 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e027      	b.n	8009418 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f002 f94d 	bl	800b66c <SDMMC_ReadFIFO>
 80093d2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3301      	adds	r3, #1
 80093e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	3301      	adds	r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	0c1b      	lsrs	r3, r3, #16
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3301      	adds	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	b2da      	uxtb	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	3301      	adds	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b07      	cmp	r3, #7
 800941c:	d9d4      	bls.n	80093c8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009428:	f1a3 0220 	sub.w	r2, r3, #32
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009430:	bf00      	nop
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	2b1f      	cmp	r3, #31
 800944c:	d93a      	bls.n	80094c4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	e02b      	b.n	80094ac <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	60fb      	str	r3, [r7, #12]
      tmp++;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	021a      	lsls	r2, r3, #8
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3301      	adds	r3, #1
 8009470:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	041a      	lsls	r2, r3, #16
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	061a      	lsls	r2, r3, #24
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3301      	adds	r3, #1
 8009494:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f107 020c 	add.w	r2, r7, #12
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 f8f0 	bl	800b686 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	3301      	adds	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b07      	cmp	r3, #7
 80094b0:	d9d0      	bls.n	8009454 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	f1a3 0220 	sub.w	r2, r3, #32
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	621a      	str	r2, [r3, #32]
  }
}
 80094c4:	bf00      	nop
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e049      	b.n	80095c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7f8 fbb4 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f000 fb5c 	bl	8009c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d001      	beq.n	80095e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e056      	b.n	8009692 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a2b      	ldr	r2, [pc, #172]	; (80096a0 <HAL_TIM_Base_Start+0xd4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d02c      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fe:	d027      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a27      	ldr	r2, [pc, #156]	; (80096a4 <HAL_TIM_Base_Start+0xd8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d022      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a26      	ldr	r2, [pc, #152]	; (80096a8 <HAL_TIM_Base_Start+0xdc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d01d      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a24      	ldr	r2, [pc, #144]	; (80096ac <HAL_TIM_Base_Start+0xe0>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d018      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a23      	ldr	r2, [pc, #140]	; (80096b0 <HAL_TIM_Base_Start+0xe4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d013      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a21      	ldr	r2, [pc, #132]	; (80096b4 <HAL_TIM_Base_Start+0xe8>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00e      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a20      	ldr	r2, [pc, #128]	; (80096b8 <HAL_TIM_Base_Start+0xec>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d009      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1e      	ldr	r2, [pc, #120]	; (80096bc <HAL_TIM_Base_Start+0xf0>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d004      	beq.n	8009650 <HAL_TIM_Base_Start+0x84>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <HAL_TIM_Base_Start+0xf4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d115      	bne.n	800967c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <HAL_TIM_Base_Start+0xf8>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b06      	cmp	r3, #6
 8009660:	d015      	beq.n	800968e <HAL_TIM_Base_Start+0xc2>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d011      	beq.n	800968e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967a:	e008      	b.n	800968e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	e000      	b.n	8009690 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40001800 	.word	0x40001800
 80096b8:	40014000 	.word	0x40014000
 80096bc:	4000e000 	.word	0x4000e000
 80096c0:	4000e400 	.word	0x4000e400
 80096c4:	00010007 	.word	0x00010007

080096c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e05e      	b.n	800979e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <HAL_TIM_Base_Start_IT+0xe4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d02c      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d027      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d022      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a26      	ldr	r2, [pc, #152]	; (80097b4 <HAL_TIM_Base_Start_IT+0xec>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d01d      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a24      	ldr	r2, [pc, #144]	; (80097b8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d018      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a23      	ldr	r2, [pc, #140]	; (80097bc <HAL_TIM_Base_Start_IT+0xf4>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d013      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a21      	ldr	r2, [pc, #132]	; (80097c0 <HAL_TIM_Base_Start_IT+0xf8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00e      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a20      	ldr	r2, [pc, #128]	; (80097c4 <HAL_TIM_Base_Start_IT+0xfc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d009      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a1e      	ldr	r2, [pc, #120]	; (80097c8 <HAL_TIM_Base_Start_IT+0x100>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d004      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1d      	ldr	r2, [pc, #116]	; (80097cc <HAL_TIM_Base_Start_IT+0x104>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d115      	bne.n	8009788 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	4b1b      	ldr	r3, [pc, #108]	; (80097d0 <HAL_TIM_Base_Start_IT+0x108>)
 8009764:	4013      	ands	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b06      	cmp	r3, #6
 800976c:	d015      	beq.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009774:	d011      	beq.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009786:	e008      	b.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0201 	orr.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	e000      	b.n	800979c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800979a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40010400 	.word	0x40010400
 80097c0:	40001800 	.word	0x40001800
 80097c4:	40014000 	.word	0x40014000
 80097c8:	4000e000 	.word	0x4000e000
 80097cc:	4000e400 	.word	0x4000e400
 80097d0:	00010007 	.word	0x00010007

080097d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e049      	b.n	800987a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f841 	bl	8009882 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f000 fa00 	bl	8009c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d122      	bne.n	80098f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d11b      	bne.n	80098f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f06f 0202 	mvn.w	r2, #2
 80098c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f97f 	bl	8009bdc <HAL_TIM_IC_CaptureCallback>
 80098de:	e005      	b.n	80098ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f971 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f982 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d122      	bne.n	8009946 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b04      	cmp	r3, #4
 800990c:	d11b      	bne.n	8009946 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f06f 0204 	mvn.w	r2, #4
 8009916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f955 	bl	8009bdc <HAL_TIM_IC_CaptureCallback>
 8009932:	e005      	b.n	8009940 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f947 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f958 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b08      	cmp	r3, #8
 8009952:	d122      	bne.n	800999a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	2b08      	cmp	r3, #8
 8009960:	d11b      	bne.n	800999a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f06f 0208 	mvn.w	r2, #8
 800996a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2204      	movs	r2, #4
 8009970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f92b 	bl	8009bdc <HAL_TIM_IC_CaptureCallback>
 8009986:	e005      	b.n	8009994 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f91d 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f92e 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d122      	bne.n	80099ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0310 	and.w	r3, r3, #16
 80099b2:	2b10      	cmp	r3, #16
 80099b4:	d11b      	bne.n	80099ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f06f 0210 	mvn.w	r2, #16
 80099be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2208      	movs	r2, #8
 80099c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f901 	bl	8009bdc <HAL_TIM_IC_CaptureCallback>
 80099da:	e005      	b.n	80099e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f8f3 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f904 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d10e      	bne.n	8009a1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d107      	bne.n	8009a1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f06f 0201 	mvn.w	r2, #1
 8009a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7f7 fead 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d10e      	bne.n	8009a46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a32:	2b80      	cmp	r3, #128	; 0x80
 8009a34:	d107      	bne.n	8009a46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fc6f 	bl	800a324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a54:	d10e      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a60:	2b80      	cmp	r3, #128	; 0x80
 8009a62:	d107      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc62 	bl	800a338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d10e      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d107      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8b2 	bl	8009c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d10e      	bne.n	8009acc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d107      	bne.n	8009acc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0220 	mvn.w	r2, #32
 8009ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fc22 	bl	800a310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e066      	b.n	8009bc0 <HAL_TIM_OC_ConfigChannel+0xec>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b14      	cmp	r3, #20
 8009afe:	d857      	bhi.n	8009bb0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009bb1 	.word	0x08009bb1
 8009b10:	08009bb1 	.word	0x08009bb1
 8009b14:	08009bb1 	.word	0x08009bb1
 8009b18:	08009b6b 	.word	0x08009b6b
 8009b1c:	08009bb1 	.word	0x08009bb1
 8009b20:	08009bb1 	.word	0x08009bb1
 8009b24:	08009bb1 	.word	0x08009bb1
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009bb1 	.word	0x08009bb1
 8009b30:	08009bb1 	.word	0x08009bb1
 8009b34:	08009bb1 	.word	0x08009bb1
 8009b38:	08009b87 	.word	0x08009b87
 8009b3c:	08009bb1 	.word	0x08009bb1
 8009b40:	08009bb1 	.word	0x08009bb1
 8009b44:	08009bb1 	.word	0x08009bb1
 8009b48:	08009b95 	.word	0x08009b95
 8009b4c:	08009bb1 	.word	0x08009bb1
 8009b50:	08009bb1 	.word	0x08009bb1
 8009b54:	08009bb1 	.word	0x08009bb1
 8009b58:	08009ba3 	.word	0x08009ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f8fe 	bl	8009d64 <TIM_OC1_SetConfig>
      break;
 8009b68:	e025      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68b9      	ldr	r1, [r7, #8]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f987 	bl	8009e84 <TIM_OC2_SetConfig>
      break;
 8009b76:	e01e      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fa0a 	bl	8009f98 <TIM_OC3_SetConfig>
      break;
 8009b84:	e017      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fa8b 	bl	800a0a8 <TIM_OC4_SetConfig>
      break;
 8009b92:	e010      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 faee 	bl	800a17c <TIM_OC5_SetConfig>
      break;
 8009ba0:	e009      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fb4b 	bl	800a244 <TIM_OC6_SetConfig>
      break;
 8009bae:	e002      	b.n	8009bb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a44      	ldr	r2, [pc, #272]	; (8009d3c <TIM_Base_SetConfig+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d013      	beq.n	8009c58 <TIM_Base_SetConfig+0x40>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c36:	d00f      	beq.n	8009c58 <TIM_Base_SetConfig+0x40>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a41      	ldr	r2, [pc, #260]	; (8009d40 <TIM_Base_SetConfig+0x128>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d00b      	beq.n	8009c58 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a40      	ldr	r2, [pc, #256]	; (8009d44 <TIM_Base_SetConfig+0x12c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d007      	beq.n	8009c58 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a3f      	ldr	r2, [pc, #252]	; (8009d48 <TIM_Base_SetConfig+0x130>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d003      	beq.n	8009c58 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3e      	ldr	r2, [pc, #248]	; (8009d4c <TIM_Base_SetConfig+0x134>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d108      	bne.n	8009c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a33      	ldr	r2, [pc, #204]	; (8009d3c <TIM_Base_SetConfig+0x124>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d027      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c78:	d023      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a30      	ldr	r2, [pc, #192]	; (8009d40 <TIM_Base_SetConfig+0x128>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01f      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <TIM_Base_SetConfig+0x12c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d01b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2e      	ldr	r2, [pc, #184]	; (8009d48 <TIM_Base_SetConfig+0x130>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d017      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2d      	ldr	r2, [pc, #180]	; (8009d4c <TIM_Base_SetConfig+0x134>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2c      	ldr	r2, [pc, #176]	; (8009d50 <TIM_Base_SetConfig+0x138>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2b      	ldr	r2, [pc, #172]	; (8009d54 <TIM_Base_SetConfig+0x13c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <TIM_Base_SetConfig+0x140>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <TIM_Base_SetConfig+0x144>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_Base_SetConfig+0xaa>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <TIM_Base_SetConfig+0x148>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d108      	bne.n	8009cd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a10      	ldr	r2, [pc, #64]	; (8009d3c <TIM_Base_SetConfig+0x124>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00f      	beq.n	8009d20 <TIM_Base_SetConfig+0x108>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a12      	ldr	r2, [pc, #72]	; (8009d4c <TIM_Base_SetConfig+0x134>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00b      	beq.n	8009d20 <TIM_Base_SetConfig+0x108>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a11      	ldr	r2, [pc, #68]	; (8009d50 <TIM_Base_SetConfig+0x138>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d007      	beq.n	8009d20 <TIM_Base_SetConfig+0x108>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a10      	ldr	r2, [pc, #64]	; (8009d54 <TIM_Base_SetConfig+0x13c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_Base_SetConfig+0x108>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a0f      	ldr	r2, [pc, #60]	; (8009d58 <TIM_Base_SetConfig+0x140>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d103      	bne.n	8009d28 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	615a      	str	r2, [r3, #20]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40010400 	.word	0x40010400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800
 8009d5c:	4000e000 	.word	0x4000e000
 8009d60:	4000e400 	.word	0x4000e400

08009d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <TIM_OC1_SetConfig+0x108>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f023 0302 	bic.w	r3, r3, #2
 8009dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a2d      	ldr	r2, [pc, #180]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00f      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d00b      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a2b      	ldr	r2, [pc, #172]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d007      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a2a      	ldr	r2, [pc, #168]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d003      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a29      	ldr	r2, [pc, #164]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10c      	bne.n	8009dfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0308 	bic.w	r3, r3, #8
 8009de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f023 0304 	bic.w	r3, r3, #4
 8009df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00f      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00b      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d007      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a18      	ldr	r2, [pc, #96]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d111      	bne.n	8009e46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	621a      	str	r2, [r3, #32]
}
 8009e60:	bf00      	nop
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	fffeff8f 	.word	0xfffeff8f
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800

08009e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f023 0210 	bic.w	r2, r3, #16
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4b34      	ldr	r3, [pc, #208]	; (8009f80 <TIM_OC2_SetConfig+0xfc>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f023 0320 	bic.w	r3, r3, #32
 8009ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a29      	ldr	r2, [pc, #164]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x68>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a28      	ldr	r2, [pc, #160]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d10d      	bne.n	8009f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00f      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a1d      	ldr	r2, [pc, #116]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00b      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a1c      	ldr	r2, [pc, #112]	; (8009f8c <TIM_OC2_SetConfig+0x108>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d007      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a1b      	ldr	r2, [pc, #108]	; (8009f90 <TIM_OC2_SetConfig+0x10c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <TIM_OC2_SetConfig+0x110>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d113      	bne.n	8009f58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	feff8fff 	.word	0xfeff8fff
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800

08009f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4b33      	ldr	r3, [pc, #204]	; (800a090 <TIM_OC3_SetConfig+0xf8>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a28      	ldr	r2, [pc, #160]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC3_SetConfig+0x66>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a27      	ldr	r2, [pc, #156]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d10d      	bne.n	800a01a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00f      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a1c      	ldr	r2, [pc, #112]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a1b      	ldr	r2, [pc, #108]	; (800a09c <TIM_OC3_SetConfig+0x104>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a1a      	ldr	r2, [pc, #104]	; (800a0a0 <TIM_OC3_SetConfig+0x108>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <TIM_OC3_SetConfig+0x10c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d113      	bne.n	800a06a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	621a      	str	r2, [r3, #32]
}
 800a084:	bf00      	nop
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	fffeff8f 	.word	0xfffeff8f
 800a094:	40010000 	.word	0x40010000
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800

0800a0a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <TIM_OC4_SetConfig+0xbc>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	031b      	lsls	r3, r3, #12
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a19      	ldr	r2, [pc, #100]	; (800a168 <TIM_OC4_SetConfig+0xc0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00f      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a18      	ldr	r2, [pc, #96]	; (800a16c <TIM_OC4_SetConfig+0xc4>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d00b      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a17      	ldr	r2, [pc, #92]	; (800a170 <TIM_OC4_SetConfig+0xc8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d007      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a16      	ldr	r2, [pc, #88]	; (800a174 <TIM_OC4_SetConfig+0xcc>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d003      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <TIM_OC4_SetConfig+0xd0>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d109      	bne.n	800a13c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a12e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	019b      	lsls	r3, r3, #6
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	feff8fff 	.word	0xfeff8fff
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010400 	.word	0x40010400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4b21      	ldr	r3, [pc, #132]	; (800a22c <TIM_OC5_SetConfig+0xb0>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	041b      	lsls	r3, r3, #16
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a18      	ldr	r2, [pc, #96]	; (800a230 <TIM_OC5_SetConfig+0xb4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a17      	ldr	r2, [pc, #92]	; (800a234 <TIM_OC5_SetConfig+0xb8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a16      	ldr	r2, [pc, #88]	; (800a238 <TIM_OC5_SetConfig+0xbc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a15      	ldr	r2, [pc, #84]	; (800a23c <TIM_OC5_SetConfig+0xc0>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a14      	ldr	r2, [pc, #80]	; (800a240 <TIM_OC5_SetConfig+0xc4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d109      	bne.n	800a206 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	621a      	str	r2, [r3, #32]
}
 800a220:	bf00      	nop
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	fffeff8f 	.word	0xfffeff8f
 800a230:	40010000 	.word	0x40010000
 800a234:	40010400 	.word	0x40010400
 800a238:	40014000 	.word	0x40014000
 800a23c:	40014400 	.word	0x40014400
 800a240:	40014800 	.word	0x40014800

0800a244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4b22      	ldr	r3, [pc, #136]	; (800a2f8 <TIM_OC6_SetConfig+0xb4>)
 800a270:	4013      	ands	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	051b      	lsls	r3, r3, #20
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4313      	orrs	r3, r2
 800a292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a19      	ldr	r2, [pc, #100]	; (800a2fc <TIM_OC6_SetConfig+0xb8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00f      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a18      	ldr	r2, [pc, #96]	; (800a300 <TIM_OC6_SetConfig+0xbc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00b      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a17      	ldr	r2, [pc, #92]	; (800a304 <TIM_OC6_SetConfig+0xc0>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d007      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <TIM_OC6_SetConfig+0xc4>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a15      	ldr	r2, [pc, #84]	; (800a30c <TIM_OC6_SetConfig+0xc8>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d109      	bne.n	800a2d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	029b      	lsls	r3, r3, #10
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	feff8fff 	.word	0xfeff8fff
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40010400 	.word	0x40010400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800

0800a310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e042      	b.n	800a3e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7f7 fcbf 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2224      	movs	r2, #36	; 0x24
 800a37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0201 	bic.w	r2, r2, #1
 800a38c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f82c 	bl	800a3ec <UART_SetConfig>
 800a394:	4603      	mov	r3, r0
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e022      	b.n	800a3e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fe7e 	bl	800b0a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 ff05 	bl	800b1ec <UART_CheckIdleState>
 800a3e2:	4603      	mov	r3, r0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3ec:	b5b0      	push	{r4, r5, r7, lr}
 800a3ee:	b08e      	sub	sp, #56	; 0x38
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	431a      	orrs	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	4313      	orrs	r3, r2
 800a410:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	4bbf      	ldr	r3, [pc, #764]	; (800a718 <UART_SetConfig+0x32c>)
 800a41a:	4013      	ands	r3, r2
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a422:	430b      	orrs	r3, r1
 800a424:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4ab5      	ldr	r2, [pc, #724]	; (800a71c <UART_SetConfig+0x330>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d004      	beq.n	800a456 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a452:	4313      	orrs	r3, r2
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	4bb0      	ldr	r3, [pc, #704]	; (800a720 <UART_SetConfig+0x334>)
 800a45e:	4013      	ands	r3, r2
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a466:	430b      	orrs	r3, r1
 800a468:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	f023 010f 	bic.w	r1, r3, #15
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4aa7      	ldr	r2, [pc, #668]	; (800a724 <UART_SetConfig+0x338>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d176      	bne.n	800a578 <UART_SetConfig+0x18c>
 800a48a:	4ba7      	ldr	r3, [pc, #668]	; (800a728 <UART_SetConfig+0x33c>)
 800a48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a492:	2b28      	cmp	r3, #40	; 0x28
 800a494:	d86c      	bhi.n	800a570 <UART_SetConfig+0x184>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <UART_SetConfig+0xb0>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a541 	.word	0x0800a541
 800a4a0:	0800a571 	.word	0x0800a571
 800a4a4:	0800a571 	.word	0x0800a571
 800a4a8:	0800a571 	.word	0x0800a571
 800a4ac:	0800a571 	.word	0x0800a571
 800a4b0:	0800a571 	.word	0x0800a571
 800a4b4:	0800a571 	.word	0x0800a571
 800a4b8:	0800a571 	.word	0x0800a571
 800a4bc:	0800a549 	.word	0x0800a549
 800a4c0:	0800a571 	.word	0x0800a571
 800a4c4:	0800a571 	.word	0x0800a571
 800a4c8:	0800a571 	.word	0x0800a571
 800a4cc:	0800a571 	.word	0x0800a571
 800a4d0:	0800a571 	.word	0x0800a571
 800a4d4:	0800a571 	.word	0x0800a571
 800a4d8:	0800a571 	.word	0x0800a571
 800a4dc:	0800a551 	.word	0x0800a551
 800a4e0:	0800a571 	.word	0x0800a571
 800a4e4:	0800a571 	.word	0x0800a571
 800a4e8:	0800a571 	.word	0x0800a571
 800a4ec:	0800a571 	.word	0x0800a571
 800a4f0:	0800a571 	.word	0x0800a571
 800a4f4:	0800a571 	.word	0x0800a571
 800a4f8:	0800a571 	.word	0x0800a571
 800a4fc:	0800a559 	.word	0x0800a559
 800a500:	0800a571 	.word	0x0800a571
 800a504:	0800a571 	.word	0x0800a571
 800a508:	0800a571 	.word	0x0800a571
 800a50c:	0800a571 	.word	0x0800a571
 800a510:	0800a571 	.word	0x0800a571
 800a514:	0800a571 	.word	0x0800a571
 800a518:	0800a571 	.word	0x0800a571
 800a51c:	0800a561 	.word	0x0800a561
 800a520:	0800a571 	.word	0x0800a571
 800a524:	0800a571 	.word	0x0800a571
 800a528:	0800a571 	.word	0x0800a571
 800a52c:	0800a571 	.word	0x0800a571
 800a530:	0800a571 	.word	0x0800a571
 800a534:	0800a571 	.word	0x0800a571
 800a538:	0800a571 	.word	0x0800a571
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	2301      	movs	r3, #1
 800a542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a546:	e326      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54e:	e322      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a556:	e31e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55e:	e31a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a560:	2320      	movs	r3, #32
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e316      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a568:	2340      	movs	r3, #64	; 0x40
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e312      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a570:	2380      	movs	r3, #128	; 0x80
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e30e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a6b      	ldr	r2, [pc, #428]	; (800a72c <UART_SetConfig+0x340>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d130      	bne.n	800a5e4 <UART_SetConfig+0x1f8>
 800a582:	4b69      	ldr	r3, [pc, #420]	; (800a728 <UART_SetConfig+0x33c>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d826      	bhi.n	800a5dc <UART_SetConfig+0x1f0>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x1a8>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5d5 	.word	0x0800a5d5
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e2f0      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e2ec      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e2e8      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ca:	e2e4      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5cc:	2320      	movs	r3, #32
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e2e0      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e2dc      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	e2d8      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a51      	ldr	r2, [pc, #324]	; (800a730 <UART_SetConfig+0x344>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d130      	bne.n	800a650 <UART_SetConfig+0x264>
 800a5ee:	4b4e      	ldr	r3, [pc, #312]	; (800a728 <UART_SetConfig+0x33c>)
 800a5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b05      	cmp	r3, #5
 800a5f8:	d826      	bhi.n	800a648 <UART_SetConfig+0x25c>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <UART_SetConfig+0x214>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a619 	.word	0x0800a619
 800a604:	0800a621 	.word	0x0800a621
 800a608:	0800a629 	.word	0x0800a629
 800a60c:	0800a631 	.word	0x0800a631
 800a610:	0800a639 	.word	0x0800a639
 800a614:	0800a641 	.word	0x0800a641
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61e:	e2ba      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a626:	e2b6      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62e:	e2b2      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a636:	e2ae      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63e:	e2aa      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e2a6      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64e:	e2a2      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a37      	ldr	r2, [pc, #220]	; (800a734 <UART_SetConfig+0x348>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d130      	bne.n	800a6bc <UART_SetConfig+0x2d0>
 800a65a:	4b33      	ldr	r3, [pc, #204]	; (800a728 <UART_SetConfig+0x33c>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	2b05      	cmp	r3, #5
 800a664:	d826      	bhi.n	800a6b4 <UART_SetConfig+0x2c8>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <UART_SetConfig+0x280>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a685 	.word	0x0800a685
 800a670:	0800a68d 	.word	0x0800a68d
 800a674:	0800a695 	.word	0x0800a695
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6a5 	.word	0x0800a6a5
 800a680:	0800a6ad 	.word	0x0800a6ad
 800a684:	2300      	movs	r3, #0
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e284      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a68c:	2304      	movs	r3, #4
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e280      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a694:	2308      	movs	r3, #8
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e27c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a69c:	2310      	movs	r3, #16
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e278      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6aa:	e274      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b2:	e270      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a6b4:	2380      	movs	r3, #128	; 0x80
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ba:	e26c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a1d      	ldr	r2, [pc, #116]	; (800a738 <UART_SetConfig+0x34c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d142      	bne.n	800a74c <UART_SetConfig+0x360>
 800a6c6:	4b18      	ldr	r3, [pc, #96]	; (800a728 <UART_SetConfig+0x33c>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d838      	bhi.n	800a744 <UART_SetConfig+0x358>
 800a6d2:	a201      	add	r2, pc, #4	; (adr r2, 800a6d8 <UART_SetConfig+0x2ec>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f9 	.word	0x0800a6f9
 800a6e0:	0800a701 	.word	0x0800a701
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a73d 	.word	0x0800a73d
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f6:	e24e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fe:	e24a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a700:	2308      	movs	r3, #8
 800a702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a706:	e246      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a708:	2310      	movs	r3, #16
 800a70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70e:	e242      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a710:	2320      	movs	r3, #32
 800a712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a716:	e23e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a718:	cfff69f3 	.word	0xcfff69f3
 800a71c:	58000c00 	.word	0x58000c00
 800a720:	11fff4ff 	.word	0x11fff4ff
 800a724:	40011000 	.word	0x40011000
 800a728:	58024400 	.word	0x58024400
 800a72c:	40004400 	.word	0x40004400
 800a730:	40004800 	.word	0x40004800
 800a734:	40004c00 	.word	0x40004c00
 800a738:	40005000 	.word	0x40005000
 800a73c:	2340      	movs	r3, #64	; 0x40
 800a73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a742:	e228      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a744:	2380      	movs	r3, #128	; 0x80
 800a746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74a:	e224      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4ab1      	ldr	r2, [pc, #708]	; (800aa18 <UART_SetConfig+0x62c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d176      	bne.n	800a844 <UART_SetConfig+0x458>
 800a756:	4bb1      	ldr	r3, [pc, #708]	; (800aa1c <UART_SetConfig+0x630>)
 800a758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a75e:	2b28      	cmp	r3, #40	; 0x28
 800a760:	d86c      	bhi.n	800a83c <UART_SetConfig+0x450>
 800a762:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <UART_SetConfig+0x37c>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a80d 	.word	0x0800a80d
 800a76c:	0800a83d 	.word	0x0800a83d
 800a770:	0800a83d 	.word	0x0800a83d
 800a774:	0800a83d 	.word	0x0800a83d
 800a778:	0800a83d 	.word	0x0800a83d
 800a77c:	0800a83d 	.word	0x0800a83d
 800a780:	0800a83d 	.word	0x0800a83d
 800a784:	0800a83d 	.word	0x0800a83d
 800a788:	0800a815 	.word	0x0800a815
 800a78c:	0800a83d 	.word	0x0800a83d
 800a790:	0800a83d 	.word	0x0800a83d
 800a794:	0800a83d 	.word	0x0800a83d
 800a798:	0800a83d 	.word	0x0800a83d
 800a79c:	0800a83d 	.word	0x0800a83d
 800a7a0:	0800a83d 	.word	0x0800a83d
 800a7a4:	0800a83d 	.word	0x0800a83d
 800a7a8:	0800a81d 	.word	0x0800a81d
 800a7ac:	0800a83d 	.word	0x0800a83d
 800a7b0:	0800a83d 	.word	0x0800a83d
 800a7b4:	0800a83d 	.word	0x0800a83d
 800a7b8:	0800a83d 	.word	0x0800a83d
 800a7bc:	0800a83d 	.word	0x0800a83d
 800a7c0:	0800a83d 	.word	0x0800a83d
 800a7c4:	0800a83d 	.word	0x0800a83d
 800a7c8:	0800a825 	.word	0x0800a825
 800a7cc:	0800a83d 	.word	0x0800a83d
 800a7d0:	0800a83d 	.word	0x0800a83d
 800a7d4:	0800a83d 	.word	0x0800a83d
 800a7d8:	0800a83d 	.word	0x0800a83d
 800a7dc:	0800a83d 	.word	0x0800a83d
 800a7e0:	0800a83d 	.word	0x0800a83d
 800a7e4:	0800a83d 	.word	0x0800a83d
 800a7e8:	0800a82d 	.word	0x0800a82d
 800a7ec:	0800a83d 	.word	0x0800a83d
 800a7f0:	0800a83d 	.word	0x0800a83d
 800a7f4:	0800a83d 	.word	0x0800a83d
 800a7f8:	0800a83d 	.word	0x0800a83d
 800a7fc:	0800a83d 	.word	0x0800a83d
 800a800:	0800a83d 	.word	0x0800a83d
 800a804:	0800a83d 	.word	0x0800a83d
 800a808:	0800a835 	.word	0x0800a835
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a812:	e1c0      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81a:	e1bc      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e1b8      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e1b4      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a82c:	2320      	movs	r3, #32
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e1b0      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e1ac      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e1a8      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a75      	ldr	r2, [pc, #468]	; (800aa20 <UART_SetConfig+0x634>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d130      	bne.n	800a8b0 <UART_SetConfig+0x4c4>
 800a84e:	4b73      	ldr	r3, [pc, #460]	; (800aa1c <UART_SetConfig+0x630>)
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b05      	cmp	r3, #5
 800a858:	d826      	bhi.n	800a8a8 <UART_SetConfig+0x4bc>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x474>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a879 	.word	0x0800a879
 800a864:	0800a881 	.word	0x0800a881
 800a868:	0800a889 	.word	0x0800a889
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a8a1 	.word	0x0800a8a1
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87e:	e18a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a880:	2304      	movs	r3, #4
 800a882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a886:	e186      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a888:	2308      	movs	r3, #8
 800a88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88e:	e182      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a890:	2310      	movs	r3, #16
 800a892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a896:	e17e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a898:	2320      	movs	r3, #32
 800a89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89e:	e17a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	e176      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8a8:	2380      	movs	r3, #128	; 0x80
 800a8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ae:	e172      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a5b      	ldr	r2, [pc, #364]	; (800aa24 <UART_SetConfig+0x638>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d130      	bne.n	800a91c <UART_SetConfig+0x530>
 800a8ba:	4b58      	ldr	r3, [pc, #352]	; (800aa1c <UART_SetConfig+0x630>)
 800a8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d826      	bhi.n	800a914 <UART_SetConfig+0x528>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <UART_SetConfig+0x4e0>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a8ed 	.word	0x0800a8ed
 800a8d4:	0800a8f5 	.word	0x0800a8f5
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a905 	.word	0x0800a905
 800a8e0:	0800a90d 	.word	0x0800a90d
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e154      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e150      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fa:	e14c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a902:	e148      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a904:	2320      	movs	r3, #32
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e144      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a90c:	2340      	movs	r3, #64	; 0x40
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e140      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e13c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a41      	ldr	r2, [pc, #260]	; (800aa28 <UART_SetConfig+0x63c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	f040 8082 	bne.w	800aa2c <UART_SetConfig+0x640>
 800a928:	4b3c      	ldr	r3, [pc, #240]	; (800aa1c <UART_SetConfig+0x630>)
 800a92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a930:	2b28      	cmp	r3, #40	; 0x28
 800a932:	d86d      	bhi.n	800aa10 <UART_SetConfig+0x624>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <UART_SetConfig+0x550>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a9e1 	.word	0x0800a9e1
 800a940:	0800aa11 	.word	0x0800aa11
 800a944:	0800aa11 	.word	0x0800aa11
 800a948:	0800aa11 	.word	0x0800aa11
 800a94c:	0800aa11 	.word	0x0800aa11
 800a950:	0800aa11 	.word	0x0800aa11
 800a954:	0800aa11 	.word	0x0800aa11
 800a958:	0800aa11 	.word	0x0800aa11
 800a95c:	0800a9e9 	.word	0x0800a9e9
 800a960:	0800aa11 	.word	0x0800aa11
 800a964:	0800aa11 	.word	0x0800aa11
 800a968:	0800aa11 	.word	0x0800aa11
 800a96c:	0800aa11 	.word	0x0800aa11
 800a970:	0800aa11 	.word	0x0800aa11
 800a974:	0800aa11 	.word	0x0800aa11
 800a978:	0800aa11 	.word	0x0800aa11
 800a97c:	0800a9f1 	.word	0x0800a9f1
 800a980:	0800aa11 	.word	0x0800aa11
 800a984:	0800aa11 	.word	0x0800aa11
 800a988:	0800aa11 	.word	0x0800aa11
 800a98c:	0800aa11 	.word	0x0800aa11
 800a990:	0800aa11 	.word	0x0800aa11
 800a994:	0800aa11 	.word	0x0800aa11
 800a998:	0800aa11 	.word	0x0800aa11
 800a99c:	0800a9f9 	.word	0x0800a9f9
 800a9a0:	0800aa11 	.word	0x0800aa11
 800a9a4:	0800aa11 	.word	0x0800aa11
 800a9a8:	0800aa11 	.word	0x0800aa11
 800a9ac:	0800aa11 	.word	0x0800aa11
 800a9b0:	0800aa11 	.word	0x0800aa11
 800a9b4:	0800aa11 	.word	0x0800aa11
 800a9b8:	0800aa11 	.word	0x0800aa11
 800a9bc:	0800aa01 	.word	0x0800aa01
 800a9c0:	0800aa11 	.word	0x0800aa11
 800a9c4:	0800aa11 	.word	0x0800aa11
 800a9c8:	0800aa11 	.word	0x0800aa11
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa11 	.word	0x0800aa11
 800a9d4:	0800aa11 	.word	0x0800aa11
 800a9d8:	0800aa11 	.word	0x0800aa11
 800a9dc:	0800aa09 	.word	0x0800aa09
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9e6:	e0d6      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ee:	e0d2      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9f6:	e0ce      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9fe:	e0ca      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aa00:	2320      	movs	r3, #32
 800aa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa06:	e0c6      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aa08:	2340      	movs	r3, #64	; 0x40
 800aa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa0e:	e0c2      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aa10:	2380      	movs	r3, #128	; 0x80
 800aa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa16:	e0be      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aa18:	40011400 	.word	0x40011400
 800aa1c:	58024400 	.word	0x58024400
 800aa20:	40007800 	.word	0x40007800
 800aa24:	40007c00 	.word	0x40007c00
 800aa28:	40011800 	.word	0x40011800
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4aad      	ldr	r2, [pc, #692]	; (800ace8 <UART_SetConfig+0x8fc>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d176      	bne.n	800ab24 <UART_SetConfig+0x738>
 800aa36:	4bad      	ldr	r3, [pc, #692]	; (800acec <UART_SetConfig+0x900>)
 800aa38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa3e:	2b28      	cmp	r3, #40	; 0x28
 800aa40:	d86c      	bhi.n	800ab1c <UART_SetConfig+0x730>
 800aa42:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <UART_SetConfig+0x65c>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aaed 	.word	0x0800aaed
 800aa4c:	0800ab1d 	.word	0x0800ab1d
 800aa50:	0800ab1d 	.word	0x0800ab1d
 800aa54:	0800ab1d 	.word	0x0800ab1d
 800aa58:	0800ab1d 	.word	0x0800ab1d
 800aa5c:	0800ab1d 	.word	0x0800ab1d
 800aa60:	0800ab1d 	.word	0x0800ab1d
 800aa64:	0800ab1d 	.word	0x0800ab1d
 800aa68:	0800aaf5 	.word	0x0800aaf5
 800aa6c:	0800ab1d 	.word	0x0800ab1d
 800aa70:	0800ab1d 	.word	0x0800ab1d
 800aa74:	0800ab1d 	.word	0x0800ab1d
 800aa78:	0800ab1d 	.word	0x0800ab1d
 800aa7c:	0800ab1d 	.word	0x0800ab1d
 800aa80:	0800ab1d 	.word	0x0800ab1d
 800aa84:	0800ab1d 	.word	0x0800ab1d
 800aa88:	0800aafd 	.word	0x0800aafd
 800aa8c:	0800ab1d 	.word	0x0800ab1d
 800aa90:	0800ab1d 	.word	0x0800ab1d
 800aa94:	0800ab1d 	.word	0x0800ab1d
 800aa98:	0800ab1d 	.word	0x0800ab1d
 800aa9c:	0800ab1d 	.word	0x0800ab1d
 800aaa0:	0800ab1d 	.word	0x0800ab1d
 800aaa4:	0800ab1d 	.word	0x0800ab1d
 800aaa8:	0800ab05 	.word	0x0800ab05
 800aaac:	0800ab1d 	.word	0x0800ab1d
 800aab0:	0800ab1d 	.word	0x0800ab1d
 800aab4:	0800ab1d 	.word	0x0800ab1d
 800aab8:	0800ab1d 	.word	0x0800ab1d
 800aabc:	0800ab1d 	.word	0x0800ab1d
 800aac0:	0800ab1d 	.word	0x0800ab1d
 800aac4:	0800ab1d 	.word	0x0800ab1d
 800aac8:	0800ab0d 	.word	0x0800ab0d
 800aacc:	0800ab1d 	.word	0x0800ab1d
 800aad0:	0800ab1d 	.word	0x0800ab1d
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab1d 	.word	0x0800ab1d
 800aadc:	0800ab1d 	.word	0x0800ab1d
 800aae0:	0800ab1d 	.word	0x0800ab1d
 800aae4:	0800ab1d 	.word	0x0800ab1d
 800aae8:	0800ab15 	.word	0x0800ab15
 800aaec:	2301      	movs	r3, #1
 800aaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf2:	e050      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafa:	e04c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800aafc:	2308      	movs	r3, #8
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab02:	e048      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab04:	2310      	movs	r3, #16
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e044      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab0c:	2320      	movs	r3, #32
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	e040      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1a:	e03c      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab1c:	2380      	movs	r3, #128	; 0x80
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e038      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a71      	ldr	r2, [pc, #452]	; (800acf0 <UART_SetConfig+0x904>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d130      	bne.n	800ab90 <UART_SetConfig+0x7a4>
 800ab2e:	4b6f      	ldr	r3, [pc, #444]	; (800acec <UART_SetConfig+0x900>)
 800ab30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab32:	f003 0307 	and.w	r3, r3, #7
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	d826      	bhi.n	800ab88 <UART_SetConfig+0x79c>
 800ab3a:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <UART_SetConfig+0x754>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab59 	.word	0x0800ab59
 800ab44:	0800ab61 	.word	0x0800ab61
 800ab48:	0800ab69 	.word	0x0800ab69
 800ab4c:	0800ab71 	.word	0x0800ab71
 800ab50:	0800ab79 	.word	0x0800ab79
 800ab54:	0800ab81 	.word	0x0800ab81
 800ab58:	2302      	movs	r3, #2
 800ab5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5e:	e01a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab60:	2304      	movs	r3, #4
 800ab62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab66:	e016      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab68:	2308      	movs	r3, #8
 800ab6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6e:	e012      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab70:	2310      	movs	r3, #16
 800ab72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab76:	e00e      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab78:	2320      	movs	r3, #32
 800ab7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7e:	e00a      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab80:	2340      	movs	r3, #64	; 0x40
 800ab82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab86:	e006      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab88:	2380      	movs	r3, #128	; 0x80
 800ab8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8e:	e002      	b.n	800ab96 <UART_SetConfig+0x7aa>
 800ab90:	2380      	movs	r3, #128	; 0x80
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a55      	ldr	r2, [pc, #340]	; (800acf0 <UART_SetConfig+0x904>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	f040 80f0 	bne.w	800ad82 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	dc46      	bgt.n	800ac38 <UART_SetConfig+0x84c>
 800abaa:	2b02      	cmp	r3, #2
 800abac:	db75      	blt.n	800ac9a <UART_SetConfig+0x8ae>
 800abae:	3b02      	subs	r3, #2
 800abb0:	2b1e      	cmp	r3, #30
 800abb2:	d872      	bhi.n	800ac9a <UART_SetConfig+0x8ae>
 800abb4:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <UART_SetConfig+0x7d0>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800ac3f 	.word	0x0800ac3f
 800abc0:	0800ac9b 	.word	0x0800ac9b
 800abc4:	0800ac47 	.word	0x0800ac47
 800abc8:	0800ac9b 	.word	0x0800ac9b
 800abcc:	0800ac9b 	.word	0x0800ac9b
 800abd0:	0800ac9b 	.word	0x0800ac9b
 800abd4:	0800ac57 	.word	0x0800ac57
 800abd8:	0800ac9b 	.word	0x0800ac9b
 800abdc:	0800ac9b 	.word	0x0800ac9b
 800abe0:	0800ac9b 	.word	0x0800ac9b
 800abe4:	0800ac9b 	.word	0x0800ac9b
 800abe8:	0800ac9b 	.word	0x0800ac9b
 800abec:	0800ac9b 	.word	0x0800ac9b
 800abf0:	0800ac9b 	.word	0x0800ac9b
 800abf4:	0800ac67 	.word	0x0800ac67
 800abf8:	0800ac9b 	.word	0x0800ac9b
 800abfc:	0800ac9b 	.word	0x0800ac9b
 800ac00:	0800ac9b 	.word	0x0800ac9b
 800ac04:	0800ac9b 	.word	0x0800ac9b
 800ac08:	0800ac9b 	.word	0x0800ac9b
 800ac0c:	0800ac9b 	.word	0x0800ac9b
 800ac10:	0800ac9b 	.word	0x0800ac9b
 800ac14:	0800ac9b 	.word	0x0800ac9b
 800ac18:	0800ac9b 	.word	0x0800ac9b
 800ac1c:	0800ac9b 	.word	0x0800ac9b
 800ac20:	0800ac9b 	.word	0x0800ac9b
 800ac24:	0800ac9b 	.word	0x0800ac9b
 800ac28:	0800ac9b 	.word	0x0800ac9b
 800ac2c:	0800ac9b 	.word	0x0800ac9b
 800ac30:	0800ac9b 	.word	0x0800ac9b
 800ac34:	0800ac8d 	.word	0x0800ac8d
 800ac38:	2b40      	cmp	r3, #64	; 0x40
 800ac3a:	d02a      	beq.n	800ac92 <UART_SetConfig+0x8a6>
 800ac3c:	e02d      	b.n	800ac9a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac3e:	f7fc fa9d 	bl	800717c <HAL_RCCEx_GetD3PCLK1Freq>
 800ac42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac44:	e02f      	b.n	800aca6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac46:	f107 0314 	add.w	r3, r7, #20
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fc faac 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac54:	e027      	b.n	800aca6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac56:	f107 0308 	add.w	r3, r7, #8
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fc fbf8 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac64:	e01f      	b.n	800aca6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac66:	4b21      	ldr	r3, [pc, #132]	; (800acec <UART_SetConfig+0x900>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac72:	4b1e      	ldr	r3, [pc, #120]	; (800acec <UART_SetConfig+0x900>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	4a1d      	ldr	r2, [pc, #116]	; (800acf4 <UART_SetConfig+0x908>)
 800ac7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac84:	e00f      	b.n	800aca6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <UART_SetConfig+0x908>)
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac8a:	e00c      	b.n	800aca6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac8c:	4b1a      	ldr	r3, [pc, #104]	; (800acf8 <UART_SetConfig+0x90c>)
 800ac8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac90:	e009      	b.n	800aca6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac98:	e005      	b.n	800aca6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 81e6 	beq.w	800b07a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb2:	4a12      	ldr	r2, [pc, #72]	; (800acfc <UART_SetConfig+0x910>)
 800acb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acb8:	461a      	mov	r2, r3
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800acc0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	4413      	add	r3, r2
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d305      	bcc.n	800acde <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acd8:	6a3a      	ldr	r2, [r7, #32]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d910      	bls.n	800ad00 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ace4:	e1c9      	b.n	800b07a <UART_SetConfig+0xc8e>
 800ace6:	bf00      	nop
 800ace8:	40011c00 	.word	0x40011c00
 800acec:	58024400 	.word	0x58024400
 800acf0:	58000c00 	.word	0x58000c00
 800acf4:	03d09000 	.word	0x03d09000
 800acf8:	003d0900 	.word	0x003d0900
 800acfc:	08013b2c 	.word	0x08013b2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	4618      	mov	r0, r3
 800ad04:	f04f 0100 	mov.w	r1, #0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	4ac1      	ldr	r2, [pc, #772]	; (800b014 <UART_SetConfig+0xc28>)
 800ad0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	f04f 0300 	mov.w	r3, #0
 800ad18:	f7f5 fb52 	bl	80003c0 <__aeabi_uldivmod>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4610      	mov	r0, r2
 800ad22:	4619      	mov	r1, r3
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	020b      	lsls	r3, r1, #8
 800ad2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad32:	0202      	lsls	r2, r0, #8
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	6849      	ldr	r1, [r1, #4]
 800ad38:	0849      	lsrs	r1, r1, #1
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	f04f 0100 	mov.w	r1, #0
 800ad40:	1814      	adds	r4, r2, r0
 800ad42:	eb43 0501 	adc.w	r5, r3, r1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	4620      	mov	r0, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7f5 fb34 	bl	80003c0 <__aeabi_uldivmod>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad66:	d308      	bcc.n	800ad7a <UART_SetConfig+0x98e>
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad6e:	d204      	bcs.n	800ad7a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad76:	60da      	str	r2, [r3, #12]
 800ad78:	e17f      	b.n	800b07a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad80:	e17b      	b.n	800b07a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad8a:	f040 80bd 	bne.w	800af08 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ad8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad92:	2b20      	cmp	r3, #32
 800ad94:	dc48      	bgt.n	800ae28 <UART_SetConfig+0xa3c>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	db7b      	blt.n	800ae92 <UART_SetConfig+0xaa6>
 800ad9a:	2b20      	cmp	r3, #32
 800ad9c:	d879      	bhi.n	800ae92 <UART_SetConfig+0xaa6>
 800ad9e:	a201      	add	r2, pc, #4	; (adr r2, 800ada4 <UART_SetConfig+0x9b8>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800ae2f 	.word	0x0800ae2f
 800ada8:	0800ae37 	.word	0x0800ae37
 800adac:	0800ae93 	.word	0x0800ae93
 800adb0:	0800ae93 	.word	0x0800ae93
 800adb4:	0800ae3f 	.word	0x0800ae3f
 800adb8:	0800ae93 	.word	0x0800ae93
 800adbc:	0800ae93 	.word	0x0800ae93
 800adc0:	0800ae93 	.word	0x0800ae93
 800adc4:	0800ae4f 	.word	0x0800ae4f
 800adc8:	0800ae93 	.word	0x0800ae93
 800adcc:	0800ae93 	.word	0x0800ae93
 800add0:	0800ae93 	.word	0x0800ae93
 800add4:	0800ae93 	.word	0x0800ae93
 800add8:	0800ae93 	.word	0x0800ae93
 800addc:	0800ae93 	.word	0x0800ae93
 800ade0:	0800ae93 	.word	0x0800ae93
 800ade4:	0800ae5f 	.word	0x0800ae5f
 800ade8:	0800ae93 	.word	0x0800ae93
 800adec:	0800ae93 	.word	0x0800ae93
 800adf0:	0800ae93 	.word	0x0800ae93
 800adf4:	0800ae93 	.word	0x0800ae93
 800adf8:	0800ae93 	.word	0x0800ae93
 800adfc:	0800ae93 	.word	0x0800ae93
 800ae00:	0800ae93 	.word	0x0800ae93
 800ae04:	0800ae93 	.word	0x0800ae93
 800ae08:	0800ae93 	.word	0x0800ae93
 800ae0c:	0800ae93 	.word	0x0800ae93
 800ae10:	0800ae93 	.word	0x0800ae93
 800ae14:	0800ae93 	.word	0x0800ae93
 800ae18:	0800ae93 	.word	0x0800ae93
 800ae1c:	0800ae93 	.word	0x0800ae93
 800ae20:	0800ae93 	.word	0x0800ae93
 800ae24:	0800ae85 	.word	0x0800ae85
 800ae28:	2b40      	cmp	r3, #64	; 0x40
 800ae2a:	d02e      	beq.n	800ae8a <UART_SetConfig+0xa9e>
 800ae2c:	e031      	b.n	800ae92 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae2e:	f7fa fe19 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 800ae32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae34:	e033      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae36:	f7fa fe2b 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 800ae3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae3c:	e02f      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3e:	f107 0314 	add.w	r3, r7, #20
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fc f9b0 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae4c:	e027      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4e:	f107 0308 	add.w	r3, r7, #8
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fc fafc 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae5c:	e01f      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5e:	4b6e      	ldr	r3, [pc, #440]	; (800b018 <UART_SetConfig+0xc2c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0320 	and.w	r3, r3, #32
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae6a:	4b6b      	ldr	r3, [pc, #428]	; (800b018 <UART_SetConfig+0xc2c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	08db      	lsrs	r3, r3, #3
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	4a69      	ldr	r2, [pc, #420]	; (800b01c <UART_SetConfig+0xc30>)
 800ae76:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae7c:	e00f      	b.n	800ae9e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ae7e:	4b67      	ldr	r3, [pc, #412]	; (800b01c <UART_SetConfig+0xc30>)
 800ae80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae82:	e00c      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae84:	4b66      	ldr	r3, [pc, #408]	; (800b020 <UART_SetConfig+0xc34>)
 800ae86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae88:	e009      	b.n	800ae9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae90:	e005      	b.n	800ae9e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 80ea 	beq.w	800b07a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	4a5a      	ldr	r2, [pc, #360]	; (800b014 <UART_SetConfig+0xc28>)
 800aeac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeb8:	005a      	lsls	r2, r3, #1
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	085b      	lsrs	r3, r3, #1
 800aec0:	441a      	add	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	2b0f      	cmp	r3, #15
 800aed0:	d916      	bls.n	800af00 <UART_SetConfig+0xb14>
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed8:	d212      	bcs.n	800af00 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f023 030f 	bic.w	r3, r3, #15
 800aee2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	085b      	lsrs	r3, r3, #1
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aef2:	4313      	orrs	r3, r2
 800aef4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aefc:	60da      	str	r2, [r3, #12]
 800aefe:	e0bc      	b.n	800b07a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af06:	e0b8      	b.n	800b07a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af0c:	2b20      	cmp	r3, #32
 800af0e:	dc4b      	bgt.n	800afa8 <UART_SetConfig+0xbbc>
 800af10:	2b00      	cmp	r3, #0
 800af12:	f2c0 8087 	blt.w	800b024 <UART_SetConfig+0xc38>
 800af16:	2b20      	cmp	r3, #32
 800af18:	f200 8084 	bhi.w	800b024 <UART_SetConfig+0xc38>
 800af1c:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <UART_SetConfig+0xb38>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800afaf 	.word	0x0800afaf
 800af28:	0800afb7 	.word	0x0800afb7
 800af2c:	0800b025 	.word	0x0800b025
 800af30:	0800b025 	.word	0x0800b025
 800af34:	0800afbf 	.word	0x0800afbf
 800af38:	0800b025 	.word	0x0800b025
 800af3c:	0800b025 	.word	0x0800b025
 800af40:	0800b025 	.word	0x0800b025
 800af44:	0800afcf 	.word	0x0800afcf
 800af48:	0800b025 	.word	0x0800b025
 800af4c:	0800b025 	.word	0x0800b025
 800af50:	0800b025 	.word	0x0800b025
 800af54:	0800b025 	.word	0x0800b025
 800af58:	0800b025 	.word	0x0800b025
 800af5c:	0800b025 	.word	0x0800b025
 800af60:	0800b025 	.word	0x0800b025
 800af64:	0800afdf 	.word	0x0800afdf
 800af68:	0800b025 	.word	0x0800b025
 800af6c:	0800b025 	.word	0x0800b025
 800af70:	0800b025 	.word	0x0800b025
 800af74:	0800b025 	.word	0x0800b025
 800af78:	0800b025 	.word	0x0800b025
 800af7c:	0800b025 	.word	0x0800b025
 800af80:	0800b025 	.word	0x0800b025
 800af84:	0800b025 	.word	0x0800b025
 800af88:	0800b025 	.word	0x0800b025
 800af8c:	0800b025 	.word	0x0800b025
 800af90:	0800b025 	.word	0x0800b025
 800af94:	0800b025 	.word	0x0800b025
 800af98:	0800b025 	.word	0x0800b025
 800af9c:	0800b025 	.word	0x0800b025
 800afa0:	0800b025 	.word	0x0800b025
 800afa4:	0800b005 	.word	0x0800b005
 800afa8:	2b40      	cmp	r3, #64	; 0x40
 800afaa:	d02e      	beq.n	800b00a <UART_SetConfig+0xc1e>
 800afac:	e03a      	b.n	800b024 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afae:	f7fa fd59 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 800afb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afb4:	e03c      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afb6:	f7fa fd6b 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 800afba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afbc:	e038      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbe:	f107 0314 	add.w	r3, r7, #20
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fc f8f0 	bl	80071a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afcc:	e030      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afce:	f107 0308 	add.w	r3, r7, #8
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc fa3c 	bl	8007450 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afdc:	e028      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afde:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <UART_SetConfig+0xc2c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d009      	beq.n	800affe <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afea:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <UART_SetConfig+0xc2c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	08db      	lsrs	r3, r3, #3
 800aff0:	f003 0303 	and.w	r3, r3, #3
 800aff4:	4a09      	ldr	r2, [pc, #36]	; (800b01c <UART_SetConfig+0xc30>)
 800aff6:	fa22 f303 	lsr.w	r3, r2, r3
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800affc:	e018      	b.n	800b030 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800affe:	4b07      	ldr	r3, [pc, #28]	; (800b01c <UART_SetConfig+0xc30>)
 800b000:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b002:	e015      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <UART_SetConfig+0xc34>)
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b008:	e012      	b.n	800b030 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b010:	e00e      	b.n	800b030 <UART_SetConfig+0xc44>
 800b012:	bf00      	nop
 800b014:	08013b2c 	.word	0x08013b2c
 800b018:	58024400 	.word	0x58024400
 800b01c:	03d09000 	.word	0x03d09000
 800b020:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b02e:	bf00      	nop
    }

    if (pclk != 0U)
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d021      	beq.n	800b07a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	4a1a      	ldr	r2, [pc, #104]	; (800b0a4 <UART_SetConfig+0xcb8>)
 800b03c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b040:	461a      	mov	r2, r3
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	fbb3 f2f2 	udiv	r2, r3, r2
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	085b      	lsrs	r3, r3, #1
 800b04e:	441a      	add	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	fbb2 f3f3 	udiv	r3, r2, r3
 800b058:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	2b0f      	cmp	r3, #15
 800b05e:	d909      	bls.n	800b074 <UART_SetConfig+0xc88>
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b066:	d205      	bcs.n	800b074 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	60da      	str	r2, [r3, #12]
 800b072:	e002      	b.n	800b07a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b096:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3738      	adds	r7, #56	; 0x38
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	08013b2c 	.word	0x08013b2c

0800b0a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00a      	beq.n	800b138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	f003 0310 	and.w	r3, r3, #16
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00a      	beq.n	800b15a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00a      	beq.n	800b17c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01a      	beq.n	800b1be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a6:	d10a      	bne.n	800b1be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	605a      	str	r2, [r3, #4]
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1fc:	f7f8 fb0c 	bl	8003818 <HAL_GetTick>
 800b200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0308 	and.w	r3, r3, #8
 800b20c:	2b08      	cmp	r3, #8
 800b20e:	d10e      	bne.n	800b22e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f82f 	bl	800b282 <UART_WaitOnFlagUntilTimeout>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e025      	b.n	800b27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d10e      	bne.n	800b25a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f819 	bl	800b282 <UART_WaitOnFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e00f      	b.n	800b27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2220      	movs	r2, #32
 800b25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b09c      	sub	sp, #112	; 0x70
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b292:	e0a9      	b.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	f000 80a5 	beq.w	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b29e:	f7f8 fabb 	bl	8003818 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d140      	bne.n	800b336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e6      	bne.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	663b      	str	r3, [r7, #96]	; 0x60
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b306:	64ba      	str	r2, [r7, #72]	; 0x48
 800b308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e5      	bne.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2220      	movs	r2, #32
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e069      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d051      	beq.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b34e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b352:	d149      	bne.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b35c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b372:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
 800b37e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3b0:	623a      	str	r2, [r7, #32]
 800b3b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	69f9      	ldr	r1, [r7, #28]
 800b3b6:	6a3a      	ldr	r2, [r7, #32]
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e5      	bne.n	800b390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e010      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69da      	ldr	r2, [r3, #28]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2301      	moveq	r3, #1
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	461a      	mov	r2, r3
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	429a      	cmp	r2, r3
 800b404:	f43f af46 	beq.w	800b294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3770      	adds	r7, #112	; 0x70
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_UARTEx_DisableFifoMode+0x16>
 800b424:	2302      	movs	r3, #2
 800b426:	e027      	b.n	800b478 <HAL_UARTEx_DisableFifoMode+0x66>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2224      	movs	r2, #36	; 0x24
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b498:	2302      	movs	r3, #2
 800b49a:	e02d      	b.n	800b4f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2224      	movs	r2, #36	; 0x24
 800b4a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f84f 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b514:	2302      	movs	r3, #2
 800b516:	e02d      	b.n	800b574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2224      	movs	r2, #36	; 0x24
 800b524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f811 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d108      	bne.n	800b59e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b59c:	e031      	b.n	800b602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b59e:	2310      	movs	r3, #16
 800b5a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5a2:	2310      	movs	r3, #16
 800b5a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	0e5b      	lsrs	r3, r3, #25
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	0f5b      	lsrs	r3, r3, #29
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	7b3a      	ldrb	r2, [r7, #12]
 800b5ca:	4911      	ldr	r1, [pc, #68]	; (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5cc:	5c8a      	ldrb	r2, [r1, r2]
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5d2:	7b3a      	ldrb	r2, [r7, #12]
 800b5d4:	490f      	ldr	r1, [pc, #60]	; (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	7b7a      	ldrb	r2, [r7, #13]
 800b5e8:	4909      	ldr	r1, [pc, #36]	; (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5ea:	5c8a      	ldrb	r2, [r1, r2]
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5f0:	7b7a      	ldrb	r2, [r7, #13]
 800b5f2:	4908      	ldr	r1, [pc, #32]	; (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	08013b44 	.word	0x08013b44
 800b614:	08013b4c 	.word	0x08013b4c

0800b618 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b618:	b084      	sub	sp, #16
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	f107 001c 	add.w	r0, r7, #28
 800b626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b62e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b630:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b632:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b636:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b63a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b63e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	4b07      	ldr	r3, [pc, #28]	; (800b668 <SDMMC_Init+0x50>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	431a      	orrs	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	b004      	add	sp, #16
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	ffc02c00 	.word	0xffc02c00

0800b66c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f043 0203 	orr.w	r2, r3, #3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b706:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b70c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b712:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4313      	orrs	r3, r2
 800b718:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	4b06      	ldr	r3, [pc, #24]	; (800b738 <SDMMC_SendCommand+0x50>)
 800b720:	4013      	ands	r3, r2
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	431a      	orrs	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	fffee0c0 	.word	0xfffee0c0

0800b73c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	b2db      	uxtb	r3, r3
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3314      	adds	r3, #20
 800b764:	461a      	mov	r2, r3
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	4413      	add	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b7a2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b7a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b7ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0

}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b7e2:	2310      	movs	r3, #16
 800b7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f6:	f107 0308 	add.w	r3, r7, #8
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff ff73 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b802:	f241 3288 	movw	r2, #5000	; 0x1388
 800b806:	2110      	movs	r1, #16
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa5f 	bl	800bccc <SDMMC_GetCmdResp1>
 800b80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b810:	69fb      	ldr	r3, [r7, #28]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b088      	sub	sp, #32
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b828:	2311      	movs	r3, #17
 800b82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b82c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b83a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b83c:	f107 0308 	add.w	r3, r7, #8
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ff50 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b848:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84c:	2111      	movs	r1, #17
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa3c 	bl	800bccc <SDMMC_GetCmdResp1>
 800b854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b856:	69fb      	ldr	r3, [r7, #28]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b86e:	2312      	movs	r3, #18
 800b870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b878:	2300      	movs	r3, #0
 800b87a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b882:	f107 0308 	add.w	r3, r7, #8
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff ff2d 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b892:	2112      	movs	r1, #18
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fa19 	bl	800bccc <SDMMC_GetCmdResp1>
 800b89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b89c:	69fb      	ldr	r3, [r7, #28]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b088      	sub	sp, #32
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b8b4:	2318      	movs	r3, #24
 800b8b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8c8:	f107 0308 	add.w	r3, r7, #8
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff ff0a 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d8:	2118      	movs	r1, #24
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9f6 	bl	800bccc <SDMMC_GetCmdResp1>
 800b8e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3720      	adds	r7, #32
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b088      	sub	sp, #32
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b8fa:	2319      	movs	r3, #25
 800b8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b90e:	f107 0308 	add.w	r3, r7, #8
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fee7 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b91a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91e:	2119      	movs	r1, #25
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f9d3 	bl	800bccc <SDMMC_GetCmdResp1>
 800b926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b928:	69fb      	ldr	r3, [r7, #28]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b940:	230c      	movs	r3, #12
 800b942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b944:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b94a:	2300      	movs	r3, #0
 800b94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b952:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b96c:	f107 0308 	add.w	r3, r7, #8
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff feb8 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b978:	4a0b      	ldr	r2, [pc, #44]	; (800b9a8 <SDMMC_CmdStopTransfer+0x74>)
 800b97a:	210c      	movs	r1, #12
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f9a5 	bl	800bccc <SDMMC_GetCmdResp1>
 800b982:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b996:	d101      	bne.n	800b99c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b998:	2300      	movs	r3, #0
 800b99a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b99c:	69fb      	ldr	r3, [r7, #28]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3720      	adds	r7, #32
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	05f5e100 	.word	0x05f5e100

0800b9ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b9ba:	2307      	movs	r3, #7
 800b9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ce:	f107 0308 	add.w	r3, r7, #8
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff fe87 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9de:	2107      	movs	r1, #7
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f973 	bl	800bccc <SDMMC_GetCmdResp1>
 800b9e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9e8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b088      	sub	sp, #32
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba02:	2300      	movs	r3, #0
 800ba04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff fe66 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fb97 	bl	800c150 <SDMMC_GetCmdError>
 800ba22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba24:	69fb      	ldr	r3, [r7, #28]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3720      	adds	r7, #32
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba36:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ba3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba3c:	2308      	movs	r3, #8
 800ba3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba50:	f107 0308 	add.w	r3, r7, #8
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fe46 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fb29 	bl	800c0b4 <SDMMC_GetCmdResp7>
 800ba62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba64:	69fb      	ldr	r3, [r7, #28]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b088      	sub	sp, #32
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ba7c:	2337      	movs	r3, #55	; 0x37
 800ba7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba90:	f107 0308 	add.w	r3, r7, #8
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff fe26 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ba9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa0:	2137      	movs	r1, #55	; 0x37
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f912 	bl	800bccc <SDMMC_GetCmdResp1>
 800baa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baaa:	69fb      	ldr	r3, [r7, #28]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3720      	adds	r7, #32
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bac2:	2329      	movs	r3, #41	; 0x29
 800bac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bad4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fe03 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa2e 	bl	800bf44 <SDMMC_GetCmdResp3>
 800bae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baea:	69fb      	ldr	r3, [r7, #28]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3720      	adds	r7, #32
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb02:	2306      	movs	r3, #6
 800bb04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb16:	f107 0308 	add.w	r3, r7, #8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fde3 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bb22:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb26:	2106      	movs	r1, #6
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f8cf 	bl	800bccc <SDMMC_GetCmdResp1>
 800bb2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb30:	69fb      	ldr	r3, [r7, #28]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b088      	sub	sp, #32
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bb46:	2333      	movs	r3, #51	; 0x33
 800bb48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb50:	2300      	movs	r3, #0
 800bb52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb5a:	f107 0308 	add.w	r3, r7, #8
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff fdc1 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb6a:	2133      	movs	r1, #51	; 0x33
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f8ad 	bl	800bccc <SDMMC_GetCmdResp1>
 800bb72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb74:	69fb      	ldr	r3, [r7, #28]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b088      	sub	sp, #32
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bb92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb94:	2300      	movs	r3, #0
 800bb96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff fd9f 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f980 	bl	800beb0 <SDMMC_GetCmdResp2>
 800bbb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb2:	69fb      	ldr	r3, [r7, #28]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3720      	adds	r7, #32
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bbca:	2309      	movs	r3, #9
 800bbcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbce:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bbd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbde:	f107 0308 	add.w	r3, r7, #8
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff fd7f 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f960 	bl	800beb0 <SDMMC_GetCmdResp2>
 800bbf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc1e:	f107 0308 	add.w	r3, r7, #8
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fd5f 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	2103      	movs	r1, #3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9c8 	bl	800bfc4 <SDMMC_GetCmdResp6>
 800bc34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc36:	69fb      	ldr	r3, [r7, #28]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3720      	adds	r7, #32
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bc4e:	230d      	movs	r3, #13
 800bc50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc62:	f107 0308 	add.w	r3, r7, #8
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff fd3d 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bc6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc72:	210d      	movs	r1, #13
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f829 	bl	800bccc <SDMMC_GetCmdResp1>
 800bc7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b088      	sub	sp, #32
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bc92:	230d      	movs	r3, #13
 800bc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca6:	f107 0308 	add.w	r3, r7, #8
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff fd1b 	bl	800b6e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bcb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb6:	210d      	movs	r1, #13
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f807 	bl	800bccc <SDMMC_GetCmdResp1>
 800bcbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcc0:	69fb      	ldr	r3, [r7, #28]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bcda:	4b70      	ldr	r3, [pc, #448]	; (800be9c <SDMMC_GetCmdResp1+0x1d0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a70      	ldr	r2, [pc, #448]	; (800bea0 <SDMMC_GetCmdResp1+0x1d4>)
 800bce0:	fba2 2303 	umull	r2, r3, r2, r3
 800bce4:	0a5a      	lsrs	r2, r3, #9
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	61fa      	str	r2, [r7, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcfc:	e0c9      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd02:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	4b67      	ldr	r3, [pc, #412]	; (800bea4 <SDMMC_GetCmdResp1+0x1d8>)
 800bd08:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0ef      	beq.n	800bcee <SDMMC_GetCmdResp1+0x22>
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1ea      	bne.n	800bcee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2204      	movs	r2, #4
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	e0b1      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d004      	beq.n	800bd44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e0a6      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	4a58      	ldr	r2, [pc, #352]	; (800bea8 <SDMMC_GetCmdResp1+0x1dc>)
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fcf6 	bl	800b73c <SDMMC_GetCommandResponse>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461a      	mov	r2, r3
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d001      	beq.n	800bd5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e099      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd5e:	2100      	movs	r1, #0
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff fcf8 	bl	800b756 <SDMMC_GetResponse>
 800bd66:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	4b50      	ldr	r3, [pc, #320]	; (800beac <SDMMC_GetCmdResp1+0x1e0>)
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	e08d      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da02      	bge.n	800bd82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd80:	e087      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	e080      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd9a:	2380      	movs	r3, #128	; 0x80
 800bd9c:	e079      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bda8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdac:	e071      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bdb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdbc:	e069      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bdc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdcc:	e061      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bdd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bddc:	e059      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bde8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdec:	e051      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdfc:	e049      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be0c:	e041      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be1c:	e039      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be2c:	e031      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be3c:	e029      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be4c:	e021      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be5c:	e019      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be6c:	e011      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800be78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be7c:	e009      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f003 0308 	and.w	r3, r3, #8
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800be8c:	e001      	b.n	800be92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	2400802c 	.word	0x2400802c
 800bea0:	10624dd3 	.word	0x10624dd3
 800bea4:	00200045 	.word	0x00200045
 800bea8:	002000c5 	.word	0x002000c5
 800beac:	fdffe008 	.word	0xfdffe008

0800beb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800beb8:	4b1f      	ldr	r3, [pc, #124]	; (800bf38 <SDMMC_GetCmdResp2+0x88>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a1f      	ldr	r2, [pc, #124]	; (800bf3c <SDMMC_GetCmdResp2+0x8c>)
 800bebe:	fba2 2303 	umull	r2, r3, r2, r3
 800bec2:	0a5b      	lsrs	r3, r3, #9
 800bec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec8:	fb02 f303 	mul.w	r3, r2, r3
 800becc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	1e5a      	subs	r2, r3, #1
 800bed2:	60fa      	str	r2, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bedc:	e026      	b.n	800bf2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0ef      	beq.n	800bece <SDMMC_GetCmdResp2+0x1e>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1ea      	bne.n	800bece <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2204      	movs	r2, #4
 800bf08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf0a:	2304      	movs	r3, #4
 800bf0c:	e00e      	b.n	800bf2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d004      	beq.n	800bf24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e003      	b.n	800bf2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a06      	ldr	r2, [pc, #24]	; (800bf40 <SDMMC_GetCmdResp2+0x90>)
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	2400802c 	.word	0x2400802c
 800bf3c:	10624dd3 	.word	0x10624dd3
 800bf40:	002000c5 	.word	0x002000c5

0800bf44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf4c:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <SDMMC_GetCmdResp3+0x74>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a1a      	ldr	r2, [pc, #104]	; (800bfbc <SDMMC_GetCmdResp3+0x78>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	0a5b      	lsrs	r3, r3, #9
 800bf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	60fa      	str	r2, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d102      	bne.n	800bf72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf70:	e01b      	b.n	800bfaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0ef      	beq.n	800bf62 <SDMMC_GetCmdResp3+0x1e>
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1ea      	bne.n	800bf62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf9e:	2304      	movs	r3, #4
 800bfa0:	e003      	b.n	800bfaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a06      	ldr	r2, [pc, #24]	; (800bfc0 <SDMMC_GetCmdResp3+0x7c>)
 800bfa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	2400802c 	.word	0x2400802c
 800bfbc:	10624dd3 	.word	0x10624dd3
 800bfc0:	002000c5 	.word	0x002000c5

0800bfc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfd2:	4b35      	ldr	r3, [pc, #212]	; (800c0a8 <SDMMC_GetCmdResp6+0xe4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a35      	ldr	r2, [pc, #212]	; (800c0ac <SDMMC_GetCmdResp6+0xe8>)
 800bfd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bfdc:	0a5b      	lsrs	r3, r3, #9
 800bfde:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe2:	fb02 f303 	mul.w	r3, r2, r3
 800bfe6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	1e5a      	subs	r2, r3, #1
 800bfec:	61fa      	str	r2, [r7, #28]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bff6:	e052      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0ef      	beq.n	800bfe8 <SDMMC_GetCmdResp6+0x24>
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1ea      	bne.n	800bfe8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c016:	f003 0304 	and.w	r3, r3, #4
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2204      	movs	r2, #4
 800c022:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c024:	2304      	movs	r3, #4
 800c026:	e03a      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d004      	beq.n	800c03e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e02f      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff fb7c 	bl	800b73c <SDMMC_GetCommandResponse>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	7afb      	ldrb	r3, [r7, #11]
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d001      	beq.n	800c052 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c04e:	2301      	movs	r3, #1
 800c050:	e025      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	4a16      	ldr	r2, [pc, #88]	; (800c0b0 <SDMMC_GetCmdResp6+0xec>)
 800c056:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c058:	2100      	movs	r1, #0
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fb7b 	bl	800b756 <SDMMC_GetResponse>
 800c060:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	0c1b      	lsrs	r3, r3, #16
 800c070:	b29a      	uxth	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c076:	2300      	movs	r3, #0
 800c078:	e011      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c088:	e009      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c098:	e001      	b.n	800c09e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c09a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	2400802c 	.word	0x2400802c
 800c0ac:	10624dd3 	.word	0x10624dd3
 800c0b0:	002000c5 	.word	0x002000c5

0800c0b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c0bc:	4b22      	ldr	r3, [pc, #136]	; (800c148 <SDMMC_GetCmdResp7+0x94>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a22      	ldr	r2, [pc, #136]	; (800c14c <SDMMC_GetCmdResp7+0x98>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	0a5b      	lsrs	r3, r3, #9
 800c0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0cc:	fb02 f303 	mul.w	r3, r2, r3
 800c0d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	1e5a      	subs	r2, r3, #1
 800c0d6:	60fa      	str	r2, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0e0:	e02c      	b.n	800c13c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0ef      	beq.n	800c0d2 <SDMMC_GetCmdResp7+0x1e>
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1ea      	bne.n	800c0d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c100:	f003 0304 	and.w	r3, r3, #4
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2204      	movs	r2, #4
 800c10c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c10e:	2304      	movs	r3, #4
 800c110:	e014      	b.n	800c13c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c124:	2301      	movs	r3, #1
 800c126:	e009      	b.n	800c13c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2240      	movs	r2, #64	; 0x40
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c13a:	2300      	movs	r3, #0

}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	2400802c 	.word	0x2400802c
 800c14c:	10624dd3 	.word	0x10624dd3

0800c150 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c158:	4b11      	ldr	r3, [pc, #68]	; (800c1a0 <SDMMC_GetCmdError+0x50>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a11      	ldr	r2, [pc, #68]	; (800c1a4 <SDMMC_GetCmdError+0x54>)
 800c15e:	fba2 2303 	umull	r2, r3, r2, r3
 800c162:	0a5b      	lsrs	r3, r3, #9
 800c164:	f241 3288 	movw	r2, #5000	; 0x1388
 800c168:	fb02 f303 	mul.w	r3, r2, r3
 800c16c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1e5a      	subs	r2, r3, #1
 800c172:	60fa      	str	r2, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c17c:	e009      	b.n	800c192 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0f1      	beq.n	800c16e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a06      	ldr	r2, [pc, #24]	; (800c1a8 <SDMMC_GetCmdError+0x58>)
 800c18e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	2400802c 	.word	0x2400802c
 800c1a4:	10624dd3 	.word	0x10624dd3
 800c1a8:	002000c5 	.word	0x002000c5

0800c1ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c1b0:	4904      	ldr	r1, [pc, #16]	; (800c1c4 <MX_FATFS_Init+0x18>)
 800c1b2:	4805      	ldr	r0, [pc, #20]	; (800c1c8 <MX_FATFS_Init+0x1c>)
 800c1b4:	f003 f8ea 	bl	800f38c <FATFS_LinkDriver>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <MX_FATFS_Init+0x20>)
 800c1be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c1c0:	bf00      	nop
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	240276b8 	.word	0x240276b8
 800c1c8:	08013b54 	.word	0x08013b54
 800c1cc:	240276b4 	.word	0x240276b4

0800c1d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c1d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c1ea:	f000 f885 	bl	800c2f8 <BSP_SD_IsDetected>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d001      	beq.n	800c1f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e012      	b.n	800c21e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c1f8:	480b      	ldr	r0, [pc, #44]	; (800c228 <BSP_SD_Init+0x48>)
 800c1fa:	f7fb fd33 	bl	8007c64 <HAL_SD_Init>
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d109      	bne.n	800c21c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c20c:	4806      	ldr	r0, [pc, #24]	; (800c228 <BSP_SD_Init+0x48>)
 800c20e:	f7fc fbe1 	bl	80089d4 <HAL_SD_ConfigWideBusOperation>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c21c:	79fb      	ldrb	r3, [r7, #7]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	24027204 	.word	0x24027204

0800c22c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	68f9      	ldr	r1, [r7, #12]
 800c242:	4806      	ldr	r0, [pc, #24]	; (800c25c <BSP_SD_ReadBlocks_DMA+0x30>)
 800c244:	f7fb fe28 	bl	8007e98 <HAL_SD_ReadBlocks_DMA>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	24027204 	.word	0x24027204

0800c260 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	68f9      	ldr	r1, [r7, #12]
 800c276:	4806      	ldr	r0, [pc, #24]	; (800c290 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c278:	f7fb feb6 	bl	8007fe8 <HAL_SD_WriteBlocks_DMA>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c286:	7dfb      	ldrb	r3, [r7, #23]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	24027204 	.word	0x24027204

0800c294 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c298:	4805      	ldr	r0, [pc, #20]	; (800c2b0 <BSP_SD_GetCardState+0x1c>)
 800c29a:	f7fc fcad 	bl	8008bf8 <HAL_SD_GetCardState>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	bf14      	ite	ne
 800c2a4:	2301      	movne	r3, #1
 800c2a6:	2300      	moveq	r3, #0
 800c2a8:	b2db      	uxtb	r3, r3
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	24027204 	.word	0x24027204

0800c2b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c2bc:	6879      	ldr	r1, [r7, #4]
 800c2be:	4803      	ldr	r0, [pc, #12]	; (800c2cc <BSP_SD_GetCardInfo+0x18>)
 800c2c0:	f7fc fb5c 	bl	800897c <HAL_SD_GetCardInfo>
}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	24027204 	.word	0x24027204

0800c2d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c2d8:	f000 f9ac 	bl	800c634 <BSP_SD_WriteCpltCallback>
}
 800c2dc:	bf00      	nop
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c2ec:	f000 f9b4 	bl	800c658 <BSP_SD_ReadCpltCallback>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c2fe:	2301      	movs	r3, #1
 800c300:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c302:	f000 f80b 	bl	800c31c <BSP_PlatformIsDetected>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c30c:	2300      	movs	r3, #0
 800c30e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	b2db      	uxtb	r3, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c322:	2301      	movs	r3, #1
 800c324:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c32a:	4806      	ldr	r0, [pc, #24]	; (800c344 <BSP_PlatformIsDetected+0x28>)
 800c32c:	f7f8 f956 	bl	80045dc <HAL_GPIO_ReadPin>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c336:	2300      	movs	r3, #0
 800c338:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c33a:	79fb      	ldrb	r3, [r7, #7]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	58020800 	.word	0x58020800

0800c348 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c350:	f003 f922 	bl	800f598 <osKernelGetTickCount>
 800c354:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c356:	e006      	b.n	800c366 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c358:	f7ff ff9c 	bl	800c294 <BSP_SD_GetCardState>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c362:	2300      	movs	r3, #0
 800c364:	e009      	b.n	800c37a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c366:	f003 f917 	bl	800f598 <osKernelGetTickCount>
 800c36a:	4602      	mov	r2, r0
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	429a      	cmp	r2, r3
 800c374:	d8f0      	bhi.n	800c358 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <SD_CheckStatus+0x38>)
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c394:	f7ff ff7e 	bl	800c294 <BSP_SD_GetCardState>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d107      	bne.n	800c3ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c39e:	4b07      	ldr	r3, [pc, #28]	; (800c3bc <SD_CheckStatus+0x38>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	f023 0301 	bic.w	r3, r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	4b04      	ldr	r3, [pc, #16]	; (800c3bc <SD_CheckStatus+0x38>)
 800c3ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c3ae:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <SD_CheckStatus+0x38>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b2db      	uxtb	r3, r3
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	24008039 	.word	0x24008039

0800c3c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c3ca:	4b1c      	ldr	r3, [pc, #112]	; (800c43c <SD_initialize+0x7c>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c3d0:	f003 f89a 	bl	800f508 <osKernelGetState>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d129      	bne.n	800c42e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c3da:	f7ff ff01 	bl	800c1e0 <BSP_SD_Init>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d107      	bne.n	800c3f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff ffcc 	bl	800c384 <SD_CheckStatus>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4b12      	ldr	r3, [pc, #72]	; (800c43c <SD_initialize+0x7c>)
 800c3f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c3f4:	4b11      	ldr	r3, [pc, #68]	; (800c43c <SD_initialize+0x7c>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d017      	beq.n	800c42e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <SD_initialize+0x80>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d107      	bne.n	800c416 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c406:	2200      	movs	r2, #0
 800c408:	2102      	movs	r1, #2
 800c40a:	200a      	movs	r0, #10
 800c40c:	f003 faca 	bl	800f9a4 <osMessageQueueNew>
 800c410:	4603      	mov	r3, r0
 800c412:	4a0b      	ldr	r2, [pc, #44]	; (800c440 <SD_initialize+0x80>)
 800c414:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c416:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <SD_initialize+0x80>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d107      	bne.n	800c42e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c41e:	4b07      	ldr	r3, [pc, #28]	; (800c43c <SD_initialize+0x7c>)
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	b2db      	uxtb	r3, r3
 800c424:	f043 0301 	orr.w	r3, r3, #1
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	4b04      	ldr	r3, [pc, #16]	; (800c43c <SD_initialize+0x7c>)
 800c42c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c42e:	4b03      	ldr	r3, [pc, #12]	; (800c43c <SD_initialize+0x7c>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	b2db      	uxtb	r3, r3
}
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	24008039 	.word	0x24008039
 800c440:	240081d0 	.word	0x240081d0

0800c444 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff ff97 	bl	800c384 <SD_CheckStatus>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c474:	f247 5030 	movw	r0, #30000	; 0x7530
 800c478:	f7ff ff66 	bl	800c348 <SD_CheckStatusWithTimeout>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	da01      	bge.n	800c486 <SD_read+0x26>
  {
    return res;
 800c482:	7ffb      	ldrb	r3, [r7, #31]
 800c484:	e02f      	b.n	800c4e6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	68b8      	ldr	r0, [r7, #8]
 800c48c:	f7ff fece 	bl	800c22c <BSP_SD_ReadBlocks_DMA>
 800c490:	4603      	mov	r3, r0
 800c492:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c494:	7fbb      	ldrb	r3, [r7, #30]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d124      	bne.n	800c4e4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <SD_read+0x90>)
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	f107 0112 	add.w	r1, r7, #18
 800c4a2:	f247 5330 	movw	r3, #30000	; 0x7530
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f003 fb50 	bl	800fb4c <osMessageQueueGet>
 800c4ac:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d117      	bne.n	800c4e4 <SD_read+0x84>
 800c4b4:	8a7b      	ldrh	r3, [r7, #18]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d114      	bne.n	800c4e4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c4ba:	f003 f86d 	bl	800f598 <osKernelGetTickCount>
 800c4be:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c4c0:	e007      	b.n	800c4d2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c4c2:	f7ff fee7 	bl	800c294 <BSP_SD_GetCardState>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <SD_read+0x72>
              {
                res = RES_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c4d0:	e008      	b.n	800c4e4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c4d2:	f003 f861 	bl	800f598 <osKernelGetTickCount>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d9ee      	bls.n	800c4c2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c4e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3720      	adds	r7, #32
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	240081d0 	.word	0x240081d0

0800c4f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b088      	sub	sp, #32
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	4603      	mov	r3, r0
 800c502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c508:	f247 5030 	movw	r0, #30000	; 0x7530
 800c50c:	f7ff ff1c 	bl	800c348 <SD_CheckStatusWithTimeout>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	da01      	bge.n	800c51a <SD_write+0x26>
  {
    return res;
 800c516:	7ffb      	ldrb	r3, [r7, #31]
 800c518:	e02d      	b.n	800c576 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f7ff fe9e 	bl	800c260 <BSP_SD_WriteBlocks_DMA>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d124      	bne.n	800c574 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c52a:	4b15      	ldr	r3, [pc, #84]	; (800c580 <SD_write+0x8c>)
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	f107 0112 	add.w	r1, r7, #18
 800c532:	f247 5330 	movw	r3, #30000	; 0x7530
 800c536:	2200      	movs	r2, #0
 800c538:	f003 fb08 	bl	800fb4c <osMessageQueueGet>
 800c53c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d117      	bne.n	800c574 <SD_write+0x80>
 800c544:	8a7b      	ldrh	r3, [r7, #18]
 800c546:	2b02      	cmp	r3, #2
 800c548:	d114      	bne.n	800c574 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c54a:	f003 f825 	bl	800f598 <osKernelGetTickCount>
 800c54e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c550:	e007      	b.n	800c562 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c552:	f7ff fe9f 	bl	800c294 <BSP_SD_GetCardState>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <SD_write+0x6e>
          {
            res = RES_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	77fb      	strb	r3, [r7, #31]
            break;
 800c560:	e008      	b.n	800c574 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c562:	f003 f819 	bl	800f598 <osKernelGetTickCount>
 800c566:	4602      	mov	r2, r0
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c570:	4293      	cmp	r3, r2
 800c572:	d9ee      	bls.n	800c552 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c574:	7ffb      	ldrb	r3, [r7, #31]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3720      	adds	r7, #32
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	240081d0 	.word	0x240081d0

0800c584 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08c      	sub	sp, #48	; 0x30
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	603a      	str	r2, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
 800c590:	460b      	mov	r3, r1
 800c592:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c59a:	4b25      	ldr	r3, [pc, #148]	; (800c630 <SD_ioctl+0xac>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <SD_ioctl+0x28>
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e03c      	b.n	800c626 <SD_ioctl+0xa2>

  switch (cmd)
 800c5ac:	79bb      	ldrb	r3, [r7, #6]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d834      	bhi.n	800c61c <SD_ioctl+0x98>
 800c5b2:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <SD_ioctl+0x34>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5c9 	.word	0x0800c5c9
 800c5bc:	0800c5d1 	.word	0x0800c5d1
 800c5c0:	0800c5e9 	.word	0x0800c5e9
 800c5c4:	0800c603 	.word	0x0800c603
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5ce:	e028      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5d0:	f107 0308 	add.w	r3, r7, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff fe6d 	bl	800c2b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5da:	6a3a      	ldr	r2, [r7, #32]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5e6:	e01c      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5e8:	f107 0308 	add.w	r3, r7, #8
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fe61 	bl	800c2b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c600:	e00f      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c602:	f107 0308 	add.w	r3, r7, #8
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff fe54 	bl	800c2b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	0a5a      	lsrs	r2, r3, #9
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c61a:	e002      	b.n	800c622 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c61c:	2304      	movs	r3, #4
 800c61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c626:	4618      	mov	r0, r3
 800c628:	3730      	adds	r7, #48	; 0x30
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	24008039 	.word	0x24008039

0800c634 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c63a:	2302      	movs	r3, #2
 800c63c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c63e:	4b05      	ldr	r3, [pc, #20]	; (800c654 <BSP_SD_WriteCpltCallback+0x20>)
 800c640:	6818      	ldr	r0, [r3, #0]
 800c642:	1db9      	adds	r1, r7, #6
 800c644:	2300      	movs	r3, #0
 800c646:	2200      	movs	r2, #0
 800c648:	f003 fa20 	bl	800fa8c <osMessageQueuePut>
#endif
}
 800c64c:	bf00      	nop
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	240081d0 	.word	0x240081d0

0800c658 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c65e:	2301      	movs	r3, #1
 800c660:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c662:	4b05      	ldr	r3, [pc, #20]	; (800c678 <BSP_SD_ReadCpltCallback+0x20>)
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	1db9      	adds	r1, r7, #6
 800c668:	2300      	movs	r3, #0
 800c66a:	2200      	movs	r2, #0
 800c66c:	f003 fa0e 	bl	800fa8c <osMessageQueuePut>
#endif
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	240081d0 	.word	0x240081d0

0800c67c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c686:	79fb      	ldrb	r3, [r7, #7]
 800c688:	4a08      	ldr	r2, [pc, #32]	; (800c6ac <disk_status+0x30>)
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	79fa      	ldrb	r2, [r7, #7]
 800c694:	4905      	ldr	r1, [pc, #20]	; (800c6ac <disk_status+0x30>)
 800c696:	440a      	add	r2, r1
 800c698:	7a12      	ldrb	r2, [r2, #8]
 800c69a:	4610      	mov	r0, r2
 800c69c:	4798      	blx	r3
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	240081fc 	.word	0x240081fc

0800c6b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	4a0d      	ldr	r2, [pc, #52]	; (800c6f8 <disk_initialize+0x48>)
 800c6c2:	5cd3      	ldrb	r3, [r2, r3]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d111      	bne.n	800c6ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	4a0b      	ldr	r2, [pc, #44]	; (800c6f8 <disk_initialize+0x48>)
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c6d0:	79fb      	ldrb	r3, [r7, #7]
 800c6d2:	4a09      	ldr	r2, [pc, #36]	; (800c6f8 <disk_initialize+0x48>)
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	79fa      	ldrb	r2, [r7, #7]
 800c6de:	4906      	ldr	r1, [pc, #24]	; (800c6f8 <disk_initialize+0x48>)
 800c6e0:	440a      	add	r2, r1
 800c6e2:	7a12      	ldrb	r2, [r2, #8]
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	4798      	blx	r3
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	240081fc 	.word	0x240081fc

0800c6fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c6fc:	b590      	push	{r4, r7, lr}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	607a      	str	r2, [r7, #4]
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	4603      	mov	r3, r0
 800c70a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	4a0a      	ldr	r2, [pc, #40]	; (800c738 <disk_read+0x3c>)
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	689c      	ldr	r4, [r3, #8]
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	4a07      	ldr	r2, [pc, #28]	; (800c738 <disk_read+0x3c>)
 800c71c:	4413      	add	r3, r2
 800c71e:	7a18      	ldrb	r0, [r3, #8]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	68b9      	ldr	r1, [r7, #8]
 800c726:	47a0      	blx	r4
 800c728:	4603      	mov	r3, r0
 800c72a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	371c      	adds	r7, #28
 800c732:	46bd      	mov	sp, r7
 800c734:	bd90      	pop	{r4, r7, pc}
 800c736:	bf00      	nop
 800c738:	240081fc 	.word	0x240081fc

0800c73c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4a0a      	ldr	r2, [pc, #40]	; (800c778 <disk_write+0x3c>)
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68dc      	ldr	r4, [r3, #12]
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	4a07      	ldr	r2, [pc, #28]	; (800c778 <disk_write+0x3c>)
 800c75c:	4413      	add	r3, r2
 800c75e:	7a18      	ldrb	r0, [r3, #8]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	68b9      	ldr	r1, [r7, #8]
 800c766:	47a0      	blx	r4
 800c768:	4603      	mov	r3, r0
 800c76a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	bd90      	pop	{r4, r7, pc}
 800c776:	bf00      	nop
 800c778:	240081fc 	.word	0x240081fc

0800c77c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	603a      	str	r2, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
 800c788:	460b      	mov	r3, r1
 800c78a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	4a09      	ldr	r2, [pc, #36]	; (800c7b4 <disk_ioctl+0x38>)
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	79fa      	ldrb	r2, [r7, #7]
 800c79a:	4906      	ldr	r1, [pc, #24]	; (800c7b4 <disk_ioctl+0x38>)
 800c79c:	440a      	add	r2, r1
 800c79e:	7a10      	ldrb	r0, [r2, #8]
 800c7a0:	79b9      	ldrb	r1, [r7, #6]
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	4798      	blx	r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	240081fc 	.word	0x240081fc

0800c7b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	021b      	lsls	r3, r3, #8
 800c7cc:	b21a      	sxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	b21b      	sxth	r3, r3
 800c7d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c7da:	89fb      	ldrh	r3, [r7, #14]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3303      	adds	r3, #3
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	3202      	adds	r2, #2
 800c800:	7812      	ldrb	r2, [r2, #0]
 800c802:	4313      	orrs	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	021b      	lsls	r3, r3, #8
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	3201      	adds	r2, #1
 800c80e:	7812      	ldrb	r2, [r2, #0]
 800c810:	4313      	orrs	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	021b      	lsls	r3, r3, #8
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c820:	68fb      	ldr	r3, [r7, #12]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c82e:	b480      	push	{r7}
 800c830:	b083      	sub	sp, #12
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	460b      	mov	r3, r1
 800c838:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	887a      	ldrh	r2, [r7, #2]
 800c842:	b2d2      	uxtb	r2, r2
 800c844:	701a      	strb	r2, [r3, #0]
 800c846:	887b      	ldrh	r3, [r7, #2]
 800c848:	0a1b      	lsrs	r3, r3, #8
 800c84a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	607a      	str	r2, [r7, #4]
 800c852:	887a      	ldrh	r2, [r7, #2]
 800c854:	b2d2      	uxtb	r2, r2
 800c856:	701a      	strb	r2, [r3, #0]
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	0a1b      	lsrs	r3, r3, #8
 800c87e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	607a      	str	r2, [r7, #4]
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	683a      	ldr	r2, [r7, #0]
 800c89a:	b2d2      	uxtb	r2, r2
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	0a1b      	lsrs	r3, r3, #8
 800c8a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	607a      	str	r2, [r7, #4]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	b2d2      	uxtb	r2, r2
 800c8ae:	701a      	strb	r2, [r3, #0]
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00d      	beq.n	800c8f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	1c53      	adds	r3, r2, #1
 800c8da:	613b      	str	r3, [r7, #16]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	6179      	str	r1, [r7, #20]
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	607b      	str	r3, [r7, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f1      	bne.n	800c8d6 <mem_cpy+0x1a>
	}
}
 800c8f2:	bf00      	nop
 800c8f4:	371c      	adds	r7, #28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c8fe:	b480      	push	{r7}
 800c900:	b087      	sub	sp, #28
 800c902:	af00      	add	r7, sp, #0
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	617a      	str	r2, [r7, #20]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	607b      	str	r3, [r7, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f3      	bne.n	800c90e <mem_set+0x10>
}
 800c926:	bf00      	nop
 800c928:	bf00      	nop
 800c92a:	371c      	adds	r7, #28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	; 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	61fb      	str	r3, [r7, #28]
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	61fa      	str	r2, [r7, #28]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	4619      	mov	r1, r3
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	61ba      	str	r2, [r7, #24]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	1acb      	subs	r3, r1, r3
 800c960:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3b01      	subs	r3, #1
 800c966:	607b      	str	r3, [r7, #4]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <mem_cmp+0x40>
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0eb      	beq.n	800c94c <mem_cmp+0x18>

	return r;
 800c974:	697b      	ldr	r3, [r7, #20]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3724      	adds	r7, #36	; 0x24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c98c:	e002      	b.n	800c994 <chk_chr+0x12>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3301      	adds	r3, #1
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d005      	beq.n	800c9a8 <chk_chr+0x26>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d1f2      	bne.n	800c98e <chk_chr+0xc>
	return *str;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d009      	beq.n	800c9da <lock_fs+0x22>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f002 fd14 	bl	800f3f8 <ff_req_grant>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <lock_fs+0x22>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e000      	b.n	800c9dc <lock_fs+0x24>
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00d      	beq.n	800ca12 <unlock_fs+0x2e>
 800c9f6:	78fb      	ldrb	r3, [r7, #3]
 800c9f8:	2b0c      	cmp	r3, #12
 800c9fa:	d00a      	beq.n	800ca12 <unlock_fs+0x2e>
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	2b0b      	cmp	r3, #11
 800ca00:	d007      	beq.n	800ca12 <unlock_fs+0x2e>
 800ca02:	78fb      	ldrb	r3, [r7, #3]
 800ca04:	2b0f      	cmp	r3, #15
 800ca06:	d004      	beq.n	800ca12 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f002 fd08 	bl	800f422 <ff_rel_grant>
	}
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca26:	2300      	movs	r3, #0
 800ca28:	60bb      	str	r3, [r7, #8]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e029      	b.n	800ca84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca30:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <chk_lock+0xb4>)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	011b      	lsls	r3, r3, #4
 800ca36:	4413      	add	r3, r2
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01d      	beq.n	800ca7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca3e:	4a24      	ldr	r2, [pc, #144]	; (800cad0 <chk_lock+0xb4>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	4413      	add	r3, r2
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d116      	bne.n	800ca7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ca50:	4a1f      	ldr	r2, [pc, #124]	; (800cad0 <chk_lock+0xb4>)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	011b      	lsls	r3, r3, #4
 800ca56:	4413      	add	r3, r2
 800ca58:	3304      	adds	r3, #4
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d10c      	bne.n	800ca7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca64:	4a1a      	ldr	r2, [pc, #104]	; (800cad0 <chk_lock+0xb4>)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	011b      	lsls	r3, r3, #4
 800ca6a:	4413      	add	r3, r2
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d102      	bne.n	800ca7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca78:	e007      	b.n	800ca8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d9d2      	bls.n	800ca30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d109      	bne.n	800caa4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d102      	bne.n	800ca9c <chk_lock+0x80>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d101      	bne.n	800caa0 <chk_lock+0x84>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e010      	b.n	800cac2 <chk_lock+0xa6>
 800caa0:	2312      	movs	r3, #18
 800caa2:	e00e      	b.n	800cac2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d108      	bne.n	800cabc <chk_lock+0xa0>
 800caaa:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <chk_lock+0xb4>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	011b      	lsls	r3, r3, #4
 800cab0:	4413      	add	r3, r2
 800cab2:	330c      	adds	r3, #12
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caba:	d101      	bne.n	800cac0 <chk_lock+0xa4>
 800cabc:	2310      	movs	r3, #16
 800cabe:	e000      	b.n	800cac2 <chk_lock+0xa6>
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	240081dc 	.word	0x240081dc

0800cad4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cada:	2300      	movs	r3, #0
 800cadc:	607b      	str	r3, [r7, #4]
 800cade:	e002      	b.n	800cae6 <enq_lock+0x12>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3301      	adds	r3, #1
 800cae4:	607b      	str	r3, [r7, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d806      	bhi.n	800cafa <enq_lock+0x26>
 800caec:	4a09      	ldr	r2, [pc, #36]	; (800cb14 <enq_lock+0x40>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	011b      	lsls	r3, r3, #4
 800caf2:	4413      	add	r3, r2
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f2      	bne.n	800cae0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	bf14      	ite	ne
 800cb00:	2301      	movne	r3, #1
 800cb02:	2300      	moveq	r3, #0
 800cb04:	b2db      	uxtb	r3, r3
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	240081dc 	.word	0x240081dc

0800cb18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb22:	2300      	movs	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]
 800cb26:	e01f      	b.n	800cb68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cb28:	4a41      	ldr	r2, [pc, #260]	; (800cc30 <inc_lock+0x118>)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	4413      	add	r3, r2
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d113      	bne.n	800cb62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb3a:	4a3d      	ldr	r2, [pc, #244]	; (800cc30 <inc_lock+0x118>)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	011b      	lsls	r3, r3, #4
 800cb40:	4413      	add	r3, r2
 800cb42:	3304      	adds	r3, #4
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d109      	bne.n	800cb62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb4e:	4a38      	ldr	r2, [pc, #224]	; (800cc30 <inc_lock+0x118>)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	4413      	add	r3, r2
 800cb56:	3308      	adds	r3, #8
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d006      	beq.n	800cb70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3301      	adds	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d9dc      	bls.n	800cb28 <inc_lock+0x10>
 800cb6e:	e000      	b.n	800cb72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cb70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d132      	bne.n	800cbde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e002      	b.n	800cb84 <inc_lock+0x6c>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d806      	bhi.n	800cb98 <inc_lock+0x80>
 800cb8a:	4a29      	ldr	r2, [pc, #164]	; (800cc30 <inc_lock+0x118>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	4413      	add	r3, r2
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1f2      	bne.n	800cb7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d101      	bne.n	800cba2 <inc_lock+0x8a>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e040      	b.n	800cc24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	4922      	ldr	r1, [pc, #136]	; (800cc30 <inc_lock+0x118>)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	440b      	add	r3, r1
 800cbae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689a      	ldr	r2, [r3, #8]
 800cbb4:	491e      	ldr	r1, [pc, #120]	; (800cc30 <inc_lock+0x118>)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	440b      	add	r3, r1
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695a      	ldr	r2, [r3, #20]
 800cbc4:	491a      	ldr	r1, [pc, #104]	; (800cc30 <inc_lock+0x118>)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	440b      	add	r3, r1
 800cbcc:	3308      	adds	r3, #8
 800cbce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cbd0:	4a17      	ldr	r2, [pc, #92]	; (800cc30 <inc_lock+0x118>)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	4413      	add	r3, r2
 800cbd8:	330c      	adds	r3, #12
 800cbda:	2200      	movs	r2, #0
 800cbdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d009      	beq.n	800cbf8 <inc_lock+0xe0>
 800cbe4:	4a12      	ldr	r2, [pc, #72]	; (800cc30 <inc_lock+0x118>)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	011b      	lsls	r3, r3, #4
 800cbea:	4413      	add	r3, r2
 800cbec:	330c      	adds	r3, #12
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <inc_lock+0xe0>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e015      	b.n	800cc24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d108      	bne.n	800cc10 <inc_lock+0xf8>
 800cbfe:	4a0c      	ldr	r2, [pc, #48]	; (800cc30 <inc_lock+0x118>)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	4413      	add	r3, r2
 800cc06:	330c      	adds	r3, #12
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	e001      	b.n	800cc14 <inc_lock+0xfc>
 800cc10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc14:	4906      	ldr	r1, [pc, #24]	; (800cc30 <inc_lock+0x118>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	440b      	add	r3, r1
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3301      	adds	r3, #1
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	240081dc 	.word	0x240081dc

0800cc34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	607b      	str	r3, [r7, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d825      	bhi.n	800cc94 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc48:	4a17      	ldr	r2, [pc, #92]	; (800cca8 <dec_lock+0x74>)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	011b      	lsls	r3, r3, #4
 800cc4e:	4413      	add	r3, r2
 800cc50:	330c      	adds	r3, #12
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cc56:	89fb      	ldrh	r3, [r7, #14]
 800cc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5c:	d101      	bne.n	800cc62 <dec_lock+0x2e>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cc62:	89fb      	ldrh	r3, [r7, #14]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <dec_lock+0x3a>
 800cc68:	89fb      	ldrh	r3, [r7, #14]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cc6e:	4a0e      	ldr	r2, [pc, #56]	; (800cca8 <dec_lock+0x74>)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	4413      	add	r3, r2
 800cc76:	330c      	adds	r3, #12
 800cc78:	89fa      	ldrh	r2, [r7, #14]
 800cc7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc7c:	89fb      	ldrh	r3, [r7, #14]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d105      	bne.n	800cc8e <dec_lock+0x5a>
 800cc82:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <dec_lock+0x74>)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	4413      	add	r3, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	737b      	strb	r3, [r7, #13]
 800cc92:	e001      	b.n	800cc98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc94:	2302      	movs	r3, #2
 800cc96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc98:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	240081dc 	.word	0x240081dc

0800ccac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	e010      	b.n	800ccdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ccba:	4a0d      	ldr	r2, [pc, #52]	; (800ccf0 <clear_lock+0x44>)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	011b      	lsls	r3, r3, #4
 800ccc0:	4413      	add	r3, r2
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d105      	bne.n	800ccd6 <clear_lock+0x2a>
 800ccca:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <clear_lock+0x44>)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	4413      	add	r3, r2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d9eb      	bls.n	800ccba <clear_lock+0xe>
	}
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	240081dc 	.word	0x240081dc

0800ccf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	78db      	ldrb	r3, [r3, #3]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d034      	beq.n	800cd72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7858      	ldrb	r0, [r3, #1]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cd18:	2301      	movs	r3, #1
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	f7ff fd0e 	bl	800c73c <disk_write>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	73fb      	strb	r3, [r7, #15]
 800cd2a:	e022      	b.n	800cd72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	1ad2      	subs	r2, r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	69db      	ldr	r3, [r3, #28]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d217      	bcs.n	800cd72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	789b      	ldrb	r3, [r3, #2]
 800cd46:	613b      	str	r3, [r7, #16]
 800cd48:	e010      	b.n	800cd6c <sync_window+0x78>
					wsect += fs->fsize;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	4413      	add	r3, r2
 800cd52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7858      	ldrb	r0, [r3, #1]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cd5e:	2301      	movs	r3, #1
 800cd60:	697a      	ldr	r2, [r7, #20]
 800cd62:	f7ff fceb 	bl	800c73c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d8eb      	bhi.n	800cd4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d01b      	beq.n	800cdcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7ff ffad 	bl	800ccf4 <sync_window>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d113      	bne.n	800cdcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7858      	ldrb	r0, [r3, #1]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cdae:	2301      	movs	r3, #1
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	f7ff fca3 	bl	800c6fc <disk_read>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d004      	beq.n	800cdc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7ff ff87 	bl	800ccf4 <sync_window>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d158      	bne.n	800cea2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d148      	bne.n	800ce8a <sync_fs+0xb2>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	791b      	ldrb	r3, [r3, #4]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d144      	bne.n	800ce8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3334      	adds	r3, #52	; 0x34
 800ce04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fd77 	bl	800c8fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3334      	adds	r3, #52	; 0x34
 800ce14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fd06 	bl	800c82e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3334      	adds	r3, #52	; 0x34
 800ce26:	4921      	ldr	r1, [pc, #132]	; (800ceac <sync_fs+0xd4>)
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff fd1b 	bl	800c864 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3334      	adds	r3, #52	; 0x34
 800ce32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce36:	491e      	ldr	r1, [pc, #120]	; (800ceb0 <sync_fs+0xd8>)
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fd13 	bl	800c864 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3334      	adds	r3, #52	; 0x34
 800ce42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f7ff fd09 	bl	800c864 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3334      	adds	r3, #52	; 0x34
 800ce56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7ff fcff 	bl	800c864 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7858      	ldrb	r0, [r3, #1]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce7e:	2301      	movs	r3, #1
 800ce80:	f7ff fc5c 	bl	800c73c <disk_write>
			fs->fsi_flag = 0;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	785b      	ldrb	r3, [r3, #1]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2100      	movs	r1, #0
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff fc72 	bl	800c77c <disk_ioctl>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <sync_fs+0xca>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	41615252 	.word	0x41615252
 800ceb0:	61417272 	.word	0x61417272

0800ceb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	3b02      	subs	r3, #2
 800cec2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	3b02      	subs	r3, #2
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d301      	bcc.n	800ced4 <clust2sect+0x20>
 800ced0:	2300      	movs	r3, #0
 800ced2:	e008      	b.n	800cee6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	895b      	ldrh	r3, [r3, #10]
 800ced8:	461a      	mov	r2, r3
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	fb03 f202 	mul.w	r2, r3, r2
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	4413      	add	r3, r2
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b086      	sub	sp, #24
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d904      	bls.n	800cf12 <get_fat+0x20>
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d302      	bcc.n	800cf18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cf12:	2301      	movs	r3, #1
 800cf14:	617b      	str	r3, [r7, #20]
 800cf16:	e08f      	b.n	800d038 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d062      	beq.n	800cfec <get_fat+0xfa>
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	dc7c      	bgt.n	800d024 <get_fat+0x132>
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d002      	beq.n	800cf34 <get_fat+0x42>
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d042      	beq.n	800cfb8 <get_fat+0xc6>
 800cf32:	e077      	b.n	800d024 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	0a5b      	lsrs	r3, r3, #9
 800cf4a:	4413      	add	r3, r2
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6938      	ldr	r0, [r7, #16]
 800cf50:	f7ff ff14 	bl	800cd7c <move_window>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d167      	bne.n	800d02a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	60fa      	str	r2, [r7, #12]
 800cf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	4413      	add	r3, r2
 800cf68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	0a5b      	lsrs	r3, r3, #9
 800cf76:	4413      	add	r3, r2
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6938      	ldr	r0, [r7, #16]
 800cf7c:	f7ff fefe 	bl	800cd7c <move_window>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d153      	bne.n	800d02e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	461a      	mov	r2, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <get_fat+0xbc>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	091b      	lsrs	r3, r3, #4
 800cfac:	e002      	b.n	800cfb4 <get_fat+0xc2>
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfb4:	617b      	str	r3, [r7, #20]
			break;
 800cfb6:	e03f      	b.n	800d038 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	0a1b      	lsrs	r3, r3, #8
 800cfc0:	4413      	add	r3, r2
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6938      	ldr	r0, [r7, #16]
 800cfc6:	f7ff fed9 	bl	800cd7c <move_window>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d130      	bne.n	800d032 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cfde:	4413      	add	r3, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fbe9 	bl	800c7b8 <ld_word>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	617b      	str	r3, [r7, #20]
			break;
 800cfea:	e025      	b.n	800d038 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	09db      	lsrs	r3, r3, #7
 800cff4:	4413      	add	r3, r2
 800cff6:	4619      	mov	r1, r3
 800cff8:	6938      	ldr	r0, [r7, #16]
 800cffa:	f7ff febf 	bl	800cd7c <move_window>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d118      	bne.n	800d036 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d012:	4413      	add	r3, r2
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff fbe7 	bl	800c7e8 <ld_dword>
 800d01a:	4603      	mov	r3, r0
 800d01c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d020:	617b      	str	r3, [r7, #20]
			break;
 800d022:	e009      	b.n	800d038 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d024:	2301      	movs	r3, #1
 800d026:	617b      	str	r3, [r7, #20]
 800d028:	e006      	b.n	800d038 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d02a:	bf00      	nop
 800d02c:	e004      	b.n	800d038 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d02e:	bf00      	nop
 800d030:	e002      	b.n	800d038 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d032:	bf00      	nop
 800d034:	e000      	b.n	800d038 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d036:	bf00      	nop
		}
	}

	return val;
 800d038:	697b      	ldr	r3, [r7, #20]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d042:	b590      	push	{r4, r7, lr}
 800d044:	b089      	sub	sp, #36	; 0x24
 800d046:	af00      	add	r7, sp, #0
 800d048:	60f8      	str	r0, [r7, #12]
 800d04a:	60b9      	str	r1, [r7, #8]
 800d04c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d04e:	2302      	movs	r3, #2
 800d050:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b01      	cmp	r3, #1
 800d056:	f240 80d2 	bls.w	800d1fe <put_fat+0x1bc>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	429a      	cmp	r2, r3
 800d062:	f080 80cc 	bcs.w	800d1fe <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	f000 8096 	beq.w	800d19c <put_fat+0x15a>
 800d070:	2b03      	cmp	r3, #3
 800d072:	f300 80cd 	bgt.w	800d210 <put_fat+0x1ce>
 800d076:	2b01      	cmp	r3, #1
 800d078:	d002      	beq.n	800d080 <put_fat+0x3e>
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d06e      	beq.n	800d15c <put_fat+0x11a>
 800d07e:	e0c7      	b.n	800d210 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	085b      	lsrs	r3, r3, #1
 800d088:	69ba      	ldr	r2, [r7, #24]
 800d08a:	4413      	add	r3, r2
 800d08c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	0a5b      	lsrs	r3, r3, #9
 800d096:	4413      	add	r3, r2
 800d098:	4619      	mov	r1, r3
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f7ff fe6e 	bl	800cd7c <move_window>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0a4:	7ffb      	ldrb	r3, [r7, #31]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f040 80ab 	bne.w	800d202 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	1c59      	adds	r1, r3, #1
 800d0b6:	61b9      	str	r1, [r7, #24]
 800d0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0bc:	4413      	add	r3, r2
 800d0be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00d      	beq.n	800d0e6 <put_fat+0xa4>
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	b25b      	sxtb	r3, r3
 800d0d0:	f003 030f 	and.w	r3, r3, #15
 800d0d4:	b25a      	sxtb	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	b25b      	sxtb	r3, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	b25b      	sxtb	r3, r3
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	e001      	b.n	800d0ea <put_fat+0xa8>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	0a5b      	lsrs	r3, r3, #9
 800d0fc:	4413      	add	r3, r2
 800d0fe:	4619      	mov	r1, r3
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff fe3b 	bl	800cd7c <move_window>
 800d106:	4603      	mov	r3, r0
 800d108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d10a:	7ffb      	ldrb	r3, [r7, #31]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d17a      	bne.n	800d206 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11c:	4413      	add	r3, r2
 800d11e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <put_fat+0xf0>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	091b      	lsrs	r3, r3, #4
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	e00e      	b.n	800d150 <put_fat+0x10e>
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	b25b      	sxtb	r3, r3
 800d138:	f023 030f 	bic.w	r3, r3, #15
 800d13c:	b25a      	sxtb	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	0a1b      	lsrs	r3, r3, #8
 800d142:	b25b      	sxtb	r3, r3
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	b25b      	sxtb	r3, r3
 800d14a:	4313      	orrs	r3, r2
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2201      	movs	r2, #1
 800d158:	70da      	strb	r2, [r3, #3]
			break;
 800d15a:	e059      	b.n	800d210 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	0a1b      	lsrs	r3, r3, #8
 800d164:	4413      	add	r3, r2
 800d166:	4619      	mov	r1, r3
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fe07 	bl	800cd7c <move_window>
 800d16e:	4603      	mov	r3, r0
 800d170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d172:	7ffb      	ldrb	r3, [r7, #31]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d148      	bne.n	800d20a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d186:	4413      	add	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	b292      	uxth	r2, r2
 800d18c:	4611      	mov	r1, r2
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff fb4d 	bl	800c82e <st_word>
			fs->wflag = 1;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	70da      	strb	r2, [r3, #3]
			break;
 800d19a:	e039      	b.n	800d210 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	09db      	lsrs	r3, r3, #7
 800d1a4:	4413      	add	r3, r2
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7ff fde7 	bl	800cd7c <move_window>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1b2:	7ffb      	ldrb	r3, [r7, #31]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d12a      	bne.n	800d20e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d1cc:	4413      	add	r3, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7ff fb0a 	bl	800c7e8 <ld_dword>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d1da:	4323      	orrs	r3, r4
 800d1dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d1ec:	4413      	add	r3, r2
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff fb37 	bl	800c864 <st_dword>
			fs->wflag = 1;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	70da      	strb	r2, [r3, #3]
			break;
 800d1fc:	e008      	b.n	800d210 <put_fat+0x1ce>
		}
	}
 800d1fe:	bf00      	nop
 800d200:	e006      	b.n	800d210 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d202:	bf00      	nop
 800d204:	e004      	b.n	800d210 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d206:	bf00      	nop
 800d208:	e002      	b.n	800d210 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d20a:	bf00      	nop
 800d20c:	e000      	b.n	800d210 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d20e:	bf00      	nop
	return res;
 800d210:	7ffb      	ldrb	r3, [r7, #31]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3724      	adds	r7, #36	; 0x24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd90      	pop	{r4, r7, pc}

0800d21a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b088      	sub	sp, #32
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d904      	bls.n	800d240 <remove_chain+0x26>
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d301      	bcc.n	800d244 <remove_chain+0x2a>
 800d240:	2302      	movs	r3, #2
 800d242:	e04b      	b.n	800d2dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00c      	beq.n	800d264 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d24a:	f04f 32ff 	mov.w	r2, #4294967295
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	69b8      	ldr	r0, [r7, #24]
 800d252:	f7ff fef6 	bl	800d042 <put_fat>
 800d256:	4603      	mov	r3, r0
 800d258:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d25a:	7ffb      	ldrb	r3, [r7, #31]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <remove_chain+0x4a>
 800d260:	7ffb      	ldrb	r3, [r7, #31]
 800d262:	e03b      	b.n	800d2dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff fe43 	bl	800cef2 <get_fat>
 800d26c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d031      	beq.n	800d2d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d101      	bne.n	800d27e <remove_chain+0x64>
 800d27a:	2302      	movs	r3, #2
 800d27c:	e02e      	b.n	800d2dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d284:	d101      	bne.n	800d28a <remove_chain+0x70>
 800d286:	2301      	movs	r3, #1
 800d288:	e028      	b.n	800d2dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d28a:	2200      	movs	r2, #0
 800d28c:	68b9      	ldr	r1, [r7, #8]
 800d28e:	69b8      	ldr	r0, [r7, #24]
 800d290:	f7ff fed7 	bl	800d042 <put_fat>
 800d294:	4603      	mov	r3, r0
 800d296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d298:	7ffb      	ldrb	r3, [r7, #31]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <remove_chain+0x88>
 800d29e:	7ffb      	ldrb	r3, [r7, #31]
 800d2a0:	e01c      	b.n	800d2dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	695a      	ldr	r2, [r3, #20]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	3b02      	subs	r3, #2
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d20b      	bcs.n	800d2c8 <remove_chain+0xae>
			fs->free_clst++;
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	791b      	ldrb	r3, [r3, #4]
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d3c6      	bcc.n	800d264 <remove_chain+0x4a>
 800d2d6:	e000      	b.n	800d2da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d2d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10d      	bne.n	800d316 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <create_chain+0x2c>
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d31b      	bcc.n	800d348 <create_chain+0x64>
 800d310:	2301      	movs	r3, #1
 800d312:	61bb      	str	r3, [r7, #24]
 800d314:	e018      	b.n	800d348 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fdea 	bl	800cef2 <get_fat>
 800d31e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d801      	bhi.n	800d32a <create_chain+0x46>
 800d326:	2301      	movs	r3, #1
 800d328:	e070      	b.n	800d40c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d101      	bne.n	800d336 <create_chain+0x52>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	e06a      	b.n	800d40c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d201      	bcs.n	800d344 <create_chain+0x60>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	e063      	b.n	800d40c <create_chain+0x128>
		scl = clst;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	3301      	adds	r3, #1
 800d350:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	69fa      	ldr	r2, [r7, #28]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d307      	bcc.n	800d36c <create_chain+0x88>
				ncl = 2;
 800d35c:	2302      	movs	r3, #2
 800d35e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d360:	69fa      	ldr	r2, [r7, #28]
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	429a      	cmp	r2, r3
 800d366:	d901      	bls.n	800d36c <create_chain+0x88>
 800d368:	2300      	movs	r3, #0
 800d36a:	e04f      	b.n	800d40c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d36c:	69f9      	ldr	r1, [r7, #28]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff fdbf 	bl	800cef2 <get_fat>
 800d374:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00e      	beq.n	800d39a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d003      	beq.n	800d38a <create_chain+0xa6>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d388:	d101      	bne.n	800d38e <create_chain+0xaa>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	e03e      	b.n	800d40c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	429a      	cmp	r2, r3
 800d394:	d1da      	bne.n	800d34c <create_chain+0x68>
 800d396:	2300      	movs	r3, #0
 800d398:	e038      	b.n	800d40c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d39a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d39c:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a0:	69f9      	ldr	r1, [r7, #28]
 800d3a2:	6938      	ldr	r0, [r7, #16]
 800d3a4:	f7ff fe4d 	bl	800d042 <put_fat>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d109      	bne.n	800d3c6 <create_chain+0xe2>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d3b8:	69fa      	ldr	r2, [r7, #28]
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6938      	ldr	r0, [r7, #16]
 800d3be:	f7ff fe40 	bl	800d042 <put_fat>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d116      	bne.n	800d3fa <create_chain+0x116>
		fs->last_clst = ncl;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	695a      	ldr	r2, [r3, #20]
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	3b02      	subs	r3, #2
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d804      	bhi.n	800d3ea <create_chain+0x106>
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	1e5a      	subs	r2, r3, #1
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	791b      	ldrb	r3, [r3, #4]
 800d3ee:	f043 0301 	orr.w	r3, r3, #1
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	711a      	strb	r2, [r3, #4]
 800d3f8:	e007      	b.n	800d40a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d102      	bne.n	800d406 <create_chain+0x122>
 800d400:	f04f 33ff 	mov.w	r3, #4294967295
 800d404:	e000      	b.n	800d408 <create_chain+0x124>
 800d406:	2301      	movs	r3, #1
 800d408:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d40a:	69fb      	ldr	r3, [r7, #28]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	3304      	adds	r3, #4
 800d42a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	0a5b      	lsrs	r3, r3, #9
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	8952      	ldrh	r2, [r2, #10]
 800d434:	fbb3 f3f2 	udiv	r3, r3, r2
 800d438:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	1d1a      	adds	r2, r3, #4
 800d43e:	613a      	str	r2, [r7, #16]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d101      	bne.n	800d44e <clmt_clust+0x3a>
 800d44a:	2300      	movs	r3, #0
 800d44c:	e010      	b.n	800d470 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	429a      	cmp	r2, r3
 800d454:	d307      	bcc.n	800d466 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	3304      	adds	r3, #4
 800d462:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d464:	e7e9      	b.n	800d43a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d466:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	4413      	add	r3, r2
}
 800d470:	4618      	mov	r0, r3
 800d472:	371c      	adds	r7, #28
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d492:	d204      	bcs.n	800d49e <dir_sdi+0x22>
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	f003 031f 	and.w	r3, r3, #31
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d49e:	2302      	movs	r3, #2
 800d4a0:	e063      	b.n	800d56a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d106      	bne.n	800d4c2 <dir_sdi+0x46>
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d902      	bls.n	800d4c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10c      	bne.n	800d4e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	095b      	lsrs	r3, r3, #5
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	8912      	ldrh	r2, [r2, #8]
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d301      	bcc.n	800d4d8 <dir_sdi+0x5c>
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	e048      	b.n	800d56a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	61da      	str	r2, [r3, #28]
 800d4e0:	e029      	b.n	800d536 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	895b      	ldrh	r3, [r3, #10]
 800d4e6:	025b      	lsls	r3, r3, #9
 800d4e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4ea:	e019      	b.n	800d520 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7ff fcfe 	bl	800cef2 <get_fat>
 800d4f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fe:	d101      	bne.n	800d504 <dir_sdi+0x88>
 800d500:	2301      	movs	r3, #1
 800d502:	e032      	b.n	800d56a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d904      	bls.n	800d514 <dir_sdi+0x98>
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	699b      	ldr	r3, [r3, #24]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	429a      	cmp	r2, r3
 800d512:	d301      	bcc.n	800d518 <dir_sdi+0x9c>
 800d514:	2302      	movs	r3, #2
 800d516:	e028      	b.n	800d56a <dir_sdi+0xee>
			ofs -= csz;
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d2e1      	bcs.n	800d4ec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d528:	6979      	ldr	r1, [r7, #20]
 800d52a:	6938      	ldr	r0, [r7, #16]
 800d52c:	f7ff fcc2 	bl	800ceb4 <clust2sect>
 800d530:	4602      	mov	r2, r0
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	69db      	ldr	r3, [r3, #28]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <dir_sdi+0xcc>
 800d544:	2302      	movs	r3, #2
 800d546:	e010      	b.n	800d56a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	69da      	ldr	r2, [r3, #28]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	0a5b      	lsrs	r3, r3, #9
 800d550:	441a      	add	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d562:	441a      	add	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3718      	adds	r7, #24
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b086      	sub	sp, #24
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	3320      	adds	r3, #32
 800d588:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d003      	beq.n	800d59a <dir_next+0x28>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d598:	d301      	bcc.n	800d59e <dir_next+0x2c>
 800d59a:	2304      	movs	r3, #4
 800d59c:	e0aa      	b.n	800d6f4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f040 8098 	bne.w	800d6da <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	69db      	ldr	r3, [r3, #28]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10b      	bne.n	800d5d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	095b      	lsrs	r3, r3, #5
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	8912      	ldrh	r2, [r2, #8]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	f0c0 8088 	bcc.w	800d6da <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	61da      	str	r2, [r3, #28]
 800d5d0:	2304      	movs	r3, #4
 800d5d2:	e08f      	b.n	800d6f4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	0a5b      	lsrs	r3, r3, #9
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	8952      	ldrh	r2, [r2, #10]
 800d5dc:	3a01      	subs	r2, #1
 800d5de:	4013      	ands	r3, r2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d17a      	bne.n	800d6da <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	f7ff fc80 	bl	800cef2 <get_fat>
 800d5f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d801      	bhi.n	800d5fe <dir_next+0x8c>
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	e07a      	b.n	800d6f4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d604:	d101      	bne.n	800d60a <dir_next+0x98>
 800d606:	2301      	movs	r3, #1
 800d608:	e074      	b.n	800d6f4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	697a      	ldr	r2, [r7, #20]
 800d610:	429a      	cmp	r2, r3
 800d612:	d358      	bcc.n	800d6c6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d104      	bne.n	800d624 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	61da      	str	r2, [r3, #28]
 800d620:	2304      	movs	r3, #4
 800d622:	e067      	b.n	800d6f4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f7ff fe59 	bl	800d2e4 <create_chain>
 800d632:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <dir_next+0xcc>
 800d63a:	2307      	movs	r3, #7
 800d63c:	e05a      	b.n	800d6f4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d101      	bne.n	800d648 <dir_next+0xd6>
 800d644:	2302      	movs	r3, #2
 800d646:	e055      	b.n	800d6f4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64e:	d101      	bne.n	800d654 <dir_next+0xe2>
 800d650:	2301      	movs	r3, #1
 800d652:	e04f      	b.n	800d6f4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fb4d 	bl	800ccf4 <sync_window>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <dir_next+0xf2>
 800d660:	2301      	movs	r3, #1
 800d662:	e047      	b.n	800d6f4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3334      	adds	r3, #52	; 0x34
 800d668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d66c:	2100      	movs	r1, #0
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff f945 	bl	800c8fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d674:	2300      	movs	r3, #0
 800d676:	613b      	str	r3, [r7, #16]
 800d678:	6979      	ldr	r1, [r7, #20]
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7ff fc1a 	bl	800ceb4 <clust2sect>
 800d680:	4602      	mov	r2, r0
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	631a      	str	r2, [r3, #48]	; 0x30
 800d686:	e012      	b.n	800d6ae <dir_next+0x13c>
						fs->wflag = 1;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2201      	movs	r2, #1
 800d68c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f7ff fb30 	bl	800ccf4 <sync_window>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <dir_next+0x12c>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e02a      	b.n	800d6f4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	613b      	str	r3, [r7, #16]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a8:	1c5a      	adds	r2, r3, #1
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	631a      	str	r2, [r3, #48]	; 0x30
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	895b      	ldrh	r3, [r3, #10]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d3e6      	bcc.n	800d688 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	1ad2      	subs	r2, r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d6cc:	6979      	ldr	r1, [r7, #20]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff fbf0 	bl	800ceb4 <clust2sect>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ec:	441a      	add	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d70c:	2100      	movs	r1, #0
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff feb4 	bl	800d47c <dir_sdi>
 800d714:	4603      	mov	r3, r0
 800d716:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d12b      	bne.n	800d776 <dir_alloc+0x7a>
		n = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	4619      	mov	r1, r3
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff fb27 	bl	800cd7c <move_window>
 800d72e:	4603      	mov	r3, r0
 800d730:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d11d      	bne.n	800d774 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a1b      	ldr	r3, [r3, #32]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2be5      	cmp	r3, #229	; 0xe5
 800d740:	d004      	beq.n	800d74c <dir_alloc+0x50>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d107      	bne.n	800d75c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	3301      	adds	r3, #1
 800d750:	613b      	str	r3, [r7, #16]
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d102      	bne.n	800d760 <dir_alloc+0x64>
 800d75a:	e00c      	b.n	800d776 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d75c:	2300      	movs	r3, #0
 800d75e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d760:	2101      	movs	r1, #1
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff ff05 	bl	800d572 <dir_next>
 800d768:	4603      	mov	r3, r0
 800d76a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d0d7      	beq.n	800d722 <dir_alloc+0x26>
 800d772:	e000      	b.n	800d776 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d774:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	2b04      	cmp	r3, #4
 800d77a:	d101      	bne.n	800d780 <dir_alloc+0x84>
 800d77c:	2307      	movs	r3, #7
 800d77e:	75fb      	strb	r3, [r7, #23]
	return res;
 800d780:	7dfb      	ldrb	r3, [r7, #23]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	331a      	adds	r3, #26
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff f80d 	bl	800c7b8 <ld_word>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d109      	bne.n	800d7be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	3314      	adds	r3, #20
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff f802 	bl	800c7b8 <ld_word>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	041b      	lsls	r3, r3, #16
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d7be:	68fb      	ldr	r3, [r7, #12]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	331a      	adds	r3, #26
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	b292      	uxth	r2, r2
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff f825 	bl	800c82e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	d109      	bne.n	800d800 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f103 0214 	add.w	r2, r3, #20
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	0c1b      	lsrs	r3, r3, #16
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7ff f817 	bl	800c82e <st_word>
	}
}
 800d800:	bf00      	nop
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d816:	2100      	movs	r1, #0
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff fe2f 	bl	800d47c <dir_sdi>
 800d81e:	4603      	mov	r3, r0
 800d820:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <dir_find+0x24>
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	e03e      	b.n	800d8aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	4619      	mov	r1, r3
 800d832:	6938      	ldr	r0, [r7, #16]
 800d834:	f7ff faa2 	bl	800cd7c <move_window>
 800d838:	4603      	mov	r3, r0
 800d83a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d12f      	bne.n	800d8a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <dir_find+0x4e>
 800d850:	2304      	movs	r3, #4
 800d852:	75fb      	strb	r3, [r7, #23]
 800d854:	e028      	b.n	800d8a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	330b      	adds	r3, #11
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d862:	b2da      	uxtb	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a1b      	ldr	r3, [r3, #32]
 800d86c:	330b      	adds	r3, #11
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 0308 	and.w	r3, r3, #8
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10a      	bne.n	800d88e <dir_find+0x86>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a18      	ldr	r0, [r3, #32]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3324      	adds	r3, #36	; 0x24
 800d880:	220b      	movs	r2, #11
 800d882:	4619      	mov	r1, r3
 800d884:	f7ff f856 	bl	800c934 <mem_cmp>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00b      	beq.n	800d8a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d88e:	2100      	movs	r1, #0
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff fe6e 	bl	800d572 <dir_next>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d0c5      	beq.n	800d82c <dir_find+0x24>
 800d8a0:	e002      	b.n	800d8a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d8a2:	bf00      	nop
 800d8a4:	e000      	b.n	800d8a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d8a6:	bf00      	nop

	return res;
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3718      	adds	r7, #24
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7ff ff1a 	bl	800d6fc <dir_alloc>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d11c      	bne.n	800d90c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	69db      	ldr	r3, [r3, #28]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68b8      	ldr	r0, [r7, #8]
 800d8da:	f7ff fa4f 	bl	800cd7c <move_window>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d111      	bne.n	800d90c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7ff f804 	bl	800c8fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a18      	ldr	r0, [r3, #32]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3324      	adds	r3, #36	; 0x24
 800d8fe:	220b      	movs	r2, #11
 800d900:	4619      	mov	r1, r3
 800d902:	f7fe ffdb 	bl	800c8bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2201      	movs	r2, #1
 800d90a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3324      	adds	r3, #36	; 0x24
 800d92c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d92e:	220b      	movs	r2, #11
 800d930:	2120      	movs	r1, #32
 800d932:	68b8      	ldr	r0, [r7, #8]
 800d934:	f7fe ffe3 	bl	800c8fe <mem_set>
	si = i = 0; ni = 8;
 800d938:	2300      	movs	r3, #0
 800d93a:	613b      	str	r3, [r7, #16]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	61fb      	str	r3, [r7, #28]
 800d940:	2308      	movs	r3, #8
 800d942:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	61fa      	str	r2, [r7, #28]
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	4413      	add	r3, r2
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d952:	7efb      	ldrb	r3, [r7, #27]
 800d954:	2b20      	cmp	r3, #32
 800d956:	d94e      	bls.n	800d9f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d958:	7efb      	ldrb	r3, [r7, #27]
 800d95a:	2b2f      	cmp	r3, #47	; 0x2f
 800d95c:	d006      	beq.n	800d96c <create_name+0x54>
 800d95e:	7efb      	ldrb	r3, [r7, #27]
 800d960:	2b5c      	cmp	r3, #92	; 0x5c
 800d962:	d110      	bne.n	800d986 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d964:	e002      	b.n	800d96c <create_name+0x54>
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	3301      	adds	r3, #1
 800d96a:	61fb      	str	r3, [r7, #28]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	4413      	add	r3, r2
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b2f      	cmp	r3, #47	; 0x2f
 800d976:	d0f6      	beq.n	800d966 <create_name+0x4e>
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	4413      	add	r3, r2
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b5c      	cmp	r3, #92	; 0x5c
 800d982:	d0f0      	beq.n	800d966 <create_name+0x4e>
			break;
 800d984:	e038      	b.n	800d9f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d986:	7efb      	ldrb	r3, [r7, #27]
 800d988:	2b2e      	cmp	r3, #46	; 0x2e
 800d98a:	d003      	beq.n	800d994 <create_name+0x7c>
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	429a      	cmp	r2, r3
 800d992:	d30c      	bcc.n	800d9ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b0b      	cmp	r3, #11
 800d998:	d002      	beq.n	800d9a0 <create_name+0x88>
 800d99a:	7efb      	ldrb	r3, [r7, #27]
 800d99c:	2b2e      	cmp	r3, #46	; 0x2e
 800d99e:	d001      	beq.n	800d9a4 <create_name+0x8c>
 800d9a0:	2306      	movs	r3, #6
 800d9a2:	e044      	b.n	800da2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d9a4:	2308      	movs	r3, #8
 800d9a6:	613b      	str	r3, [r7, #16]
 800d9a8:	230b      	movs	r3, #11
 800d9aa:	617b      	str	r3, [r7, #20]
			continue;
 800d9ac:	e022      	b.n	800d9f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d9ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	da04      	bge.n	800d9c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d9b6:	7efb      	ldrb	r3, [r7, #27]
 800d9b8:	3b80      	subs	r3, #128	; 0x80
 800d9ba:	4a1f      	ldr	r2, [pc, #124]	; (800da38 <create_name+0x120>)
 800d9bc:	5cd3      	ldrb	r3, [r2, r3]
 800d9be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d9c0:	7efb      	ldrb	r3, [r7, #27]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	481d      	ldr	r0, [pc, #116]	; (800da3c <create_name+0x124>)
 800d9c6:	f7fe ffdc 	bl	800c982 <chk_chr>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <create_name+0xbc>
 800d9d0:	2306      	movs	r3, #6
 800d9d2:	e02c      	b.n	800da2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d9d4:	7efb      	ldrb	r3, [r7, #27]
 800d9d6:	2b60      	cmp	r3, #96	; 0x60
 800d9d8:	d905      	bls.n	800d9e6 <create_name+0xce>
 800d9da:	7efb      	ldrb	r3, [r7, #27]
 800d9dc:	2b7a      	cmp	r3, #122	; 0x7a
 800d9de:	d802      	bhi.n	800d9e6 <create_name+0xce>
 800d9e0:	7efb      	ldrb	r3, [r7, #27]
 800d9e2:	3b20      	subs	r3, #32
 800d9e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	1c5a      	adds	r2, r3, #1
 800d9ea:	613a      	str	r2, [r7, #16]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	7efa      	ldrb	r2, [r7, #27]
 800d9f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d9f4:	e7a6      	b.n	800d944 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d9f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	441a      	add	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <create_name+0xf4>
 800da08:	2306      	movs	r3, #6
 800da0a:	e010      	b.n	800da2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2be5      	cmp	r3, #229	; 0xe5
 800da12:	d102      	bne.n	800da1a <create_name+0x102>
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2205      	movs	r2, #5
 800da18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da1a:	7efb      	ldrb	r3, [r7, #27]
 800da1c:	2b20      	cmp	r3, #32
 800da1e:	d801      	bhi.n	800da24 <create_name+0x10c>
 800da20:	2204      	movs	r2, #4
 800da22:	e000      	b.n	800da26 <create_name+0x10e>
 800da24:	2200      	movs	r2, #0
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	330b      	adds	r3, #11
 800da2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800da2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3720      	adds	r7, #32
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	08013b68 	.word	0x08013b68
 800da3c:	08013a78 	.word	0x08013a78

0800da40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800da54:	e002      	b.n	800da5c <follow_path+0x1c>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	603b      	str	r3, [r7, #0]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b2f      	cmp	r3, #47	; 0x2f
 800da62:	d0f8      	beq.n	800da56 <follow_path+0x16>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b5c      	cmp	r3, #92	; 0x5c
 800da6a:	d0f4      	beq.n	800da56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2200      	movs	r2, #0
 800da70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b1f      	cmp	r3, #31
 800da78:	d80a      	bhi.n	800da90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2280      	movs	r2, #128	; 0x80
 800da7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800da82:	2100      	movs	r1, #0
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff fcf9 	bl	800d47c <dir_sdi>
 800da8a:	4603      	mov	r3, r0
 800da8c:	75fb      	strb	r3, [r7, #23]
 800da8e:	e043      	b.n	800db18 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da90:	463b      	mov	r3, r7
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff ff3f 	bl	800d918 <create_name>
 800da9a:	4603      	mov	r3, r0
 800da9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d134      	bne.n	800db0e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff feaf 	bl	800d808 <dir_find>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dab4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00a      	beq.n	800dad2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b04      	cmp	r3, #4
 800dac0:	d127      	bne.n	800db12 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dac2:	7afb      	ldrb	r3, [r7, #11]
 800dac4:	f003 0304 	and.w	r3, r3, #4
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d122      	bne.n	800db12 <follow_path+0xd2>
 800dacc:	2305      	movs	r3, #5
 800dace:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dad0:	e01f      	b.n	800db12 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dad2:	7afb      	ldrb	r3, [r7, #11]
 800dad4:	f003 0304 	and.w	r3, r3, #4
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d11c      	bne.n	800db16 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	799b      	ldrb	r3, [r3, #6]
 800dae0:	f003 0310 	and.w	r3, r3, #16
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dae8:	2305      	movs	r3, #5
 800daea:	75fb      	strb	r3, [r7, #23]
 800daec:	e014      	b.n	800db18 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafc:	4413      	add	r3, r2
 800dafe:	4619      	mov	r1, r3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fe42 	bl	800d78a <ld_clust>
 800db06:	4602      	mov	r2, r0
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db0c:	e7c0      	b.n	800da90 <follow_path+0x50>
			if (res != FR_OK) break;
 800db0e:	bf00      	nop
 800db10:	e002      	b.n	800db18 <follow_path+0xd8>
				break;
 800db12:	bf00      	nop
 800db14:	e000      	b.n	800db18 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db16:	bf00      	nop
			}
		}
	}

	return res;
 800db18:	7dfb      	ldrb	r3, [r7, #23]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3718      	adds	r7, #24
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800db22:	b480      	push	{r7}
 800db24:	b087      	sub	sp, #28
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800db2a:	f04f 33ff 	mov.w	r3, #4294967295
 800db2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d031      	beq.n	800db9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	e002      	b.n	800db46 <get_ldnumber+0x24>
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	3301      	adds	r3, #1
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b20      	cmp	r3, #32
 800db4c:	d903      	bls.n	800db56 <get_ldnumber+0x34>
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b3a      	cmp	r3, #58	; 0x3a
 800db54:	d1f4      	bne.n	800db40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b3a      	cmp	r3, #58	; 0x3a
 800db5c:	d11c      	bne.n	800db98 <get_ldnumber+0x76>
			tp = *path;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	60fa      	str	r2, [r7, #12]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	3b30      	subs	r3, #48	; 0x30
 800db6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b09      	cmp	r3, #9
 800db74:	d80e      	bhi.n	800db94 <get_ldnumber+0x72>
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d10a      	bne.n	800db94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d107      	bne.n	800db94 <get_ldnumber+0x72>
					vol = (int)i;
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	3301      	adds	r3, #1
 800db8c:	617b      	str	r3, [r7, #20]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	e002      	b.n	800db9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800db98:	2300      	movs	r3, #0
 800db9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800db9c:	693b      	ldr	r3, [r7, #16]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	371c      	adds	r7, #28
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
	...

0800dbac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	70da      	strb	r2, [r3, #3]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff f8d8 	bl	800cd7c <move_window>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <check_fs+0x2a>
 800dbd2:	2304      	movs	r3, #4
 800dbd4:	e038      	b.n	800dc48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3334      	adds	r3, #52	; 0x34
 800dbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe fdea 	bl	800c7b8 <ld_word>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d001      	beq.n	800dbf4 <check_fs+0x48>
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e029      	b.n	800dc48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbfa:	2be9      	cmp	r3, #233	; 0xe9
 800dbfc:	d009      	beq.n	800dc12 <check_fs+0x66>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc04:	2beb      	cmp	r3, #235	; 0xeb
 800dc06:	d11e      	bne.n	800dc46 <check_fs+0x9a>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dc0e:	2b90      	cmp	r3, #144	; 0x90
 800dc10:	d119      	bne.n	800dc46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3334      	adds	r3, #52	; 0x34
 800dc16:	3336      	adds	r3, #54	; 0x36
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fde5 	bl	800c7e8 <ld_dword>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dc24:	4a0a      	ldr	r2, [pc, #40]	; (800dc50 <check_fs+0xa4>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d101      	bne.n	800dc2e <check_fs+0x82>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e00c      	b.n	800dc48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3334      	adds	r3, #52	; 0x34
 800dc32:	3352      	adds	r3, #82	; 0x52
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fe fdd7 	bl	800c7e8 <ld_dword>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	4a05      	ldr	r2, [pc, #20]	; (800dc54 <check_fs+0xa8>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d101      	bne.n	800dc46 <check_fs+0x9a>
 800dc42:	2300      	movs	r3, #0
 800dc44:	e000      	b.n	800dc48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc46:	2302      	movs	r3, #2
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	00544146 	.word	0x00544146
 800dc54:	33544146 	.word	0x33544146

0800dc58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b096      	sub	sp, #88	; 0x58
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff ff58 	bl	800db22 <get_ldnumber>
 800dc72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	da01      	bge.n	800dc7e <find_volume+0x26>
 800dc7a:	230b      	movs	r3, #11
 800dc7c:	e236      	b.n	800e0ec <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dc7e:	4aac      	ldr	r2, [pc, #688]	; (800df30 <find_volume+0x2d8>)
 800dc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <find_volume+0x3a>
 800dc8e:	230c      	movs	r3, #12
 800dc90:	e22c      	b.n	800e0ec <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800dc92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc94:	f7fe fe90 	bl	800c9b8 <lock_fs>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <find_volume+0x4a>
 800dc9e:	230f      	movs	r3, #15
 800dca0:	e224      	b.n	800e0ec <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dca8:	79fb      	ldrb	r3, [r7, #7]
 800dcaa:	f023 0301 	bic.w	r3, r3, #1
 800dcae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d01a      	beq.n	800dcee <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	785b      	ldrb	r3, [r3, #1]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe fcdd 	bl	800c67c <disk_status>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dccc:	f003 0301 	and.w	r3, r3, #1
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10c      	bne.n	800dcee <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d007      	beq.n	800dcea <find_volume+0x92>
 800dcda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dcde:	f003 0304 	and.w	r3, r3, #4
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d001      	beq.n	800dcea <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dce6:	230a      	movs	r3, #10
 800dce8:	e200      	b.n	800e0ec <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800dcea:	2300      	movs	r3, #0
 800dcec:	e1fe      	b.n	800e0ec <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfe:	785b      	ldrb	r3, [r3, #1]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe fcd5 	bl	800c6b0 <disk_initialize>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d001      	beq.n	800dd1c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dd18:	2303      	movs	r3, #3
 800dd1a:	e1e7      	b.n	800e0ec <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d007      	beq.n	800dd32 <find_volume+0xda>
 800dd22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dd2e:	230a      	movs	r3, #10
 800dd30:	e1dc      	b.n	800e0ec <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dd36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd3a:	f7ff ff37 	bl	800dbac <check_fs>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dd44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d14b      	bne.n	800dde4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd50:	e01f      	b.n	800dd92 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd5a:	011b      	lsls	r3, r3, #4
 800dd5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dd60:	4413      	add	r3, r2
 800dd62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd66:	3304      	adds	r3, #4
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d006      	beq.n	800dd7c <find_volume+0x124>
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	3308      	adds	r3, #8
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe fd38 	bl	800c7e8 <ld_dword>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	e000      	b.n	800dd7e <find_volume+0x126>
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dd86:	440b      	add	r3, r1
 800dd88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd8e:	3301      	adds	r3, #1
 800dd90:	643b      	str	r3, [r7, #64]	; 0x40
 800dd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd94:	2b03      	cmp	r3, #3
 800dd96:	d9dc      	bls.n	800dd52 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd98:	2300      	movs	r3, #0
 800dd9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <find_volume+0x150>
 800dda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dda4:	3b01      	subs	r3, #1
 800dda6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ddb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ddb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <find_volume+0x172>
 800ddbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ddc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddc2:	f7ff fef3 	bl	800dbac <check_fs>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	e000      	b.n	800ddcc <find_volume+0x174>
 800ddca:	2303      	movs	r3, #3
 800ddcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ddd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d905      	bls.n	800dde4 <find_volume+0x18c>
 800ddd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddda:	3301      	adds	r3, #1
 800dddc:	643b      	str	r3, [r7, #64]	; 0x40
 800ddde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dde0:	2b03      	cmp	r3, #3
 800dde2:	d9e1      	bls.n	800dda8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dde4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dde8:	2b04      	cmp	r3, #4
 800ddea:	d101      	bne.n	800ddf0 <find_volume+0x198>
 800ddec:	2301      	movs	r3, #1
 800ddee:	e17d      	b.n	800e0ec <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ddf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d901      	bls.n	800ddfc <find_volume+0x1a4>
 800ddf8:	230d      	movs	r3, #13
 800ddfa:	e177      	b.n	800e0ec <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	3334      	adds	r3, #52	; 0x34
 800de00:	330b      	adds	r3, #11
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fcd8 	bl	800c7b8 <ld_word>
 800de08:	4603      	mov	r3, r0
 800de0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de0e:	d001      	beq.n	800de14 <find_volume+0x1bc>
 800de10:	230d      	movs	r3, #13
 800de12:	e16b      	b.n	800e0ec <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	3334      	adds	r3, #52	; 0x34
 800de18:	3316      	adds	r3, #22
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fccc 	bl	800c7b8 <ld_word>
 800de20:	4603      	mov	r3, r0
 800de22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800de24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <find_volume+0x1e0>
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	3334      	adds	r3, #52	; 0x34
 800de2e:	3324      	adds	r3, #36	; 0x24
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fcd9 	bl	800c7e8 <ld_dword>
 800de36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de3c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800de48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4a:	789b      	ldrb	r3, [r3, #2]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d005      	beq.n	800de5c <find_volume+0x204>
 800de50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de52:	789b      	ldrb	r3, [r3, #2]
 800de54:	2b02      	cmp	r3, #2
 800de56:	d001      	beq.n	800de5c <find_volume+0x204>
 800de58:	230d      	movs	r3, #13
 800de5a:	e147      	b.n	800e0ec <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800de5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5e:	789b      	ldrb	r3, [r3, #2]
 800de60:	461a      	mov	r2, r3
 800de62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de64:	fb02 f303 	mul.w	r3, r2, r3
 800de68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de70:	b29a      	uxth	r2, r3
 800de72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800de76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de78:	895b      	ldrh	r3, [r3, #10]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d008      	beq.n	800de90 <find_volume+0x238>
 800de7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de80:	895b      	ldrh	r3, [r3, #10]
 800de82:	461a      	mov	r2, r3
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	895b      	ldrh	r3, [r3, #10]
 800de88:	3b01      	subs	r3, #1
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <find_volume+0x23c>
 800de90:	230d      	movs	r3, #13
 800de92:	e12b      	b.n	800e0ec <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	3334      	adds	r3, #52	; 0x34
 800de98:	3311      	adds	r3, #17
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe fc8c 	bl	800c7b8 <ld_word>
 800dea0:	4603      	mov	r3, r0
 800dea2:	461a      	mov	r2, r3
 800dea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deaa:	891b      	ldrh	r3, [r3, #8]
 800deac:	f003 030f 	and.w	r3, r3, #15
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <find_volume+0x262>
 800deb6:	230d      	movs	r3, #13
 800deb8:	e118      	b.n	800e0ec <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	3334      	adds	r3, #52	; 0x34
 800debe:	3313      	adds	r3, #19
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fc79 	bl	800c7b8 <ld_word>
 800dec6:	4603      	mov	r3, r0
 800dec8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800deca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800decc:	2b00      	cmp	r3, #0
 800dece:	d106      	bne.n	800dede <find_volume+0x286>
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	3334      	adds	r3, #52	; 0x34
 800ded4:	3320      	adds	r3, #32
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fc86 	bl	800c7e8 <ld_dword>
 800dedc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	3334      	adds	r3, #52	; 0x34
 800dee2:	330e      	adds	r3, #14
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fe fc67 	bl	800c7b8 <ld_word>
 800deea:	4603      	mov	r3, r0
 800deec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800deee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <find_volume+0x2a0>
 800def4:	230d      	movs	r3, #13
 800def6:	e0f9      	b.n	800e0ec <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800def8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800defa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defc:	4413      	add	r3, r2
 800defe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df00:	8912      	ldrh	r2, [r2, #8]
 800df02:	0912      	lsrs	r2, r2, #4
 800df04:	b292      	uxth	r2, r2
 800df06:	4413      	add	r3, r2
 800df08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800df0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	429a      	cmp	r2, r3
 800df10:	d201      	bcs.n	800df16 <find_volume+0x2be>
 800df12:	230d      	movs	r3, #13
 800df14:	e0ea      	b.n	800e0ec <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800df16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df1e:	8952      	ldrh	r2, [r2, #10]
 800df20:	fbb3 f3f2 	udiv	r3, r3, r2
 800df24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d103      	bne.n	800df34 <find_volume+0x2dc>
 800df2c:	230d      	movs	r3, #13
 800df2e:	e0dd      	b.n	800e0ec <find_volume+0x494>
 800df30:	240081d4 	.word	0x240081d4
		fmt = FS_FAT32;
 800df34:	2303      	movs	r3, #3
 800df36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800df40:	4293      	cmp	r3, r2
 800df42:	d802      	bhi.n	800df4a <find_volume+0x2f2>
 800df44:	2302      	movs	r3, #2
 800df46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800df50:	4293      	cmp	r3, r2
 800df52:	d802      	bhi.n	800df5a <find_volume+0x302>
 800df54:	2301      	movs	r3, #1
 800df56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	1c9a      	adds	r2, r3, #2
 800df5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df60:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800df62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df66:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800df68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6c:	441a      	add	r2, r3
 800df6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df70:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800df72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	441a      	add	r2, r3
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800df7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df80:	2b03      	cmp	r3, #3
 800df82:	d11e      	bne.n	800dfc2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800df84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df86:	3334      	adds	r3, #52	; 0x34
 800df88:	332a      	adds	r3, #42	; 0x2a
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fe fc14 	bl	800c7b8 <ld_word>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <find_volume+0x342>
 800df96:	230d      	movs	r3, #13
 800df98:	e0a8      	b.n	800e0ec <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	891b      	ldrh	r3, [r3, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <find_volume+0x34e>
 800dfa2:	230d      	movs	r3, #13
 800dfa4:	e0a2      	b.n	800e0ec <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa8:	3334      	adds	r3, #52	; 0x34
 800dfaa:	332c      	adds	r3, #44	; 0x2c
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fc1b 	bl	800c7e8 <ld_dword>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc0:	e01f      	b.n	800e002 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	891b      	ldrh	r3, [r3, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <find_volume+0x376>
 800dfca:	230d      	movs	r3, #13
 800dfcc:	e08e      	b.n	800e0ec <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd4:	441a      	add	r2, r3
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dfda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d103      	bne.n	800dfea <find_volume+0x392>
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	e00a      	b.n	800e000 <find_volume+0x3a8>
 800dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfec:	699a      	ldr	r2, [r3, #24]
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	085a      	lsrs	r2, r3, #1
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e000:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	69da      	ldr	r2, [r3, #28]
 800e006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e008:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e00c:	0a5b      	lsrs	r3, r3, #9
 800e00e:	429a      	cmp	r2, r3
 800e010:	d201      	bcs.n	800e016 <find_volume+0x3be>
 800e012:	230d      	movs	r3, #13
 800e014:	e06a      	b.n	800e0ec <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e018:	f04f 32ff 	mov.w	r2, #4294967295
 800e01c:	615a      	str	r2, [r3, #20]
 800e01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e020:	695a      	ldr	r2, [r3, #20]
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e028:	2280      	movs	r2, #128	; 0x80
 800e02a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e02c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e030:	2b03      	cmp	r3, #3
 800e032:	d149      	bne.n	800e0c8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	3334      	adds	r3, #52	; 0x34
 800e038:	3330      	adds	r3, #48	; 0x30
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fbbc 	bl	800c7b8 <ld_word>
 800e040:	4603      	mov	r3, r0
 800e042:	2b01      	cmp	r3, #1
 800e044:	d140      	bne.n	800e0c8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e048:	3301      	adds	r3, #1
 800e04a:	4619      	mov	r1, r3
 800e04c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e04e:	f7fe fe95 	bl	800cd7c <move_window>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d137      	bne.n	800e0c8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	2200      	movs	r2, #0
 800e05c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	3334      	adds	r3, #52	; 0x34
 800e062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fba6 	bl	800c7b8 <ld_word>
 800e06c:	4603      	mov	r3, r0
 800e06e:	461a      	mov	r2, r3
 800e070:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e074:	429a      	cmp	r2, r3
 800e076:	d127      	bne.n	800e0c8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	3334      	adds	r3, #52	; 0x34
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fbb3 	bl	800c7e8 <ld_dword>
 800e082:	4603      	mov	r3, r0
 800e084:	4a1b      	ldr	r2, [pc, #108]	; (800e0f4 <find_volume+0x49c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d11e      	bne.n	800e0c8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	3334      	adds	r3, #52	; 0x34
 800e08e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fba8 	bl	800c7e8 <ld_dword>
 800e098:	4603      	mov	r3, r0
 800e09a:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <find_volume+0x4a0>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d113      	bne.n	800e0c8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	3334      	adds	r3, #52	; 0x34
 800e0a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fb9d 	bl	800c7e8 <ld_dword>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	3334      	adds	r3, #52	; 0x34
 800e0b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fb93 	bl	800c7e8 <ld_dword>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e0ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e0d0:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <find_volume+0x4a4>)
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	4b08      	ldr	r3, [pc, #32]	; (800e0fc <find_volume+0x4a4>)
 800e0da:	801a      	strh	r2, [r3, #0]
 800e0dc:	4b07      	ldr	r3, [pc, #28]	; (800e0fc <find_volume+0x4a4>)
 800e0de:	881a      	ldrh	r2, [r3, #0]
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e0e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0e6:	f7fe fde1 	bl	800ccac <clear_lock>
#endif
	return FR_OK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3758      	adds	r7, #88	; 0x58
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	41615252 	.word	0x41615252
 800e0f8:	61417272 	.word	0x61417272
 800e0fc:	240081d8 	.word	0x240081d8

0800e100 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e10a:	2309      	movs	r3, #9
 800e10c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d02e      	beq.n	800e172 <validate+0x72>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d02a      	beq.n	800e172 <validate+0x72>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d025      	beq.n	800e172 <validate+0x72>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	889a      	ldrh	r2, [r3, #4]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	88db      	ldrh	r3, [r3, #6]
 800e130:	429a      	cmp	r2, r3
 800e132:	d11e      	bne.n	800e172 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fc3d 	bl	800c9b8 <lock_fs>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d014      	beq.n	800e16e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	785b      	ldrb	r3, [r3, #1]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fa96 	bl	800c67c <disk_status>
 800e150:	4603      	mov	r3, r0
 800e152:	f003 0301 	and.w	r3, r3, #1
 800e156:	2b00      	cmp	r3, #0
 800e158:	d102      	bne.n	800e160 <validate+0x60>
				res = FR_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	73fb      	strb	r3, [r7, #15]
 800e15e:	e008      	b.n	800e172 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2100      	movs	r1, #0
 800e166:	4618      	mov	r0, r3
 800e168:	f7fe fc3c 	bl	800c9e4 <unlock_fs>
 800e16c:	e001      	b.n	800e172 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e16e:	230f      	movs	r3, #15
 800e170:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <validate+0x7e>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	e000      	b.n	800e180 <validate+0x80>
 800e17e:	2300      	movs	r3, #0
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	6013      	str	r3, [r2, #0]
	return res;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e1a2:	f107 0310 	add.w	r3, r7, #16
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7ff fcbb 	bl	800db22 <get_ldnumber>
 800e1ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	da01      	bge.n	800e1b8 <f_mount+0x28>
 800e1b4:	230b      	movs	r3, #11
 800e1b6:	e048      	b.n	800e24a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e1b8:	4a26      	ldr	r2, [pc, #152]	; (800e254 <f_mount+0xc4>)
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00f      	beq.n	800e1e8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e1c8:	69b8      	ldr	r0, [r7, #24]
 800e1ca:	f7fe fd6f 	bl	800ccac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f001 f904 	bl	800f3e0 <ff_del_syncobj>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <f_mount+0x52>
 800e1de:	2302      	movs	r3, #2
 800e1e0:	e033      	b.n	800e24a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00f      	beq.n	800e20e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	330c      	adds	r3, #12
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	4610      	mov	r0, r2
 800e200:	f001 f8d3 	bl	800f3aa <ff_cre_syncobj>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <f_mount+0x7e>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e01d      	b.n	800e24a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	4910      	ldr	r1, [pc, #64]	; (800e254 <f_mount+0xc4>)
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <f_mount+0x94>
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d001      	beq.n	800e228 <f_mount+0x98>
 800e224:	2300      	movs	r3, #0
 800e226:	e010      	b.n	800e24a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e228:	f107 010c 	add.w	r1, r7, #12
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	2200      	movs	r2, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff fd10 	bl	800dc58 <find_volume>
 800e238:	4603      	mov	r3, r0
 800e23a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	7dfa      	ldrb	r2, [r7, #23]
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fbce 	bl	800c9e4 <unlock_fs>
 800e248:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	240081d4 	.word	0x240081d4

0800e258 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b098      	sub	sp, #96	; 0x60
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	4613      	mov	r3, r2
 800e264:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <f_open+0x18>
 800e26c:	2309      	movs	r3, #9
 800e26e:	e1b4      	b.n	800e5da <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e276:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e278:	79fa      	ldrb	r2, [r7, #7]
 800e27a:	f107 0110 	add.w	r1, r7, #16
 800e27e:	f107 0308 	add.w	r3, r7, #8
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff fce8 	bl	800dc58 <find_volume>
 800e288:	4603      	mov	r3, r0
 800e28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e292:	2b00      	cmp	r3, #0
 800e294:	f040 8191 	bne.w	800e5ba <f_open+0x362>
		dj.obj.fs = fs;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	f107 0314 	add.w	r3, r7, #20
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fbcb 	bl	800da40 <follow_path>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e2b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11a      	bne.n	800e2ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e2b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2bc:	b25b      	sxtb	r3, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	da03      	bge.n	800e2ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800e2c2:	2306      	movs	r3, #6
 800e2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e2c8:	e011      	b.n	800e2ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	f023 0301 	bic.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	bf14      	ite	ne
 800e2d4:	2301      	movne	r3, #1
 800e2d6:	2300      	moveq	r3, #0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	461a      	mov	r2, r3
 800e2dc:	f107 0314 	add.w	r3, r7, #20
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fb9a 	bl	800ca1c <chk_lock>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	f003 031c 	and.w	r3, r3, #28
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d07f      	beq.n	800e3f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d017      	beq.n	800e330 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e304:	2b04      	cmp	r3, #4
 800e306:	d10e      	bne.n	800e326 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e308:	f7fe fbe4 	bl	800cad4 <enq_lock>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d006      	beq.n	800e320 <f_open+0xc8>
 800e312:	f107 0314 	add.w	r3, r7, #20
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff facb 	bl	800d8b2 <dir_register>
 800e31c:	4603      	mov	r3, r0
 800e31e:	e000      	b.n	800e322 <f_open+0xca>
 800e320:	2312      	movs	r3, #18
 800e322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	f043 0308 	orr.w	r3, r3, #8
 800e32c:	71fb      	strb	r3, [r7, #7]
 800e32e:	e010      	b.n	800e352 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e330:	7ebb      	ldrb	r3, [r7, #26]
 800e332:	f003 0311 	and.w	r3, r3, #17
 800e336:	2b00      	cmp	r3, #0
 800e338:	d003      	beq.n	800e342 <f_open+0xea>
					res = FR_DENIED;
 800e33a:	2307      	movs	r3, #7
 800e33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e340:	e007      	b.n	800e352 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e342:	79fb      	ldrb	r3, [r7, #7]
 800e344:	f003 0304 	and.w	r3, r3, #4
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <f_open+0xfa>
 800e34c:	2308      	movs	r3, #8
 800e34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e356:	2b00      	cmp	r3, #0
 800e358:	d168      	bne.n	800e42c <f_open+0x1d4>
 800e35a:	79fb      	ldrb	r3, [r7, #7]
 800e35c:	f003 0308 	and.w	r3, r3, #8
 800e360:	2b00      	cmp	r3, #0
 800e362:	d063      	beq.n	800e42c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e364:	f7fd ff34 	bl	800c1d0 <get_fattime>
 800e368:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36c:	330e      	adds	r3, #14
 800e36e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fa77 	bl	800c864 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e378:	3316      	adds	r3, #22
 800e37a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe fa71 	bl	800c864 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e384:	330b      	adds	r3, #11
 800e386:	2220      	movs	r2, #32
 800e388:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e38e:	4611      	mov	r1, r2
 800e390:	4618      	mov	r0, r3
 800e392:	f7ff f9fa 	bl	800d78a <ld_clust>
 800e396:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e39c:	2200      	movs	r2, #0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff fa12 	bl	800d7c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a6:	331c      	adds	r3, #28
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fa5a 	bl	800c864 <st_dword>
					fs->wflag = 1;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d037      	beq.n	800e42c <f_open+0x1d4>
						dw = fs->winsect;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e3c2:	f107 0314 	add.w	r3, r7, #20
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe ff25 	bl	800d21a <remove_chain>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e3d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d126      	bne.n	800e42c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fe fcca 	bl	800cd7c <move_window>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3f2:	3a01      	subs	r2, #1
 800e3f4:	611a      	str	r2, [r3, #16]
 800e3f6:	e019      	b.n	800e42c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d115      	bne.n	800e42c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e400:	7ebb      	ldrb	r3, [r7, #26]
 800e402:	f003 0310 	and.w	r3, r3, #16
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e40a:	2304      	movs	r3, #4
 800e40c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e410:	e00c      	b.n	800e42c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	f003 0302 	and.w	r3, r3, #2
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d007      	beq.n	800e42c <f_open+0x1d4>
 800e41c:	7ebb      	ldrb	r3, [r7, #26]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <f_open+0x1d4>
						res = FR_DENIED;
 800e426:	2307      	movs	r3, #7
 800e428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e42c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e430:	2b00      	cmp	r3, #0
 800e432:	d128      	bne.n	800e486 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e434:	79fb      	ldrb	r3, [r7, #7]
 800e436:	f003 0308 	and.w	r3, r3, #8
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e444:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	f023 0301 	bic.w	r3, r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	bf14      	ite	ne
 800e45e:	2301      	movne	r3, #1
 800e460:	2300      	moveq	r3, #0
 800e462:	b2db      	uxtb	r3, r3
 800e464:	461a      	mov	r2, r3
 800e466:	f107 0314 	add.w	r3, r7, #20
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fb53 	bl	800cb18 <inc_lock>
 800e472:	4602      	mov	r2, r0
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d102      	bne.n	800e486 <f_open+0x22e>
 800e480:	2302      	movs	r3, #2
 800e482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f040 8095 	bne.w	800e5ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f7ff f977 	bl	800d78a <ld_clust>
 800e49c:	4602      	mov	r2, r0
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a4:	331c      	adds	r3, #28
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f99e 	bl	800c7e8 <ld_dword>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	88da      	ldrh	r2, [r3, #6]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	79fa      	ldrb	r2, [r7, #7]
 800e4ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	3330      	adds	r3, #48	; 0x30
 800e4e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fe fa08 	bl	800c8fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	f003 0320 	and.w	r3, r3, #32
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d060      	beq.n	800e5ba <f_open+0x362>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d05c      	beq.n	800e5ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	68da      	ldr	r2, [r3, #12]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	895b      	ldrh	r3, [r3, #10]
 800e50c:	025b      	lsls	r3, r3, #9
 800e50e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	657b      	str	r3, [r7, #84]	; 0x54
 800e51c:	e016      	b.n	800e54c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe fce5 	bl	800cef2 <get_fat>
 800e528:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d802      	bhi.n	800e536 <f_open+0x2de>
 800e530:	2302      	movs	r3, #2
 800e532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e53c:	d102      	bne.n	800e544 <f_open+0x2ec>
 800e53e:	2301      	movs	r3, #1
 800e540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	657b      	str	r3, [r7, #84]	; 0x54
 800e54c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e550:	2b00      	cmp	r3, #0
 800e552:	d103      	bne.n	800e55c <f_open+0x304>
 800e554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e558:	429a      	cmp	r2, r3
 800e55a:	d8e0      	bhi.n	800e51e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e560:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e566:	2b00      	cmp	r3, #0
 800e568:	d127      	bne.n	800e5ba <f_open+0x362>
 800e56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e570:	2b00      	cmp	r3, #0
 800e572:	d022      	beq.n	800e5ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe fc9b 	bl	800ceb4 <clust2sect>
 800e57e:	6478      	str	r0, [r7, #68]	; 0x44
 800e580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <f_open+0x336>
						res = FR_INT_ERR;
 800e586:	2302      	movs	r3, #2
 800e588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e58c:	e015      	b.n	800e5ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e590:	0a5a      	lsrs	r2, r3, #9
 800e592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e594:	441a      	add	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	7858      	ldrb	r0, [r3, #1]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6a1a      	ldr	r2, [r3, #32]
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f7fe f8a7 	bl	800c6fc <disk_read>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <f_open+0x362>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <f_open+0x370>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fa07 	bl	800c9e4 <unlock_fs>
 800e5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3760      	adds	r7, #96	; 0x60
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b08c      	sub	sp, #48	; 0x30
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
 800e5ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f107 0210 	add.w	r2, r7, #16
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f7ff fd7c 	bl	800e100 <validate>
 800e608:	4603      	mov	r3, r0
 800e60a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e60e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e612:	2b00      	cmp	r3, #0
 800e614:	d107      	bne.n	800e626 <f_write+0x44>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	7d5b      	ldrb	r3, [r3, #21]
 800e61a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e61e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <f_write+0x58>
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e62c:	4611      	mov	r1, r2
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe f9d8 	bl	800c9e4 <unlock_fs>
 800e634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e638:	e173      	b.n	800e922 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	7d1b      	ldrb	r3, [r3, #20]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <f_write+0x72>
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2107      	movs	r1, #7
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe f9ca 	bl	800c9e4 <unlock_fs>
 800e650:	2307      	movs	r3, #7
 800e652:	e166      	b.n	800e922 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	699a      	ldr	r2, [r3, #24]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	441a      	add	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	429a      	cmp	r2, r3
 800e662:	f080 814b 	bcs.w	800e8fc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	43db      	mvns	r3, r3
 800e66c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e66e:	e145      	b.n	800e8fc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f040 8101 	bne.w	800e880 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	0a5b      	lsrs	r3, r3, #9
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	8952      	ldrh	r2, [r2, #10]
 800e688:	3a01      	subs	r2, #1
 800e68a:	4013      	ands	r3, r2
 800e68c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d14d      	bne.n	800e730 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10c      	bne.n	800e6b6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d11a      	bne.n	800e6de <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe fe19 	bl	800d2e4 <create_chain>
 800e6b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e6b4:	e013      	b.n	800e6de <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d007      	beq.n	800e6ce <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f7fe fea5 	bl	800d414 <clmt_clust>
 800e6ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800e6cc:	e007      	b.n	800e6de <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	69db      	ldr	r3, [r3, #28]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	f7fe fe04 	bl	800d2e4 <create_chain>
 800e6dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 8110 	beq.w	800e906 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d109      	bne.n	800e700 <f_write+0x11e>
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	755a      	strb	r2, [r3, #21]
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2102      	movs	r1, #2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe f974 	bl	800c9e4 <unlock_fs>
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e110      	b.n	800e922 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d109      	bne.n	800e71c <f_write+0x13a>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2201      	movs	r2, #1
 800e70c:	755a      	strb	r2, [r3, #21]
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2101      	movs	r1, #1
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe f966 	bl	800c9e4 <unlock_fs>
 800e718:	2301      	movs	r3, #1
 800e71a:	e102      	b.n	800e922 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e720:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d102      	bne.n	800e730 <f_write+0x14e>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e72e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	7d1b      	ldrb	r3, [r3, #20]
 800e734:	b25b      	sxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	da1d      	bge.n	800e776 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	7858      	ldrb	r0, [r3, #1]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6a1a      	ldr	r2, [r3, #32]
 800e748:	2301      	movs	r3, #1
 800e74a:	f7fd fff7 	bl	800c73c <disk_write>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d009      	beq.n	800e768 <f_write+0x186>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2201      	movs	r2, #1
 800e758:	755a      	strb	r2, [r3, #21]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2101      	movs	r1, #1
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe f940 	bl	800c9e4 <unlock_fs>
 800e764:	2301      	movs	r3, #1
 800e766:	e0dc      	b.n	800e922 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	7d1b      	ldrb	r3, [r3, #20]
 800e76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e770:	b2da      	uxtb	r2, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	69db      	ldr	r3, [r3, #28]
 800e77c:	4619      	mov	r1, r3
 800e77e:	4610      	mov	r0, r2
 800e780:	f7fe fb98 	bl	800ceb4 <clust2sect>
 800e784:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d109      	bne.n	800e7a0 <f_write+0x1be>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2202      	movs	r2, #2
 800e790:	755a      	strb	r2, [r3, #21]
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	2102      	movs	r1, #2
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe f924 	bl	800c9e4 <unlock_fs>
 800e79c:	2302      	movs	r3, #2
 800e79e:	e0c0      	b.n	800e922 <f_write+0x340>
			sect += csect;
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	0a5b      	lsrs	r3, r3, #9
 800e7ac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d041      	beq.n	800e838 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e7b4:	69ba      	ldr	r2, [r7, #24]
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	693a      	ldr	r2, [r7, #16]
 800e7bc:	8952      	ldrh	r2, [r2, #10]
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d905      	bls.n	800e7ce <f_write+0x1ec>
					cc = fs->csize - csect;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	895b      	ldrh	r3, [r3, #10]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	1ad3      	subs	r3, r2, r3
 800e7cc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	7858      	ldrb	r0, [r3, #1]
 800e7d2:	6a3b      	ldr	r3, [r7, #32]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	69f9      	ldr	r1, [r7, #28]
 800e7d8:	f7fd ffb0 	bl	800c73c <disk_write>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d009      	beq.n	800e7f6 <f_write+0x214>
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	755a      	strb	r2, [r3, #21]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe f8f9 	bl	800c9e4 <unlock_fs>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e095      	b.n	800e922 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6a1a      	ldr	r2, [r3, #32]
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	6a3a      	ldr	r2, [r7, #32]
 800e800:	429a      	cmp	r2, r3
 800e802:	d915      	bls.n	800e830 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6a1a      	ldr	r2, [r3, #32]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	025b      	lsls	r3, r3, #9
 800e814:	69fa      	ldr	r2, [r7, #28]
 800e816:	4413      	add	r3, r2
 800e818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e81c:	4619      	mov	r1, r3
 800e81e:	f7fe f84d 	bl	800c8bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	7d1b      	ldrb	r3, [r3, #20]
 800e826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e830:	6a3b      	ldr	r3, [r7, #32]
 800e832:	025b      	lsls	r3, r3, #9
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e836:	e044      	b.n	800e8c2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d01b      	beq.n	800e87a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	699a      	ldr	r2, [r3, #24]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d215      	bcs.n	800e87a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	7858      	ldrb	r0, [r3, #1]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e858:	2301      	movs	r3, #1
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	f7fd ff4e 	bl	800c6fc <disk_read>
 800e860:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e862:	2b00      	cmp	r3, #0
 800e864:	d009      	beq.n	800e87a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	755a      	strb	r2, [r3, #21]
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	2101      	movs	r1, #1
 800e870:	4618      	mov	r0, r3
 800e872:	f7fe f8b7 	bl	800c9e4 <unlock_fs>
 800e876:	2301      	movs	r3, #1
 800e878:	e053      	b.n	800e922 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e888:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	429a      	cmp	r2, r3
 800e894:	d901      	bls.n	800e89a <f_write+0x2b8>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8a8:	4413      	add	r3, r2
 800e8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ac:	69f9      	ldr	r1, [r7, #28]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe f804 	bl	800c8bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	7d1b      	ldrb	r3, [r3, #20]
 800e8b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e8bc:	b2da      	uxtb	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e8c2:	69fa      	ldr	r2, [r7, #28]
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	4413      	add	r3, r2
 800e8c8:	61fb      	str	r3, [r7, #28]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	699a      	ldr	r2, [r3, #24]
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	441a      	add	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	619a      	str	r2, [r3, #24]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	68da      	ldr	r2, [r3, #12]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	bf38      	it	cc
 800e8e2:	461a      	movcc	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	60da      	str	r2, [r3, #12]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	441a      	add	r2, r3
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f47f aeb6 	bne.w	800e670 <f_write+0x8e>
 800e904:	e000      	b.n	800e908 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e906:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	7d1b      	ldrb	r3, [r3, #20]
 800e90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e910:	b2da      	uxtb	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	2100      	movs	r1, #0
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fe f862 	bl	800c9e4 <unlock_fs>
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3730      	adds	r7, #48	; 0x30
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b086      	sub	sp, #24
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f107 0208 	add.w	r2, r7, #8
 800e938:	4611      	mov	r1, r2
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff fbe0 	bl	800e100 <validate>
 800e940:	4603      	mov	r3, r0
 800e942:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e944:	7dfb      	ldrb	r3, [r7, #23]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d16d      	bne.n	800ea26 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	7d1b      	ldrb	r3, [r3, #20]
 800e94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e952:	2b00      	cmp	r3, #0
 800e954:	d067      	beq.n	800ea26 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	7d1b      	ldrb	r3, [r3, #20]
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	da1a      	bge.n	800e996 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	7858      	ldrb	r0, [r3, #1]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1a      	ldr	r2, [r3, #32]
 800e96e:	2301      	movs	r3, #1
 800e970:	f7fd fee4 	bl	800c73c <disk_write>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d006      	beq.n	800e988 <f_sync+0x5e>
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2101      	movs	r1, #1
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe f830 	bl	800c9e4 <unlock_fs>
 800e984:	2301      	movs	r3, #1
 800e986:	e055      	b.n	800ea34 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7d1b      	ldrb	r3, [r3, #20]
 800e98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e990:	b2da      	uxtb	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e996:	f7fd fc1b 	bl	800c1d0 <get_fattime>
 800e99a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	f7fe f9e9 	bl	800cd7c <move_window>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d138      	bne.n	800ea26 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	330b      	adds	r3, #11
 800e9be:	781a      	ldrb	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	330b      	adds	r3, #11
 800e9c4:	f042 0220 	orr.w	r2, r2, #32
 800e9c8:	b2d2      	uxtb	r2, r2
 800e9ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6818      	ldr	r0, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	68f9      	ldr	r1, [r7, #12]
 800e9d8:	f7fe fef6 	bl	800d7c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f103 021c 	add.w	r2, r3, #28
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	f7fd ff3b 	bl	800c864 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3316      	adds	r3, #22
 800e9f2:	6939      	ldr	r1, [r7, #16]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fd ff35 	bl	800c864 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3312      	adds	r3, #18
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fd ff14 	bl	800c82e <st_word>
					fs->wflag = 1;
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe f9e2 	bl	800cdd8 <sync_fs>
 800ea14:	4603      	mov	r3, r0
 800ea16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	7dfa      	ldrb	r2, [r7, #23]
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fd ffd9 	bl	800c9e4 <unlock_fs>
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff ff70 	bl	800e92a <f_sync>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d11d      	bne.n	800ea90 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f107 0208 	add.w	r2, r7, #8
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff fb4f 	bl	800e100 <validate>
 800ea62:	4603      	mov	r3, r0
 800ea64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d111      	bne.n	800ea90 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe f8df 	bl	800cc34 <dec_lock>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d102      	bne.n	800ea86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2100      	movs	r1, #0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd ffaa 	bl	800c9e4 <unlock_fs>
#endif
		}
	}
	return res;
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
	...

0800ea9c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ea9c:	b590      	push	{r4, r7, lr}
 800ea9e:	b09d      	sub	sp, #116	; 0x74
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	607a      	str	r2, [r7, #4]
 800eaa6:	603b      	str	r3, [r7, #0]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800eaac:	2301      	movs	r3, #1
 800eaae:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800eab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eab4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800eab6:	f107 030c 	add.w	r3, r7, #12
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff f831 	bl	800db22 <get_ldnumber>
 800eac0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	da02      	bge.n	800eace <f_mkfs+0x32>
 800eac8:	230b      	movs	r3, #11
 800eaca:	f000 bc0d 	b.w	800f2e8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800eace:	4a94      	ldr	r2, [pc, #592]	; (800ed20 <f_mkfs+0x284>)
 800ead0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <f_mkfs+0x4a>
 800eada:	4a91      	ldr	r2, [pc, #580]	; (800ed20 <f_mkfs+0x284>)
 800eadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae2:	2200      	movs	r2, #0
 800eae4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800eae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800eaec:	2300      	movs	r3, #0
 800eaee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800eaf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fd fdda 	bl	800c6b0 <disk_initialize>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800eb02:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eb06:	f003 0301 	and.w	r3, r3, #1
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <f_mkfs+0x76>
 800eb0e:	2303      	movs	r3, #3
 800eb10:	e3ea      	b.n	800f2e8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800eb12:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eb16:	f003 0304 	and.w	r3, r3, #4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <f_mkfs+0x86>
 800eb1e:	230a      	movs	r3, #10
 800eb20:	e3e2      	b.n	800f2e8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800eb22:	f107 0214 	add.w	r2, r7, #20
 800eb26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eb2a:	2103      	movs	r1, #3
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fd fe25 	bl	800c77c <disk_ioctl>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10c      	bne.n	800eb52 <f_mkfs+0xb6>
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <f_mkfs+0xb6>
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb44:	d805      	bhi.n	800eb52 <f_mkfs+0xb6>
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	1e5a      	subs	r2, r3, #1
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <f_mkfs+0xba>
 800eb52:	2301      	movs	r3, #1
 800eb54:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800eb56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb5a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d003      	beq.n	800eb6a <f_mkfs+0xce>
 800eb62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d309      	bcc.n	800eb7e <f_mkfs+0xe2>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb70:	d805      	bhi.n	800eb7e <f_mkfs+0xe2>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	1e5a      	subs	r2, r3, #1
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <f_mkfs+0xe6>
 800eb7e:	2313      	movs	r3, #19
 800eb80:	e3b2      	b.n	800f2e8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800eb82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb8a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800eb90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800eb9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	fb02 f303 	mul.w	r3, r2, r3
 800eba4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800eba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <f_mkfs+0x114>
 800ebac:	230e      	movs	r3, #14
 800ebae:	e39b      	b.n	800f2e8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800ebb0:	f107 0210 	add.w	r2, r7, #16
 800ebb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ebb8:	2101      	movs	r1, #1
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fd fdde 	bl	800c77c <disk_ioctl>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <f_mkfs+0x12e>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e38e      	b.n	800f2e8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800ebca:	7afb      	ldrb	r3, [r7, #11]
 800ebcc:	f003 0308 	and.w	r3, r3, #8
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d001      	beq.n	800ebd8 <f_mkfs+0x13c>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e000      	b.n	800ebda <f_mkfs+0x13e>
 800ebd8:	233f      	movs	r3, #63	; 0x3f
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d901      	bls.n	800ebe8 <f_mkfs+0x14c>
 800ebe4:	230e      	movs	r3, #14
 800ebe6:	e37f      	b.n	800f2e8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b7f      	cmp	r3, #127	; 0x7f
 800ebf4:	d801      	bhi.n	800ebfa <f_mkfs+0x15e>
 800ebf6:	230e      	movs	r3, #14
 800ebf8:	e376      	b.n	800f2e8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b80      	cmp	r3, #128	; 0x80
 800ebfe:	d901      	bls.n	800ec04 <f_mkfs+0x168>
 800ec00:	2313      	movs	r3, #19
 800ec02:	e371      	b.n	800f2e8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	f003 0302 	and.w	r3, r3, #2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00d      	beq.n	800ec2a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ec0e:	7afb      	ldrb	r3, [r7, #11]
 800ec10:	f003 0307 	and.w	r3, r3, #7
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d004      	beq.n	800ec22 <f_mkfs+0x186>
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d103      	bne.n	800ec2a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800ec22:	2303      	movs	r3, #3
 800ec24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec28:	e009      	b.n	800ec3e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ec2a:	7afb      	ldrb	r3, [r7, #11]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <f_mkfs+0x19c>
 800ec34:	2313      	movs	r3, #19
 800ec36:	e357      	b.n	800f2e8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ec38:	2302      	movs	r3, #2
 800ec3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ec42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d13c      	bne.n	800ecc4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ec4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d11b      	bne.n	800ec88 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	0c5b      	lsrs	r3, r3, #17
 800ec54:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ec56:	2300      	movs	r3, #0
 800ec58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ec5e:	e005      	b.n	800ec6c <f_mkfs+0x1d0>
 800ec60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec62:	3301      	adds	r3, #1
 800ec64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	653b      	str	r3, [r7, #80]	; 0x50
 800ec6c:	4a2d      	ldr	r2, [pc, #180]	; (800ed24 <f_mkfs+0x288>)
 800ec6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d007      	beq.n	800ec88 <f_mkfs+0x1ec>
 800ec78:	4a2a      	ldr	r2, [pc, #168]	; (800ed24 <f_mkfs+0x288>)
 800ec7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec80:	461a      	mov	r2, r3
 800ec82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d2eb      	bcs.n	800ec60 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec90:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ec92:	6a3b      	ldr	r3, [r7, #32]
 800ec94:	3302      	adds	r3, #2
 800ec96:	009a      	lsls	r2, r3, #2
 800ec98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec9a:	4413      	add	r3, r2
 800ec9c:	1e5a      	subs	r2, r3, #1
 800ec9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800eca6:	2320      	movs	r3, #32
 800eca8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ecaa:	2300      	movs	r3, #0
 800ecac:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d903      	bls.n	800ecc0 <f_mkfs+0x224>
 800ecb8:	6a3b      	ldr	r3, [r7, #32]
 800ecba:	4a1b      	ldr	r2, [pc, #108]	; (800ed28 <f_mkfs+0x28c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d952      	bls.n	800ed66 <f_mkfs+0x2ca>
 800ecc0:	230e      	movs	r3, #14
 800ecc2:	e311      	b.n	800f2e8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ecc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d11b      	bne.n	800ed02 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	0b1b      	lsrs	r3, r3, #12
 800ecce:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	653b      	str	r3, [r7, #80]	; 0x50
 800ecd8:	e005      	b.n	800ece6 <f_mkfs+0x24a>
 800ecda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecdc:	3301      	adds	r3, #1
 800ecde:	64bb      	str	r3, [r7, #72]	; 0x48
 800ece0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece2:	005b      	lsls	r3, r3, #1
 800ece4:	653b      	str	r3, [r7, #80]	; 0x50
 800ece6:	4a11      	ldr	r2, [pc, #68]	; (800ed2c <f_mkfs+0x290>)
 800ece8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d007      	beq.n	800ed02 <f_mkfs+0x266>
 800ecf2:	4a0e      	ldr	r2, [pc, #56]	; (800ed2c <f_mkfs+0x290>)
 800ecf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d2eb      	bcs.n	800ecda <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ed02:	693a      	ldr	r2, [r7, #16]
 800ed04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed0a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d90c      	bls.n	800ed30 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	3302      	adds	r3, #2
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed1e:	e012      	b.n	800ed46 <f_mkfs+0x2aa>
 800ed20:	240081d4 	.word	0x240081d4
 800ed24:	08013be8 	.word	0x08013be8
 800ed28:	0ffffff5 	.word	0x0ffffff5
 800ed2c:	08013bf8 	.word	0x08013bf8
				} else {
					fmt = FS_FAT12;
 800ed30:	2301      	movs	r3, #1
 800ed32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ed36:	6a3a      	ldr	r2, [r7, #32]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	3301      	adds	r3, #1
 800ed40:	085b      	lsrs	r3, r3, #1
 800ed42:	3303      	adds	r3, #3
 800ed44:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ed46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ed48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed4a:	4413      	add	r3, r2
 800ed4c:	1e5a      	subs	r2, r3, #1
 800ed4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed54:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800ed56:	2301      	movs	r3, #1
 800ed58:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ed5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed64:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ed66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed6a:	4413      	add	r3, r2
 800ed6c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ed6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed72:	fb02 f203 	mul.w	r2, r2, r3
 800ed76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed78:	4413      	add	r3, r2
 800ed7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed7c:	4413      	add	r3, r2
 800ed7e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	4413      	add	r3, r2
 800ed86:	1e5a      	subs	r2, r3, #1
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	425b      	negs	r3, r3
 800ed8c:	401a      	ands	r2, r3
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ed94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed98:	2b03      	cmp	r3, #3
 800ed9a:	d108      	bne.n	800edae <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ed9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eda0:	4413      	add	r3, r2
 800eda2:	657b      	str	r3, [r7, #84]	; 0x54
 800eda4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eda6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eda8:	4413      	add	r3, r2
 800edaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800edac:	e006      	b.n	800edbc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800edae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800edb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800edb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800edb8:	4413      	add	r3, r2
 800edba:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800edbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edbe:	011a      	lsls	r2, r3, #4
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	441a      	add	r2, r3
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	1ad2      	subs	r2, r2, r3
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d901      	bls.n	800edd2 <f_mkfs+0x336>
 800edce:	230e      	movs	r3, #14
 800edd0:	e28a      	b.n	800f2e8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eddc:	fb01 f303 	mul.w	r3, r1, r3
 800ede0:	1ad2      	subs	r2, r2, r3
 800ede2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede4:	1ad2      	subs	r2, r2, r3
 800ede6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ede8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edec:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800edee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d10f      	bne.n	800ee16 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800edf6:	6a3b      	ldr	r3, [r7, #32]
 800edf8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d80a      	bhi.n	800ee16 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d105      	bne.n	800ee12 <f_mkfs+0x376>
 800ee06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee08:	085b      	lsrs	r3, r3, #1
 800ee0a:	607b      	str	r3, [r7, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d144      	bne.n	800ee9c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ee12:	230e      	movs	r3, #14
 800ee14:	e268      	b.n	800f2e8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ee16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d133      	bne.n	800ee86 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d91e      	bls.n	800ee66 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d107      	bne.n	800ee3e <f_mkfs+0x3a2>
 800ee2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee30:	005b      	lsls	r3, r3, #1
 800ee32:	2b40      	cmp	r3, #64	; 0x40
 800ee34:	d803      	bhi.n	800ee3e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ee36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	607b      	str	r3, [r7, #4]
 800ee3c:	e033      	b.n	800eea6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ee3e:	7afb      	ldrb	r3, [r7, #11]
 800ee40:	f003 0302 	and.w	r3, r3, #2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d003      	beq.n	800ee50 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ee48:	2303      	movs	r3, #3
 800ee4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ee4e:	e02a      	b.n	800eea6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <f_mkfs+0x3c6>
 800ee56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	607b      	str	r3, [r7, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b80      	cmp	r3, #128	; 0x80
 800ee60:	d91e      	bls.n	800eea0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ee62:	230e      	movs	r3, #14
 800ee64:	e240      	b.n	800f2e8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d80a      	bhi.n	800ee86 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d105      	bne.n	800ee82 <f_mkfs+0x3e6>
 800ee76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	607b      	str	r3, [r7, #4]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b80      	cmp	r3, #128	; 0x80
 800ee80:	d910      	bls.n	800eea4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ee82:	230e      	movs	r3, #14
 800ee84:	e230      	b.n	800f2e8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ee86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d10c      	bne.n	800eea8 <f_mkfs+0x40c>
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d907      	bls.n	800eea8 <f_mkfs+0x40c>
 800ee98:	230e      	movs	r3, #14
 800ee9a:	e225      	b.n	800f2e8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ee9c:	bf00      	nop
 800ee9e:	e6ce      	b.n	800ec3e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800eea0:	bf00      	nop
 800eea2:	e6cc      	b.n	800ec3e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800eea4:	bf00      	nop
			pau = au;
 800eea6:	e6ca      	b.n	800ec3e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800eea8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800eeaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eeac:	461a      	mov	r2, r3
 800eeae:	2100      	movs	r1, #0
 800eeb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeb2:	f7fd fd24 	bl	800c8fe <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800eeb6:	220b      	movs	r2, #11
 800eeb8:	49bc      	ldr	r1, [pc, #752]	; (800f1ac <f_mkfs+0x710>)
 800eeba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eebc:	f7fd fcfe 	bl	800c8bc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	330b      	adds	r3, #11
 800eec4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd fcb0 	bl	800c82e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	330d      	adds	r3, #13
 800eed2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eed4:	b2d2      	uxtb	r2, r2
 800eed6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800eed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeda:	330e      	adds	r3, #14
 800eedc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eede:	b292      	uxth	r2, r2
 800eee0:	4611      	mov	r1, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fd fca3 	bl	800c82e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	3310      	adds	r3, #16
 800eeec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeee:	b2d2      	uxtb	r2, r2
 800eef0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	f103 0211 	add.w	r2, r3, #17
 800eef8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d002      	beq.n	800ef06 <f_mkfs+0x46a>
 800ef00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	e000      	b.n	800ef08 <f_mkfs+0x46c>
 800ef06:	2300      	movs	r3, #0
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	f7fd fc8f 	bl	800c82e <st_word>
		if (sz_vol < 0x10000) {
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef16:	d208      	bcs.n	800ef2a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ef18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1a:	3313      	adds	r3, #19
 800ef1c:	693a      	ldr	r2, [r7, #16]
 800ef1e:	b292      	uxth	r2, r2
 800ef20:	4611      	mov	r1, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fc83 	bl	800c82e <st_word>
 800ef28:	e006      	b.n	800ef38 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	3320      	adds	r3, #32
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	4611      	mov	r1, r2
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd fc96 	bl	800c864 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ef38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3a:	3315      	adds	r3, #21
 800ef3c:	22f8      	movs	r2, #248	; 0xf8
 800ef3e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	3318      	adds	r3, #24
 800ef44:	213f      	movs	r1, #63	; 0x3f
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fd fc71 	bl	800c82e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4e:	331a      	adds	r3, #26
 800ef50:	21ff      	movs	r1, #255	; 0xff
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fd fc6b 	bl	800c82e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	331c      	adds	r3, #28
 800ef5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fd fc80 	bl	800c864 <st_dword>
		if (fmt == FS_FAT32) {
 800ef64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	d131      	bne.n	800efd0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ef72:	f7fd f92d 	bl	800c1d0 <get_fattime>
 800ef76:	4603      	mov	r3, r0
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f7fd fc72 	bl	800c864 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	3324      	adds	r3, #36	; 0x24
 800ef84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fd fc6c 	bl	800c864 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	332c      	adds	r3, #44	; 0x2c
 800ef90:	2102      	movs	r1, #2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd fc66 	bl	800c864 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	3330      	adds	r3, #48	; 0x30
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fd fc45 	bl	800c82e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800efa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa6:	3332      	adds	r3, #50	; 0x32
 800efa8:	2106      	movs	r1, #6
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fd fc3f 	bl	800c82e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	3340      	adds	r3, #64	; 0x40
 800efb4:	2280      	movs	r2, #128	; 0x80
 800efb6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	3342      	adds	r3, #66	; 0x42
 800efbc:	2229      	movs	r2, #41	; 0x29
 800efbe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800efc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc2:	3347      	adds	r3, #71	; 0x47
 800efc4:	2213      	movs	r2, #19
 800efc6:	497a      	ldr	r1, [pc, #488]	; (800f1b0 <f_mkfs+0x714>)
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fd fc77 	bl	800c8bc <mem_cpy>
 800efce:	e020      	b.n	800f012 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800efd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800efd6:	f7fd f8fb 	bl	800c1d0 <get_fattime>
 800efda:	4603      	mov	r3, r0
 800efdc:	4619      	mov	r1, r3
 800efde:	4620      	mov	r0, r4
 800efe0:	f7fd fc40 	bl	800c864 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	3316      	adds	r3, #22
 800efe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efea:	b292      	uxth	r2, r2
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fd fc1d 	bl	800c82e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	3324      	adds	r3, #36	; 0x24
 800eff8:	2280      	movs	r2, #128	; 0x80
 800effa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800effc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effe:	3326      	adds	r3, #38	; 0x26
 800f000:	2229      	movs	r2, #41	; 0x29
 800f002:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f006:	332b      	adds	r3, #43	; 0x2b
 800f008:	2213      	movs	r2, #19
 800f00a:	496a      	ldr	r1, [pc, #424]	; (800f1b4 <f_mkfs+0x718>)
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fd fc55 	bl	800c8bc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f014:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f018:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd fc06 	bl	800c82e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f022:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f026:	2301      	movs	r3, #1
 800f028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f02c:	f7fd fb86 	bl	800c73c <disk_write>
 800f030:	4603      	mov	r3, r0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d001      	beq.n	800f03a <f_mkfs+0x59e>
 800f036:	2301      	movs	r3, #1
 800f038:	e156      	b.n	800f2e8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f03a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f03e:	2b03      	cmp	r3, #3
 800f040:	d140      	bne.n	800f0c4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	1d9a      	adds	r2, r3, #6
 800f046:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f04a:	2301      	movs	r3, #1
 800f04c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f04e:	f7fd fb75 	bl	800c73c <disk_write>
			mem_set(buf, 0, ss);
 800f052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f054:	461a      	mov	r2, r3
 800f056:	2100      	movs	r1, #0
 800f058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f05a:	f7fd fc50 	bl	800c8fe <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f05e:	4956      	ldr	r1, [pc, #344]	; (800f1b8 <f_mkfs+0x71c>)
 800f060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f062:	f7fd fbff 	bl	800c864 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f06c:	4953      	ldr	r1, [pc, #332]	; (800f1bc <f_mkfs+0x720>)
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd fbf8 	bl	800c864 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	3b01      	subs	r3, #1
 800f07e:	4619      	mov	r1, r3
 800f080:	4610      	mov	r0, r2
 800f082:	f7fd fbef 	bl	800c864 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f088:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f08c:	2102      	movs	r1, #2
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd fbe8 	bl	800c864 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f096:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f09a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fd fbc5 	bl	800c82e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	1dda      	adds	r2, r3, #7
 800f0a8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0b0:	f7fd fb44 	bl	800c73c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f0bc:	2301      	movs	r3, #1
 800f0be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0c0:	f7fd fb3c 	bl	800c73c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ca:	f7fd fc18 	bl	800c8fe <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f0ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0d0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0d6:	e04b      	b.n	800f170 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f0d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f0dc:	2b03      	cmp	r3, #3
 800f0de:	d113      	bne.n	800f108 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f0e0:	f06f 0107 	mvn.w	r1, #7
 800f0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0e6:	f7fd fbbd 	bl	800c864 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	f04f 31ff 	mov.w	r1, #4294967295
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fd fbb6 	bl	800c864 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fa:	3308      	adds	r3, #8
 800f0fc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f100:	4618      	mov	r0, r3
 800f102:	f7fd fbaf 	bl	800c864 <st_dword>
 800f106:	e00b      	b.n	800f120 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f108:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d101      	bne.n	800f114 <f_mkfs+0x678>
 800f110:	4b2b      	ldr	r3, [pc, #172]	; (800f1c0 <f_mkfs+0x724>)
 800f112:	e001      	b.n	800f118 <f_mkfs+0x67c>
 800f114:	f06f 0307 	mvn.w	r3, #7
 800f118:	4619      	mov	r1, r3
 800f11a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f11c:	f7fd fba2 	bl	800c864 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f122:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	4293      	cmp	r3, r2
 800f12a:	bf28      	it	cs
 800f12c:	4613      	movcs	r3, r2
 800f12e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f130:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f136:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f13a:	f7fd faff 	bl	800c73c <disk_write>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <f_mkfs+0x6ac>
 800f144:	2301      	movs	r3, #1
 800f146:	e0cf      	b.n	800f2e8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f14a:	461a      	mov	r2, r3
 800f14c:	2100      	movs	r1, #0
 800f14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f150:	f7fd fbd5 	bl	800c8fe <mem_set>
				sect += n; nsect -= n;
 800f154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f158:	4413      	add	r3, r2
 800f15a:	667b      	str	r3, [r7, #100]	; 0x64
 800f15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1dc      	bne.n	800f124 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f16c:	3301      	adds	r3, #1
 800f16e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f174:	429a      	cmp	r2, r3
 800f176:	d3af      	bcc.n	800f0d8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f17c:	2b03      	cmp	r3, #3
 800f17e:	d101      	bne.n	800f184 <f_mkfs+0x6e8>
 800f180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f182:	e000      	b.n	800f186 <f_mkfs+0x6ea>
 800f184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f186:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	4293      	cmp	r3, r2
 800f18e:	bf28      	it	cs
 800f190:	4613      	movcs	r3, r2
 800f192:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f194:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f19c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f19e:	f7fd facd 	bl	800c73c <disk_write>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00d      	beq.n	800f1c4 <f_mkfs+0x728>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e09d      	b.n	800f2e8 <f_mkfs+0x84c>
 800f1ac:	08013a88 	.word	0x08013a88
 800f1b0:	08013a94 	.word	0x08013a94
 800f1b4:	08013aa8 	.word	0x08013aa8
 800f1b8:	41615252 	.word	0x41615252
 800f1bc:	61417272 	.word	0x61417272
 800f1c0:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800f1c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f1c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1c8:	4413      	add	r3, r2
 800f1ca:	667b      	str	r3, [r7, #100]	; 0x64
 800f1cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f1ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800f1d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1d6      	bne.n	800f188 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f1da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	d103      	bne.n	800f1ea <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f1e2:	230c      	movs	r3, #12
 800f1e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f1e8:	e010      	b.n	800f20c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1f0:	d303      	bcc.n	800f1fa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f1f2:	2306      	movs	r3, #6
 800f1f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f1f8:	e008      	b.n	800f20c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f1fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d101      	bne.n	800f206 <f_mkfs+0x76a>
 800f202:	2304      	movs	r3, #4
 800f204:	e000      	b.n	800f208 <f_mkfs+0x76c>
 800f206:	2301      	movs	r3, #1
 800f208:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f20c:	7afb      	ldrb	r3, [r7, #11]
 800f20e:	f003 0308 	and.w	r3, r3, #8
 800f212:	2b00      	cmp	r3, #0
 800f214:	d15b      	bne.n	800f2ce <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f218:	461a      	mov	r2, r3
 800f21a:	2100      	movs	r1, #0
 800f21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f21e:	f7fd fb6e 	bl	800c8fe <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f228:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fd fafe 	bl	800c82e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f238:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	2200      	movs	r2, #0
 800f23e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	3301      	adds	r3, #1
 800f244:	2201      	movs	r2, #1
 800f246:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	3302      	adds	r3, #2
 800f24c:	2201      	movs	r2, #1
 800f24e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	3303      	adds	r3, #3
 800f254:	2200      	movs	r2, #0
 800f256:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	3304      	adds	r3, #4
 800f25c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f260:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f262:	693a      	ldr	r2, [r7, #16]
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	441a      	add	r2, r3
 800f268:	4b21      	ldr	r3, [pc, #132]	; (800f2f0 <f_mkfs+0x854>)
 800f26a:	fba3 1302 	umull	r1, r3, r3, r2
 800f26e:	1ad2      	subs	r2, r2, r3
 800f270:	0852      	lsrs	r2, r2, #1
 800f272:	4413      	add	r3, r2
 800f274:	0b5b      	lsrs	r3, r3, #13
 800f276:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	3305      	adds	r3, #5
 800f27c:	22fe      	movs	r2, #254	; 0xfe
 800f27e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f282:	089b      	lsrs	r3, r3, #2
 800f284:	b2da      	uxtb	r2, r3
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	3306      	adds	r3, #6
 800f28a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f28e:	b2d2      	uxtb	r2, r2
 800f290:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	3307      	adds	r3, #7
 800f296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f298:	b2d2      	uxtb	r2, r2
 800f29a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	3308      	adds	r3, #8
 800f2a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fd fade 	bl	800c864 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	330c      	adds	r3, #12
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fd fad7 	bl	800c864 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f2b6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	2200      	movs	r2, #0
 800f2be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f2c0:	f7fd fa3c 	bl	800c73c <disk_write>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <f_mkfs+0x832>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e00c      	b.n	800f2e8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f2ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fd fa50 	bl	800c77c <disk_ioctl>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <f_mkfs+0x84a>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <f_mkfs+0x84c>

	return FR_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3774      	adds	r7, #116	; 0x74
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd90      	pop	{r4, r7, pc}
 800f2f0:	0515565b 	.word	0x0515565b

0800f2f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	4613      	mov	r3, r2
 800f300:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f302:	2301      	movs	r3, #1
 800f304:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f30a:	4b1f      	ldr	r3, [pc, #124]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f30c:	7a5b      	ldrb	r3, [r3, #9]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d131      	bne.n	800f378 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f314:	4b1c      	ldr	r3, [pc, #112]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f316:	7a5b      	ldrb	r3, [r3, #9]
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	461a      	mov	r2, r3
 800f31c:	4b1a      	ldr	r3, [pc, #104]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f31e:	2100      	movs	r1, #0
 800f320:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f322:	4b19      	ldr	r3, [pc, #100]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f324:	7a5b      	ldrb	r3, [r3, #9]
 800f326:	b2db      	uxtb	r3, r3
 800f328:	4a17      	ldr	r2, [pc, #92]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f332:	4b15      	ldr	r3, [pc, #84]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f334:	7a5b      	ldrb	r3, [r3, #9]
 800f336:	b2db      	uxtb	r3, r3
 800f338:	461a      	mov	r2, r3
 800f33a:	4b13      	ldr	r3, [pc, #76]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f33c:	4413      	add	r3, r2
 800f33e:	79fa      	ldrb	r2, [r7, #7]
 800f340:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f342:	4b11      	ldr	r3, [pc, #68]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f344:	7a5b      	ldrb	r3, [r3, #9]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	b2d1      	uxtb	r1, r2
 800f34c:	4a0e      	ldr	r2, [pc, #56]	; (800f388 <FATFS_LinkDriverEx+0x94>)
 800f34e:	7251      	strb	r1, [r2, #9]
 800f350:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f352:	7dbb      	ldrb	r3, [r7, #22]
 800f354:	3330      	adds	r3, #48	; 0x30
 800f356:	b2da      	uxtb	r2, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	3301      	adds	r3, #1
 800f360:	223a      	movs	r2, #58	; 0x3a
 800f362:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	3302      	adds	r3, #2
 800f368:	222f      	movs	r2, #47	; 0x2f
 800f36a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	3303      	adds	r3, #3
 800f370:	2200      	movs	r2, #0
 800f372:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f378:	7dfb      	ldrb	r3, [r7, #23]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	371c      	adds	r7, #28
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	240081fc 	.word	0x240081fc

0800f38c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f396:	2200      	movs	r2, #0
 800f398:	6839      	ldr	r1, [r7, #0]
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff ffaa 	bl	800f2f4 <FATFS_LinkDriverEx>
 800f3a0:	4603      	mov	r3, r0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	6039      	str	r1, [r7, #0]
 800f3b4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	2001      	movs	r0, #1
 800f3bc:	f000 f9ae 	bl	800f71c <osSemaphoreNew>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bf14      	ite	ne
 800f3ce:	2301      	movne	r3, #1
 800f3d0:	2300      	moveq	r3, #0
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	60fb      	str	r3, [r7, #12]

    return ret;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fab7 	bl	800f95c <osSemaphoreDelete>
#endif
    return 1;
 800f3ee:	2301      	movs	r3, #1
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fa11 	bl	800f830 <osSemaphoreAcquire>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f414:	2301      	movs	r3, #1
 800f416:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f418:	68fb      	ldr	r3, [r7, #12]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fa52 	bl	800f8d4 <osSemaphoreRelease>
#endif
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <__NVIC_SetPriority>:
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	6039      	str	r1, [r7, #0]
 800f442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	db0a      	blt.n	800f462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	b2da      	uxtb	r2, r3
 800f450:	490c      	ldr	r1, [pc, #48]	; (800f484 <__NVIC_SetPriority+0x4c>)
 800f452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f456:	0112      	lsls	r2, r2, #4
 800f458:	b2d2      	uxtb	r2, r2
 800f45a:	440b      	add	r3, r1
 800f45c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f460:	e00a      	b.n	800f478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	b2da      	uxtb	r2, r3
 800f466:	4908      	ldr	r1, [pc, #32]	; (800f488 <__NVIC_SetPriority+0x50>)
 800f468:	88fb      	ldrh	r3, [r7, #6]
 800f46a:	f003 030f 	and.w	r3, r3, #15
 800f46e:	3b04      	subs	r3, #4
 800f470:	0112      	lsls	r2, r2, #4
 800f472:	b2d2      	uxtb	r2, r2
 800f474:	440b      	add	r3, r1
 800f476:	761a      	strb	r2, [r3, #24]
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	e000e100 	.word	0xe000e100
 800f488:	e000ed00 	.word	0xe000ed00

0800f48c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f48c:	b580      	push	{r7, lr}
 800f48e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f490:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <SysTick_Handler+0x1c>)
 800f492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f494:	f002 fc8c 	bl	8011db0 <xTaskGetSchedulerState>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d001      	beq.n	800f4a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f49e:	f003 fb73 	bl	8012b88 <xPortSysTickHandler>
  }
}
 800f4a2:	bf00      	nop
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	e000e010 	.word	0xe000e010

0800f4ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	f06f 0004 	mvn.w	r0, #4
 800f4b6:	f7ff ffbf 	bl	800f438 <__NVIC_SetPriority>
#endif
}
 800f4ba:	bf00      	nop
 800f4bc:	bd80      	pop	{r7, pc}
	...

0800f4c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4c6:	f3ef 8305 	mrs	r3, IPSR
 800f4ca:	603b      	str	r3, [r7, #0]
  return(result);
 800f4cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d003      	beq.n	800f4da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f4d2:	f06f 0305 	mvn.w	r3, #5
 800f4d6:	607b      	str	r3, [r7, #4]
 800f4d8:	e00c      	b.n	800f4f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f4da:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <osKernelInitialize+0x44>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d105      	bne.n	800f4ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f4e2:	4b08      	ldr	r3, [pc, #32]	; (800f504 <osKernelInitialize+0x44>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	607b      	str	r3, [r7, #4]
 800f4ec:	e002      	b.n	800f4f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f4f4:	687b      	ldr	r3, [r7, #4]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	24008208 	.word	0x24008208

0800f508 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f50e:	f002 fc4f 	bl	8011db0 <xTaskGetSchedulerState>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d004      	beq.n	800f522 <osKernelGetState+0x1a>
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d105      	bne.n	800f528 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f51c:	2302      	movs	r3, #2
 800f51e:	607b      	str	r3, [r7, #4]
      break;
 800f520:	e00c      	b.n	800f53c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f522:	2303      	movs	r3, #3
 800f524:	607b      	str	r3, [r7, #4]
      break;
 800f526:	e009      	b.n	800f53c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f528:	4b07      	ldr	r3, [pc, #28]	; (800f548 <osKernelGetState+0x40>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d102      	bne.n	800f536 <osKernelGetState+0x2e>
        state = osKernelReady;
 800f530:	2301      	movs	r3, #1
 800f532:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f534:	e001      	b.n	800f53a <osKernelGetState+0x32>
        state = osKernelInactive;
 800f536:	2300      	movs	r3, #0
 800f538:	607b      	str	r3, [r7, #4]
      break;
 800f53a:	bf00      	nop
  }

  return (state);
 800f53c:	687b      	ldr	r3, [r7, #4]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3708      	adds	r7, #8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	24008208 	.word	0x24008208

0800f54c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f552:	f3ef 8305 	mrs	r3, IPSR
 800f556:	603b      	str	r3, [r7, #0]
  return(result);
 800f558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f55e:	f06f 0305 	mvn.w	r3, #5
 800f562:	607b      	str	r3, [r7, #4]
 800f564:	e010      	b.n	800f588 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f566:	4b0b      	ldr	r3, [pc, #44]	; (800f594 <osKernelStart+0x48>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d109      	bne.n	800f582 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f56e:	f7ff ff9d 	bl	800f4ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f572:	4b08      	ldr	r3, [pc, #32]	; (800f594 <osKernelStart+0x48>)
 800f574:	2202      	movs	r2, #2
 800f576:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f578:	f001 ffac 	bl	80114d4 <vTaskStartScheduler>
      stat = osOK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	607b      	str	r3, [r7, #4]
 800f580:	e002      	b.n	800f588 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f582:	f04f 33ff 	mov.w	r3, #4294967295
 800f586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f588:	687b      	ldr	r3, [r7, #4]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	24008208 	.word	0x24008208

0800f598 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f59e:	f3ef 8305 	mrs	r3, IPSR
 800f5a2:	603b      	str	r3, [r7, #0]
  return(result);
 800f5a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d003      	beq.n	800f5b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f5aa:	f002 f8bf 	bl	801172c <xTaskGetTickCountFromISR>
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	e002      	b.n	800f5b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f5b2:	f002 f8ab 	bl	801170c <xTaskGetTickCount>
 800f5b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f5b8:	687b      	ldr	r3, [r7, #4]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b08e      	sub	sp, #56	; 0x38
 800f5c6:	af04      	add	r7, sp, #16
 800f5c8:	60f8      	str	r0, [r7, #12]
 800f5ca:	60b9      	str	r1, [r7, #8]
 800f5cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5d2:	f3ef 8305 	mrs	r3, IPSR
 800f5d6:	617b      	str	r3, [r7, #20]
  return(result);
 800f5d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d17e      	bne.n	800f6dc <osThreadNew+0x11a>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d07b      	beq.n	800f6dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f5e4:	2380      	movs	r3, #128	; 0x80
 800f5e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f5e8:	2318      	movs	r3, #24
 800f5ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d045      	beq.n	800f688 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d002      	beq.n	800f60a <osThreadNew+0x48>
        name = attr->name;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	699b      	ldr	r3, [r3, #24]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d002      	beq.n	800f618 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d008      	beq.n	800f630 <osThreadNew+0x6e>
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	2b38      	cmp	r3, #56	; 0x38
 800f622:	d805      	bhi.n	800f630 <osThreadNew+0x6e>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	f003 0301 	and.w	r3, r3, #1
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <osThreadNew+0x72>
        return (NULL);
 800f630:	2300      	movs	r3, #0
 800f632:	e054      	b.n	800f6de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	695b      	ldr	r3, [r3, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d003      	beq.n	800f644 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	695b      	ldr	r3, [r3, #20]
 800f640:	089b      	lsrs	r3, r3, #2
 800f642:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00e      	beq.n	800f66a <osThreadNew+0xa8>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	2bbb      	cmp	r3, #187	; 0xbb
 800f652:	d90a      	bls.n	800f66a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d006      	beq.n	800f66a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	695b      	ldr	r3, [r3, #20]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d002      	beq.n	800f66a <osThreadNew+0xa8>
        mem = 1;
 800f664:	2301      	movs	r3, #1
 800f666:	61bb      	str	r3, [r7, #24]
 800f668:	e010      	b.n	800f68c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10c      	bne.n	800f68c <osThreadNew+0xca>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d108      	bne.n	800f68c <osThreadNew+0xca>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d104      	bne.n	800f68c <osThreadNew+0xca>
          mem = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	e001      	b.n	800f68c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f688:	2300      	movs	r3, #0
 800f68a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d110      	bne.n	800f6b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f69a:	9202      	str	r2, [sp, #8]
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	6a3a      	ldr	r2, [r7, #32]
 800f6a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f001 fba3 	bl	8010df4 <xTaskCreateStatic>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	613b      	str	r3, [r7, #16]
 800f6b2:	e013      	b.n	800f6dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d110      	bne.n	800f6dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	f107 0310 	add.w	r3, r7, #16
 800f6c2:	9301      	str	r3, [sp, #4]
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f001 fbee 	bl	8010eae <xTaskCreate>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d001      	beq.n	800f6dc <osThreadNew+0x11a>
            hTask = NULL;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f6dc:	693b      	ldr	r3, [r7, #16]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3728      	adds	r7, #40	; 0x28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6ee:	f3ef 8305 	mrs	r3, IPSR
 800f6f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <osDelay+0x1c>
    stat = osErrorISR;
 800f6fa:	f06f 0305 	mvn.w	r3, #5
 800f6fe:	60fb      	str	r3, [r7, #12]
 800f700:	e007      	b.n	800f712 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f702:	2300      	movs	r3, #0
 800f704:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f001 fda7 	bl	8011260 <vTaskDelay>
    }
  }

  return (stat);
 800f712:	68fb      	ldr	r3, [r7, #12]
}
 800f714:	4618      	mov	r0, r3
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b08a      	sub	sp, #40	; 0x28
 800f720:	af02      	add	r7, sp, #8
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f728:	2300      	movs	r3, #0
 800f72a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f72c:	f3ef 8305 	mrs	r3, IPSR
 800f730:	613b      	str	r3, [r7, #16]
  return(result);
 800f732:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f734:	2b00      	cmp	r3, #0
 800f736:	d175      	bne.n	800f824 <osSemaphoreNew+0x108>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d072      	beq.n	800f824 <osSemaphoreNew+0x108>
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	429a      	cmp	r2, r3
 800f744:	d86e      	bhi.n	800f824 <osSemaphoreNew+0x108>
    mem = -1;
 800f746:	f04f 33ff 	mov.w	r3, #4294967295
 800f74a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d015      	beq.n	800f77e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d006      	beq.n	800f768 <osSemaphoreNew+0x4c>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	2b4f      	cmp	r3, #79	; 0x4f
 800f760:	d902      	bls.n	800f768 <osSemaphoreNew+0x4c>
        mem = 1;
 800f762:	2301      	movs	r3, #1
 800f764:	61bb      	str	r3, [r7, #24]
 800f766:	e00c      	b.n	800f782 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d108      	bne.n	800f782 <osSemaphoreNew+0x66>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d104      	bne.n	800f782 <osSemaphoreNew+0x66>
          mem = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	61bb      	str	r3, [r7, #24]
 800f77c:	e001      	b.n	800f782 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f788:	d04c      	beq.n	800f824 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d128      	bne.n	800f7e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d10a      	bne.n	800f7ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	2203      	movs	r2, #3
 800f79c:	9200      	str	r2, [sp, #0]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	2001      	movs	r0, #1
 800f7a4:	f000 fb80 	bl	800fea8 <xQueueGenericCreateStatic>
 800f7a8:	61f8      	str	r0, [r7, #28]
 800f7aa:	e005      	b.n	800f7b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f7ac:	2203      	movs	r2, #3
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f000 fbf1 	bl	800ff98 <xQueueGenericCreate>
 800f7b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d022      	beq.n	800f804 <osSemaphoreNew+0xe8>
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d01f      	beq.n	800f804 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	69f8      	ldr	r0, [r7, #28]
 800f7cc:	f000 fcac 	bl	8010128 <xQueueGenericSend>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d016      	beq.n	800f804 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f7d6:	69f8      	ldr	r0, [r7, #28]
 800f7d8:	f001 f938 	bl	8010a4c <vQueueDelete>
            hSemaphore = NULL;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	61fb      	str	r3, [r7, #28]
 800f7e0:	e010      	b.n	800f804 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d108      	bne.n	800f7fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 fc2e 	bl	8010052 <xQueueCreateCountingSemaphoreStatic>
 800f7f6:	61f8      	str	r0, [r7, #28]
 800f7f8:	e004      	b.n	800f804 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f7fa:	68b9      	ldr	r1, [r7, #8]
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f000 fc5f 	bl	80100c0 <xQueueCreateCountingSemaphore>
 800f802:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00c      	beq.n	800f824 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e001      	b.n	800f81c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f818:	2300      	movs	r3, #0
 800f81a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f81c:	6979      	ldr	r1, [r7, #20]
 800f81e:	69f8      	ldr	r0, [r7, #28]
 800f820:	f001 fa60 	bl	8010ce4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f824:	69fb      	ldr	r3, [r7, #28]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f83e:	2300      	movs	r3, #0
 800f840:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d103      	bne.n	800f850 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f848:	f06f 0303 	mvn.w	r3, #3
 800f84c:	617b      	str	r3, [r7, #20]
 800f84e:	e039      	b.n	800f8c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f850:	f3ef 8305 	mrs	r3, IPSR
 800f854:	60fb      	str	r3, [r7, #12]
  return(result);
 800f856:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d022      	beq.n	800f8a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f862:	f06f 0303 	mvn.w	r3, #3
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	e02c      	b.n	800f8c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f86e:	f107 0308 	add.w	r3, r7, #8
 800f872:	461a      	mov	r2, r3
 800f874:	2100      	movs	r1, #0
 800f876:	6938      	ldr	r0, [r7, #16]
 800f878:	f001 f868 	bl	801094c <xQueueReceiveFromISR>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d003      	beq.n	800f88a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f882:	f06f 0302 	mvn.w	r3, #2
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e01c      	b.n	800f8c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d019      	beq.n	800f8c4 <osSemaphoreAcquire+0x94>
 800f890:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <osSemaphoreAcquire+0xa0>)
 800f892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	e010      	b.n	800f8c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	6938      	ldr	r0, [r7, #16]
 800f8a6:	f000 ff45 	bl	8010734 <xQueueSemaphoreTake>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d009      	beq.n	800f8c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d003      	beq.n	800f8be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f8b6:	f06f 0301 	mvn.w	r3, #1
 800f8ba:	617b      	str	r3, [r7, #20]
 800f8bc:	e002      	b.n	800f8c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f8be:	f06f 0302 	mvn.w	r3, #2
 800f8c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f8c4:	697b      	ldr	r3, [r7, #20]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	e000ed04 	.word	0xe000ed04

0800f8d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d103      	bne.n	800f8f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f8ea:	f06f 0303 	mvn.w	r3, #3
 800f8ee:	617b      	str	r3, [r7, #20]
 800f8f0:	e02c      	b.n	800f94c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8f2:	f3ef 8305 	mrs	r3, IPSR
 800f8f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d01a      	beq.n	800f934 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f8fe:	2300      	movs	r3, #0
 800f900:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f902:	f107 0308 	add.w	r3, r7, #8
 800f906:	4619      	mov	r1, r3
 800f908:	6938      	ldr	r0, [r7, #16]
 800f90a:	f000 fda6 	bl	801045a <xQueueGiveFromISR>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b01      	cmp	r3, #1
 800f912:	d003      	beq.n	800f91c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f914:	f06f 0302 	mvn.w	r3, #2
 800f918:	617b      	str	r3, [r7, #20]
 800f91a:	e017      	b.n	800f94c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d014      	beq.n	800f94c <osSemaphoreRelease+0x78>
 800f922:	4b0d      	ldr	r3, [pc, #52]	; (800f958 <osSemaphoreRelease+0x84>)
 800f924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f928:	601a      	str	r2, [r3, #0]
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	e00b      	b.n	800f94c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f934:	2300      	movs	r3, #0
 800f936:	2200      	movs	r2, #0
 800f938:	2100      	movs	r1, #0
 800f93a:	6938      	ldr	r0, [r7, #16]
 800f93c:	f000 fbf4 	bl	8010128 <xQueueGenericSend>
 800f940:	4603      	mov	r3, r0
 800f942:	2b01      	cmp	r3, #1
 800f944:	d002      	beq.n	800f94c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f946:	f06f 0302 	mvn.w	r3, #2
 800f94a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f94c:	697b      	ldr	r3, [r7, #20]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3718      	adds	r7, #24
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	e000ed04 	.word	0xe000ed04

0800f95c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f968:	f3ef 8305 	mrs	r3, IPSR
 800f96c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f96e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f970:	2b00      	cmp	r3, #0
 800f972:	d003      	beq.n	800f97c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f974:	f06f 0305 	mvn.w	r3, #5
 800f978:	617b      	str	r3, [r7, #20]
 800f97a:	e00e      	b.n	800f99a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d103      	bne.n	800f98a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f982:	f06f 0303 	mvn.w	r3, #3
 800f986:	617b      	str	r3, [r7, #20]
 800f988:	e007      	b.n	800f99a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f98a:	6938      	ldr	r0, [r7, #16]
 800f98c:	f001 f9d4 	bl	8010d38 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f990:	2300      	movs	r3, #0
 800f992:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f994:	6938      	ldr	r0, [r7, #16]
 800f996:	f001 f859 	bl	8010a4c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f99a:	697b      	ldr	r3, [r7, #20]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	; 0x28
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9b4:	f3ef 8305 	mrs	r3, IPSR
 800f9b8:	613b      	str	r3, [r7, #16]
  return(result);
 800f9ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d15f      	bne.n	800fa80 <osMessageQueueNew+0xdc>
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d05c      	beq.n	800fa80 <osMessageQueueNew+0xdc>
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d059      	beq.n	800fa80 <osMessageQueueNew+0xdc>
    mem = -1;
 800f9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d029      	beq.n	800fa2c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d012      	beq.n	800fa06 <osMessageQueueNew+0x62>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	2b4f      	cmp	r3, #79	; 0x4f
 800f9e6:	d90e      	bls.n	800fa06 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00a      	beq.n	800fa06 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	695a      	ldr	r2, [r3, #20]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	68b9      	ldr	r1, [r7, #8]
 800f9f8:	fb01 f303 	mul.w	r3, r1, r3
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d302      	bcc.n	800fa06 <osMessageQueueNew+0x62>
        mem = 1;
 800fa00:	2301      	movs	r3, #1
 800fa02:	61bb      	str	r3, [r7, #24]
 800fa04:	e014      	b.n	800fa30 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d110      	bne.n	800fa30 <osMessageQueueNew+0x8c>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10c      	bne.n	800fa30 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d108      	bne.n	800fa30 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d104      	bne.n	800fa30 <osMessageQueueNew+0x8c>
          mem = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	61bb      	str	r3, [r7, #24]
 800fa2a:	e001      	b.n	800fa30 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d10b      	bne.n	800fa4e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	691a      	ldr	r2, [r3, #16]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	2100      	movs	r1, #0
 800fa40:	9100      	str	r1, [sp, #0]
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f000 fa2f 	bl	800fea8 <xQueueGenericCreateStatic>
 800fa4a:	61f8      	str	r0, [r7, #28]
 800fa4c:	e008      	b.n	800fa60 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d105      	bne.n	800fa60 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fa54:	2200      	movs	r2, #0
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fa9d 	bl	800ff98 <xQueueGenericCreate>
 800fa5e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00c      	beq.n	800fa80 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d003      	beq.n	800fa74 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	617b      	str	r3, [r7, #20]
 800fa72:	e001      	b.n	800fa78 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fa74:	2300      	movs	r3, #0
 800fa76:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fa78:	6979      	ldr	r1, [r7, #20]
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	f001 f932 	bl	8010ce4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fa80:	69fb      	ldr	r3, [r7, #28]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3720      	adds	r7, #32
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	603b      	str	r3, [r7, #0]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800faa0:	2300      	movs	r3, #0
 800faa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faa4:	f3ef 8305 	mrs	r3, IPSR
 800faa8:	617b      	str	r3, [r7, #20]
  return(result);
 800faaa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800faac:	2b00      	cmp	r3, #0
 800faae:	d028      	beq.n	800fb02 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <osMessageQueuePut+0x36>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <osMessageQueuePut+0x36>
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fac2:	f06f 0303 	mvn.w	r3, #3
 800fac6:	61fb      	str	r3, [r7, #28]
 800fac8:	e038      	b.n	800fb3c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800faca:	2300      	movs	r3, #0
 800facc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800face:	f107 0210 	add.w	r2, r7, #16
 800fad2:	2300      	movs	r3, #0
 800fad4:	68b9      	ldr	r1, [r7, #8]
 800fad6:	69b8      	ldr	r0, [r7, #24]
 800fad8:	f000 fc24 	bl	8010324 <xQueueGenericSendFromISR>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d003      	beq.n	800faea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fae2:	f06f 0302 	mvn.w	r3, #2
 800fae6:	61fb      	str	r3, [r7, #28]
 800fae8:	e028      	b.n	800fb3c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d025      	beq.n	800fb3c <osMessageQueuePut+0xb0>
 800faf0:	4b15      	ldr	r3, [pc, #84]	; (800fb48 <osMessageQueuePut+0xbc>)
 800faf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	e01c      	b.n	800fb3c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d002      	beq.n	800fb0e <osMessageQueuePut+0x82>
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d103      	bne.n	800fb16 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fb0e:	f06f 0303 	mvn.w	r3, #3
 800fb12:	61fb      	str	r3, [r7, #28]
 800fb14:	e012      	b.n	800fb3c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fb16:	2300      	movs	r3, #0
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	68b9      	ldr	r1, [r7, #8]
 800fb1c:	69b8      	ldr	r0, [r7, #24]
 800fb1e:	f000 fb03 	bl	8010128 <xQueueGenericSend>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d009      	beq.n	800fb3c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fb2e:	f06f 0301 	mvn.w	r3, #1
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	e002      	b.n	800fb3c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fb36:	f06f 0302 	mvn.w	r3, #2
 800fb3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fb3c:	69fb      	ldr	r3, [r7, #28]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3720      	adds	r7, #32
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	e000ed04 	.word	0xe000ed04

0800fb4c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb62:	f3ef 8305 	mrs	r3, IPSR
 800fb66:	617b      	str	r3, [r7, #20]
  return(result);
 800fb68:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d028      	beq.n	800fbc0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d005      	beq.n	800fb80 <osMessageQueueGet+0x34>
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d002      	beq.n	800fb80 <osMessageQueueGet+0x34>
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d003      	beq.n	800fb88 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fb80:	f06f 0303 	mvn.w	r3, #3
 800fb84:	61fb      	str	r3, [r7, #28]
 800fb86:	e037      	b.n	800fbf8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fb8c:	f107 0310 	add.w	r3, r7, #16
 800fb90:	461a      	mov	r2, r3
 800fb92:	68b9      	ldr	r1, [r7, #8]
 800fb94:	69b8      	ldr	r0, [r7, #24]
 800fb96:	f000 fed9 	bl	801094c <xQueueReceiveFromISR>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d003      	beq.n	800fba8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fba0:	f06f 0302 	mvn.w	r3, #2
 800fba4:	61fb      	str	r3, [r7, #28]
 800fba6:	e027      	b.n	800fbf8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d024      	beq.n	800fbf8 <osMessageQueueGet+0xac>
 800fbae:	4b15      	ldr	r3, [pc, #84]	; (800fc04 <osMessageQueueGet+0xb8>)
 800fbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	f3bf 8f4f 	dsb	sy
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	e01b      	b.n	800fbf8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d002      	beq.n	800fbcc <osMessageQueueGet+0x80>
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d103      	bne.n	800fbd4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fbcc:	f06f 0303 	mvn.w	r3, #3
 800fbd0:	61fb      	str	r3, [r7, #28]
 800fbd2:	e011      	b.n	800fbf8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	68b9      	ldr	r1, [r7, #8]
 800fbd8:	69b8      	ldr	r0, [r7, #24]
 800fbda:	f000 fccb 	bl	8010574 <xQueueReceive>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d009      	beq.n	800fbf8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d003      	beq.n	800fbf2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fbea:	f06f 0301 	mvn.w	r3, #1
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e002      	b.n	800fbf8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fbf2:	f06f 0302 	mvn.w	r3, #2
 800fbf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fbf8:	69fb      	ldr	r3, [r7, #28]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3720      	adds	r7, #32
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	e000ed04 	.word	0xe000ed04

0800fc08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4a07      	ldr	r2, [pc, #28]	; (800fc34 <vApplicationGetIdleTaskMemory+0x2c>)
 800fc18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	4a06      	ldr	r2, [pc, #24]	; (800fc38 <vApplicationGetIdleTaskMemory+0x30>)
 800fc1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2280      	movs	r2, #128	; 0x80
 800fc24:	601a      	str	r2, [r3, #0]
}
 800fc26:	bf00      	nop
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	2400820c 	.word	0x2400820c
 800fc38:	240082c8 	.word	0x240082c8

0800fc3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4a07      	ldr	r2, [pc, #28]	; (800fc68 <vApplicationGetTimerTaskMemory+0x2c>)
 800fc4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	4a06      	ldr	r2, [pc, #24]	; (800fc6c <vApplicationGetTimerTaskMemory+0x30>)
 800fc52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc5a:	601a      	str	r2, [r3, #0]
}
 800fc5c:	bf00      	nop
 800fc5e:	3714      	adds	r7, #20
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	240084c8 	.word	0x240084c8
 800fc6c:	24008584 	.word	0x24008584

0800fc70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f103 0208 	add.w	r2, r3, #8
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f04f 32ff 	mov.w	r2, #4294967295
 800fc88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f103 0208 	add.w	r2, r3, #8
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f103 0208 	add.w	r2, r3, #8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fcbe:	bf00      	nop
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcca:	b480      	push	{r7}
 800fccc:	b085      	sub	sp, #20
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	689a      	ldr	r2, [r3, #8]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	683a      	ldr	r2, [r7, #0]
 800fcee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	683a      	ldr	r2, [r7, #0]
 800fcf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	1c5a      	adds	r2, r3, #1
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	601a      	str	r2, [r3, #0]
}
 800fd06:	bf00      	nop
 800fd08:	3714      	adds	r7, #20
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd12:	b480      	push	{r7}
 800fd14:	b085      	sub	sp, #20
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd28:	d103      	bne.n	800fd32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	e00c      	b.n	800fd4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3308      	adds	r3, #8
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	e002      	b.n	800fd40 <vListInsert+0x2e>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d2f6      	bcs.n	800fd3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	601a      	str	r2, [r3, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	3714      	adds	r7, #20
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691b      	ldr	r3, [r3, #16]
 800fd90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	6892      	ldr	r2, [r2, #8]
 800fd9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	6852      	ldr	r2, [r2, #4]
 800fda4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d103      	bne.n	800fdb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689a      	ldr	r2, [r3, #8]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	1e5a      	subs	r2, r3, #1
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fdfe:	bf00      	nop
 800fe00:	e7fe      	b.n	800fe00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fe02:	f002 fe2f 	bl	8012a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe0e:	68f9      	ldr	r1, [r7, #12]
 800fe10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe12:	fb01 f303 	mul.w	r3, r1, r3
 800fe16:	441a      	add	r2, r3
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe32:	3b01      	subs	r3, #1
 800fe34:	68f9      	ldr	r1, [r7, #12]
 800fe36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe38:	fb01 f303 	mul.w	r3, r1, r3
 800fe3c:	441a      	add	r2, r3
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	22ff      	movs	r2, #255	; 0xff
 800fe46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	22ff      	movs	r2, #255	; 0xff
 800fe4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d114      	bne.n	800fe82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	691b      	ldr	r3, [r3, #16]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d01a      	beq.n	800fe96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	3310      	adds	r3, #16
 800fe64:	4618      	mov	r0, r3
 800fe66:	f001 fde1 	bl	8011a2c <xTaskRemoveFromEventList>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d012      	beq.n	800fe96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe70:	4b0c      	ldr	r3, [pc, #48]	; (800fea4 <xQueueGenericReset+0xcc>)
 800fe72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	e009      	b.n	800fe96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3310      	adds	r3, #16
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff fef2 	bl	800fc70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3324      	adds	r3, #36	; 0x24
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff feed 	bl	800fc70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe96:	f002 fe15 	bl	8012ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe9a:	2301      	movs	r3, #1
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	e000ed04 	.word	0xe000ed04

0800fea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b08e      	sub	sp, #56	; 0x38
 800feac:	af02      	add	r7, sp, #8
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
 800feb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10a      	bne.n	800fed2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fece:	bf00      	nop
 800fed0:	e7fe      	b.n	800fed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10a      	bne.n	800feee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800feea:	bf00      	nop
 800feec:	e7fe      	b.n	800feec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <xQueueGenericCreateStatic+0x52>
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <xQueueGenericCreateStatic+0x56>
 800fefa:	2301      	movs	r3, #1
 800fefc:	e000      	b.n	800ff00 <xQueueGenericCreateStatic+0x58>
 800fefe:	2300      	movs	r3, #0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	f383 8811 	msr	BASEPRI, r3
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	623b      	str	r3, [r7, #32]
}
 800ff16:	bf00      	nop
 800ff18:	e7fe      	b.n	800ff18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d102      	bne.n	800ff26 <xQueueGenericCreateStatic+0x7e>
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d101      	bne.n	800ff2a <xQueueGenericCreateStatic+0x82>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <xQueueGenericCreateStatic+0x84>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10a      	bne.n	800ff46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ff30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	61fb      	str	r3, [r7, #28]
}
 800ff42:	bf00      	nop
 800ff44:	e7fe      	b.n	800ff44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff46:	2350      	movs	r3, #80	; 0x50
 800ff48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	2b50      	cmp	r3, #80	; 0x50
 800ff4e:	d00a      	beq.n	800ff66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ff50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff54:	f383 8811 	msr	BASEPRI, r3
 800ff58:	f3bf 8f6f 	isb	sy
 800ff5c:	f3bf 8f4f 	dsb	sy
 800ff60:	61bb      	str	r3, [r7, #24]
}
 800ff62:	bf00      	nop
 800ff64:	e7fe      	b.n	800ff64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00d      	beq.n	800ff8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	4613      	mov	r3, r2
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	68b9      	ldr	r1, [r7, #8]
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 f83f 	bl	801000c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3730      	adds	r7, #48	; 0x30
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08a      	sub	sp, #40	; 0x28
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d10a      	bne.n	800ffc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ffac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb0:	f383 8811 	msr	BASEPRI, r3
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	613b      	str	r3, [r7, #16]
}
 800ffbe:	bf00      	nop
 800ffc0:	e7fe      	b.n	800ffc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	68ba      	ldr	r2, [r7, #8]
 800ffc6:	fb02 f303 	mul.w	r3, r2, r3
 800ffca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	3350      	adds	r3, #80	; 0x50
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f002 fe69 	bl	8012ca8 <pvPortMalloc>
 800ffd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d011      	beq.n	8010002 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	3350      	adds	r3, #80	; 0x50
 800ffe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fff0:	79fa      	ldrb	r2, [r7, #7]
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	4613      	mov	r3, r2
 800fff8:	697a      	ldr	r2, [r7, #20]
 800fffa:	68b9      	ldr	r1, [r7, #8]
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f000 f805 	bl	801000c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010002:	69bb      	ldr	r3, [r7, #24]
	}
 8010004:	4618      	mov	r0, r3
 8010006:	3720      	adds	r7, #32
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
 8010018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d103      	bne.n	8010028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	69ba      	ldr	r2, [r7, #24]
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	e002      	b.n	801002e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	68ba      	ldr	r2, [r7, #8]
 8010038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801003a:	2101      	movs	r1, #1
 801003c:	69b8      	ldr	r0, [r7, #24]
 801003e:	f7ff fecb 	bl	800fdd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	78fa      	ldrb	r2, [r7, #3]
 8010046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801004a:	bf00      	nop
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010052:	b580      	push	{r7, lr}
 8010054:	b08a      	sub	sp, #40	; 0x28
 8010056:	af02      	add	r7, sp, #8
 8010058:	60f8      	str	r0, [r7, #12]
 801005a:	60b9      	str	r1, [r7, #8]
 801005c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	61bb      	str	r3, [r7, #24]
}
 8010076:	bf00      	nop
 8010078:	e7fe      	b.n	8010078 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	429a      	cmp	r2, r3
 8010080:	d90a      	bls.n	8010098 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	617b      	str	r3, [r7, #20]
}
 8010094:	bf00      	nop
 8010096:	e7fe      	b.n	8010096 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010098:	2302      	movs	r3, #2
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	2100      	movs	r1, #0
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f7ff ff00 	bl	800fea8 <xQueueGenericCreateStatic>
 80100a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	68ba      	ldr	r2, [r7, #8]
 80100b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80100b6:	69fb      	ldr	r3, [r7, #28]
	}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3720      	adds	r7, #32
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d10a      	bne.n	80100e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80100d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d4:	f383 8811 	msr	BASEPRI, r3
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	613b      	str	r3, [r7, #16]
}
 80100e2:	bf00      	nop
 80100e4:	e7fe      	b.n	80100e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80100e6:	683a      	ldr	r2, [r7, #0]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d90a      	bls.n	8010104 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	60fb      	str	r3, [r7, #12]
}
 8010100:	bf00      	nop
 8010102:	e7fe      	b.n	8010102 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010104:	2202      	movs	r2, #2
 8010106:	2100      	movs	r1, #0
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff ff45 	bl	800ff98 <xQueueGenericCreate>
 801010e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d002      	beq.n	801011c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801011c:	697b      	ldr	r3, [r7, #20]
	}
 801011e:	4618      	mov	r0, r3
 8010120:	3718      	adds	r7, #24
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
	...

08010128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08e      	sub	sp, #56	; 0x38
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010136:	2300      	movs	r3, #0
 8010138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10a      	bne.n	801015a <xQueueGenericSend+0x32>
	__asm volatile
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010156:	bf00      	nop
 8010158:	e7fe      	b.n	8010158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d103      	bne.n	8010168 <xQueueGenericSend+0x40>
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <xQueueGenericSend+0x44>
 8010168:	2301      	movs	r3, #1
 801016a:	e000      	b.n	801016e <xQueueGenericSend+0x46>
 801016c:	2300      	movs	r3, #0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10a      	bne.n	8010188 <xQueueGenericSend+0x60>
	__asm volatile
 8010172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010184:	bf00      	nop
 8010186:	e7fe      	b.n	8010186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2b02      	cmp	r3, #2
 801018c:	d103      	bne.n	8010196 <xQueueGenericSend+0x6e>
 801018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010192:	2b01      	cmp	r3, #1
 8010194:	d101      	bne.n	801019a <xQueueGenericSend+0x72>
 8010196:	2301      	movs	r3, #1
 8010198:	e000      	b.n	801019c <xQueueGenericSend+0x74>
 801019a:	2300      	movs	r3, #0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10a      	bne.n	80101b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	623b      	str	r3, [r7, #32]
}
 80101b2:	bf00      	nop
 80101b4:	e7fe      	b.n	80101b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101b6:	f001 fdfb 	bl	8011db0 <xTaskGetSchedulerState>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d102      	bne.n	80101c6 <xQueueGenericSend+0x9e>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d101      	bne.n	80101ca <xQueueGenericSend+0xa2>
 80101c6:	2301      	movs	r3, #1
 80101c8:	e000      	b.n	80101cc <xQueueGenericSend+0xa4>
 80101ca:	2300      	movs	r3, #0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10a      	bne.n	80101e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80101d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	61fb      	str	r3, [r7, #28]
}
 80101e2:	bf00      	nop
 80101e4:	e7fe      	b.n	80101e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101e6:	f002 fc3d 	bl	8012a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d302      	bcc.n	80101fc <xQueueGenericSend+0xd4>
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	d129      	bne.n	8010250 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	68b9      	ldr	r1, [r7, #8]
 8010200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010202:	f000 fc5e 	bl	8010ac2 <prvCopyDataToQueue>
 8010206:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020c:	2b00      	cmp	r3, #0
 801020e:	d010      	beq.n	8010232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010212:	3324      	adds	r3, #36	; 0x24
 8010214:	4618      	mov	r0, r3
 8010216:	f001 fc09 	bl	8011a2c <xTaskRemoveFromEventList>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d013      	beq.n	8010248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010220:	4b3f      	ldr	r3, [pc, #252]	; (8010320 <xQueueGenericSend+0x1f8>)
 8010222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	f3bf 8f6f 	isb	sy
 8010230:	e00a      	b.n	8010248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d007      	beq.n	8010248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010238:	4b39      	ldr	r3, [pc, #228]	; (8010320 <xQueueGenericSend+0x1f8>)
 801023a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	f3bf 8f4f 	dsb	sy
 8010244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010248:	f002 fc3c 	bl	8012ac4 <vPortExitCritical>
				return pdPASS;
 801024c:	2301      	movs	r3, #1
 801024e:	e063      	b.n	8010318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d103      	bne.n	801025e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010256:	f002 fc35 	bl	8012ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801025a:	2300      	movs	r3, #0
 801025c:	e05c      	b.n	8010318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	2b00      	cmp	r3, #0
 8010262:	d106      	bne.n	8010272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010264:	f107 0314 	add.w	r3, r7, #20
 8010268:	4618      	mov	r0, r3
 801026a:	f001 fc43 	bl	8011af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801026e:	2301      	movs	r3, #1
 8010270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010272:	f002 fc27 	bl	8012ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010276:	f001 f99d 	bl	80115b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801027a:	f002 fbf3 	bl	8012a64 <vPortEnterCritical>
 801027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010284:	b25b      	sxtb	r3, r3
 8010286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028a:	d103      	bne.n	8010294 <xQueueGenericSend+0x16c>
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	2200      	movs	r2, #0
 8010290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801029a:	b25b      	sxtb	r3, r3
 801029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a0:	d103      	bne.n	80102aa <xQueueGenericSend+0x182>
 80102a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102aa:	f002 fc0b 	bl	8012ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102ae:	1d3a      	adds	r2, r7, #4
 80102b0:	f107 0314 	add.w	r3, r7, #20
 80102b4:	4611      	mov	r1, r2
 80102b6:	4618      	mov	r0, r3
 80102b8:	f001 fc32 	bl	8011b20 <xTaskCheckForTimeOut>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d124      	bne.n	801030c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80102c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102c4:	f000 fcf5 	bl	8010cb2 <prvIsQueueFull>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d018      	beq.n	8010300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	3310      	adds	r3, #16
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	4611      	mov	r1, r2
 80102d6:	4618      	mov	r0, r3
 80102d8:	f001 fb58 	bl	801198c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80102dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102de:	f000 fc80 	bl	8010be2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80102e2:	f001 f975 	bl	80115d0 <xTaskResumeAll>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f47f af7c 	bne.w	80101e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80102ee:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <xQueueGenericSend+0x1f8>)
 80102f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	e772      	b.n	80101e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010302:	f000 fc6e 	bl	8010be2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010306:	f001 f963 	bl	80115d0 <xTaskResumeAll>
 801030a:	e76c      	b.n	80101e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801030c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801030e:	f000 fc68 	bl	8010be2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010312:	f001 f95d 	bl	80115d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010318:	4618      	mov	r0, r3
 801031a:	3738      	adds	r7, #56	; 0x38
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	e000ed04 	.word	0xe000ed04

08010324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b090      	sub	sp, #64	; 0x40
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
 8010330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10a      	bne.n	8010352 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801034e:	bf00      	nop
 8010350:	e7fe      	b.n	8010350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d103      	bne.n	8010360 <xQueueGenericSendFromISR+0x3c>
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801035c:	2b00      	cmp	r3, #0
 801035e:	d101      	bne.n	8010364 <xQueueGenericSendFromISR+0x40>
 8010360:	2301      	movs	r3, #1
 8010362:	e000      	b.n	8010366 <xQueueGenericSendFromISR+0x42>
 8010364:	2300      	movs	r3, #0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d10a      	bne.n	8010380 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801037c:	bf00      	nop
 801037e:	e7fe      	b.n	801037e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	2b02      	cmp	r3, #2
 8010384:	d103      	bne.n	801038e <xQueueGenericSendFromISR+0x6a>
 8010386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801038a:	2b01      	cmp	r3, #1
 801038c:	d101      	bne.n	8010392 <xQueueGenericSendFromISR+0x6e>
 801038e:	2301      	movs	r3, #1
 8010390:	e000      	b.n	8010394 <xQueueGenericSendFromISR+0x70>
 8010392:	2300      	movs	r3, #0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d10a      	bne.n	80103ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039c:	f383 8811 	msr	BASEPRI, r3
 80103a0:	f3bf 8f6f 	isb	sy
 80103a4:	f3bf 8f4f 	dsb	sy
 80103a8:	623b      	str	r3, [r7, #32]
}
 80103aa:	bf00      	nop
 80103ac:	e7fe      	b.n	80103ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103ae:	f002 fc3b 	bl	8012c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80103b2:	f3ef 8211 	mrs	r2, BASEPRI
 80103b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ba:	f383 8811 	msr	BASEPRI, r3
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f3bf 8f4f 	dsb	sy
 80103c6:	61fa      	str	r2, [r7, #28]
 80103c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80103ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d302      	bcc.n	80103e0 <xQueueGenericSendFromISR+0xbc>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d12f      	bne.n	8010440 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	68b9      	ldr	r1, [r7, #8]
 80103f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103f6:	f000 fb64 	bl	8010ac2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80103fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010402:	d112      	bne.n	801042a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010408:	2b00      	cmp	r3, #0
 801040a:	d016      	beq.n	801043a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	3324      	adds	r3, #36	; 0x24
 8010410:	4618      	mov	r0, r3
 8010412:	f001 fb0b 	bl	8011a2c <xTaskRemoveFromEventList>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00e      	beq.n	801043a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2201      	movs	r2, #1
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	e007      	b.n	801043a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801042a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801042e:	3301      	adds	r3, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	b25a      	sxtb	r2, r3
 8010434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801043a:	2301      	movs	r3, #1
 801043c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801043e:	e001      	b.n	8010444 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010440:	2300      	movs	r3, #0
 8010442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010446:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801044e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010452:	4618      	mov	r0, r3
 8010454:	3740      	adds	r7, #64	; 0x40
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b08e      	sub	sp, #56	; 0x38
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10a      	bne.n	8010484 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	623b      	str	r3, [r7, #32]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00a      	beq.n	80104a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 801048c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010490:	f383 8811 	msr	BASEPRI, r3
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	61fb      	str	r3, [r7, #28]
}
 801049e:	bf00      	nop
 80104a0:	e7fe      	b.n	80104a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d103      	bne.n	80104b2 <xQueueGiveFromISR+0x58>
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	689b      	ldr	r3, [r3, #8]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d101      	bne.n	80104b6 <xQueueGiveFromISR+0x5c>
 80104b2:	2301      	movs	r3, #1
 80104b4:	e000      	b.n	80104b8 <xQueueGiveFromISR+0x5e>
 80104b6:	2300      	movs	r3, #0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d10a      	bne.n	80104d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80104bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c0:	f383 8811 	msr	BASEPRI, r3
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	61bb      	str	r3, [r7, #24]
}
 80104ce:	bf00      	nop
 80104d0:	e7fe      	b.n	80104d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104d2:	f002 fba9 	bl	8012c28 <vPortValidateInterruptPriority>
	__asm volatile
 80104d6:	f3ef 8211 	mrs	r2, BASEPRI
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	617a      	str	r2, [r7, #20]
 80104ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80104ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104fe:	429a      	cmp	r2, r3
 8010500:	d22b      	bcs.n	801055a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010512:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051c:	d112      	bne.n	8010544 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010522:	2b00      	cmp	r3, #0
 8010524:	d016      	beq.n	8010554 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010528:	3324      	adds	r3, #36	; 0x24
 801052a:	4618      	mov	r0, r3
 801052c:	f001 fa7e 	bl	8011a2c <xTaskRemoveFromEventList>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00e      	beq.n	8010554 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00b      	beq.n	8010554 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2201      	movs	r2, #1
 8010540:	601a      	str	r2, [r3, #0]
 8010542:	e007      	b.n	8010554 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010548:	3301      	adds	r3, #1
 801054a:	b2db      	uxtb	r3, r3
 801054c:	b25a      	sxtb	r2, r3
 801054e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010554:	2301      	movs	r3, #1
 8010556:	637b      	str	r3, [r7, #52]	; 0x34
 8010558:	e001      	b.n	801055e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801055a:	2300      	movs	r3, #0
 801055c:	637b      	str	r3, [r7, #52]	; 0x34
 801055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010560:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f383 8811 	msr	BASEPRI, r3
}
 8010568:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801056a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801056c:	4618      	mov	r0, r3
 801056e:	3738      	adds	r7, #56	; 0x38
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08c      	sub	sp, #48	; 0x30
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010580:	2300      	movs	r3, #0
 8010582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10a      	bne.n	80105a4 <xQueueReceive+0x30>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	f383 8811 	msr	BASEPRI, r3
 8010596:	f3bf 8f6f 	isb	sy
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	623b      	str	r3, [r7, #32]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d103      	bne.n	80105b2 <xQueueReceive+0x3e>
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <xQueueReceive+0x42>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e000      	b.n	80105b8 <xQueueReceive+0x44>
 80105b6:	2300      	movs	r3, #0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10a      	bne.n	80105d2 <xQueueReceive+0x5e>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	61fb      	str	r3, [r7, #28]
}
 80105ce:	bf00      	nop
 80105d0:	e7fe      	b.n	80105d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105d2:	f001 fbed 	bl	8011db0 <xTaskGetSchedulerState>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d102      	bne.n	80105e2 <xQueueReceive+0x6e>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d101      	bne.n	80105e6 <xQueueReceive+0x72>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e000      	b.n	80105e8 <xQueueReceive+0x74>
 80105e6:	2300      	movs	r3, #0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10a      	bne.n	8010602 <xQueueReceive+0x8e>
	__asm volatile
 80105ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f0:	f383 8811 	msr	BASEPRI, r3
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	f3bf 8f4f 	dsb	sy
 80105fc:	61bb      	str	r3, [r7, #24]
}
 80105fe:	bf00      	nop
 8010600:	e7fe      	b.n	8010600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010602:	f002 fa2f 	bl	8012a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801060a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060e:	2b00      	cmp	r3, #0
 8010610:	d01f      	beq.n	8010652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010612:	68b9      	ldr	r1, [r7, #8]
 8010614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010616:	f000 fabe 	bl	8010b96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	1e5a      	subs	r2, r3, #1
 801061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00f      	beq.n	801064a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062c:	3310      	adds	r3, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f001 f9fc 	bl	8011a2c <xTaskRemoveFromEventList>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d007      	beq.n	801064a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801063a:	4b3d      	ldr	r3, [pc, #244]	; (8010730 <xQueueReceive+0x1bc>)
 801063c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801064a:	f002 fa3b 	bl	8012ac4 <vPortExitCritical>
				return pdPASS;
 801064e:	2301      	movs	r3, #1
 8010650:	e069      	b.n	8010726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010658:	f002 fa34 	bl	8012ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801065c:	2300      	movs	r3, #0
 801065e:	e062      	b.n	8010726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	2b00      	cmp	r3, #0
 8010664:	d106      	bne.n	8010674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010666:	f107 0310 	add.w	r3, r7, #16
 801066a:	4618      	mov	r0, r3
 801066c:	f001 fa42 	bl	8011af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010670:	2301      	movs	r3, #1
 8010672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010674:	f002 fa26 	bl	8012ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010678:	f000 ff9c 	bl	80115b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801067c:	f002 f9f2 	bl	8012a64 <vPortEnterCritical>
 8010680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010686:	b25b      	sxtb	r3, r3
 8010688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068c:	d103      	bne.n	8010696 <xQueueReceive+0x122>
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801069c:	b25b      	sxtb	r3, r3
 801069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a2:	d103      	bne.n	80106ac <xQueueReceive+0x138>
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	2200      	movs	r2, #0
 80106a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106ac:	f002 fa0a 	bl	8012ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106b0:	1d3a      	adds	r2, r7, #4
 80106b2:	f107 0310 	add.w	r3, r7, #16
 80106b6:	4611      	mov	r1, r2
 80106b8:	4618      	mov	r0, r3
 80106ba:	f001 fa31 	bl	8011b20 <xTaskCheckForTimeOut>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d123      	bne.n	801070c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106c6:	f000 fade 	bl	8010c86 <prvIsQueueEmpty>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d017      	beq.n	8010700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	3324      	adds	r3, #36	; 0x24
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f001 f957 	bl	801198c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106e0:	f000 fa7f 	bl	8010be2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106e4:	f000 ff74 	bl	80115d0 <xTaskResumeAll>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d189      	bne.n	8010602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80106ee:	4b10      	ldr	r3, [pc, #64]	; (8010730 <xQueueReceive+0x1bc>)
 80106f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	f3bf 8f6f 	isb	sy
 80106fe:	e780      	b.n	8010602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010702:	f000 fa6e 	bl	8010be2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010706:	f000 ff63 	bl	80115d0 <xTaskResumeAll>
 801070a:	e77a      	b.n	8010602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801070c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801070e:	f000 fa68 	bl	8010be2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010712:	f000 ff5d 	bl	80115d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010718:	f000 fab5 	bl	8010c86 <prvIsQueueEmpty>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	f43f af6f 	beq.w	8010602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010726:	4618      	mov	r0, r3
 8010728:	3730      	adds	r7, #48	; 0x30
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	e000ed04 	.word	0xe000ed04

08010734 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b08e      	sub	sp, #56	; 0x38
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801073e:	2300      	movs	r3, #0
 8010740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010746:	2300      	movs	r3, #0
 8010748:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	f383 8811 	msr	BASEPRI, r3
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	623b      	str	r3, [r7, #32]
}
 8010762:	bf00      	nop
 8010764:	e7fe      	b.n	8010764 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00a      	beq.n	8010784 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	61fb      	str	r3, [r7, #28]
}
 8010780:	bf00      	nop
 8010782:	e7fe      	b.n	8010782 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010784:	f001 fb14 	bl	8011db0 <xTaskGetSchedulerState>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d102      	bne.n	8010794 <xQueueSemaphoreTake+0x60>
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d101      	bne.n	8010798 <xQueueSemaphoreTake+0x64>
 8010794:	2301      	movs	r3, #1
 8010796:	e000      	b.n	801079a <xQueueSemaphoreTake+0x66>
 8010798:	2300      	movs	r3, #0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10a      	bne.n	80107b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	61bb      	str	r3, [r7, #24]
}
 80107b0:	bf00      	nop
 80107b2:	e7fe      	b.n	80107b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107b4:	f002 f956 	bl	8012a64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80107be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d024      	beq.n	801080e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	1e5a      	subs	r2, r3, #1
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d104      	bne.n	80107de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80107d4:	f001 fc62 	bl	801209c <pvTaskIncrementMutexHeldCount>
 80107d8:	4602      	mov	r2, r0
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00f      	beq.n	8010806 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e8:	3310      	adds	r3, #16
 80107ea:	4618      	mov	r0, r3
 80107ec:	f001 f91e 	bl	8011a2c <xTaskRemoveFromEventList>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d007      	beq.n	8010806 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107f6:	4b54      	ldr	r3, [pc, #336]	; (8010948 <xQueueSemaphoreTake+0x214>)
 80107f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107fc:	601a      	str	r2, [r3, #0]
 80107fe:	f3bf 8f4f 	dsb	sy
 8010802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010806:	f002 f95d 	bl	8012ac4 <vPortExitCritical>
				return pdPASS;
 801080a:	2301      	movs	r3, #1
 801080c:	e097      	b.n	801093e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d111      	bne.n	8010838 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00a      	beq.n	8010830 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	617b      	str	r3, [r7, #20]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010830:	f002 f948 	bl	8012ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010834:	2300      	movs	r3, #0
 8010836:	e082      	b.n	801093e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801083a:	2b00      	cmp	r3, #0
 801083c:	d106      	bne.n	801084c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801083e:	f107 030c 	add.w	r3, r7, #12
 8010842:	4618      	mov	r0, r3
 8010844:	f001 f956 	bl	8011af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010848:	2301      	movs	r3, #1
 801084a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801084c:	f002 f93a 	bl	8012ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010850:	f000 feb0 	bl	80115b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010854:	f002 f906 	bl	8012a64 <vPortEnterCritical>
 8010858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801085e:	b25b      	sxtb	r3, r3
 8010860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010864:	d103      	bne.n	801086e <xQueueSemaphoreTake+0x13a>
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010874:	b25b      	sxtb	r3, r3
 8010876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801087a:	d103      	bne.n	8010884 <xQueueSemaphoreTake+0x150>
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	2200      	movs	r2, #0
 8010880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010884:	f002 f91e 	bl	8012ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010888:	463a      	mov	r2, r7
 801088a:	f107 030c 	add.w	r3, r7, #12
 801088e:	4611      	mov	r1, r2
 8010890:	4618      	mov	r0, r3
 8010892:	f001 f945 	bl	8011b20 <xTaskCheckForTimeOut>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d132      	bne.n	8010902 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801089c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801089e:	f000 f9f2 	bl	8010c86 <prvIsQueueEmpty>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d026      	beq.n	80108f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80108b0:	f002 f8d8 	bl	8012a64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f001 fa97 	bl	8011dec <xTaskPriorityInherit>
 80108be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80108c0:	f002 f900 	bl	8012ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	3324      	adds	r3, #36	; 0x24
 80108c8:	683a      	ldr	r2, [r7, #0]
 80108ca:	4611      	mov	r1, r2
 80108cc:	4618      	mov	r0, r3
 80108ce:	f001 f85d 	bl	801198c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108d4:	f000 f985 	bl	8010be2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108d8:	f000 fe7a 	bl	80115d0 <xTaskResumeAll>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f47f af68 	bne.w	80107b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80108e4:	4b18      	ldr	r3, [pc, #96]	; (8010948 <xQueueSemaphoreTake+0x214>)
 80108e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ea:	601a      	str	r2, [r3, #0]
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	f3bf 8f6f 	isb	sy
 80108f4:	e75e      	b.n	80107b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80108f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108f8:	f000 f973 	bl	8010be2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108fc:	f000 fe68 	bl	80115d0 <xTaskResumeAll>
 8010900:	e758      	b.n	80107b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010904:	f000 f96d 	bl	8010be2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010908:	f000 fe62 	bl	80115d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801090c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801090e:	f000 f9ba 	bl	8010c86 <prvIsQueueEmpty>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	f43f af4d 	beq.w	80107b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00d      	beq.n	801093c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010920:	f002 f8a0 	bl	8012a64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010926:	f000 f8b4 	bl	8010a92 <prvGetDisinheritPriorityAfterTimeout>
 801092a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801092c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010932:	4618      	mov	r0, r3
 8010934:	f001 fb30 	bl	8011f98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010938:	f002 f8c4 	bl	8012ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801093c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801093e:	4618      	mov	r0, r3
 8010940:	3738      	adds	r7, #56	; 0x38
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	e000ed04 	.word	0xe000ed04

0801094c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b08e      	sub	sp, #56	; 0x38
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10a      	bne.n	8010978 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	623b      	str	r3, [r7, #32]
}
 8010974:	bf00      	nop
 8010976:	e7fe      	b.n	8010976 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d103      	bne.n	8010986 <xQueueReceiveFromISR+0x3a>
 801097e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <xQueueReceiveFromISR+0x3e>
 8010986:	2301      	movs	r3, #1
 8010988:	e000      	b.n	801098c <xQueueReceiveFromISR+0x40>
 801098a:	2300      	movs	r3, #0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10a      	bne.n	80109a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	61fb      	str	r3, [r7, #28]
}
 80109a2:	bf00      	nop
 80109a4:	e7fe      	b.n	80109a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109a6:	f002 f93f 	bl	8012c28 <vPortValidateInterruptPriority>
	__asm volatile
 80109aa:	f3ef 8211 	mrs	r2, BASEPRI
 80109ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	61ba      	str	r2, [r7, #24]
 80109c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80109c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d02f      	beq.n	8010a32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109dc:	68b9      	ldr	r1, [r7, #8]
 80109de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109e0:	f000 f8d9 	bl	8010b96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	1e5a      	subs	r2, r3, #1
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80109ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80109f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f4:	d112      	bne.n	8010a1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d016      	beq.n	8010a2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	3310      	adds	r3, #16
 8010a02:	4618      	mov	r0, r3
 8010a04:	f001 f812 	bl	8011a2c <xTaskRemoveFromEventList>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00e      	beq.n	8010a2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00b      	beq.n	8010a2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	601a      	str	r2, [r3, #0]
 8010a1a:	e007      	b.n	8010a2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a20:	3301      	adds	r3, #1
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	b25a      	sxtb	r2, r3
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8010a30:	e001      	b.n	8010a36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010a32:	2300      	movs	r3, #0
 8010a34:	637b      	str	r3, [r7, #52]	; 0x34
 8010a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	f383 8811 	msr	BASEPRI, r3
}
 8010a40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3738      	adds	r7, #56	; 0x38
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <vQueueDelete+0x28>
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	60bb      	str	r3, [r7, #8]
}
 8010a70:	bf00      	nop
 8010a72:	e7fe      	b.n	8010a72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f000 f95f 	bl	8010d38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f002 f9db 	bl	8012e40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010a92:	b480      	push	{r7}
 8010a94:	b085      	sub	sp, #20
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d006      	beq.n	8010ab0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	e001      	b.n	8010ab4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
	}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr

08010ac2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b086      	sub	sp, #24
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	60f8      	str	r0, [r7, #12]
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10d      	bne.n	8010afc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d14d      	bne.n	8010b84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f001 f9e5 	bl	8011ebc <xTaskPriorityDisinherit>
 8010af2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	609a      	str	r2, [r3, #8]
 8010afa:	e043      	b.n	8010b84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d119      	bne.n	8010b36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6858      	ldr	r0, [r3, #4]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	68b9      	ldr	r1, [r7, #8]
 8010b0e:	f002 fae1 	bl	80130d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	685a      	ldr	r2, [r3, #4]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1a:	441a      	add	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	685a      	ldr	r2, [r3, #4]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d32b      	bcc.n	8010b84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	605a      	str	r2, [r3, #4]
 8010b34:	e026      	b.n	8010b84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	68d8      	ldr	r0, [r3, #12]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b3e:	461a      	mov	r2, r3
 8010b40:	68b9      	ldr	r1, [r7, #8]
 8010b42:	f002 fac7 	bl	80130d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	68da      	ldr	r2, [r3, #12]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4e:	425b      	negs	r3, r3
 8010b50:	441a      	add	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	68da      	ldr	r2, [r3, #12]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d207      	bcs.n	8010b72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	689a      	ldr	r2, [r3, #8]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6a:	425b      	negs	r3, r3
 8010b6c:	441a      	add	r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d105      	bne.n	8010b84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	1c5a      	adds	r2, r3, #1
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b8c:	697b      	ldr	r3, [r7, #20]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b082      	sub	sp, #8
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d018      	beq.n	8010bda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68da      	ldr	r2, [r3, #12]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb0:	441a      	add	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d303      	bcc.n	8010bca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	68d9      	ldr	r1, [r3, #12]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	6838      	ldr	r0, [r7, #0]
 8010bd6:	f002 fa7d 	bl	80130d4 <memcpy>
	}
}
 8010bda:	bf00      	nop
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b084      	sub	sp, #16
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010bea:	f001 ff3b 	bl	8012a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bf6:	e011      	b.n	8010c1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d012      	beq.n	8010c26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	3324      	adds	r3, #36	; 0x24
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 ff11 	bl	8011a2c <xTaskRemoveFromEventList>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c10:	f000 ffe8 	bl	8011be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c14:	7bfb      	ldrb	r3, [r7, #15]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	dce9      	bgt.n	8010bf8 <prvUnlockQueue+0x16>
 8010c24:	e000      	b.n	8010c28 <prvUnlockQueue+0x46>
					break;
 8010c26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	22ff      	movs	r2, #255	; 0xff
 8010c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010c30:	f001 ff48 	bl	8012ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c34:	f001 ff16 	bl	8012a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c40:	e011      	b.n	8010c66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	691b      	ldr	r3, [r3, #16]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d012      	beq.n	8010c70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	3310      	adds	r3, #16
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 feec 	bl	8011a2c <xTaskRemoveFromEventList>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d001      	beq.n	8010c5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c5a:	f000 ffc3 	bl	8011be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c5e:	7bbb      	ldrb	r3, [r7, #14]
 8010c60:	3b01      	subs	r3, #1
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	dce9      	bgt.n	8010c42 <prvUnlockQueue+0x60>
 8010c6e:	e000      	b.n	8010c72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	22ff      	movs	r2, #255	; 0xff
 8010c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c7a:	f001 ff23 	bl	8012ac4 <vPortExitCritical>
}
 8010c7e:	bf00      	nop
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b084      	sub	sp, #16
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c8e:	f001 fee9 	bl	8012a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d102      	bne.n	8010ca0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	e001      	b.n	8010ca4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ca4:	f001 ff0e 	bl	8012ac4 <vPortExitCritical>

	return xReturn;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b084      	sub	sp, #16
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010cba:	f001 fed3 	bl	8012a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d102      	bne.n	8010cd0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	e001      	b.n	8010cd4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010cd4:	f001 fef6 	bl	8012ac4 <vPortExitCritical>

	return xReturn;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
	...

08010ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cee:	2300      	movs	r3, #0
 8010cf0:	60fb      	str	r3, [r7, #12]
 8010cf2:	e014      	b.n	8010d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010cf4:	4a0f      	ldr	r2, [pc, #60]	; (8010d34 <vQueueAddToRegistry+0x50>)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10b      	bne.n	8010d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010d00:	490c      	ldr	r1, [pc, #48]	; (8010d34 <vQueueAddToRegistry+0x50>)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	683a      	ldr	r2, [r7, #0]
 8010d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010d0a:	4a0a      	ldr	r2, [pc, #40]	; (8010d34 <vQueueAddToRegistry+0x50>)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	00db      	lsls	r3, r3, #3
 8010d10:	4413      	add	r3, r2
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010d16:	e006      	b.n	8010d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	60fb      	str	r3, [r7, #12]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2b07      	cmp	r3, #7
 8010d22:	d9e7      	bls.n	8010cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010d24:	bf00      	nop
 8010d26:	bf00      	nop
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	24027b20 	.word	0x24027b20

08010d38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d40:	2300      	movs	r3, #0
 8010d42:	60fb      	str	r3, [r7, #12]
 8010d44:	e016      	b.n	8010d74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010d46:	4a10      	ldr	r2, [pc, #64]	; (8010d88 <vQueueUnregisterQueue+0x50>)
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	00db      	lsls	r3, r3, #3
 8010d4c:	4413      	add	r3, r2
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d10b      	bne.n	8010d6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010d56:	4a0c      	ldr	r2, [pc, #48]	; (8010d88 <vQueueUnregisterQueue+0x50>)
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010d60:	4a09      	ldr	r2, [pc, #36]	; (8010d88 <vQueueUnregisterQueue+0x50>)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	4413      	add	r3, r2
 8010d68:	2200      	movs	r2, #0
 8010d6a:	605a      	str	r2, [r3, #4]
				break;
 8010d6c:	e006      	b.n	8010d7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	3301      	adds	r3, #1
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b07      	cmp	r3, #7
 8010d78:	d9e5      	bls.n	8010d46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr
 8010d88:	24027b20 	.word	0x24027b20

08010d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010d9c:	f001 fe62 	bl	8012a64 <vPortEnterCritical>
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010da6:	b25b      	sxtb	r3, r3
 8010da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dac:	d103      	bne.n	8010db6 <vQueueWaitForMessageRestricted+0x2a>
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dbc:	b25b      	sxtb	r3, r3
 8010dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc2:	d103      	bne.n	8010dcc <vQueueWaitForMessageRestricted+0x40>
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dcc:	f001 fe7a 	bl	8012ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	3324      	adds	r3, #36	; 0x24
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	68b9      	ldr	r1, [r7, #8]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f000 fdf7 	bl	80119d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010de6:	6978      	ldr	r0, [r7, #20]
 8010de8:	f7ff fefb 	bl	8010be2 <prvUnlockQueue>
	}
 8010dec:	bf00      	nop
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b08e      	sub	sp, #56	; 0x38
 8010df8:	af04      	add	r7, sp, #16
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10a      	bne.n	8010e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	623b      	str	r3, [r7, #32]
}
 8010e1a:	bf00      	nop
 8010e1c:	e7fe      	b.n	8010e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d10a      	bne.n	8010e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8010e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e28:	f383 8811 	msr	BASEPRI, r3
 8010e2c:	f3bf 8f6f 	isb	sy
 8010e30:	f3bf 8f4f 	dsb	sy
 8010e34:	61fb      	str	r3, [r7, #28]
}
 8010e36:	bf00      	nop
 8010e38:	e7fe      	b.n	8010e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e3a:	23bc      	movs	r3, #188	; 0xbc
 8010e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2bbc      	cmp	r3, #188	; 0xbc
 8010e42:	d00a      	beq.n	8010e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	61bb      	str	r3, [r7, #24]
}
 8010e56:	bf00      	nop
 8010e58:	e7fe      	b.n	8010e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d01e      	beq.n	8010ea0 <xTaskCreateStatic+0xac>
 8010e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d01b      	beq.n	8010ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e74:	2202      	movs	r2, #2
 8010e76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	9303      	str	r3, [sp, #12]
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	9302      	str	r3, [sp, #8]
 8010e82:	f107 0314 	add.w	r3, r7, #20
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	68b9      	ldr	r1, [r7, #8]
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f000 f850 	bl	8010f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e9a:	f000 f8f3 	bl	8011084 <prvAddNewTaskToReadyList>
 8010e9e:	e001      	b.n	8010ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ea4:	697b      	ldr	r3, [r7, #20]
	}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3728      	adds	r7, #40	; 0x28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b08c      	sub	sp, #48	; 0x30
 8010eb2:	af04      	add	r7, sp, #16
 8010eb4:	60f8      	str	r0, [r7, #12]
 8010eb6:	60b9      	str	r1, [r7, #8]
 8010eb8:	603b      	str	r3, [r7, #0]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ebe:	88fb      	ldrh	r3, [r7, #6]
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f001 fef0 	bl	8012ca8 <pvPortMalloc>
 8010ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00e      	beq.n	8010eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ed0:	20bc      	movs	r0, #188	; 0xbc
 8010ed2:	f001 fee9 	bl	8012ca8 <pvPortMalloc>
 8010ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d003      	beq.n	8010ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	697a      	ldr	r2, [r7, #20]
 8010ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8010ee4:	e005      	b.n	8010ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ee6:	6978      	ldr	r0, [r7, #20]
 8010ee8:	f001 ffaa 	bl	8012e40 <vPortFree>
 8010eec:	e001      	b.n	8010ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d017      	beq.n	8010f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f00:	88fa      	ldrh	r2, [r7, #6]
 8010f02:	2300      	movs	r3, #0
 8010f04:	9303      	str	r3, [sp, #12]
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	9302      	str	r3, [sp, #8]
 8010f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	68b9      	ldr	r1, [r7, #8]
 8010f16:	68f8      	ldr	r0, [r7, #12]
 8010f18:	f000 f80e 	bl	8010f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f1c:	69f8      	ldr	r0, [r7, #28]
 8010f1e:	f000 f8b1 	bl	8011084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f22:	2301      	movs	r3, #1
 8010f24:	61bb      	str	r3, [r7, #24]
 8010f26:	e002      	b.n	8010f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f28:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3720      	adds	r7, #32
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b088      	sub	sp, #32
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	607a      	str	r2, [r7, #4]
 8010f44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	461a      	mov	r2, r3
 8010f50:	21a5      	movs	r1, #165	; 0xa5
 8010f52:	f002 f8cd 	bl	80130f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f5a:	6879      	ldr	r1, [r7, #4]
 8010f5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f60:	440b      	add	r3, r1
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	4413      	add	r3, r2
 8010f66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	f023 0307 	bic.w	r3, r3, #7
 8010f6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f70:	69bb      	ldr	r3, [r7, #24]
 8010f72:	f003 0307 	and.w	r3, r3, #7
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00a      	beq.n	8010f90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	617b      	str	r3, [r7, #20]
}
 8010f8c:	bf00      	nop
 8010f8e:	e7fe      	b.n	8010f8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d01f      	beq.n	8010fd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f96:	2300      	movs	r3, #0
 8010f98:	61fb      	str	r3, [r7, #28]
 8010f9a:	e012      	b.n	8010fc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	7819      	ldrb	r1, [r3, #0]
 8010fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	4413      	add	r3, r2
 8010faa:	3334      	adds	r3, #52	; 0x34
 8010fac:	460a      	mov	r2, r1
 8010fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010fb0:	68ba      	ldr	r2, [r7, #8]
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	61fb      	str	r3, [r7, #28]
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	2b0f      	cmp	r3, #15
 8010fc6:	d9e9      	bls.n	8010f9c <prvInitialiseNewTask+0x64>
 8010fc8:	e000      	b.n	8010fcc <prvInitialiseNewTask+0x94>
			{
				break;
 8010fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010fd4:	e003      	b.n	8010fde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe0:	2b37      	cmp	r3, #55	; 0x37
 8010fe2:	d901      	bls.n	8010fe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010fe4:	2337      	movs	r3, #55	; 0x37
 8010fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fe fe56 	bl	800fcb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	3318      	adds	r3, #24
 8011008:	4618      	mov	r0, r3
 801100a:	f7fe fe51 	bl	800fcb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011026:	2200      	movs	r2, #0
 8011028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102e:	2200      	movs	r2, #0
 8011030:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011036:	3354      	adds	r3, #84	; 0x54
 8011038:	2260      	movs	r2, #96	; 0x60
 801103a:	2100      	movs	r1, #0
 801103c:	4618      	mov	r0, r3
 801103e:	f002 f857 	bl	80130f0 <memset>
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	4a0c      	ldr	r2, [pc, #48]	; (8011078 <prvInitialiseNewTask+0x140>)
 8011046:	659a      	str	r2, [r3, #88]	; 0x58
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	4a0c      	ldr	r2, [pc, #48]	; (801107c <prvInitialiseNewTask+0x144>)
 801104c:	65da      	str	r2, [r3, #92]	; 0x5c
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	4a0b      	ldr	r2, [pc, #44]	; (8011080 <prvInitialiseNewTask+0x148>)
 8011052:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011054:	683a      	ldr	r2, [r7, #0]
 8011056:	68f9      	ldr	r1, [r7, #12]
 8011058:	69b8      	ldr	r0, [r7, #24]
 801105a:	f001 fbd5 	bl	8012808 <pxPortInitialiseStack>
 801105e:	4602      	mov	r2, r0
 8011060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011062:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011066:	2b00      	cmp	r3, #0
 8011068:	d002      	beq.n	8011070 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801106e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011070:	bf00      	nop
 8011072:	3720      	adds	r7, #32
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	08013c28 	.word	0x08013c28
 801107c:	08013c48 	.word	0x08013c48
 8011080:	08013c08 	.word	0x08013c08

08011084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801108c:	f001 fcea 	bl	8012a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011090:	4b2d      	ldr	r3, [pc, #180]	; (8011148 <prvAddNewTaskToReadyList+0xc4>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	3301      	adds	r3, #1
 8011096:	4a2c      	ldr	r2, [pc, #176]	; (8011148 <prvAddNewTaskToReadyList+0xc4>)
 8011098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801109a:	4b2c      	ldr	r3, [pc, #176]	; (801114c <prvAddNewTaskToReadyList+0xc8>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d109      	bne.n	80110b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80110a2:	4a2a      	ldr	r2, [pc, #168]	; (801114c <prvAddNewTaskToReadyList+0xc8>)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110a8:	4b27      	ldr	r3, [pc, #156]	; (8011148 <prvAddNewTaskToReadyList+0xc4>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d110      	bne.n	80110d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110b0:	f000 fdbc 	bl	8011c2c <prvInitialiseTaskLists>
 80110b4:	e00d      	b.n	80110d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110b6:	4b26      	ldr	r3, [pc, #152]	; (8011150 <prvAddNewTaskToReadyList+0xcc>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d109      	bne.n	80110d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110be:	4b23      	ldr	r3, [pc, #140]	; (801114c <prvAddNewTaskToReadyList+0xc8>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d802      	bhi.n	80110d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110cc:	4a1f      	ldr	r2, [pc, #124]	; (801114c <prvAddNewTaskToReadyList+0xc8>)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110d2:	4b20      	ldr	r3, [pc, #128]	; (8011154 <prvAddNewTaskToReadyList+0xd0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	3301      	adds	r3, #1
 80110d8:	4a1e      	ldr	r2, [pc, #120]	; (8011154 <prvAddNewTaskToReadyList+0xd0>)
 80110da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80110dc:	4b1d      	ldr	r3, [pc, #116]	; (8011154 <prvAddNewTaskToReadyList+0xd0>)
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e8:	4b1b      	ldr	r3, [pc, #108]	; (8011158 <prvAddNewTaskToReadyList+0xd4>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d903      	bls.n	80110f8 <prvAddNewTaskToReadyList+0x74>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f4:	4a18      	ldr	r2, [pc, #96]	; (8011158 <prvAddNewTaskToReadyList+0xd4>)
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110fc:	4613      	mov	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4413      	add	r3, r2
 8011102:	009b      	lsls	r3, r3, #2
 8011104:	4a15      	ldr	r2, [pc, #84]	; (801115c <prvAddNewTaskToReadyList+0xd8>)
 8011106:	441a      	add	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	3304      	adds	r3, #4
 801110c:	4619      	mov	r1, r3
 801110e:	4610      	mov	r0, r2
 8011110:	f7fe fddb 	bl	800fcca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011114:	f001 fcd6 	bl	8012ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011118:	4b0d      	ldr	r3, [pc, #52]	; (8011150 <prvAddNewTaskToReadyList+0xcc>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00e      	beq.n	801113e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011120:	4b0a      	ldr	r3, [pc, #40]	; (801114c <prvAddNewTaskToReadyList+0xc8>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801112a:	429a      	cmp	r2, r3
 801112c:	d207      	bcs.n	801113e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801112e:	4b0c      	ldr	r3, [pc, #48]	; (8011160 <prvAddNewTaskToReadyList+0xdc>)
 8011130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011134:	601a      	str	r2, [r3, #0]
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801113e:	bf00      	nop
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	24008e58 	.word	0x24008e58
 801114c:	24008984 	.word	0x24008984
 8011150:	24008e64 	.word	0x24008e64
 8011154:	24008e74 	.word	0x24008e74
 8011158:	24008e60 	.word	0x24008e60
 801115c:	24008988 	.word	0x24008988
 8011160:	e000ed04 	.word	0xe000ed04

08011164 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08a      	sub	sp, #40	; 0x28
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801116e:	2300      	movs	r3, #0
 8011170:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d10a      	bne.n	801118e <vTaskDelayUntil+0x2a>
	__asm volatile
 8011178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117c:	f383 8811 	msr	BASEPRI, r3
 8011180:	f3bf 8f6f 	isb	sy
 8011184:	f3bf 8f4f 	dsb	sy
 8011188:	617b      	str	r3, [r7, #20]
}
 801118a:	bf00      	nop
 801118c:	e7fe      	b.n	801118c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d10a      	bne.n	80111aa <vTaskDelayUntil+0x46>
	__asm volatile
 8011194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	613b      	str	r3, [r7, #16]
}
 80111a6:	bf00      	nop
 80111a8:	e7fe      	b.n	80111a8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80111aa:	4b2a      	ldr	r3, [pc, #168]	; (8011254 <vTaskDelayUntil+0xf0>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00a      	beq.n	80111c8 <vTaskDelayUntil+0x64>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	f383 8811 	msr	BASEPRI, r3
 80111ba:	f3bf 8f6f 	isb	sy
 80111be:	f3bf 8f4f 	dsb	sy
 80111c2:	60fb      	str	r3, [r7, #12]
}
 80111c4:	bf00      	nop
 80111c6:	e7fe      	b.n	80111c6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80111c8:	f000 f9f4 	bl	80115b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80111cc:	4b22      	ldr	r3, [pc, #136]	; (8011258 <vTaskDelayUntil+0xf4>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	683a      	ldr	r2, [r7, #0]
 80111d8:	4413      	add	r3, r2
 80111da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6a3a      	ldr	r2, [r7, #32]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d20b      	bcs.n	80111fe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	69fa      	ldr	r2, [r7, #28]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d211      	bcs.n	8011214 <vTaskDelayUntil+0xb0>
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d90d      	bls.n	8011214 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80111f8:	2301      	movs	r3, #1
 80111fa:	627b      	str	r3, [r7, #36]	; 0x24
 80111fc:	e00a      	b.n	8011214 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	69fa      	ldr	r2, [r7, #28]
 8011204:	429a      	cmp	r2, r3
 8011206:	d303      	bcc.n	8011210 <vTaskDelayUntil+0xac>
 8011208:	69fa      	ldr	r2, [r7, #28]
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	429a      	cmp	r2, r3
 801120e:	d901      	bls.n	8011214 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011210:	2301      	movs	r3, #1
 8011212:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	69fa      	ldr	r2, [r7, #28]
 8011218:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121c:	2b00      	cmp	r3, #0
 801121e:	d006      	beq.n	801122e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	6a3b      	ldr	r3, [r7, #32]
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	2100      	movs	r1, #0
 8011228:	4618      	mov	r0, r3
 801122a:	f000 ff4b 	bl	80120c4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801122e:	f000 f9cf 	bl	80115d0 <xTaskResumeAll>
 8011232:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d107      	bne.n	801124a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801123a:	4b08      	ldr	r3, [pc, #32]	; (801125c <vTaskDelayUntil+0xf8>)
 801123c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011240:	601a      	str	r2, [r3, #0]
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801124a:	bf00      	nop
 801124c:	3728      	adds	r7, #40	; 0x28
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	24008e80 	.word	0x24008e80
 8011258:	24008e5c 	.word	0x24008e5c
 801125c:	e000ed04 	.word	0xe000ed04

08011260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011268:	2300      	movs	r3, #0
 801126a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d017      	beq.n	80112a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011272:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <vTaskDelay+0x60>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00a      	beq.n	8011290 <vTaskDelay+0x30>
	__asm volatile
 801127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	60bb      	str	r3, [r7, #8]
}
 801128c:	bf00      	nop
 801128e:	e7fe      	b.n	801128e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011290:	f000 f990 	bl	80115b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011294:	2100      	movs	r1, #0
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 ff14 	bl	80120c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801129c:	f000 f998 	bl	80115d0 <xTaskResumeAll>
 80112a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d107      	bne.n	80112b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80112a8:	4b06      	ldr	r3, [pc, #24]	; (80112c4 <vTaskDelay+0x64>)
 80112aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ae:	601a      	str	r2, [r3, #0]
 80112b0:	f3bf 8f4f 	dsb	sy
 80112b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112b8:	bf00      	nop
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	24008e80 	.word	0x24008e80
 80112c4:	e000ed04 	.word	0xe000ed04

080112c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80112d0:	f001 fbc8 	bl	8012a64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d102      	bne.n	80112e0 <vTaskSuspend+0x18>
 80112da:	4b30      	ldr	r3, [pc, #192]	; (801139c <vTaskSuspend+0xd4>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	e000      	b.n	80112e2 <vTaskSuspend+0x1a>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	3304      	adds	r3, #4
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fe fd4b 	bl	800fd84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d004      	beq.n	8011300 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	3318      	adds	r3, #24
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fe fd42 	bl	800fd84 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3304      	adds	r3, #4
 8011304:	4619      	mov	r1, r3
 8011306:	4826      	ldr	r0, [pc, #152]	; (80113a0 <vTaskSuspend+0xd8>)
 8011308:	f7fe fcdf 	bl	800fcca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8011312:	b2db      	uxtb	r3, r3
 8011314:	2b01      	cmp	r3, #1
 8011316:	d103      	bne.n	8011320 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8011320:	f001 fbd0 	bl	8012ac4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8011324:	4b1f      	ldr	r3, [pc, #124]	; (80113a4 <vTaskSuspend+0xdc>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d005      	beq.n	8011338 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801132c:	f001 fb9a 	bl	8012a64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011330:	f000 fd1e 	bl	8011d70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8011334:	f001 fbc6 	bl	8012ac4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011338:	4b18      	ldr	r3, [pc, #96]	; (801139c <vTaskSuspend+0xd4>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	429a      	cmp	r2, r3
 8011340:	d127      	bne.n	8011392 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8011342:	4b18      	ldr	r3, [pc, #96]	; (80113a4 <vTaskSuspend+0xdc>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d017      	beq.n	801137a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801134a:	4b17      	ldr	r3, [pc, #92]	; (80113a8 <vTaskSuspend+0xe0>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00a      	beq.n	8011368 <vTaskSuspend+0xa0>
	__asm volatile
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	60bb      	str	r3, [r7, #8]
}
 8011364:	bf00      	nop
 8011366:	e7fe      	b.n	8011366 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8011368:	4b10      	ldr	r3, [pc, #64]	; (80113ac <vTaskSuspend+0xe4>)
 801136a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801136e:	601a      	str	r2, [r3, #0]
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011378:	e00b      	b.n	8011392 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801137a:	4b09      	ldr	r3, [pc, #36]	; (80113a0 <vTaskSuspend+0xd8>)
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	4b0c      	ldr	r3, [pc, #48]	; (80113b0 <vTaskSuspend+0xe8>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	429a      	cmp	r2, r3
 8011384:	d103      	bne.n	801138e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8011386:	4b05      	ldr	r3, [pc, #20]	; (801139c <vTaskSuspend+0xd4>)
 8011388:	2200      	movs	r2, #0
 801138a:	601a      	str	r2, [r3, #0]
	}
 801138c:	e001      	b.n	8011392 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801138e:	f000 fa99 	bl	80118c4 <vTaskSwitchContext>
	}
 8011392:	bf00      	nop
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	24008984 	.word	0x24008984
 80113a0:	24008e44 	.word	0x24008e44
 80113a4:	24008e64 	.word	0x24008e64
 80113a8:	24008e80 	.word	0x24008e80
 80113ac:	e000ed04 	.word	0xe000ed04
 80113b0:	24008e58 	.word	0x24008e58

080113b4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80113b4:	b480      	push	{r7}
 80113b6:	b087      	sub	sp, #28
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d10a      	bne.n	80113e0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80113ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ce:	f383 8811 	msr	BASEPRI, r3
 80113d2:	f3bf 8f6f 	isb	sy
 80113d6:	f3bf 8f4f 	dsb	sy
 80113da:	60fb      	str	r3, [r7, #12]
}
 80113dc:	bf00      	nop
 80113de:	e7fe      	b.n	80113de <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	695b      	ldr	r3, [r3, #20]
 80113e4:	4a0a      	ldr	r2, [pc, #40]	; (8011410 <prvTaskIsTaskSuspended+0x5c>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d10a      	bne.n	8011400 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ee:	4a09      	ldr	r2, [pc, #36]	; (8011414 <prvTaskIsTaskSuspended+0x60>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d005      	beq.n	8011400 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d101      	bne.n	8011400 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80113fc:	2301      	movs	r3, #1
 80113fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011400:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011402:	4618      	mov	r0, r3
 8011404:	371c      	adds	r7, #28
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	24008e44 	.word	0x24008e44
 8011414:	24008e18 	.word	0x24008e18

08011418 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d10a      	bne.n	8011440 <vTaskResume+0x28>
	__asm volatile
 801142a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142e:	f383 8811 	msr	BASEPRI, r3
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	f3bf 8f4f 	dsb	sy
 801143a:	60bb      	str	r3, [r7, #8]
}
 801143c:	bf00      	nop
 801143e:	e7fe      	b.n	801143e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011440:	4b20      	ldr	r3, [pc, #128]	; (80114c4 <vTaskResume+0xac>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	429a      	cmp	r2, r3
 8011448:	d038      	beq.n	80114bc <vTaskResume+0xa4>
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d035      	beq.n	80114bc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8011450:	f001 fb08 	bl	8012a64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7ff ffad 	bl	80113b4 <prvTaskIsTaskSuspended>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d02b      	beq.n	80114b8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3304      	adds	r3, #4
 8011464:	4618      	mov	r0, r3
 8011466:	f7fe fc8d 	bl	800fd84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146e:	4b16      	ldr	r3, [pc, #88]	; (80114c8 <vTaskResume+0xb0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d903      	bls.n	801147e <vTaskResume+0x66>
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147a:	4a13      	ldr	r2, [pc, #76]	; (80114c8 <vTaskResume+0xb0>)
 801147c:	6013      	str	r3, [r2, #0]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011482:	4613      	mov	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	4413      	add	r3, r2
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4a10      	ldr	r2, [pc, #64]	; (80114cc <vTaskResume+0xb4>)
 801148c:	441a      	add	r2, r3
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	3304      	adds	r3, #4
 8011492:	4619      	mov	r1, r3
 8011494:	4610      	mov	r0, r2
 8011496:	f7fe fc18 	bl	800fcca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801149e:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <vTaskResume+0xac>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d307      	bcc.n	80114b8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80114a8:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <vTaskResume+0xb8>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80114b8:	f001 fb04 	bl	8012ac4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114bc:	bf00      	nop
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	24008984 	.word	0x24008984
 80114c8:	24008e60 	.word	0x24008e60
 80114cc:	24008988 	.word	0x24008988
 80114d0:	e000ed04 	.word	0xe000ed04

080114d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08a      	sub	sp, #40	; 0x28
 80114d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80114da:	2300      	movs	r3, #0
 80114dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80114de:	2300      	movs	r3, #0
 80114e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80114e2:	463a      	mov	r2, r7
 80114e4:	1d39      	adds	r1, r7, #4
 80114e6:	f107 0308 	add.w	r3, r7, #8
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fe fb8c 	bl	800fc08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	9202      	str	r2, [sp, #8]
 80114f8:	9301      	str	r3, [sp, #4]
 80114fa:	2300      	movs	r3, #0
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	2300      	movs	r3, #0
 8011500:	460a      	mov	r2, r1
 8011502:	4924      	ldr	r1, [pc, #144]	; (8011594 <vTaskStartScheduler+0xc0>)
 8011504:	4824      	ldr	r0, [pc, #144]	; (8011598 <vTaskStartScheduler+0xc4>)
 8011506:	f7ff fc75 	bl	8010df4 <xTaskCreateStatic>
 801150a:	4603      	mov	r3, r0
 801150c:	4a23      	ldr	r2, [pc, #140]	; (801159c <vTaskStartScheduler+0xc8>)
 801150e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011510:	4b22      	ldr	r3, [pc, #136]	; (801159c <vTaskStartScheduler+0xc8>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d002      	beq.n	801151e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011518:	2301      	movs	r3, #1
 801151a:	617b      	str	r3, [r7, #20]
 801151c:	e001      	b.n	8011522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801151e:	2300      	movs	r3, #0
 8011520:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	2b01      	cmp	r3, #1
 8011526:	d102      	bne.n	801152e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011528:	f000 fe20 	bl	801216c <xTimerCreateTimerTask>
 801152c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	2b01      	cmp	r3, #1
 8011532:	d11b      	bne.n	801156c <vTaskStartScheduler+0x98>
	__asm volatile
 8011534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	613b      	str	r3, [r7, #16]
}
 8011546:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011548:	4b15      	ldr	r3, [pc, #84]	; (80115a0 <vTaskStartScheduler+0xcc>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	3354      	adds	r3, #84	; 0x54
 801154e:	4a15      	ldr	r2, [pc, #84]	; (80115a4 <vTaskStartScheduler+0xd0>)
 8011550:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011552:	4b15      	ldr	r3, [pc, #84]	; (80115a8 <vTaskStartScheduler+0xd4>)
 8011554:	f04f 32ff 	mov.w	r2, #4294967295
 8011558:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801155a:	4b14      	ldr	r3, [pc, #80]	; (80115ac <vTaskStartScheduler+0xd8>)
 801155c:	2201      	movs	r2, #1
 801155e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011560:	4b13      	ldr	r3, [pc, #76]	; (80115b0 <vTaskStartScheduler+0xdc>)
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011566:	f001 f9db 	bl	8012920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801156a:	e00e      	b.n	801158a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011572:	d10a      	bne.n	801158a <vTaskStartScheduler+0xb6>
	__asm volatile
 8011574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011578:	f383 8811 	msr	BASEPRI, r3
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f3bf 8f4f 	dsb	sy
 8011584:	60fb      	str	r3, [r7, #12]
}
 8011586:	bf00      	nop
 8011588:	e7fe      	b.n	8011588 <vTaskStartScheduler+0xb4>
}
 801158a:	bf00      	nop
 801158c:	3718      	adds	r7, #24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08013abc 	.word	0x08013abc
 8011598:	08011bfd 	.word	0x08011bfd
 801159c:	24008e7c 	.word	0x24008e7c
 80115a0:	24008984 	.word	0x24008984
 80115a4:	24008040 	.word	0x24008040
 80115a8:	24008e78 	.word	0x24008e78
 80115ac:	24008e64 	.word	0x24008e64
 80115b0:	24008e5c 	.word	0x24008e5c

080115b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80115b4:	b480      	push	{r7}
 80115b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80115b8:	4b04      	ldr	r3, [pc, #16]	; (80115cc <vTaskSuspendAll+0x18>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3301      	adds	r3, #1
 80115be:	4a03      	ldr	r2, [pc, #12]	; (80115cc <vTaskSuspendAll+0x18>)
 80115c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80115c2:	bf00      	nop
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr
 80115cc:	24008e80 	.word	0x24008e80

080115d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80115da:	2300      	movs	r3, #0
 80115dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80115de:	4b42      	ldr	r3, [pc, #264]	; (80116e8 <xTaskResumeAll+0x118>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d10a      	bne.n	80115fc <xTaskResumeAll+0x2c>
	__asm volatile
 80115e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	603b      	str	r3, [r7, #0]
}
 80115f8:	bf00      	nop
 80115fa:	e7fe      	b.n	80115fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80115fc:	f001 fa32 	bl	8012a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011600:	4b39      	ldr	r3, [pc, #228]	; (80116e8 <xTaskResumeAll+0x118>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3b01      	subs	r3, #1
 8011606:	4a38      	ldr	r2, [pc, #224]	; (80116e8 <xTaskResumeAll+0x118>)
 8011608:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801160a:	4b37      	ldr	r3, [pc, #220]	; (80116e8 <xTaskResumeAll+0x118>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d162      	bne.n	80116d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011612:	4b36      	ldr	r3, [pc, #216]	; (80116ec <xTaskResumeAll+0x11c>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d05e      	beq.n	80116d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801161a:	e02f      	b.n	801167c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801161c:	4b34      	ldr	r3, [pc, #208]	; (80116f0 <xTaskResumeAll+0x120>)
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	3318      	adds	r3, #24
 8011628:	4618      	mov	r0, r3
 801162a:	f7fe fbab 	bl	800fd84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	3304      	adds	r3, #4
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe fba6 	bl	800fd84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801163c:	4b2d      	ldr	r3, [pc, #180]	; (80116f4 <xTaskResumeAll+0x124>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	429a      	cmp	r2, r3
 8011642:	d903      	bls.n	801164c <xTaskResumeAll+0x7c>
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011648:	4a2a      	ldr	r2, [pc, #168]	; (80116f4 <xTaskResumeAll+0x124>)
 801164a:	6013      	str	r3, [r2, #0]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011650:	4613      	mov	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	4a27      	ldr	r2, [pc, #156]	; (80116f8 <xTaskResumeAll+0x128>)
 801165a:	441a      	add	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	3304      	adds	r3, #4
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fe fb31 	bl	800fcca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166c:	4b23      	ldr	r3, [pc, #140]	; (80116fc <xTaskResumeAll+0x12c>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011672:	429a      	cmp	r2, r3
 8011674:	d302      	bcc.n	801167c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011676:	4b22      	ldr	r3, [pc, #136]	; (8011700 <xTaskResumeAll+0x130>)
 8011678:	2201      	movs	r2, #1
 801167a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801167c:	4b1c      	ldr	r3, [pc, #112]	; (80116f0 <xTaskResumeAll+0x120>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1cb      	bne.n	801161c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801168a:	f000 fb71 	bl	8011d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801168e:	4b1d      	ldr	r3, [pc, #116]	; (8011704 <xTaskResumeAll+0x134>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d010      	beq.n	80116bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801169a:	f000 f859 	bl	8011750 <xTaskIncrementTick>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80116a4:	4b16      	ldr	r3, [pc, #88]	; (8011700 <xTaskResumeAll+0x130>)
 80116a6:	2201      	movs	r2, #1
 80116a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	3b01      	subs	r3, #1
 80116ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1f1      	bne.n	801169a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80116b6:	4b13      	ldr	r3, [pc, #76]	; (8011704 <xTaskResumeAll+0x134>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80116bc:	4b10      	ldr	r3, [pc, #64]	; (8011700 <xTaskResumeAll+0x130>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d009      	beq.n	80116d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80116c4:	2301      	movs	r3, #1
 80116c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80116c8:	4b0f      	ldr	r3, [pc, #60]	; (8011708 <xTaskResumeAll+0x138>)
 80116ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ce:	601a      	str	r2, [r3, #0]
 80116d0:	f3bf 8f4f 	dsb	sy
 80116d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116d8:	f001 f9f4 	bl	8012ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80116dc:	68bb      	ldr	r3, [r7, #8]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	24008e80 	.word	0x24008e80
 80116ec:	24008e58 	.word	0x24008e58
 80116f0:	24008e18 	.word	0x24008e18
 80116f4:	24008e60 	.word	0x24008e60
 80116f8:	24008988 	.word	0x24008988
 80116fc:	24008984 	.word	0x24008984
 8011700:	24008e6c 	.word	0x24008e6c
 8011704:	24008e68 	.word	0x24008e68
 8011708:	e000ed04 	.word	0xe000ed04

0801170c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011712:	4b05      	ldr	r3, [pc, #20]	; (8011728 <xTaskGetTickCount+0x1c>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011718:	687b      	ldr	r3, [r7, #4]
}
 801171a:	4618      	mov	r0, r3
 801171c:	370c      	adds	r7, #12
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	24008e5c 	.word	0x24008e5c

0801172c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011732:	f001 fa79 	bl	8012c28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011736:	2300      	movs	r3, #0
 8011738:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801173a:	4b04      	ldr	r3, [pc, #16]	; (801174c <xTaskGetTickCountFromISR+0x20>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011740:	683b      	ldr	r3, [r7, #0]
}
 8011742:	4618      	mov	r0, r3
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	24008e5c 	.word	0x24008e5c

08011750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011756:	2300      	movs	r3, #0
 8011758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801175a:	4b4f      	ldr	r3, [pc, #316]	; (8011898 <xTaskIncrementTick+0x148>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	f040 808f 	bne.w	8011882 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011764:	4b4d      	ldr	r3, [pc, #308]	; (801189c <xTaskIncrementTick+0x14c>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3301      	adds	r3, #1
 801176a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801176c:	4a4b      	ldr	r2, [pc, #300]	; (801189c <xTaskIncrementTick+0x14c>)
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d120      	bne.n	80117ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011778:	4b49      	ldr	r3, [pc, #292]	; (80118a0 <xTaskIncrementTick+0x150>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00a      	beq.n	8011798 <xTaskIncrementTick+0x48>
	__asm volatile
 8011782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011786:	f383 8811 	msr	BASEPRI, r3
 801178a:	f3bf 8f6f 	isb	sy
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	603b      	str	r3, [r7, #0]
}
 8011794:	bf00      	nop
 8011796:	e7fe      	b.n	8011796 <xTaskIncrementTick+0x46>
 8011798:	4b41      	ldr	r3, [pc, #260]	; (80118a0 <xTaskIncrementTick+0x150>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60fb      	str	r3, [r7, #12]
 801179e:	4b41      	ldr	r3, [pc, #260]	; (80118a4 <xTaskIncrementTick+0x154>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	4a3f      	ldr	r2, [pc, #252]	; (80118a0 <xTaskIncrementTick+0x150>)
 80117a4:	6013      	str	r3, [r2, #0]
 80117a6:	4a3f      	ldr	r2, [pc, #252]	; (80118a4 <xTaskIncrementTick+0x154>)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6013      	str	r3, [r2, #0]
 80117ac:	4b3e      	ldr	r3, [pc, #248]	; (80118a8 <xTaskIncrementTick+0x158>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3301      	adds	r3, #1
 80117b2:	4a3d      	ldr	r2, [pc, #244]	; (80118a8 <xTaskIncrementTick+0x158>)
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	f000 fadb 	bl	8011d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80117ba:	4b3c      	ldr	r3, [pc, #240]	; (80118ac <xTaskIncrementTick+0x15c>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	693a      	ldr	r2, [r7, #16]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d349      	bcc.n	8011858 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117c4:	4b36      	ldr	r3, [pc, #216]	; (80118a0 <xTaskIncrementTick+0x150>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d104      	bne.n	80117d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117ce:	4b37      	ldr	r3, [pc, #220]	; (80118ac <xTaskIncrementTick+0x15c>)
 80117d0:	f04f 32ff 	mov.w	r2, #4294967295
 80117d4:	601a      	str	r2, [r3, #0]
					break;
 80117d6:	e03f      	b.n	8011858 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117d8:	4b31      	ldr	r3, [pc, #196]	; (80118a0 <xTaskIncrementTick+0x150>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80117e8:	693a      	ldr	r2, [r7, #16]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d203      	bcs.n	80117f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80117f0:	4a2e      	ldr	r2, [pc, #184]	; (80118ac <xTaskIncrementTick+0x15c>)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80117f6:	e02f      	b.n	8011858 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	3304      	adds	r3, #4
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fe fac1 	bl	800fd84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011806:	2b00      	cmp	r3, #0
 8011808:	d004      	beq.n	8011814 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	3318      	adds	r3, #24
 801180e:	4618      	mov	r0, r3
 8011810:	f7fe fab8 	bl	800fd84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011818:	4b25      	ldr	r3, [pc, #148]	; (80118b0 <xTaskIncrementTick+0x160>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d903      	bls.n	8011828 <xTaskIncrementTick+0xd8>
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011824:	4a22      	ldr	r2, [pc, #136]	; (80118b0 <xTaskIncrementTick+0x160>)
 8011826:	6013      	str	r3, [r2, #0]
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801182c:	4613      	mov	r3, r2
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4413      	add	r3, r2
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	4a1f      	ldr	r2, [pc, #124]	; (80118b4 <xTaskIncrementTick+0x164>)
 8011836:	441a      	add	r2, r3
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	3304      	adds	r3, #4
 801183c:	4619      	mov	r1, r3
 801183e:	4610      	mov	r0, r2
 8011840:	f7fe fa43 	bl	800fcca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011848:	4b1b      	ldr	r3, [pc, #108]	; (80118b8 <xTaskIncrementTick+0x168>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801184e:	429a      	cmp	r2, r3
 8011850:	d3b8      	bcc.n	80117c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011852:	2301      	movs	r3, #1
 8011854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011856:	e7b5      	b.n	80117c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011858:	4b17      	ldr	r3, [pc, #92]	; (80118b8 <xTaskIncrementTick+0x168>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801185e:	4915      	ldr	r1, [pc, #84]	; (80118b4 <xTaskIncrementTick+0x164>)
 8011860:	4613      	mov	r3, r2
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	4413      	add	r3, r2
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	440b      	add	r3, r1
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d901      	bls.n	8011874 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011870:	2301      	movs	r3, #1
 8011872:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011874:	4b11      	ldr	r3, [pc, #68]	; (80118bc <xTaskIncrementTick+0x16c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d007      	beq.n	801188c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801187c:	2301      	movs	r3, #1
 801187e:	617b      	str	r3, [r7, #20]
 8011880:	e004      	b.n	801188c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011882:	4b0f      	ldr	r3, [pc, #60]	; (80118c0 <xTaskIncrementTick+0x170>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3301      	adds	r3, #1
 8011888:	4a0d      	ldr	r2, [pc, #52]	; (80118c0 <xTaskIncrementTick+0x170>)
 801188a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801188c:	697b      	ldr	r3, [r7, #20]
}
 801188e:	4618      	mov	r0, r3
 8011890:	3718      	adds	r7, #24
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	24008e80 	.word	0x24008e80
 801189c:	24008e5c 	.word	0x24008e5c
 80118a0:	24008e10 	.word	0x24008e10
 80118a4:	24008e14 	.word	0x24008e14
 80118a8:	24008e70 	.word	0x24008e70
 80118ac:	24008e78 	.word	0x24008e78
 80118b0:	24008e60 	.word	0x24008e60
 80118b4:	24008988 	.word	0x24008988
 80118b8:	24008984 	.word	0x24008984
 80118bc:	24008e6c 	.word	0x24008e6c
 80118c0:	24008e68 	.word	0x24008e68

080118c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80118ca:	4b2a      	ldr	r3, [pc, #168]	; (8011974 <vTaskSwitchContext+0xb0>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d003      	beq.n	80118da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80118d2:	4b29      	ldr	r3, [pc, #164]	; (8011978 <vTaskSwitchContext+0xb4>)
 80118d4:	2201      	movs	r2, #1
 80118d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80118d8:	e046      	b.n	8011968 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80118da:	4b27      	ldr	r3, [pc, #156]	; (8011978 <vTaskSwitchContext+0xb4>)
 80118dc:	2200      	movs	r2, #0
 80118de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118e0:	4b26      	ldr	r3, [pc, #152]	; (801197c <vTaskSwitchContext+0xb8>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	60fb      	str	r3, [r7, #12]
 80118e6:	e010      	b.n	801190a <vTaskSwitchContext+0x46>
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10a      	bne.n	8011904 <vTaskSwitchContext+0x40>
	__asm volatile
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	607b      	str	r3, [r7, #4]
}
 8011900:	bf00      	nop
 8011902:	e7fe      	b.n	8011902 <vTaskSwitchContext+0x3e>
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	3b01      	subs	r3, #1
 8011908:	60fb      	str	r3, [r7, #12]
 801190a:	491d      	ldr	r1, [pc, #116]	; (8011980 <vTaskSwitchContext+0xbc>)
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	440b      	add	r3, r1
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d0e4      	beq.n	80118e8 <vTaskSwitchContext+0x24>
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	4613      	mov	r3, r2
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	4413      	add	r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	4a15      	ldr	r2, [pc, #84]	; (8011980 <vTaskSwitchContext+0xbc>)
 801192a:	4413      	add	r3, r2
 801192c:	60bb      	str	r3, [r7, #8]
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	685a      	ldr	r2, [r3, #4]
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	605a      	str	r2, [r3, #4]
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	685a      	ldr	r2, [r3, #4]
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	3308      	adds	r3, #8
 8011940:	429a      	cmp	r2, r3
 8011942:	d104      	bne.n	801194e <vTaskSwitchContext+0x8a>
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	685a      	ldr	r2, [r3, #4]
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	605a      	str	r2, [r3, #4]
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	4a0b      	ldr	r2, [pc, #44]	; (8011984 <vTaskSwitchContext+0xc0>)
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	4a08      	ldr	r2, [pc, #32]	; (801197c <vTaskSwitchContext+0xb8>)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801195e:	4b09      	ldr	r3, [pc, #36]	; (8011984 <vTaskSwitchContext+0xc0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	3354      	adds	r3, #84	; 0x54
 8011964:	4a08      	ldr	r2, [pc, #32]	; (8011988 <vTaskSwitchContext+0xc4>)
 8011966:	6013      	str	r3, [r2, #0]
}
 8011968:	bf00      	nop
 801196a:	3714      	adds	r7, #20
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr
 8011974:	24008e80 	.word	0x24008e80
 8011978:	24008e6c 	.word	0x24008e6c
 801197c:	24008e60 	.word	0x24008e60
 8011980:	24008988 	.word	0x24008988
 8011984:	24008984 	.word	0x24008984
 8011988:	24008040 	.word	0x24008040

0801198c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d10a      	bne.n	80119b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	60fb      	str	r3, [r7, #12]
}
 80119ae:	bf00      	nop
 80119b0:	e7fe      	b.n	80119b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119b2:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <vTaskPlaceOnEventList+0x44>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	3318      	adds	r3, #24
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7fe f9a9 	bl	800fd12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80119c0:	2101      	movs	r1, #1
 80119c2:	6838      	ldr	r0, [r7, #0]
 80119c4:	f000 fb7e 	bl	80120c4 <prvAddCurrentTaskToDelayedList>
}
 80119c8:	bf00      	nop
 80119ca:	3710      	adds	r7, #16
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	24008984 	.word	0x24008984

080119d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10a      	bne.n	80119fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80119e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	f3bf 8f6f 	isb	sy
 80119f2:	f3bf 8f4f 	dsb	sy
 80119f6:	617b      	str	r3, [r7, #20]
}
 80119f8:	bf00      	nop
 80119fa:	e7fe      	b.n	80119fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119fc:	4b0a      	ldr	r3, [pc, #40]	; (8011a28 <vTaskPlaceOnEventListRestricted+0x54>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3318      	adds	r3, #24
 8011a02:	4619      	mov	r1, r3
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f7fe f960 	bl	800fcca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d002      	beq.n	8011a16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011a10:	f04f 33ff 	mov.w	r3, #4294967295
 8011a14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011a16:	6879      	ldr	r1, [r7, #4]
 8011a18:	68b8      	ldr	r0, [r7, #8]
 8011a1a:	f000 fb53 	bl	80120c4 <prvAddCurrentTaskToDelayedList>
	}
 8011a1e:	bf00      	nop
 8011a20:	3718      	adds	r7, #24
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	24008984 	.word	0x24008984

08011a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10a      	bne.n	8011a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	60fb      	str	r3, [r7, #12]
}
 8011a54:	bf00      	nop
 8011a56:	e7fe      	b.n	8011a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	3318      	adds	r3, #24
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe f991 	bl	800fd84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a62:	4b1e      	ldr	r3, [pc, #120]	; (8011adc <xTaskRemoveFromEventList+0xb0>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d11d      	bne.n	8011aa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	3304      	adds	r3, #4
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fe f988 	bl	800fd84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a78:	4b19      	ldr	r3, [pc, #100]	; (8011ae0 <xTaskRemoveFromEventList+0xb4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d903      	bls.n	8011a88 <xTaskRemoveFromEventList+0x5c>
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a84:	4a16      	ldr	r2, [pc, #88]	; (8011ae0 <xTaskRemoveFromEventList+0xb4>)
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4a13      	ldr	r2, [pc, #76]	; (8011ae4 <xTaskRemoveFromEventList+0xb8>)
 8011a96:	441a      	add	r2, r3
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	f7fe f913 	bl	800fcca <vListInsertEnd>
 8011aa4:	e005      	b.n	8011ab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	3318      	adds	r3, #24
 8011aaa:	4619      	mov	r1, r3
 8011aac:	480e      	ldr	r0, [pc, #56]	; (8011ae8 <xTaskRemoveFromEventList+0xbc>)
 8011aae:	f7fe f90c 	bl	800fcca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab6:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <xTaskRemoveFromEventList+0xc0>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d905      	bls.n	8011acc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ac4:	4b0a      	ldr	r3, [pc, #40]	; (8011af0 <xTaskRemoveFromEventList+0xc4>)
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	e001      	b.n	8011ad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011acc:	2300      	movs	r3, #0
 8011ace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011ad0:	697b      	ldr	r3, [r7, #20]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3718      	adds	r7, #24
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	24008e80 	.word	0x24008e80
 8011ae0:	24008e60 	.word	0x24008e60
 8011ae4:	24008988 	.word	0x24008988
 8011ae8:	24008e18 	.word	0x24008e18
 8011aec:	24008984 	.word	0x24008984
 8011af0:	24008e6c 	.word	0x24008e6c

08011af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011afc:	4b06      	ldr	r3, [pc, #24]	; (8011b18 <vTaskInternalSetTimeOutState+0x24>)
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b04:	4b05      	ldr	r3, [pc, #20]	; (8011b1c <vTaskInternalSetTimeOutState+0x28>)
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	605a      	str	r2, [r3, #4]
}
 8011b0c:	bf00      	nop
 8011b0e:	370c      	adds	r7, #12
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr
 8011b18:	24008e70 	.word	0x24008e70
 8011b1c:	24008e5c 	.word	0x24008e5c

08011b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b088      	sub	sp, #32
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d10a      	bne.n	8011b46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b34:	f383 8811 	msr	BASEPRI, r3
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	f3bf 8f4f 	dsb	sy
 8011b40:	613b      	str	r3, [r7, #16]
}
 8011b42:	bf00      	nop
 8011b44:	e7fe      	b.n	8011b44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10a      	bne.n	8011b62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	60fb      	str	r3, [r7, #12]
}
 8011b5e:	bf00      	nop
 8011b60:	e7fe      	b.n	8011b60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011b62:	f000 ff7f 	bl	8012a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b66:	4b1d      	ldr	r3, [pc, #116]	; (8011bdc <xTaskCheckForTimeOut+0xbc>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	69ba      	ldr	r2, [r7, #24]
 8011b72:	1ad3      	subs	r3, r2, r3
 8011b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7e:	d102      	bne.n	8011b86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b80:	2300      	movs	r3, #0
 8011b82:	61fb      	str	r3, [r7, #28]
 8011b84:	e023      	b.n	8011bce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <xTaskCheckForTimeOut+0xc0>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d007      	beq.n	8011ba2 <xTaskCheckForTimeOut+0x82>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	69ba      	ldr	r2, [r7, #24]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d302      	bcc.n	8011ba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	61fb      	str	r3, [r7, #28]
 8011ba0:	e015      	b.n	8011bce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	697a      	ldr	r2, [r7, #20]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d20b      	bcs.n	8011bc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	1ad2      	subs	r2, r2, r3
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff ff9b 	bl	8011af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	61fb      	str	r3, [r7, #28]
 8011bc2:	e004      	b.n	8011bce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011bce:	f000 ff79 	bl	8012ac4 <vPortExitCritical>

	return xReturn;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3720      	adds	r7, #32
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	24008e5c 	.word	0x24008e5c
 8011be0:	24008e70 	.word	0x24008e70

08011be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011be4:	b480      	push	{r7}
 8011be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011be8:	4b03      	ldr	r3, [pc, #12]	; (8011bf8 <vTaskMissedYield+0x14>)
 8011bea:	2201      	movs	r2, #1
 8011bec:	601a      	str	r2, [r3, #0]
}
 8011bee:	bf00      	nop
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr
 8011bf8:	24008e6c 	.word	0x24008e6c

08011bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c04:	f000 f852 	bl	8011cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c08:	4b06      	ldr	r3, [pc, #24]	; (8011c24 <prvIdleTask+0x28>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d9f9      	bls.n	8011c04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c10:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <prvIdleTask+0x2c>)
 8011c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c16:	601a      	str	r2, [r3, #0]
 8011c18:	f3bf 8f4f 	dsb	sy
 8011c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c20:	e7f0      	b.n	8011c04 <prvIdleTask+0x8>
 8011c22:	bf00      	nop
 8011c24:	24008988 	.word	0x24008988
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c32:	2300      	movs	r3, #0
 8011c34:	607b      	str	r3, [r7, #4]
 8011c36:	e00c      	b.n	8011c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	4413      	add	r3, r2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4a12      	ldr	r2, [pc, #72]	; (8011c8c <prvInitialiseTaskLists+0x60>)
 8011c44:	4413      	add	r3, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fe f812 	bl	800fc70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	607b      	str	r3, [r7, #4]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b37      	cmp	r3, #55	; 0x37
 8011c56:	d9ef      	bls.n	8011c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c58:	480d      	ldr	r0, [pc, #52]	; (8011c90 <prvInitialiseTaskLists+0x64>)
 8011c5a:	f7fe f809 	bl	800fc70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c5e:	480d      	ldr	r0, [pc, #52]	; (8011c94 <prvInitialiseTaskLists+0x68>)
 8011c60:	f7fe f806 	bl	800fc70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c64:	480c      	ldr	r0, [pc, #48]	; (8011c98 <prvInitialiseTaskLists+0x6c>)
 8011c66:	f7fe f803 	bl	800fc70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c6a:	480c      	ldr	r0, [pc, #48]	; (8011c9c <prvInitialiseTaskLists+0x70>)
 8011c6c:	f7fe f800 	bl	800fc70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c70:	480b      	ldr	r0, [pc, #44]	; (8011ca0 <prvInitialiseTaskLists+0x74>)
 8011c72:	f7fd fffd 	bl	800fc70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c76:	4b0b      	ldr	r3, [pc, #44]	; (8011ca4 <prvInitialiseTaskLists+0x78>)
 8011c78:	4a05      	ldr	r2, [pc, #20]	; (8011c90 <prvInitialiseTaskLists+0x64>)
 8011c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ca8 <prvInitialiseTaskLists+0x7c>)
 8011c7e:	4a05      	ldr	r2, [pc, #20]	; (8011c94 <prvInitialiseTaskLists+0x68>)
 8011c80:	601a      	str	r2, [r3, #0]
}
 8011c82:	bf00      	nop
 8011c84:	3708      	adds	r7, #8
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	24008988 	.word	0x24008988
 8011c90:	24008de8 	.word	0x24008de8
 8011c94:	24008dfc 	.word	0x24008dfc
 8011c98:	24008e18 	.word	0x24008e18
 8011c9c:	24008e2c 	.word	0x24008e2c
 8011ca0:	24008e44 	.word	0x24008e44
 8011ca4:	24008e10 	.word	0x24008e10
 8011ca8:	24008e14 	.word	0x24008e14

08011cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011cb2:	e019      	b.n	8011ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011cb4:	f000 fed6 	bl	8012a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cb8:	4b10      	ldr	r3, [pc, #64]	; (8011cfc <prvCheckTasksWaitingTermination+0x50>)
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe f85d 	bl	800fd84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011cca:	4b0d      	ldr	r3, [pc, #52]	; (8011d00 <prvCheckTasksWaitingTermination+0x54>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	4a0b      	ldr	r2, [pc, #44]	; (8011d00 <prvCheckTasksWaitingTermination+0x54>)
 8011cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011cd4:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <prvCheckTasksWaitingTermination+0x58>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	4a0a      	ldr	r2, [pc, #40]	; (8011d04 <prvCheckTasksWaitingTermination+0x58>)
 8011cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011cde:	f000 fef1 	bl	8012ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 f810 	bl	8011d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ce8:	4b06      	ldr	r3, [pc, #24]	; (8011d04 <prvCheckTasksWaitingTermination+0x58>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1e1      	bne.n	8011cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011cf0:	bf00      	nop
 8011cf2:	bf00      	nop
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	24008e2c 	.word	0x24008e2c
 8011d00:	24008e58 	.word	0x24008e58
 8011d04:	24008e40 	.word	0x24008e40

08011d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	3354      	adds	r3, #84	; 0x54
 8011d14:	4618      	mov	r0, r3
 8011d16:	f001 fa5b 	bl	80131d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d108      	bne.n	8011d36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f001 f889 	bl	8012e40 <vPortFree>
				vPortFree( pxTCB );
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f001 f886 	bl	8012e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d34:	e018      	b.n	8011d68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d103      	bne.n	8011d48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f001 f87d 	bl	8012e40 <vPortFree>
	}
 8011d46:	e00f      	b.n	8011d68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d00a      	beq.n	8011d68 <prvDeleteTCB+0x60>
	__asm volatile
 8011d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d56:	f383 8811 	msr	BASEPRI, r3
 8011d5a:	f3bf 8f6f 	isb	sy
 8011d5e:	f3bf 8f4f 	dsb	sy
 8011d62:	60fb      	str	r3, [r7, #12]
}
 8011d64:	bf00      	nop
 8011d66:	e7fe      	b.n	8011d66 <prvDeleteTCB+0x5e>
	}
 8011d68:	bf00      	nop
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d76:	4b0c      	ldr	r3, [pc, #48]	; (8011da8 <prvResetNextTaskUnblockTime+0x38>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d104      	bne.n	8011d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d80:	4b0a      	ldr	r3, [pc, #40]	; (8011dac <prvResetNextTaskUnblockTime+0x3c>)
 8011d82:	f04f 32ff 	mov.w	r2, #4294967295
 8011d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d88:	e008      	b.n	8011d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d8a:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <prvResetNextTaskUnblockTime+0x38>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	4a04      	ldr	r2, [pc, #16]	; (8011dac <prvResetNextTaskUnblockTime+0x3c>)
 8011d9a:	6013      	str	r3, [r2, #0]
}
 8011d9c:	bf00      	nop
 8011d9e:	370c      	adds	r7, #12
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr
 8011da8:	24008e10 	.word	0x24008e10
 8011dac:	24008e78 	.word	0x24008e78

08011db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011db6:	4b0b      	ldr	r3, [pc, #44]	; (8011de4 <xTaskGetSchedulerState+0x34>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d102      	bne.n	8011dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	607b      	str	r3, [r7, #4]
 8011dc2:	e008      	b.n	8011dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dc4:	4b08      	ldr	r3, [pc, #32]	; (8011de8 <xTaskGetSchedulerState+0x38>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d102      	bne.n	8011dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011dcc:	2302      	movs	r3, #2
 8011dce:	607b      	str	r3, [r7, #4]
 8011dd0:	e001      	b.n	8011dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011dd6:	687b      	ldr	r3, [r7, #4]
	}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	370c      	adds	r7, #12
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr
 8011de4:	24008e64 	.word	0x24008e64
 8011de8:	24008e80 	.word	0x24008e80

08011dec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d051      	beq.n	8011ea6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e06:	4b2a      	ldr	r3, [pc, #168]	; (8011eb0 <xTaskPriorityInherit+0xc4>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d241      	bcs.n	8011e94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	699b      	ldr	r3, [r3, #24]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	db06      	blt.n	8011e26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e18:	4b25      	ldr	r3, [pc, #148]	; (8011eb0 <xTaskPriorityInherit+0xc4>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	6959      	ldr	r1, [r3, #20]
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e2e:	4613      	mov	r3, r2
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	4a1f      	ldr	r2, [pc, #124]	; (8011eb4 <xTaskPriorityInherit+0xc8>)
 8011e38:	4413      	add	r3, r2
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	d122      	bne.n	8011e84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	3304      	adds	r3, #4
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fd ff9e 	bl	800fd84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e48:	4b19      	ldr	r3, [pc, #100]	; (8011eb0 <xTaskPriorityInherit+0xc4>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e56:	4b18      	ldr	r3, [pc, #96]	; (8011eb8 <xTaskPriorityInherit+0xcc>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d903      	bls.n	8011e66 <xTaskPriorityInherit+0x7a>
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e62:	4a15      	ldr	r2, [pc, #84]	; (8011eb8 <xTaskPriorityInherit+0xcc>)
 8011e64:	6013      	str	r3, [r2, #0]
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4a10      	ldr	r2, [pc, #64]	; (8011eb4 <xTaskPriorityInherit+0xc8>)
 8011e74:	441a      	add	r2, r3
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7fd ff24 	bl	800fcca <vListInsertEnd>
 8011e82:	e004      	b.n	8011e8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e84:	4b0a      	ldr	r3, [pc, #40]	; (8011eb0 <xTaskPriorityInherit+0xc4>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011e8e:	2301      	movs	r3, #1
 8011e90:	60fb      	str	r3, [r7, #12]
 8011e92:	e008      	b.n	8011ea6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e98:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <xTaskPriorityInherit+0xc4>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d201      	bcs.n	8011ea6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	24008984 	.word	0x24008984
 8011eb4:	24008988 	.word	0x24008988
 8011eb8:	24008e60 	.word	0x24008e60

08011ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d056      	beq.n	8011f80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ed2:	4b2e      	ldr	r3, [pc, #184]	; (8011f8c <xTaskPriorityDisinherit+0xd0>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	693a      	ldr	r2, [r7, #16]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d00a      	beq.n	8011ef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee0:	f383 8811 	msr	BASEPRI, r3
 8011ee4:	f3bf 8f6f 	isb	sy
 8011ee8:	f3bf 8f4f 	dsb	sy
 8011eec:	60fb      	str	r3, [r7, #12]
}
 8011eee:	bf00      	nop
 8011ef0:	e7fe      	b.n	8011ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10a      	bne.n	8011f10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efe:	f383 8811 	msr	BASEPRI, r3
 8011f02:	f3bf 8f6f 	isb	sy
 8011f06:	f3bf 8f4f 	dsb	sy
 8011f0a:	60bb      	str	r3, [r7, #8]
}
 8011f0c:	bf00      	nop
 8011f0e:	e7fe      	b.n	8011f0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f14:	1e5a      	subs	r2, r3, #1
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d02c      	beq.n	8011f80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d128      	bne.n	8011f80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	3304      	adds	r3, #4
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fd ff26 	bl	800fd84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f50:	4b0f      	ldr	r3, [pc, #60]	; (8011f90 <xTaskPriorityDisinherit+0xd4>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d903      	bls.n	8011f60 <xTaskPriorityDisinherit+0xa4>
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5c:	4a0c      	ldr	r2, [pc, #48]	; (8011f90 <xTaskPriorityDisinherit+0xd4>)
 8011f5e:	6013      	str	r3, [r2, #0]
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f64:	4613      	mov	r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	4413      	add	r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4a09      	ldr	r2, [pc, #36]	; (8011f94 <xTaskPriorityDisinherit+0xd8>)
 8011f6e:	441a      	add	r2, r3
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	3304      	adds	r3, #4
 8011f74:	4619      	mov	r1, r3
 8011f76:	4610      	mov	r0, r2
 8011f78:	f7fd fea7 	bl	800fcca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f80:	697b      	ldr	r3, [r7, #20]
	}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3718      	adds	r7, #24
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	24008984 	.word	0x24008984
 8011f90:	24008e60 	.word	0x24008e60
 8011f94:	24008988 	.word	0x24008988

08011f98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d06a      	beq.n	8012086 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10a      	bne.n	8011fce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	60fb      	str	r3, [r7, #12]
}
 8011fca:	bf00      	nop
 8011fcc:	e7fe      	b.n	8011fcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d902      	bls.n	8011fde <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	61fb      	str	r3, [r7, #28]
 8011fdc:	e002      	b.n	8011fe4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011fde:	69bb      	ldr	r3, [r7, #24]
 8011fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fe2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011fe4:	69bb      	ldr	r3, [r7, #24]
 8011fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe8:	69fa      	ldr	r2, [r7, #28]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d04b      	beq.n	8012086 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ff2:	697a      	ldr	r2, [r7, #20]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d146      	bne.n	8012086 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011ff8:	4b25      	ldr	r3, [pc, #148]	; (8012090 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	69ba      	ldr	r2, [r7, #24]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d10a      	bne.n	8012018 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012006:	f383 8811 	msr	BASEPRI, r3
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	60bb      	str	r3, [r7, #8]
}
 8012014:	bf00      	nop
 8012016:	e7fe      	b.n	8012016 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012018:	69bb      	ldr	r3, [r7, #24]
 801201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801201c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	69fa      	ldr	r2, [r7, #28]
 8012022:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	699b      	ldr	r3, [r3, #24]
 8012028:	2b00      	cmp	r3, #0
 801202a:	db04      	blt.n	8012036 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	6959      	ldr	r1, [r3, #20]
 801203a:	693a      	ldr	r2, [r7, #16]
 801203c:	4613      	mov	r3, r2
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	4413      	add	r3, r2
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4a13      	ldr	r2, [pc, #76]	; (8012094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012046:	4413      	add	r3, r2
 8012048:	4299      	cmp	r1, r3
 801204a:	d11c      	bne.n	8012086 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	3304      	adds	r3, #4
 8012050:	4618      	mov	r0, r3
 8012052:	f7fd fe97 	bl	800fd84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801205a:	4b0f      	ldr	r3, [pc, #60]	; (8012098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	429a      	cmp	r2, r3
 8012060:	d903      	bls.n	801206a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012066:	4a0c      	ldr	r2, [pc, #48]	; (8012098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012068:	6013      	str	r3, [r2, #0]
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801206e:	4613      	mov	r3, r2
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	4413      	add	r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4a07      	ldr	r2, [pc, #28]	; (8012094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012078:	441a      	add	r2, r3
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	3304      	adds	r3, #4
 801207e:	4619      	mov	r1, r3
 8012080:	4610      	mov	r0, r2
 8012082:	f7fd fe22 	bl	800fcca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012086:	bf00      	nop
 8012088:	3720      	adds	r7, #32
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	24008984 	.word	0x24008984
 8012094:	24008988 	.word	0x24008988
 8012098:	24008e60 	.word	0x24008e60

0801209c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80120a0:	4b07      	ldr	r3, [pc, #28]	; (80120c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d004      	beq.n	80120b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80120a8:	4b05      	ldr	r3, [pc, #20]	; (80120c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120ae:	3201      	adds	r2, #1
 80120b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80120b2:	4b03      	ldr	r3, [pc, #12]	; (80120c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120b4:	681b      	ldr	r3, [r3, #0]
	}
 80120b6:	4618      	mov	r0, r3
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	24008984 	.word	0x24008984

080120c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120ce:	4b21      	ldr	r3, [pc, #132]	; (8012154 <prvAddCurrentTaskToDelayedList+0x90>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120d4:	4b20      	ldr	r3, [pc, #128]	; (8012158 <prvAddCurrentTaskToDelayedList+0x94>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	3304      	adds	r3, #4
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fd fe52 	bl	800fd84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e6:	d10a      	bne.n	80120fe <prvAddCurrentTaskToDelayedList+0x3a>
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d007      	beq.n	80120fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120ee:	4b1a      	ldr	r3, [pc, #104]	; (8012158 <prvAddCurrentTaskToDelayedList+0x94>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4619      	mov	r1, r3
 80120f6:	4819      	ldr	r0, [pc, #100]	; (801215c <prvAddCurrentTaskToDelayedList+0x98>)
 80120f8:	f7fd fde7 	bl	800fcca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80120fc:	e026      	b.n	801214c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	4413      	add	r3, r2
 8012104:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012106:	4b14      	ldr	r3, [pc, #80]	; (8012158 <prvAddCurrentTaskToDelayedList+0x94>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801210e:	68ba      	ldr	r2, [r7, #8]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	429a      	cmp	r2, r3
 8012114:	d209      	bcs.n	801212a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012116:	4b12      	ldr	r3, [pc, #72]	; (8012160 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	4b0f      	ldr	r3, [pc, #60]	; (8012158 <prvAddCurrentTaskToDelayedList+0x94>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	3304      	adds	r3, #4
 8012120:	4619      	mov	r1, r3
 8012122:	4610      	mov	r0, r2
 8012124:	f7fd fdf5 	bl	800fd12 <vListInsert>
}
 8012128:	e010      	b.n	801214c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801212a:	4b0e      	ldr	r3, [pc, #56]	; (8012164 <prvAddCurrentTaskToDelayedList+0xa0>)
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	4b0a      	ldr	r3, [pc, #40]	; (8012158 <prvAddCurrentTaskToDelayedList+0x94>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	3304      	adds	r3, #4
 8012134:	4619      	mov	r1, r3
 8012136:	4610      	mov	r0, r2
 8012138:	f7fd fdeb 	bl	800fd12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801213c:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <prvAddCurrentTaskToDelayedList+0xa4>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	429a      	cmp	r2, r3
 8012144:	d202      	bcs.n	801214c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012146:	4a08      	ldr	r2, [pc, #32]	; (8012168 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	6013      	str	r3, [r2, #0]
}
 801214c:	bf00      	nop
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	24008e5c 	.word	0x24008e5c
 8012158:	24008984 	.word	0x24008984
 801215c:	24008e44 	.word	0x24008e44
 8012160:	24008e14 	.word	0x24008e14
 8012164:	24008e10 	.word	0x24008e10
 8012168:	24008e78 	.word	0x24008e78

0801216c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08a      	sub	sp, #40	; 0x28
 8012170:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012172:	2300      	movs	r3, #0
 8012174:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012176:	f000 fb07 	bl	8012788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801217a:	4b1c      	ldr	r3, [pc, #112]	; (80121ec <xTimerCreateTimerTask+0x80>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d021      	beq.n	80121c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012182:	2300      	movs	r3, #0
 8012184:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012186:	2300      	movs	r3, #0
 8012188:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801218a:	1d3a      	adds	r2, r7, #4
 801218c:	f107 0108 	add.w	r1, r7, #8
 8012190:	f107 030c 	add.w	r3, r7, #12
 8012194:	4618      	mov	r0, r3
 8012196:	f7fd fd51 	bl	800fc3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	9202      	str	r2, [sp, #8]
 80121a2:	9301      	str	r3, [sp, #4]
 80121a4:	2302      	movs	r3, #2
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	2300      	movs	r3, #0
 80121aa:	460a      	mov	r2, r1
 80121ac:	4910      	ldr	r1, [pc, #64]	; (80121f0 <xTimerCreateTimerTask+0x84>)
 80121ae:	4811      	ldr	r0, [pc, #68]	; (80121f4 <xTimerCreateTimerTask+0x88>)
 80121b0:	f7fe fe20 	bl	8010df4 <xTaskCreateStatic>
 80121b4:	4603      	mov	r3, r0
 80121b6:	4a10      	ldr	r2, [pc, #64]	; (80121f8 <xTimerCreateTimerTask+0x8c>)
 80121b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80121ba:	4b0f      	ldr	r3, [pc, #60]	; (80121f8 <xTimerCreateTimerTask+0x8c>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80121c2:	2301      	movs	r3, #1
 80121c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d10a      	bne.n	80121e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80121cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d0:	f383 8811 	msr	BASEPRI, r3
 80121d4:	f3bf 8f6f 	isb	sy
 80121d8:	f3bf 8f4f 	dsb	sy
 80121dc:	613b      	str	r3, [r7, #16]
}
 80121de:	bf00      	nop
 80121e0:	e7fe      	b.n	80121e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80121e2:	697b      	ldr	r3, [r7, #20]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3718      	adds	r7, #24
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	24008eb4 	.word	0x24008eb4
 80121f0:	08013ac4 	.word	0x08013ac4
 80121f4:	08012331 	.word	0x08012331
 80121f8:	24008eb8 	.word	0x24008eb8

080121fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b08a      	sub	sp, #40	; 0x28
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801220a:	2300      	movs	r3, #0
 801220c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10a      	bne.n	801222a <xTimerGenericCommand+0x2e>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	623b      	str	r3, [r7, #32]
}
 8012226:	bf00      	nop
 8012228:	e7fe      	b.n	8012228 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801222a:	4b1a      	ldr	r3, [pc, #104]	; (8012294 <xTimerGenericCommand+0x98>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d02a      	beq.n	8012288 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2b05      	cmp	r3, #5
 8012242:	dc18      	bgt.n	8012276 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012244:	f7ff fdb4 	bl	8011db0 <xTaskGetSchedulerState>
 8012248:	4603      	mov	r3, r0
 801224a:	2b02      	cmp	r3, #2
 801224c:	d109      	bne.n	8012262 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801224e:	4b11      	ldr	r3, [pc, #68]	; (8012294 <xTimerGenericCommand+0x98>)
 8012250:	6818      	ldr	r0, [r3, #0]
 8012252:	f107 0110 	add.w	r1, r7, #16
 8012256:	2300      	movs	r3, #0
 8012258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225a:	f7fd ff65 	bl	8010128 <xQueueGenericSend>
 801225e:	6278      	str	r0, [r7, #36]	; 0x24
 8012260:	e012      	b.n	8012288 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012262:	4b0c      	ldr	r3, [pc, #48]	; (8012294 <xTimerGenericCommand+0x98>)
 8012264:	6818      	ldr	r0, [r3, #0]
 8012266:	f107 0110 	add.w	r1, r7, #16
 801226a:	2300      	movs	r3, #0
 801226c:	2200      	movs	r2, #0
 801226e:	f7fd ff5b 	bl	8010128 <xQueueGenericSend>
 8012272:	6278      	str	r0, [r7, #36]	; 0x24
 8012274:	e008      	b.n	8012288 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012276:	4b07      	ldr	r3, [pc, #28]	; (8012294 <xTimerGenericCommand+0x98>)
 8012278:	6818      	ldr	r0, [r3, #0]
 801227a:	f107 0110 	add.w	r1, r7, #16
 801227e:	2300      	movs	r3, #0
 8012280:	683a      	ldr	r2, [r7, #0]
 8012282:	f7fe f84f 	bl	8010324 <xQueueGenericSendFromISR>
 8012286:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801228a:	4618      	mov	r0, r3
 801228c:	3728      	adds	r7, #40	; 0x28
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	24008eb4 	.word	0x24008eb4

08012298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b088      	sub	sp, #32
 801229c:	af02      	add	r7, sp, #8
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122a2:	4b22      	ldr	r3, [pc, #136]	; (801232c <prvProcessExpiredTimer+0x94>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	3304      	adds	r3, #4
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fd fd67 	bl	800fd84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d022      	beq.n	801230a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	699a      	ldr	r2, [r3, #24]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	18d1      	adds	r1, r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	683a      	ldr	r2, [r7, #0]
 80122d0:	6978      	ldr	r0, [r7, #20]
 80122d2:	f000 f8d1 	bl	8012478 <prvInsertTimerInActiveList>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d01f      	beq.n	801231c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80122dc:	2300      	movs	r3, #0
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	2300      	movs	r3, #0
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	2100      	movs	r1, #0
 80122e6:	6978      	ldr	r0, [r7, #20]
 80122e8:	f7ff ff88 	bl	80121fc <xTimerGenericCommand>
 80122ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d113      	bne.n	801231c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80122f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	60fb      	str	r3, [r7, #12]
}
 8012306:	bf00      	nop
 8012308:	e7fe      	b.n	8012308 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012310:	f023 0301 	bic.w	r3, r3, #1
 8012314:	b2da      	uxtb	r2, r3
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	6a1b      	ldr	r3, [r3, #32]
 8012320:	6978      	ldr	r0, [r7, #20]
 8012322:	4798      	blx	r3
}
 8012324:	bf00      	nop
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	24008eac 	.word	0x24008eac

08012330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012338:	f107 0308 	add.w	r3, r7, #8
 801233c:	4618      	mov	r0, r3
 801233e:	f000 f857 	bl	80123f0 <prvGetNextExpireTime>
 8012342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	4619      	mov	r1, r3
 8012348:	68f8      	ldr	r0, [r7, #12]
 801234a:	f000 f803 	bl	8012354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801234e:	f000 f8d5 	bl	80124fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012352:	e7f1      	b.n	8012338 <prvTimerTask+0x8>

08012354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801235e:	f7ff f929 	bl	80115b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012362:	f107 0308 	add.w	r3, r7, #8
 8012366:	4618      	mov	r0, r3
 8012368:	f000 f866 	bl	8012438 <prvSampleTimeNow>
 801236c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d130      	bne.n	80123d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10a      	bne.n	8012390 <prvProcessTimerOrBlockTask+0x3c>
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	429a      	cmp	r2, r3
 8012380:	d806      	bhi.n	8012390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012382:	f7ff f925 	bl	80115d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012386:	68f9      	ldr	r1, [r7, #12]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7ff ff85 	bl	8012298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801238e:	e024      	b.n	80123da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d008      	beq.n	80123a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012396:	4b13      	ldr	r3, [pc, #76]	; (80123e4 <prvProcessTimerOrBlockTask+0x90>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d101      	bne.n	80123a4 <prvProcessTimerOrBlockTask+0x50>
 80123a0:	2301      	movs	r3, #1
 80123a2:	e000      	b.n	80123a6 <prvProcessTimerOrBlockTask+0x52>
 80123a4:	2300      	movs	r3, #0
 80123a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80123a8:	4b0f      	ldr	r3, [pc, #60]	; (80123e8 <prvProcessTimerOrBlockTask+0x94>)
 80123aa:	6818      	ldr	r0, [r3, #0]
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	683a      	ldr	r2, [r7, #0]
 80123b4:	4619      	mov	r1, r3
 80123b6:	f7fe fce9 	bl	8010d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80123ba:	f7ff f909 	bl	80115d0 <xTaskResumeAll>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10a      	bne.n	80123da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80123c4:	4b09      	ldr	r3, [pc, #36]	; (80123ec <prvProcessTimerOrBlockTask+0x98>)
 80123c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	f3bf 8f6f 	isb	sy
}
 80123d4:	e001      	b.n	80123da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80123d6:	f7ff f8fb 	bl	80115d0 <xTaskResumeAll>
}
 80123da:	bf00      	nop
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	24008eb0 	.word	0x24008eb0
 80123e8:	24008eb4 	.word	0x24008eb4
 80123ec:	e000ed04 	.word	0xe000ed04

080123f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80123f0:	b480      	push	{r7}
 80123f2:	b085      	sub	sp, #20
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80123f8:	4b0e      	ldr	r3, [pc, #56]	; (8012434 <prvGetNextExpireTime+0x44>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d101      	bne.n	8012406 <prvGetNextExpireTime+0x16>
 8012402:	2201      	movs	r2, #1
 8012404:	e000      	b.n	8012408 <prvGetNextExpireTime+0x18>
 8012406:	2200      	movs	r2, #0
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d105      	bne.n	8012420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012414:	4b07      	ldr	r3, [pc, #28]	; (8012434 <prvGetNextExpireTime+0x44>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	60fb      	str	r3, [r7, #12]
 801241e:	e001      	b.n	8012424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012420:	2300      	movs	r3, #0
 8012422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012424:	68fb      	ldr	r3, [r7, #12]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3714      	adds	r7, #20
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	24008eac 	.word	0x24008eac

08012438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012440:	f7ff f964 	bl	801170c <xTaskGetTickCount>
 8012444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012446:	4b0b      	ldr	r3, [pc, #44]	; (8012474 <prvSampleTimeNow+0x3c>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	429a      	cmp	r2, r3
 801244e:	d205      	bcs.n	801245c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012450:	f000 f936 	bl	80126c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	e002      	b.n	8012462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012462:	4a04      	ldr	r2, [pc, #16]	; (8012474 <prvSampleTimeNow+0x3c>)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012468:	68fb      	ldr	r3, [r7, #12]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	24008ebc 	.word	0x24008ebc

08012478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
 8012484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012486:	2300      	movs	r3, #0
 8012488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	68ba      	ldr	r2, [r7, #8]
 801248e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012496:	68ba      	ldr	r2, [r7, #8]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	429a      	cmp	r2, r3
 801249c:	d812      	bhi.n	80124c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	1ad2      	subs	r2, r2, r3
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	699b      	ldr	r3, [r3, #24]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d302      	bcc.n	80124b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80124ac:	2301      	movs	r3, #1
 80124ae:	617b      	str	r3, [r7, #20]
 80124b0:	e01b      	b.n	80124ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80124b2:	4b10      	ldr	r3, [pc, #64]	; (80124f4 <prvInsertTimerInActiveList+0x7c>)
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	3304      	adds	r3, #4
 80124ba:	4619      	mov	r1, r3
 80124bc:	4610      	mov	r0, r2
 80124be:	f7fd fc28 	bl	800fd12 <vListInsert>
 80124c2:	e012      	b.n	80124ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d206      	bcs.n	80124da <prvInsertTimerInActiveList+0x62>
 80124cc:	68ba      	ldr	r2, [r7, #8]
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d302      	bcc.n	80124da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80124d4:	2301      	movs	r3, #1
 80124d6:	617b      	str	r3, [r7, #20]
 80124d8:	e007      	b.n	80124ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124da:	4b07      	ldr	r3, [pc, #28]	; (80124f8 <prvInsertTimerInActiveList+0x80>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	3304      	adds	r3, #4
 80124e2:	4619      	mov	r1, r3
 80124e4:	4610      	mov	r0, r2
 80124e6:	f7fd fc14 	bl	800fd12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80124ea:	697b      	ldr	r3, [r7, #20]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3718      	adds	r7, #24
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	24008eb0 	.word	0x24008eb0
 80124f8:	24008eac 	.word	0x24008eac

080124fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b08e      	sub	sp, #56	; 0x38
 8012500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012502:	e0ca      	b.n	801269a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	da18      	bge.n	801253c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801250a:	1d3b      	adds	r3, r7, #4
 801250c:	3304      	adds	r3, #4
 801250e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012512:	2b00      	cmp	r3, #0
 8012514:	d10a      	bne.n	801252c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801251a:	f383 8811 	msr	BASEPRI, r3
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	61fb      	str	r3, [r7, #28]
}
 8012528:	bf00      	nop
 801252a:	e7fe      	b.n	801252a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012532:	6850      	ldr	r0, [r2, #4]
 8012534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012536:	6892      	ldr	r2, [r2, #8]
 8012538:	4611      	mov	r1, r2
 801253a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	f2c0 80aa 	blt.w	8012698 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254a:	695b      	ldr	r3, [r3, #20]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d004      	beq.n	801255a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	3304      	adds	r3, #4
 8012554:	4618      	mov	r0, r3
 8012556:	f7fd fc15 	bl	800fd84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801255a:	463b      	mov	r3, r7
 801255c:	4618      	mov	r0, r3
 801255e:	f7ff ff6b 	bl	8012438 <prvSampleTimeNow>
 8012562:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b09      	cmp	r3, #9
 8012568:	f200 8097 	bhi.w	801269a <prvProcessReceivedCommands+0x19e>
 801256c:	a201      	add	r2, pc, #4	; (adr r2, 8012574 <prvProcessReceivedCommands+0x78>)
 801256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012572:	bf00      	nop
 8012574:	0801259d 	.word	0x0801259d
 8012578:	0801259d 	.word	0x0801259d
 801257c:	0801259d 	.word	0x0801259d
 8012580:	08012611 	.word	0x08012611
 8012584:	08012625 	.word	0x08012625
 8012588:	0801266f 	.word	0x0801266f
 801258c:	0801259d 	.word	0x0801259d
 8012590:	0801259d 	.word	0x0801259d
 8012594:	08012611 	.word	0x08012611
 8012598:	08012625 	.word	0x08012625
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125a2:	f043 0301 	orr.w	r3, r3, #1
 80125a6:	b2da      	uxtb	r2, r3
 80125a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125b2:	699b      	ldr	r3, [r3, #24]
 80125b4:	18d1      	adds	r1, r2, r3
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125bc:	f7ff ff5c 	bl	8012478 <prvInsertTimerInActiveList>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d069      	beq.n	801269a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d4:	f003 0304 	and.w	r3, r3, #4
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d05e      	beq.n	801269a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e0:	699b      	ldr	r3, [r3, #24]
 80125e2:	441a      	add	r2, r3
 80125e4:	2300      	movs	r3, #0
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	2300      	movs	r3, #0
 80125ea:	2100      	movs	r1, #0
 80125ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125ee:	f7ff fe05 	bl	80121fc <xTimerGenericCommand>
 80125f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d14f      	bne.n	801269a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	61bb      	str	r3, [r7, #24]
}
 801260c:	bf00      	nop
 801260e:	e7fe      	b.n	801260e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012616:	f023 0301 	bic.w	r3, r3, #1
 801261a:	b2da      	uxtb	r2, r3
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012622:	e03a      	b.n	801269a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801262a:	f043 0301 	orr.w	r3, r3, #1
 801262e:	b2da      	uxtb	r2, r3
 8012630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012636:	68ba      	ldr	r2, [r7, #8]
 8012638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263e:	699b      	ldr	r3, [r3, #24]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10a      	bne.n	801265a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	617b      	str	r3, [r7, #20]
}
 8012656:	bf00      	nop
 8012658:	e7fe      	b.n	8012658 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265c:	699a      	ldr	r2, [r3, #24]
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	18d1      	adds	r1, r2, r3
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012668:	f7ff ff06 	bl	8012478 <prvInsertTimerInActiveList>
					break;
 801266c:	e015      	b.n	801269a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012674:	f003 0302 	and.w	r3, r3, #2
 8012678:	2b00      	cmp	r3, #0
 801267a:	d103      	bne.n	8012684 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801267e:	f000 fbdf 	bl	8012e40 <vPortFree>
 8012682:	e00a      	b.n	801269a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801268a:	f023 0301 	bic.w	r3, r3, #1
 801268e:	b2da      	uxtb	r2, r3
 8012690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012696:	e000      	b.n	801269a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012698:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801269a:	4b08      	ldr	r3, [pc, #32]	; (80126bc <prvProcessReceivedCommands+0x1c0>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	1d39      	adds	r1, r7, #4
 80126a0:	2200      	movs	r2, #0
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7fd ff66 	bl	8010574 <xQueueReceive>
 80126a8:	4603      	mov	r3, r0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f47f af2a 	bne.w	8012504 <prvProcessReceivedCommands+0x8>
	}
}
 80126b0:	bf00      	nop
 80126b2:	bf00      	nop
 80126b4:	3730      	adds	r7, #48	; 0x30
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	24008eb4 	.word	0x24008eb4

080126c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b088      	sub	sp, #32
 80126c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80126c6:	e048      	b.n	801275a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80126c8:	4b2d      	ldr	r3, [pc, #180]	; (8012780 <prvSwitchTimerLists+0xc0>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126d2:	4b2b      	ldr	r3, [pc, #172]	; (8012780 <prvSwitchTimerLists+0xc0>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	3304      	adds	r3, #4
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fd fb4f 	bl	800fd84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6a1b      	ldr	r3, [r3, #32]
 80126ea:	68f8      	ldr	r0, [r7, #12]
 80126ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126f4:	f003 0304 	and.w	r3, r3, #4
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d02e      	beq.n	801275a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	693a      	ldr	r2, [r7, #16]
 8012702:	4413      	add	r3, r2
 8012704:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	429a      	cmp	r2, r3
 801270c:	d90e      	bls.n	801272c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801271a:	4b19      	ldr	r3, [pc, #100]	; (8012780 <prvSwitchTimerLists+0xc0>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3304      	adds	r3, #4
 8012722:	4619      	mov	r1, r3
 8012724:	4610      	mov	r0, r2
 8012726:	f7fd faf4 	bl	800fd12 <vListInsert>
 801272a:	e016      	b.n	801275a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801272c:	2300      	movs	r3, #0
 801272e:	9300      	str	r3, [sp, #0]
 8012730:	2300      	movs	r3, #0
 8012732:	693a      	ldr	r2, [r7, #16]
 8012734:	2100      	movs	r1, #0
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f7ff fd60 	bl	80121fc <xTimerGenericCommand>
 801273c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10a      	bne.n	801275a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	603b      	str	r3, [r7, #0]
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801275a:	4b09      	ldr	r3, [pc, #36]	; (8012780 <prvSwitchTimerLists+0xc0>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d1b1      	bne.n	80126c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012764:	4b06      	ldr	r3, [pc, #24]	; (8012780 <prvSwitchTimerLists+0xc0>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801276a:	4b06      	ldr	r3, [pc, #24]	; (8012784 <prvSwitchTimerLists+0xc4>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	4a04      	ldr	r2, [pc, #16]	; (8012780 <prvSwitchTimerLists+0xc0>)
 8012770:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012772:	4a04      	ldr	r2, [pc, #16]	; (8012784 <prvSwitchTimerLists+0xc4>)
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	6013      	str	r3, [r2, #0]
}
 8012778:	bf00      	nop
 801277a:	3718      	adds	r7, #24
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	24008eac 	.word	0x24008eac
 8012784:	24008eb0 	.word	0x24008eb0

08012788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801278e:	f000 f969 	bl	8012a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012792:	4b15      	ldr	r3, [pc, #84]	; (80127e8 <prvCheckForValidListAndQueue+0x60>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d120      	bne.n	80127dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801279a:	4814      	ldr	r0, [pc, #80]	; (80127ec <prvCheckForValidListAndQueue+0x64>)
 801279c:	f7fd fa68 	bl	800fc70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80127a0:	4813      	ldr	r0, [pc, #76]	; (80127f0 <prvCheckForValidListAndQueue+0x68>)
 80127a2:	f7fd fa65 	bl	800fc70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80127a6:	4b13      	ldr	r3, [pc, #76]	; (80127f4 <prvCheckForValidListAndQueue+0x6c>)
 80127a8:	4a10      	ldr	r2, [pc, #64]	; (80127ec <prvCheckForValidListAndQueue+0x64>)
 80127aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80127ac:	4b12      	ldr	r3, [pc, #72]	; (80127f8 <prvCheckForValidListAndQueue+0x70>)
 80127ae:	4a10      	ldr	r2, [pc, #64]	; (80127f0 <prvCheckForValidListAndQueue+0x68>)
 80127b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80127b2:	2300      	movs	r3, #0
 80127b4:	9300      	str	r3, [sp, #0]
 80127b6:	4b11      	ldr	r3, [pc, #68]	; (80127fc <prvCheckForValidListAndQueue+0x74>)
 80127b8:	4a11      	ldr	r2, [pc, #68]	; (8012800 <prvCheckForValidListAndQueue+0x78>)
 80127ba:	2110      	movs	r1, #16
 80127bc:	200a      	movs	r0, #10
 80127be:	f7fd fb73 	bl	800fea8 <xQueueGenericCreateStatic>
 80127c2:	4603      	mov	r3, r0
 80127c4:	4a08      	ldr	r2, [pc, #32]	; (80127e8 <prvCheckForValidListAndQueue+0x60>)
 80127c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80127c8:	4b07      	ldr	r3, [pc, #28]	; (80127e8 <prvCheckForValidListAndQueue+0x60>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d005      	beq.n	80127dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80127d0:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <prvCheckForValidListAndQueue+0x60>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	490b      	ldr	r1, [pc, #44]	; (8012804 <prvCheckForValidListAndQueue+0x7c>)
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fe fa84 	bl	8010ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127dc:	f000 f972 	bl	8012ac4 <vPortExitCritical>
}
 80127e0:	bf00      	nop
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	24008eb4 	.word	0x24008eb4
 80127ec:	24008e84 	.word	0x24008e84
 80127f0:	24008e98 	.word	0x24008e98
 80127f4:	24008eac 	.word	0x24008eac
 80127f8:	24008eb0 	.word	0x24008eb0
 80127fc:	24008f60 	.word	0x24008f60
 8012800:	24008ec0 	.word	0x24008ec0
 8012804:	08013acc 	.word	0x08013acc

08012808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012808:	b480      	push	{r7}
 801280a:	b085      	sub	sp, #20
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	3b04      	subs	r3, #4
 8012818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	3b04      	subs	r3, #4
 8012826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	f023 0201 	bic.w	r2, r3, #1
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	3b04      	subs	r3, #4
 8012836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012838:	4a0c      	ldr	r2, [pc, #48]	; (801286c <pxPortInitialiseStack+0x64>)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3b14      	subs	r3, #20
 8012842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	3b04      	subs	r3, #4
 801284e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	f06f 0202 	mvn.w	r2, #2
 8012856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	3b20      	subs	r3, #32
 801285c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801285e:	68fb      	ldr	r3, [r7, #12]
}
 8012860:	4618      	mov	r0, r3
 8012862:	3714      	adds	r7, #20
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	08012871 	.word	0x08012871

08012870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012870:	b480      	push	{r7}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801287a:	4b12      	ldr	r3, [pc, #72]	; (80128c4 <prvTaskExitError+0x54>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012882:	d00a      	beq.n	801289a <prvTaskExitError+0x2a>
	__asm volatile
 8012884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012888:	f383 8811 	msr	BASEPRI, r3
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	f3bf 8f4f 	dsb	sy
 8012894:	60fb      	str	r3, [r7, #12]
}
 8012896:	bf00      	nop
 8012898:	e7fe      	b.n	8012898 <prvTaskExitError+0x28>
	__asm volatile
 801289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289e:	f383 8811 	msr	BASEPRI, r3
 80128a2:	f3bf 8f6f 	isb	sy
 80128a6:	f3bf 8f4f 	dsb	sy
 80128aa:	60bb      	str	r3, [r7, #8]
}
 80128ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80128ae:	bf00      	nop
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d0fc      	beq.n	80128b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80128b6:	bf00      	nop
 80128b8:	bf00      	nop
 80128ba:	3714      	adds	r7, #20
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	2400803c 	.word	0x2400803c
	...

080128d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80128d0:	4b07      	ldr	r3, [pc, #28]	; (80128f0 <pxCurrentTCBConst2>)
 80128d2:	6819      	ldr	r1, [r3, #0]
 80128d4:	6808      	ldr	r0, [r1, #0]
 80128d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128da:	f380 8809 	msr	PSP, r0
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f04f 0000 	mov.w	r0, #0
 80128e6:	f380 8811 	msr	BASEPRI, r0
 80128ea:	4770      	bx	lr
 80128ec:	f3af 8000 	nop.w

080128f0 <pxCurrentTCBConst2>:
 80128f0:	24008984 	.word	0x24008984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80128f4:	bf00      	nop
 80128f6:	bf00      	nop

080128f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80128f8:	4808      	ldr	r0, [pc, #32]	; (801291c <prvPortStartFirstTask+0x24>)
 80128fa:	6800      	ldr	r0, [r0, #0]
 80128fc:	6800      	ldr	r0, [r0, #0]
 80128fe:	f380 8808 	msr	MSP, r0
 8012902:	f04f 0000 	mov.w	r0, #0
 8012906:	f380 8814 	msr	CONTROL, r0
 801290a:	b662      	cpsie	i
 801290c:	b661      	cpsie	f
 801290e:	f3bf 8f4f 	dsb	sy
 8012912:	f3bf 8f6f 	isb	sy
 8012916:	df00      	svc	0
 8012918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801291a:	bf00      	nop
 801291c:	e000ed08 	.word	0xe000ed08

08012920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b086      	sub	sp, #24
 8012924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012926:	4b46      	ldr	r3, [pc, #280]	; (8012a40 <xPortStartScheduler+0x120>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a46      	ldr	r2, [pc, #280]	; (8012a44 <xPortStartScheduler+0x124>)
 801292c:	4293      	cmp	r3, r2
 801292e:	d10a      	bne.n	8012946 <xPortStartScheduler+0x26>
	__asm volatile
 8012930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	613b      	str	r3, [r7, #16]
}
 8012942:	bf00      	nop
 8012944:	e7fe      	b.n	8012944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012946:	4b3e      	ldr	r3, [pc, #248]	; (8012a40 <xPortStartScheduler+0x120>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a3f      	ldr	r2, [pc, #252]	; (8012a48 <xPortStartScheduler+0x128>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d10a      	bne.n	8012966 <xPortStartScheduler+0x46>
	__asm volatile
 8012950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	60fb      	str	r3, [r7, #12]
}
 8012962:	bf00      	nop
 8012964:	e7fe      	b.n	8012964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012966:	4b39      	ldr	r3, [pc, #228]	; (8012a4c <xPortStartScheduler+0x12c>)
 8012968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	b2db      	uxtb	r3, r3
 8012970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	22ff      	movs	r2, #255	; 0xff
 8012976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	b2db      	uxtb	r3, r3
 801297e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012980:	78fb      	ldrb	r3, [r7, #3]
 8012982:	b2db      	uxtb	r3, r3
 8012984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012988:	b2da      	uxtb	r2, r3
 801298a:	4b31      	ldr	r3, [pc, #196]	; (8012a50 <xPortStartScheduler+0x130>)
 801298c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801298e:	4b31      	ldr	r3, [pc, #196]	; (8012a54 <xPortStartScheduler+0x134>)
 8012990:	2207      	movs	r2, #7
 8012992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012994:	e009      	b.n	80129aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012996:	4b2f      	ldr	r3, [pc, #188]	; (8012a54 <xPortStartScheduler+0x134>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	3b01      	subs	r3, #1
 801299c:	4a2d      	ldr	r2, [pc, #180]	; (8012a54 <xPortStartScheduler+0x134>)
 801299e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129a0:	78fb      	ldrb	r3, [r7, #3]
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129aa:	78fb      	ldrb	r3, [r7, #3]
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129b2:	2b80      	cmp	r3, #128	; 0x80
 80129b4:	d0ef      	beq.n	8012996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80129b6:	4b27      	ldr	r3, [pc, #156]	; (8012a54 <xPortStartScheduler+0x134>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f1c3 0307 	rsb	r3, r3, #7
 80129be:	2b04      	cmp	r3, #4
 80129c0:	d00a      	beq.n	80129d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80129c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c6:	f383 8811 	msr	BASEPRI, r3
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	60bb      	str	r3, [r7, #8]
}
 80129d4:	bf00      	nop
 80129d6:	e7fe      	b.n	80129d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80129d8:	4b1e      	ldr	r3, [pc, #120]	; (8012a54 <xPortStartScheduler+0x134>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	021b      	lsls	r3, r3, #8
 80129de:	4a1d      	ldr	r2, [pc, #116]	; (8012a54 <xPortStartScheduler+0x134>)
 80129e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80129e2:	4b1c      	ldr	r3, [pc, #112]	; (8012a54 <xPortStartScheduler+0x134>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80129ea:	4a1a      	ldr	r2, [pc, #104]	; (8012a54 <xPortStartScheduler+0x134>)
 80129ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80129f6:	4b18      	ldr	r3, [pc, #96]	; (8012a58 <xPortStartScheduler+0x138>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a17      	ldr	r2, [pc, #92]	; (8012a58 <xPortStartScheduler+0x138>)
 80129fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a02:	4b15      	ldr	r3, [pc, #84]	; (8012a58 <xPortStartScheduler+0x138>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4a14      	ldr	r2, [pc, #80]	; (8012a58 <xPortStartScheduler+0x138>)
 8012a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a0e:	f000 f8dd 	bl	8012bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a12:	4b12      	ldr	r3, [pc, #72]	; (8012a5c <xPortStartScheduler+0x13c>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a18:	f000 f8fc 	bl	8012c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a1c:	4b10      	ldr	r3, [pc, #64]	; (8012a60 <xPortStartScheduler+0x140>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a0f      	ldr	r2, [pc, #60]	; (8012a60 <xPortStartScheduler+0x140>)
 8012a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a28:	f7ff ff66 	bl	80128f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a2c:	f7fe ff4a 	bl	80118c4 <vTaskSwitchContext>
	prvTaskExitError();
 8012a30:	f7ff ff1e 	bl	8012870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3718      	adds	r7, #24
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	e000ed00 	.word	0xe000ed00
 8012a44:	410fc271 	.word	0x410fc271
 8012a48:	410fc270 	.word	0x410fc270
 8012a4c:	e000e400 	.word	0xe000e400
 8012a50:	24008fb0 	.word	0x24008fb0
 8012a54:	24008fb4 	.word	0x24008fb4
 8012a58:	e000ed20 	.word	0xe000ed20
 8012a5c:	2400803c 	.word	0x2400803c
 8012a60:	e000ef34 	.word	0xe000ef34

08012a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012a64:	b480      	push	{r7}
 8012a66:	b083      	sub	sp, #12
 8012a68:	af00      	add	r7, sp, #0
	__asm volatile
 8012a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6e:	f383 8811 	msr	BASEPRI, r3
 8012a72:	f3bf 8f6f 	isb	sy
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	607b      	str	r3, [r7, #4]
}
 8012a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012a7e:	4b0f      	ldr	r3, [pc, #60]	; (8012abc <vPortEnterCritical+0x58>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	3301      	adds	r3, #1
 8012a84:	4a0d      	ldr	r2, [pc, #52]	; (8012abc <vPortEnterCritical+0x58>)
 8012a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012a88:	4b0c      	ldr	r3, [pc, #48]	; (8012abc <vPortEnterCritical+0x58>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d10f      	bne.n	8012ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012a90:	4b0b      	ldr	r3, [pc, #44]	; (8012ac0 <vPortEnterCritical+0x5c>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00a      	beq.n	8012ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9e:	f383 8811 	msr	BASEPRI, r3
 8012aa2:	f3bf 8f6f 	isb	sy
 8012aa6:	f3bf 8f4f 	dsb	sy
 8012aaa:	603b      	str	r3, [r7, #0]
}
 8012aac:	bf00      	nop
 8012aae:	e7fe      	b.n	8012aae <vPortEnterCritical+0x4a>
	}
}
 8012ab0:	bf00      	nop
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	2400803c 	.word	0x2400803c
 8012ac0:	e000ed04 	.word	0xe000ed04

08012ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012aca:	4b12      	ldr	r3, [pc, #72]	; (8012b14 <vPortExitCritical+0x50>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d10a      	bne.n	8012ae8 <vPortExitCritical+0x24>
	__asm volatile
 8012ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad6:	f383 8811 	msr	BASEPRI, r3
 8012ada:	f3bf 8f6f 	isb	sy
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	607b      	str	r3, [r7, #4]
}
 8012ae4:	bf00      	nop
 8012ae6:	e7fe      	b.n	8012ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012ae8:	4b0a      	ldr	r3, [pc, #40]	; (8012b14 <vPortExitCritical+0x50>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	3b01      	subs	r3, #1
 8012aee:	4a09      	ldr	r2, [pc, #36]	; (8012b14 <vPortExitCritical+0x50>)
 8012af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012af2:	4b08      	ldr	r3, [pc, #32]	; (8012b14 <vPortExitCritical+0x50>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d105      	bne.n	8012b06 <vPortExitCritical+0x42>
 8012afa:	2300      	movs	r3, #0
 8012afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	f383 8811 	msr	BASEPRI, r3
}
 8012b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b06:	bf00      	nop
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop
 8012b14:	2400803c 	.word	0x2400803c
	...

08012b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b20:	f3ef 8009 	mrs	r0, PSP
 8012b24:	f3bf 8f6f 	isb	sy
 8012b28:	4b15      	ldr	r3, [pc, #84]	; (8012b80 <pxCurrentTCBConst>)
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	f01e 0f10 	tst.w	lr, #16
 8012b30:	bf08      	it	eq
 8012b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3a:	6010      	str	r0, [r2, #0]
 8012b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012b44:	f380 8811 	msr	BASEPRI, r0
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f7fe feb8 	bl	80118c4 <vTaskSwitchContext>
 8012b54:	f04f 0000 	mov.w	r0, #0
 8012b58:	f380 8811 	msr	BASEPRI, r0
 8012b5c:	bc09      	pop	{r0, r3}
 8012b5e:	6819      	ldr	r1, [r3, #0]
 8012b60:	6808      	ldr	r0, [r1, #0]
 8012b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b66:	f01e 0f10 	tst.w	lr, #16
 8012b6a:	bf08      	it	eq
 8012b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012b70:	f380 8809 	msr	PSP, r0
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	4770      	bx	lr
 8012b7a:	bf00      	nop
 8012b7c:	f3af 8000 	nop.w

08012b80 <pxCurrentTCBConst>:
 8012b80:	24008984 	.word	0x24008984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012b84:	bf00      	nop
 8012b86:	bf00      	nop

08012b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8012b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b92:	f383 8811 	msr	BASEPRI, r3
 8012b96:	f3bf 8f6f 	isb	sy
 8012b9a:	f3bf 8f4f 	dsb	sy
 8012b9e:	607b      	str	r3, [r7, #4]
}
 8012ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012ba2:	f7fe fdd5 	bl	8011750 <xTaskIncrementTick>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d003      	beq.n	8012bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012bac:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <xPortSysTickHandler+0x40>)
 8012bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	f383 8811 	msr	BASEPRI, r3
}
 8012bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012bc0:	bf00      	nop
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	e000ed04 	.word	0xe000ed04

08012bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012bcc:	b480      	push	{r7}
 8012bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012bd0:	4b0b      	ldr	r3, [pc, #44]	; (8012c00 <vPortSetupTimerInterrupt+0x34>)
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012bd6:	4b0b      	ldr	r3, [pc, #44]	; (8012c04 <vPortSetupTimerInterrupt+0x38>)
 8012bd8:	2200      	movs	r2, #0
 8012bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012bdc:	4b0a      	ldr	r3, [pc, #40]	; (8012c08 <vPortSetupTimerInterrupt+0x3c>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a0a      	ldr	r2, [pc, #40]	; (8012c0c <vPortSetupTimerInterrupt+0x40>)
 8012be2:	fba2 2303 	umull	r2, r3, r2, r3
 8012be6:	099b      	lsrs	r3, r3, #6
 8012be8:	4a09      	ldr	r2, [pc, #36]	; (8012c10 <vPortSetupTimerInterrupt+0x44>)
 8012bea:	3b01      	subs	r3, #1
 8012bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012bee:	4b04      	ldr	r3, [pc, #16]	; (8012c00 <vPortSetupTimerInterrupt+0x34>)
 8012bf0:	2207      	movs	r2, #7
 8012bf2:	601a      	str	r2, [r3, #0]
}
 8012bf4:	bf00      	nop
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	e000e010 	.word	0xe000e010
 8012c04:	e000e018 	.word	0xe000e018
 8012c08:	2400802c 	.word	0x2400802c
 8012c0c:	10624dd3 	.word	0x10624dd3
 8012c10:	e000e014 	.word	0xe000e014

08012c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c24 <vPortEnableVFP+0x10>
 8012c18:	6801      	ldr	r1, [r0, #0]
 8012c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c1e:	6001      	str	r1, [r0, #0]
 8012c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c22:	bf00      	nop
 8012c24:	e000ed88 	.word	0xe000ed88

08012c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c28:	b480      	push	{r7}
 8012c2a:	b085      	sub	sp, #20
 8012c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c2e:	f3ef 8305 	mrs	r3, IPSR
 8012c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2b0f      	cmp	r3, #15
 8012c38:	d914      	bls.n	8012c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c3a:	4a17      	ldr	r2, [pc, #92]	; (8012c98 <vPortValidateInterruptPriority+0x70>)
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	4413      	add	r3, r2
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c44:	4b15      	ldr	r3, [pc, #84]	; (8012c9c <vPortValidateInterruptPriority+0x74>)
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	7afa      	ldrb	r2, [r7, #11]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d20a      	bcs.n	8012c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	607b      	str	r3, [r7, #4]
}
 8012c60:	bf00      	nop
 8012c62:	e7fe      	b.n	8012c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012c64:	4b0e      	ldr	r3, [pc, #56]	; (8012ca0 <vPortValidateInterruptPriority+0x78>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012c6c:	4b0d      	ldr	r3, [pc, #52]	; (8012ca4 <vPortValidateInterruptPriority+0x7c>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d90a      	bls.n	8012c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	603b      	str	r3, [r7, #0]
}
 8012c86:	bf00      	nop
 8012c88:	e7fe      	b.n	8012c88 <vPortValidateInterruptPriority+0x60>
	}
 8012c8a:	bf00      	nop
 8012c8c:	3714      	adds	r7, #20
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr
 8012c96:	bf00      	nop
 8012c98:	e000e3f0 	.word	0xe000e3f0
 8012c9c:	24008fb0 	.word	0x24008fb0
 8012ca0:	e000ed0c 	.word	0xe000ed0c
 8012ca4:	24008fb4 	.word	0x24008fb4

08012ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b08a      	sub	sp, #40	; 0x28
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012cb4:	f7fe fc7e 	bl	80115b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012cb8:	4b5b      	ldr	r3, [pc, #364]	; (8012e28 <pvPortMalloc+0x180>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d101      	bne.n	8012cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012cc0:	f000 f920 	bl	8012f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012cc4:	4b59      	ldr	r3, [pc, #356]	; (8012e2c <pvPortMalloc+0x184>)
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	4013      	ands	r3, r2
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f040 8093 	bne.w	8012df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d01d      	beq.n	8012d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012cd8:	2208      	movs	r2, #8
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4413      	add	r3, r2
 8012cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f003 0307 	and.w	r3, r3, #7
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d014      	beq.n	8012d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f023 0307 	bic.w	r3, r3, #7
 8012cf0:	3308      	adds	r3, #8
 8012cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f003 0307 	and.w	r3, r3, #7
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00a      	beq.n	8012d14 <pvPortMalloc+0x6c>
	__asm volatile
 8012cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d02:	f383 8811 	msr	BASEPRI, r3
 8012d06:	f3bf 8f6f 	isb	sy
 8012d0a:	f3bf 8f4f 	dsb	sy
 8012d0e:	617b      	str	r3, [r7, #20]
}
 8012d10:	bf00      	nop
 8012d12:	e7fe      	b.n	8012d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d06e      	beq.n	8012df8 <pvPortMalloc+0x150>
 8012d1a:	4b45      	ldr	r3, [pc, #276]	; (8012e30 <pvPortMalloc+0x188>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d869      	bhi.n	8012df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d24:	4b43      	ldr	r3, [pc, #268]	; (8012e34 <pvPortMalloc+0x18c>)
 8012d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012d28:	4b42      	ldr	r3, [pc, #264]	; (8012e34 <pvPortMalloc+0x18c>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d2e:	e004      	b.n	8012d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d903      	bls.n	8012d4c <pvPortMalloc+0xa4>
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1f1      	bne.n	8012d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d4c:	4b36      	ldr	r3, [pc, #216]	; (8012e28 <pvPortMalloc+0x180>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d050      	beq.n	8012df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d56:	6a3b      	ldr	r3, [r7, #32]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2208      	movs	r2, #8
 8012d5c:	4413      	add	r3, r2
 8012d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	6a3b      	ldr	r3, [r7, #32]
 8012d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	685a      	ldr	r2, [r3, #4]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	1ad2      	subs	r2, r2, r3
 8012d70:	2308      	movs	r3, #8
 8012d72:	005b      	lsls	r3, r3, #1
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d91f      	bls.n	8012db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f003 0307 	and.w	r3, r3, #7
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d00a      	beq.n	8012da0 <pvPortMalloc+0xf8>
	__asm volatile
 8012d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d8e:	f383 8811 	msr	BASEPRI, r3
 8012d92:	f3bf 8f6f 	isb	sy
 8012d96:	f3bf 8f4f 	dsb	sy
 8012d9a:	613b      	str	r3, [r7, #16]
}
 8012d9c:	bf00      	nop
 8012d9e:	e7fe      	b.n	8012d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da2:	685a      	ldr	r2, [r3, #4]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	1ad2      	subs	r2, r2, r3
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012db2:	69b8      	ldr	r0, [r7, #24]
 8012db4:	f000 f908 	bl	8012fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012db8:	4b1d      	ldr	r3, [pc, #116]	; (8012e30 <pvPortMalloc+0x188>)
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	4a1b      	ldr	r2, [pc, #108]	; (8012e30 <pvPortMalloc+0x188>)
 8012dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012dc6:	4b1a      	ldr	r3, [pc, #104]	; (8012e30 <pvPortMalloc+0x188>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	4b1b      	ldr	r3, [pc, #108]	; (8012e38 <pvPortMalloc+0x190>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d203      	bcs.n	8012dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012dd2:	4b17      	ldr	r3, [pc, #92]	; (8012e30 <pvPortMalloc+0x188>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	4a18      	ldr	r2, [pc, #96]	; (8012e38 <pvPortMalloc+0x190>)
 8012dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	4b13      	ldr	r3, [pc, #76]	; (8012e2c <pvPortMalloc+0x184>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	431a      	orrs	r2, r3
 8012de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	2200      	movs	r2, #0
 8012dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012dee:	4b13      	ldr	r3, [pc, #76]	; (8012e3c <pvPortMalloc+0x194>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	3301      	adds	r3, #1
 8012df4:	4a11      	ldr	r2, [pc, #68]	; (8012e3c <pvPortMalloc+0x194>)
 8012df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012df8:	f7fe fbea 	bl	80115d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	f003 0307 	and.w	r3, r3, #7
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00a      	beq.n	8012e1c <pvPortMalloc+0x174>
	__asm volatile
 8012e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0a:	f383 8811 	msr	BASEPRI, r3
 8012e0e:	f3bf 8f6f 	isb	sy
 8012e12:	f3bf 8f4f 	dsb	sy
 8012e16:	60fb      	str	r3, [r7, #12]
}
 8012e18:	bf00      	nop
 8012e1a:	e7fe      	b.n	8012e1a <pvPortMalloc+0x172>
	return pvReturn;
 8012e1c:	69fb      	ldr	r3, [r7, #28]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3728      	adds	r7, #40	; 0x28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	24026fc0 	.word	0x24026fc0
 8012e2c:	24026fd4 	.word	0x24026fd4
 8012e30:	24026fc4 	.word	0x24026fc4
 8012e34:	24026fb8 	.word	0x24026fb8
 8012e38:	24026fc8 	.word	0x24026fc8
 8012e3c:	24026fcc 	.word	0x24026fcc

08012e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d04d      	beq.n	8012eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e52:	2308      	movs	r3, #8
 8012e54:	425b      	negs	r3, r3
 8012e56:	697a      	ldr	r2, [r7, #20]
 8012e58:	4413      	add	r3, r2
 8012e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	4b24      	ldr	r3, [pc, #144]	; (8012ef8 <vPortFree+0xb8>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	4013      	ands	r3, r2
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d10a      	bne.n	8012e84 <vPortFree+0x44>
	__asm volatile
 8012e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	60fb      	str	r3, [r7, #12]
}
 8012e80:	bf00      	nop
 8012e82:	e7fe      	b.n	8012e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00a      	beq.n	8012ea2 <vPortFree+0x62>
	__asm volatile
 8012e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e90:	f383 8811 	msr	BASEPRI, r3
 8012e94:	f3bf 8f6f 	isb	sy
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	60bb      	str	r3, [r7, #8]
}
 8012e9e:	bf00      	nop
 8012ea0:	e7fe      	b.n	8012ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	685a      	ldr	r2, [r3, #4]
 8012ea6:	4b14      	ldr	r3, [pc, #80]	; (8012ef8 <vPortFree+0xb8>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4013      	ands	r3, r2
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d01e      	beq.n	8012eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d11a      	bne.n	8012eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	685a      	ldr	r2, [r3, #4]
 8012ebc:	4b0e      	ldr	r3, [pc, #56]	; (8012ef8 <vPortFree+0xb8>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	43db      	mvns	r3, r3
 8012ec2:	401a      	ands	r2, r3
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ec8:	f7fe fb74 	bl	80115b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	685a      	ldr	r2, [r3, #4]
 8012ed0:	4b0a      	ldr	r3, [pc, #40]	; (8012efc <vPortFree+0xbc>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	4a09      	ldr	r2, [pc, #36]	; (8012efc <vPortFree+0xbc>)
 8012ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012eda:	6938      	ldr	r0, [r7, #16]
 8012edc:	f000 f874 	bl	8012fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ee0:	4b07      	ldr	r3, [pc, #28]	; (8012f00 <vPortFree+0xc0>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	4a06      	ldr	r2, [pc, #24]	; (8012f00 <vPortFree+0xc0>)
 8012ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012eea:	f7fe fb71 	bl	80115d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012eee:	bf00      	nop
 8012ef0:	3718      	adds	r7, #24
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}
 8012ef6:	bf00      	nop
 8012ef8:	24026fd4 	.word	0x24026fd4
 8012efc:	24026fc4 	.word	0x24026fc4
 8012f00:	24026fd0 	.word	0x24026fd0

08012f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b085      	sub	sp, #20
 8012f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f0a:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 8012f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012f10:	4b27      	ldr	r3, [pc, #156]	; (8012fb0 <prvHeapInit+0xac>)
 8012f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f003 0307 	and.w	r3, r3, #7
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d00c      	beq.n	8012f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	3307      	adds	r3, #7
 8012f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f023 0307 	bic.w	r3, r3, #7
 8012f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f2c:	68ba      	ldr	r2, [r7, #8]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	4a1f      	ldr	r2, [pc, #124]	; (8012fb0 <prvHeapInit+0xac>)
 8012f34:	4413      	add	r3, r2
 8012f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f3c:	4a1d      	ldr	r2, [pc, #116]	; (8012fb4 <prvHeapInit+0xb0>)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f42:	4b1c      	ldr	r3, [pc, #112]	; (8012fb4 <prvHeapInit+0xb0>)
 8012f44:	2200      	movs	r2, #0
 8012f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012f50:	2208      	movs	r2, #8
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	1a9b      	subs	r3, r3, r2
 8012f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f023 0307 	bic.w	r3, r3, #7
 8012f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	4a15      	ldr	r2, [pc, #84]	; (8012fb8 <prvHeapInit+0xb4>)
 8012f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012f66:	4b14      	ldr	r3, [pc, #80]	; (8012fb8 <prvHeapInit+0xb4>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012f6e:	4b12      	ldr	r3, [pc, #72]	; (8012fb8 <prvHeapInit+0xb4>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	68fa      	ldr	r2, [r7, #12]
 8012f7e:	1ad2      	subs	r2, r2, r3
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012f84:	4b0c      	ldr	r3, [pc, #48]	; (8012fb8 <prvHeapInit+0xb4>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	4a0a      	ldr	r2, [pc, #40]	; (8012fbc <prvHeapInit+0xb8>)
 8012f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	4a09      	ldr	r2, [pc, #36]	; (8012fc0 <prvHeapInit+0xbc>)
 8012f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012f9c:	4b09      	ldr	r3, [pc, #36]	; (8012fc4 <prvHeapInit+0xc0>)
 8012f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012fa2:	601a      	str	r2, [r3, #0]
}
 8012fa4:	bf00      	nop
 8012fa6:	3714      	adds	r7, #20
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr
 8012fb0:	24008fb8 	.word	0x24008fb8
 8012fb4:	24026fb8 	.word	0x24026fb8
 8012fb8:	24026fc0 	.word	0x24026fc0
 8012fbc:	24026fc8 	.word	0x24026fc8
 8012fc0:	24026fc4 	.word	0x24026fc4
 8012fc4:	24026fd4 	.word	0x24026fd4

08012fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012fd0:	4b28      	ldr	r3, [pc, #160]	; (8013074 <prvInsertBlockIntoFreeList+0xac>)
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	e002      	b.n	8012fdc <prvInsertBlockIntoFreeList+0x14>
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	60fb      	str	r3, [r7, #12]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d8f7      	bhi.n	8012fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d108      	bne.n	801300a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	685a      	ldr	r2, [r3, #4]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	441a      	add	r2, r3
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	441a      	add	r2, r3
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	429a      	cmp	r2, r3
 801301c:	d118      	bne.n	8013050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	4b15      	ldr	r3, [pc, #84]	; (8013078 <prvInsertBlockIntoFreeList+0xb0>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	429a      	cmp	r2, r3
 8013028:	d00d      	beq.n	8013046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685a      	ldr	r2, [r3, #4]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	441a      	add	r2, r3
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	601a      	str	r2, [r3, #0]
 8013044:	e008      	b.n	8013058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013046:	4b0c      	ldr	r3, [pc, #48]	; (8013078 <prvInsertBlockIntoFreeList+0xb0>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	601a      	str	r2, [r3, #0]
 801304e:	e003      	b.n	8013058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681a      	ldr	r2, [r3, #0]
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	429a      	cmp	r2, r3
 801305e:	d002      	beq.n	8013066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013066:	bf00      	nop
 8013068:	3714      	adds	r7, #20
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
 8013072:	bf00      	nop
 8013074:	24026fb8 	.word	0x24026fb8
 8013078:	24026fc0 	.word	0x24026fc0

0801307c <__errno>:
 801307c:	4b01      	ldr	r3, [pc, #4]	; (8013084 <__errno+0x8>)
 801307e:	6818      	ldr	r0, [r3, #0]
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	24008040 	.word	0x24008040

08013088 <__libc_init_array>:
 8013088:	b570      	push	{r4, r5, r6, lr}
 801308a:	4d0d      	ldr	r5, [pc, #52]	; (80130c0 <__libc_init_array+0x38>)
 801308c:	4c0d      	ldr	r4, [pc, #52]	; (80130c4 <__libc_init_array+0x3c>)
 801308e:	1b64      	subs	r4, r4, r5
 8013090:	10a4      	asrs	r4, r4, #2
 8013092:	2600      	movs	r6, #0
 8013094:	42a6      	cmp	r6, r4
 8013096:	d109      	bne.n	80130ac <__libc_init_array+0x24>
 8013098:	4d0b      	ldr	r5, [pc, #44]	; (80130c8 <__libc_init_array+0x40>)
 801309a:	4c0c      	ldr	r4, [pc, #48]	; (80130cc <__libc_init_array+0x44>)
 801309c:	f000 fcb8 	bl	8013a10 <_init>
 80130a0:	1b64      	subs	r4, r4, r5
 80130a2:	10a4      	asrs	r4, r4, #2
 80130a4:	2600      	movs	r6, #0
 80130a6:	42a6      	cmp	r6, r4
 80130a8:	d105      	bne.n	80130b6 <__libc_init_array+0x2e>
 80130aa:	bd70      	pop	{r4, r5, r6, pc}
 80130ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80130b0:	4798      	blx	r3
 80130b2:	3601      	adds	r6, #1
 80130b4:	e7ee      	b.n	8013094 <__libc_init_array+0xc>
 80130b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ba:	4798      	blx	r3
 80130bc:	3601      	adds	r6, #1
 80130be:	e7f2      	b.n	80130a6 <__libc_init_array+0x1e>
 80130c0:	08013ca4 	.word	0x08013ca4
 80130c4:	08013ca4 	.word	0x08013ca4
 80130c8:	08013ca4 	.word	0x08013ca4
 80130cc:	08013ca8 	.word	0x08013ca8

080130d0 <__retarget_lock_acquire_recursive>:
 80130d0:	4770      	bx	lr

080130d2 <__retarget_lock_release_recursive>:
 80130d2:	4770      	bx	lr

080130d4 <memcpy>:
 80130d4:	440a      	add	r2, r1
 80130d6:	4291      	cmp	r1, r2
 80130d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80130dc:	d100      	bne.n	80130e0 <memcpy+0xc>
 80130de:	4770      	bx	lr
 80130e0:	b510      	push	{r4, lr}
 80130e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130ea:	4291      	cmp	r1, r2
 80130ec:	d1f9      	bne.n	80130e2 <memcpy+0xe>
 80130ee:	bd10      	pop	{r4, pc}

080130f0 <memset>:
 80130f0:	4402      	add	r2, r0
 80130f2:	4603      	mov	r3, r0
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d100      	bne.n	80130fa <memset+0xa>
 80130f8:	4770      	bx	lr
 80130fa:	f803 1b01 	strb.w	r1, [r3], #1
 80130fe:	e7f9      	b.n	80130f4 <memset+0x4>

08013100 <_malloc_r>:
 8013100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013102:	1ccd      	adds	r5, r1, #3
 8013104:	f025 0503 	bic.w	r5, r5, #3
 8013108:	3508      	adds	r5, #8
 801310a:	2d0c      	cmp	r5, #12
 801310c:	bf38      	it	cc
 801310e:	250c      	movcc	r5, #12
 8013110:	2d00      	cmp	r5, #0
 8013112:	4606      	mov	r6, r0
 8013114:	db01      	blt.n	801311a <_malloc_r+0x1a>
 8013116:	42a9      	cmp	r1, r5
 8013118:	d903      	bls.n	8013122 <_malloc_r+0x22>
 801311a:	230c      	movs	r3, #12
 801311c:	6033      	str	r3, [r6, #0]
 801311e:	2000      	movs	r0, #0
 8013120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013122:	f000 f8e1 	bl	80132e8 <__malloc_lock>
 8013126:	4921      	ldr	r1, [pc, #132]	; (80131ac <_malloc_r+0xac>)
 8013128:	680a      	ldr	r2, [r1, #0]
 801312a:	4614      	mov	r4, r2
 801312c:	b99c      	cbnz	r4, 8013156 <_malloc_r+0x56>
 801312e:	4f20      	ldr	r7, [pc, #128]	; (80131b0 <_malloc_r+0xb0>)
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	b923      	cbnz	r3, 801313e <_malloc_r+0x3e>
 8013134:	4621      	mov	r1, r4
 8013136:	4630      	mov	r0, r6
 8013138:	f000 f8a6 	bl	8013288 <_sbrk_r>
 801313c:	6038      	str	r0, [r7, #0]
 801313e:	4629      	mov	r1, r5
 8013140:	4630      	mov	r0, r6
 8013142:	f000 f8a1 	bl	8013288 <_sbrk_r>
 8013146:	1c43      	adds	r3, r0, #1
 8013148:	d123      	bne.n	8013192 <_malloc_r+0x92>
 801314a:	230c      	movs	r3, #12
 801314c:	6033      	str	r3, [r6, #0]
 801314e:	4630      	mov	r0, r6
 8013150:	f000 f8d0 	bl	80132f4 <__malloc_unlock>
 8013154:	e7e3      	b.n	801311e <_malloc_r+0x1e>
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	1b5b      	subs	r3, r3, r5
 801315a:	d417      	bmi.n	801318c <_malloc_r+0x8c>
 801315c:	2b0b      	cmp	r3, #11
 801315e:	d903      	bls.n	8013168 <_malloc_r+0x68>
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	441c      	add	r4, r3
 8013164:	6025      	str	r5, [r4, #0]
 8013166:	e004      	b.n	8013172 <_malloc_r+0x72>
 8013168:	6863      	ldr	r3, [r4, #4]
 801316a:	42a2      	cmp	r2, r4
 801316c:	bf0c      	ite	eq
 801316e:	600b      	streq	r3, [r1, #0]
 8013170:	6053      	strne	r3, [r2, #4]
 8013172:	4630      	mov	r0, r6
 8013174:	f000 f8be 	bl	80132f4 <__malloc_unlock>
 8013178:	f104 000b 	add.w	r0, r4, #11
 801317c:	1d23      	adds	r3, r4, #4
 801317e:	f020 0007 	bic.w	r0, r0, #7
 8013182:	1ac2      	subs	r2, r0, r3
 8013184:	d0cc      	beq.n	8013120 <_malloc_r+0x20>
 8013186:	1a1b      	subs	r3, r3, r0
 8013188:	50a3      	str	r3, [r4, r2]
 801318a:	e7c9      	b.n	8013120 <_malloc_r+0x20>
 801318c:	4622      	mov	r2, r4
 801318e:	6864      	ldr	r4, [r4, #4]
 8013190:	e7cc      	b.n	801312c <_malloc_r+0x2c>
 8013192:	1cc4      	adds	r4, r0, #3
 8013194:	f024 0403 	bic.w	r4, r4, #3
 8013198:	42a0      	cmp	r0, r4
 801319a:	d0e3      	beq.n	8013164 <_malloc_r+0x64>
 801319c:	1a21      	subs	r1, r4, r0
 801319e:	4630      	mov	r0, r6
 80131a0:	f000 f872 	bl	8013288 <_sbrk_r>
 80131a4:	3001      	adds	r0, #1
 80131a6:	d1dd      	bne.n	8013164 <_malloc_r+0x64>
 80131a8:	e7cf      	b.n	801314a <_malloc_r+0x4a>
 80131aa:	bf00      	nop
 80131ac:	24026fd8 	.word	0x24026fd8
 80131b0:	24026fdc 	.word	0x24026fdc

080131b4 <cleanup_glue>:
 80131b4:	b538      	push	{r3, r4, r5, lr}
 80131b6:	460c      	mov	r4, r1
 80131b8:	6809      	ldr	r1, [r1, #0]
 80131ba:	4605      	mov	r5, r0
 80131bc:	b109      	cbz	r1, 80131c2 <cleanup_glue+0xe>
 80131be:	f7ff fff9 	bl	80131b4 <cleanup_glue>
 80131c2:	4621      	mov	r1, r4
 80131c4:	4628      	mov	r0, r5
 80131c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ca:	f000 b899 	b.w	8013300 <_free_r>
	...

080131d0 <_reclaim_reent>:
 80131d0:	4b2c      	ldr	r3, [pc, #176]	; (8013284 <_reclaim_reent+0xb4>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4283      	cmp	r3, r0
 80131d6:	b570      	push	{r4, r5, r6, lr}
 80131d8:	4604      	mov	r4, r0
 80131da:	d051      	beq.n	8013280 <_reclaim_reent+0xb0>
 80131dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80131de:	b143      	cbz	r3, 80131f2 <_reclaim_reent+0x22>
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d14a      	bne.n	801327c <_reclaim_reent+0xac>
 80131e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131e8:	6819      	ldr	r1, [r3, #0]
 80131ea:	b111      	cbz	r1, 80131f2 <_reclaim_reent+0x22>
 80131ec:	4620      	mov	r0, r4
 80131ee:	f000 f887 	bl	8013300 <_free_r>
 80131f2:	6961      	ldr	r1, [r4, #20]
 80131f4:	b111      	cbz	r1, 80131fc <_reclaim_reent+0x2c>
 80131f6:	4620      	mov	r0, r4
 80131f8:	f000 f882 	bl	8013300 <_free_r>
 80131fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80131fe:	b111      	cbz	r1, 8013206 <_reclaim_reent+0x36>
 8013200:	4620      	mov	r0, r4
 8013202:	f000 f87d 	bl	8013300 <_free_r>
 8013206:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013208:	b111      	cbz	r1, 8013210 <_reclaim_reent+0x40>
 801320a:	4620      	mov	r0, r4
 801320c:	f000 f878 	bl	8013300 <_free_r>
 8013210:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013212:	b111      	cbz	r1, 801321a <_reclaim_reent+0x4a>
 8013214:	4620      	mov	r0, r4
 8013216:	f000 f873 	bl	8013300 <_free_r>
 801321a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801321c:	b111      	cbz	r1, 8013224 <_reclaim_reent+0x54>
 801321e:	4620      	mov	r0, r4
 8013220:	f000 f86e 	bl	8013300 <_free_r>
 8013224:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013226:	b111      	cbz	r1, 801322e <_reclaim_reent+0x5e>
 8013228:	4620      	mov	r0, r4
 801322a:	f000 f869 	bl	8013300 <_free_r>
 801322e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013230:	b111      	cbz	r1, 8013238 <_reclaim_reent+0x68>
 8013232:	4620      	mov	r0, r4
 8013234:	f000 f864 	bl	8013300 <_free_r>
 8013238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801323a:	b111      	cbz	r1, 8013242 <_reclaim_reent+0x72>
 801323c:	4620      	mov	r0, r4
 801323e:	f000 f85f 	bl	8013300 <_free_r>
 8013242:	69a3      	ldr	r3, [r4, #24]
 8013244:	b1e3      	cbz	r3, 8013280 <_reclaim_reent+0xb0>
 8013246:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013248:	4620      	mov	r0, r4
 801324a:	4798      	blx	r3
 801324c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801324e:	b1b9      	cbz	r1, 8013280 <_reclaim_reent+0xb0>
 8013250:	4620      	mov	r0, r4
 8013252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013256:	f7ff bfad 	b.w	80131b4 <cleanup_glue>
 801325a:	5949      	ldr	r1, [r1, r5]
 801325c:	b941      	cbnz	r1, 8013270 <_reclaim_reent+0xa0>
 801325e:	3504      	adds	r5, #4
 8013260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013262:	2d80      	cmp	r5, #128	; 0x80
 8013264:	68d9      	ldr	r1, [r3, #12]
 8013266:	d1f8      	bne.n	801325a <_reclaim_reent+0x8a>
 8013268:	4620      	mov	r0, r4
 801326a:	f000 f849 	bl	8013300 <_free_r>
 801326e:	e7ba      	b.n	80131e6 <_reclaim_reent+0x16>
 8013270:	680e      	ldr	r6, [r1, #0]
 8013272:	4620      	mov	r0, r4
 8013274:	f000 f844 	bl	8013300 <_free_r>
 8013278:	4631      	mov	r1, r6
 801327a:	e7ef      	b.n	801325c <_reclaim_reent+0x8c>
 801327c:	2500      	movs	r5, #0
 801327e:	e7ef      	b.n	8013260 <_reclaim_reent+0x90>
 8013280:	bd70      	pop	{r4, r5, r6, pc}
 8013282:	bf00      	nop
 8013284:	24008040 	.word	0x24008040

08013288 <_sbrk_r>:
 8013288:	b538      	push	{r3, r4, r5, lr}
 801328a:	4d06      	ldr	r5, [pc, #24]	; (80132a4 <_sbrk_r+0x1c>)
 801328c:	2300      	movs	r3, #0
 801328e:	4604      	mov	r4, r0
 8013290:	4608      	mov	r0, r1
 8013292:	602b      	str	r3, [r5, #0]
 8013294:	f7f0 f998 	bl	80035c8 <_sbrk>
 8013298:	1c43      	adds	r3, r0, #1
 801329a:	d102      	bne.n	80132a2 <_sbrk_r+0x1a>
 801329c:	682b      	ldr	r3, [r5, #0]
 801329e:	b103      	cbz	r3, 80132a2 <_sbrk_r+0x1a>
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	bd38      	pop	{r3, r4, r5, pc}
 80132a4:	24027b6c 	.word	0x24027b6c

080132a8 <siprintf>:
 80132a8:	b40e      	push	{r1, r2, r3}
 80132aa:	b500      	push	{lr}
 80132ac:	b09c      	sub	sp, #112	; 0x70
 80132ae:	ab1d      	add	r3, sp, #116	; 0x74
 80132b0:	9002      	str	r0, [sp, #8]
 80132b2:	9006      	str	r0, [sp, #24]
 80132b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80132b8:	4809      	ldr	r0, [pc, #36]	; (80132e0 <siprintf+0x38>)
 80132ba:	9107      	str	r1, [sp, #28]
 80132bc:	9104      	str	r1, [sp, #16]
 80132be:	4909      	ldr	r1, [pc, #36]	; (80132e4 <siprintf+0x3c>)
 80132c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c4:	9105      	str	r1, [sp, #20]
 80132c6:	6800      	ldr	r0, [r0, #0]
 80132c8:	9301      	str	r3, [sp, #4]
 80132ca:	a902      	add	r1, sp, #8
 80132cc:	f000 f8c4 	bl	8013458 <_svfiprintf_r>
 80132d0:	9b02      	ldr	r3, [sp, #8]
 80132d2:	2200      	movs	r2, #0
 80132d4:	701a      	strb	r2, [r3, #0]
 80132d6:	b01c      	add	sp, #112	; 0x70
 80132d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132dc:	b003      	add	sp, #12
 80132de:	4770      	bx	lr
 80132e0:	24008040 	.word	0x24008040
 80132e4:	ffff0208 	.word	0xffff0208

080132e8 <__malloc_lock>:
 80132e8:	4801      	ldr	r0, [pc, #4]	; (80132f0 <__malloc_lock+0x8>)
 80132ea:	f7ff bef1 	b.w	80130d0 <__retarget_lock_acquire_recursive>
 80132ee:	bf00      	nop
 80132f0:	24027b64 	.word	0x24027b64

080132f4 <__malloc_unlock>:
 80132f4:	4801      	ldr	r0, [pc, #4]	; (80132fc <__malloc_unlock+0x8>)
 80132f6:	f7ff beec 	b.w	80130d2 <__retarget_lock_release_recursive>
 80132fa:	bf00      	nop
 80132fc:	24027b64 	.word	0x24027b64

08013300 <_free_r>:
 8013300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013302:	2900      	cmp	r1, #0
 8013304:	d048      	beq.n	8013398 <_free_r+0x98>
 8013306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801330a:	9001      	str	r0, [sp, #4]
 801330c:	2b00      	cmp	r3, #0
 801330e:	f1a1 0404 	sub.w	r4, r1, #4
 8013312:	bfb8      	it	lt
 8013314:	18e4      	addlt	r4, r4, r3
 8013316:	f7ff ffe7 	bl	80132e8 <__malloc_lock>
 801331a:	4a20      	ldr	r2, [pc, #128]	; (801339c <_free_r+0x9c>)
 801331c:	9801      	ldr	r0, [sp, #4]
 801331e:	6813      	ldr	r3, [r2, #0]
 8013320:	4615      	mov	r5, r2
 8013322:	b933      	cbnz	r3, 8013332 <_free_r+0x32>
 8013324:	6063      	str	r3, [r4, #4]
 8013326:	6014      	str	r4, [r2, #0]
 8013328:	b003      	add	sp, #12
 801332a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801332e:	f7ff bfe1 	b.w	80132f4 <__malloc_unlock>
 8013332:	42a3      	cmp	r3, r4
 8013334:	d90b      	bls.n	801334e <_free_r+0x4e>
 8013336:	6821      	ldr	r1, [r4, #0]
 8013338:	1862      	adds	r2, r4, r1
 801333a:	4293      	cmp	r3, r2
 801333c:	bf04      	itt	eq
 801333e:	681a      	ldreq	r2, [r3, #0]
 8013340:	685b      	ldreq	r3, [r3, #4]
 8013342:	6063      	str	r3, [r4, #4]
 8013344:	bf04      	itt	eq
 8013346:	1852      	addeq	r2, r2, r1
 8013348:	6022      	streq	r2, [r4, #0]
 801334a:	602c      	str	r4, [r5, #0]
 801334c:	e7ec      	b.n	8013328 <_free_r+0x28>
 801334e:	461a      	mov	r2, r3
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	b10b      	cbz	r3, 8013358 <_free_r+0x58>
 8013354:	42a3      	cmp	r3, r4
 8013356:	d9fa      	bls.n	801334e <_free_r+0x4e>
 8013358:	6811      	ldr	r1, [r2, #0]
 801335a:	1855      	adds	r5, r2, r1
 801335c:	42a5      	cmp	r5, r4
 801335e:	d10b      	bne.n	8013378 <_free_r+0x78>
 8013360:	6824      	ldr	r4, [r4, #0]
 8013362:	4421      	add	r1, r4
 8013364:	1854      	adds	r4, r2, r1
 8013366:	42a3      	cmp	r3, r4
 8013368:	6011      	str	r1, [r2, #0]
 801336a:	d1dd      	bne.n	8013328 <_free_r+0x28>
 801336c:	681c      	ldr	r4, [r3, #0]
 801336e:	685b      	ldr	r3, [r3, #4]
 8013370:	6053      	str	r3, [r2, #4]
 8013372:	4421      	add	r1, r4
 8013374:	6011      	str	r1, [r2, #0]
 8013376:	e7d7      	b.n	8013328 <_free_r+0x28>
 8013378:	d902      	bls.n	8013380 <_free_r+0x80>
 801337a:	230c      	movs	r3, #12
 801337c:	6003      	str	r3, [r0, #0]
 801337e:	e7d3      	b.n	8013328 <_free_r+0x28>
 8013380:	6825      	ldr	r5, [r4, #0]
 8013382:	1961      	adds	r1, r4, r5
 8013384:	428b      	cmp	r3, r1
 8013386:	bf04      	itt	eq
 8013388:	6819      	ldreq	r1, [r3, #0]
 801338a:	685b      	ldreq	r3, [r3, #4]
 801338c:	6063      	str	r3, [r4, #4]
 801338e:	bf04      	itt	eq
 8013390:	1949      	addeq	r1, r1, r5
 8013392:	6021      	streq	r1, [r4, #0]
 8013394:	6054      	str	r4, [r2, #4]
 8013396:	e7c7      	b.n	8013328 <_free_r+0x28>
 8013398:	b003      	add	sp, #12
 801339a:	bd30      	pop	{r4, r5, pc}
 801339c:	24026fd8 	.word	0x24026fd8

080133a0 <__ssputs_r>:
 80133a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a4:	688e      	ldr	r6, [r1, #8]
 80133a6:	429e      	cmp	r6, r3
 80133a8:	4682      	mov	sl, r0
 80133aa:	460c      	mov	r4, r1
 80133ac:	4690      	mov	r8, r2
 80133ae:	461f      	mov	r7, r3
 80133b0:	d838      	bhi.n	8013424 <__ssputs_r+0x84>
 80133b2:	898a      	ldrh	r2, [r1, #12]
 80133b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80133b8:	d032      	beq.n	8013420 <__ssputs_r+0x80>
 80133ba:	6825      	ldr	r5, [r4, #0]
 80133bc:	6909      	ldr	r1, [r1, #16]
 80133be:	eba5 0901 	sub.w	r9, r5, r1
 80133c2:	6965      	ldr	r5, [r4, #20]
 80133c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133cc:	3301      	adds	r3, #1
 80133ce:	444b      	add	r3, r9
 80133d0:	106d      	asrs	r5, r5, #1
 80133d2:	429d      	cmp	r5, r3
 80133d4:	bf38      	it	cc
 80133d6:	461d      	movcc	r5, r3
 80133d8:	0553      	lsls	r3, r2, #21
 80133da:	d531      	bpl.n	8013440 <__ssputs_r+0xa0>
 80133dc:	4629      	mov	r1, r5
 80133de:	f7ff fe8f 	bl	8013100 <_malloc_r>
 80133e2:	4606      	mov	r6, r0
 80133e4:	b950      	cbnz	r0, 80133fc <__ssputs_r+0x5c>
 80133e6:	230c      	movs	r3, #12
 80133e8:	f8ca 3000 	str.w	r3, [sl]
 80133ec:	89a3      	ldrh	r3, [r4, #12]
 80133ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133f2:	81a3      	strh	r3, [r4, #12]
 80133f4:	f04f 30ff 	mov.w	r0, #4294967295
 80133f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133fc:	6921      	ldr	r1, [r4, #16]
 80133fe:	464a      	mov	r2, r9
 8013400:	f7ff fe68 	bl	80130d4 <memcpy>
 8013404:	89a3      	ldrh	r3, [r4, #12]
 8013406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801340a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801340e:	81a3      	strh	r3, [r4, #12]
 8013410:	6126      	str	r6, [r4, #16]
 8013412:	6165      	str	r5, [r4, #20]
 8013414:	444e      	add	r6, r9
 8013416:	eba5 0509 	sub.w	r5, r5, r9
 801341a:	6026      	str	r6, [r4, #0]
 801341c:	60a5      	str	r5, [r4, #8]
 801341e:	463e      	mov	r6, r7
 8013420:	42be      	cmp	r6, r7
 8013422:	d900      	bls.n	8013426 <__ssputs_r+0x86>
 8013424:	463e      	mov	r6, r7
 8013426:	4632      	mov	r2, r6
 8013428:	6820      	ldr	r0, [r4, #0]
 801342a:	4641      	mov	r1, r8
 801342c:	f000 faa8 	bl	8013980 <memmove>
 8013430:	68a3      	ldr	r3, [r4, #8]
 8013432:	6822      	ldr	r2, [r4, #0]
 8013434:	1b9b      	subs	r3, r3, r6
 8013436:	4432      	add	r2, r6
 8013438:	60a3      	str	r3, [r4, #8]
 801343a:	6022      	str	r2, [r4, #0]
 801343c:	2000      	movs	r0, #0
 801343e:	e7db      	b.n	80133f8 <__ssputs_r+0x58>
 8013440:	462a      	mov	r2, r5
 8013442:	f000 fab7 	bl	80139b4 <_realloc_r>
 8013446:	4606      	mov	r6, r0
 8013448:	2800      	cmp	r0, #0
 801344a:	d1e1      	bne.n	8013410 <__ssputs_r+0x70>
 801344c:	6921      	ldr	r1, [r4, #16]
 801344e:	4650      	mov	r0, sl
 8013450:	f7ff ff56 	bl	8013300 <_free_r>
 8013454:	e7c7      	b.n	80133e6 <__ssputs_r+0x46>
	...

08013458 <_svfiprintf_r>:
 8013458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345c:	4698      	mov	r8, r3
 801345e:	898b      	ldrh	r3, [r1, #12]
 8013460:	061b      	lsls	r3, r3, #24
 8013462:	b09d      	sub	sp, #116	; 0x74
 8013464:	4607      	mov	r7, r0
 8013466:	460d      	mov	r5, r1
 8013468:	4614      	mov	r4, r2
 801346a:	d50e      	bpl.n	801348a <_svfiprintf_r+0x32>
 801346c:	690b      	ldr	r3, [r1, #16]
 801346e:	b963      	cbnz	r3, 801348a <_svfiprintf_r+0x32>
 8013470:	2140      	movs	r1, #64	; 0x40
 8013472:	f7ff fe45 	bl	8013100 <_malloc_r>
 8013476:	6028      	str	r0, [r5, #0]
 8013478:	6128      	str	r0, [r5, #16]
 801347a:	b920      	cbnz	r0, 8013486 <_svfiprintf_r+0x2e>
 801347c:	230c      	movs	r3, #12
 801347e:	603b      	str	r3, [r7, #0]
 8013480:	f04f 30ff 	mov.w	r0, #4294967295
 8013484:	e0d1      	b.n	801362a <_svfiprintf_r+0x1d2>
 8013486:	2340      	movs	r3, #64	; 0x40
 8013488:	616b      	str	r3, [r5, #20]
 801348a:	2300      	movs	r3, #0
 801348c:	9309      	str	r3, [sp, #36]	; 0x24
 801348e:	2320      	movs	r3, #32
 8013490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013494:	f8cd 800c 	str.w	r8, [sp, #12]
 8013498:	2330      	movs	r3, #48	; 0x30
 801349a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013644 <_svfiprintf_r+0x1ec>
 801349e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134a2:	f04f 0901 	mov.w	r9, #1
 80134a6:	4623      	mov	r3, r4
 80134a8:	469a      	mov	sl, r3
 80134aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134ae:	b10a      	cbz	r2, 80134b4 <_svfiprintf_r+0x5c>
 80134b0:	2a25      	cmp	r2, #37	; 0x25
 80134b2:	d1f9      	bne.n	80134a8 <_svfiprintf_r+0x50>
 80134b4:	ebba 0b04 	subs.w	fp, sl, r4
 80134b8:	d00b      	beq.n	80134d2 <_svfiprintf_r+0x7a>
 80134ba:	465b      	mov	r3, fp
 80134bc:	4622      	mov	r2, r4
 80134be:	4629      	mov	r1, r5
 80134c0:	4638      	mov	r0, r7
 80134c2:	f7ff ff6d 	bl	80133a0 <__ssputs_r>
 80134c6:	3001      	adds	r0, #1
 80134c8:	f000 80aa 	beq.w	8013620 <_svfiprintf_r+0x1c8>
 80134cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134ce:	445a      	add	r2, fp
 80134d0:	9209      	str	r2, [sp, #36]	; 0x24
 80134d2:	f89a 3000 	ldrb.w	r3, [sl]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 80a2 	beq.w	8013620 <_svfiprintf_r+0x1c8>
 80134dc:	2300      	movs	r3, #0
 80134de:	f04f 32ff 	mov.w	r2, #4294967295
 80134e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134e6:	f10a 0a01 	add.w	sl, sl, #1
 80134ea:	9304      	str	r3, [sp, #16]
 80134ec:	9307      	str	r3, [sp, #28]
 80134ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134f2:	931a      	str	r3, [sp, #104]	; 0x68
 80134f4:	4654      	mov	r4, sl
 80134f6:	2205      	movs	r2, #5
 80134f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134fc:	4851      	ldr	r0, [pc, #324]	; (8013644 <_svfiprintf_r+0x1ec>)
 80134fe:	f7ec ff0f 	bl	8000320 <memchr>
 8013502:	9a04      	ldr	r2, [sp, #16]
 8013504:	b9d8      	cbnz	r0, 801353e <_svfiprintf_r+0xe6>
 8013506:	06d0      	lsls	r0, r2, #27
 8013508:	bf44      	itt	mi
 801350a:	2320      	movmi	r3, #32
 801350c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013510:	0711      	lsls	r1, r2, #28
 8013512:	bf44      	itt	mi
 8013514:	232b      	movmi	r3, #43	; 0x2b
 8013516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801351a:	f89a 3000 	ldrb.w	r3, [sl]
 801351e:	2b2a      	cmp	r3, #42	; 0x2a
 8013520:	d015      	beq.n	801354e <_svfiprintf_r+0xf6>
 8013522:	9a07      	ldr	r2, [sp, #28]
 8013524:	4654      	mov	r4, sl
 8013526:	2000      	movs	r0, #0
 8013528:	f04f 0c0a 	mov.w	ip, #10
 801352c:	4621      	mov	r1, r4
 801352e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013532:	3b30      	subs	r3, #48	; 0x30
 8013534:	2b09      	cmp	r3, #9
 8013536:	d94e      	bls.n	80135d6 <_svfiprintf_r+0x17e>
 8013538:	b1b0      	cbz	r0, 8013568 <_svfiprintf_r+0x110>
 801353a:	9207      	str	r2, [sp, #28]
 801353c:	e014      	b.n	8013568 <_svfiprintf_r+0x110>
 801353e:	eba0 0308 	sub.w	r3, r0, r8
 8013542:	fa09 f303 	lsl.w	r3, r9, r3
 8013546:	4313      	orrs	r3, r2
 8013548:	9304      	str	r3, [sp, #16]
 801354a:	46a2      	mov	sl, r4
 801354c:	e7d2      	b.n	80134f4 <_svfiprintf_r+0x9c>
 801354e:	9b03      	ldr	r3, [sp, #12]
 8013550:	1d19      	adds	r1, r3, #4
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	9103      	str	r1, [sp, #12]
 8013556:	2b00      	cmp	r3, #0
 8013558:	bfbb      	ittet	lt
 801355a:	425b      	neglt	r3, r3
 801355c:	f042 0202 	orrlt.w	r2, r2, #2
 8013560:	9307      	strge	r3, [sp, #28]
 8013562:	9307      	strlt	r3, [sp, #28]
 8013564:	bfb8      	it	lt
 8013566:	9204      	strlt	r2, [sp, #16]
 8013568:	7823      	ldrb	r3, [r4, #0]
 801356a:	2b2e      	cmp	r3, #46	; 0x2e
 801356c:	d10c      	bne.n	8013588 <_svfiprintf_r+0x130>
 801356e:	7863      	ldrb	r3, [r4, #1]
 8013570:	2b2a      	cmp	r3, #42	; 0x2a
 8013572:	d135      	bne.n	80135e0 <_svfiprintf_r+0x188>
 8013574:	9b03      	ldr	r3, [sp, #12]
 8013576:	1d1a      	adds	r2, r3, #4
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	9203      	str	r2, [sp, #12]
 801357c:	2b00      	cmp	r3, #0
 801357e:	bfb8      	it	lt
 8013580:	f04f 33ff 	movlt.w	r3, #4294967295
 8013584:	3402      	adds	r4, #2
 8013586:	9305      	str	r3, [sp, #20]
 8013588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013654 <_svfiprintf_r+0x1fc>
 801358c:	7821      	ldrb	r1, [r4, #0]
 801358e:	2203      	movs	r2, #3
 8013590:	4650      	mov	r0, sl
 8013592:	f7ec fec5 	bl	8000320 <memchr>
 8013596:	b140      	cbz	r0, 80135aa <_svfiprintf_r+0x152>
 8013598:	2340      	movs	r3, #64	; 0x40
 801359a:	eba0 000a 	sub.w	r0, r0, sl
 801359e:	fa03 f000 	lsl.w	r0, r3, r0
 80135a2:	9b04      	ldr	r3, [sp, #16]
 80135a4:	4303      	orrs	r3, r0
 80135a6:	3401      	adds	r4, #1
 80135a8:	9304      	str	r3, [sp, #16]
 80135aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ae:	4826      	ldr	r0, [pc, #152]	; (8013648 <_svfiprintf_r+0x1f0>)
 80135b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135b4:	2206      	movs	r2, #6
 80135b6:	f7ec feb3 	bl	8000320 <memchr>
 80135ba:	2800      	cmp	r0, #0
 80135bc:	d038      	beq.n	8013630 <_svfiprintf_r+0x1d8>
 80135be:	4b23      	ldr	r3, [pc, #140]	; (801364c <_svfiprintf_r+0x1f4>)
 80135c0:	bb1b      	cbnz	r3, 801360a <_svfiprintf_r+0x1b2>
 80135c2:	9b03      	ldr	r3, [sp, #12]
 80135c4:	3307      	adds	r3, #7
 80135c6:	f023 0307 	bic.w	r3, r3, #7
 80135ca:	3308      	adds	r3, #8
 80135cc:	9303      	str	r3, [sp, #12]
 80135ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d0:	4433      	add	r3, r6
 80135d2:	9309      	str	r3, [sp, #36]	; 0x24
 80135d4:	e767      	b.n	80134a6 <_svfiprintf_r+0x4e>
 80135d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80135da:	460c      	mov	r4, r1
 80135dc:	2001      	movs	r0, #1
 80135de:	e7a5      	b.n	801352c <_svfiprintf_r+0xd4>
 80135e0:	2300      	movs	r3, #0
 80135e2:	3401      	adds	r4, #1
 80135e4:	9305      	str	r3, [sp, #20]
 80135e6:	4619      	mov	r1, r3
 80135e8:	f04f 0c0a 	mov.w	ip, #10
 80135ec:	4620      	mov	r0, r4
 80135ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135f2:	3a30      	subs	r2, #48	; 0x30
 80135f4:	2a09      	cmp	r2, #9
 80135f6:	d903      	bls.n	8013600 <_svfiprintf_r+0x1a8>
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d0c5      	beq.n	8013588 <_svfiprintf_r+0x130>
 80135fc:	9105      	str	r1, [sp, #20]
 80135fe:	e7c3      	b.n	8013588 <_svfiprintf_r+0x130>
 8013600:	fb0c 2101 	mla	r1, ip, r1, r2
 8013604:	4604      	mov	r4, r0
 8013606:	2301      	movs	r3, #1
 8013608:	e7f0      	b.n	80135ec <_svfiprintf_r+0x194>
 801360a:	ab03      	add	r3, sp, #12
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	462a      	mov	r2, r5
 8013610:	4b0f      	ldr	r3, [pc, #60]	; (8013650 <_svfiprintf_r+0x1f8>)
 8013612:	a904      	add	r1, sp, #16
 8013614:	4638      	mov	r0, r7
 8013616:	f3af 8000 	nop.w
 801361a:	1c42      	adds	r2, r0, #1
 801361c:	4606      	mov	r6, r0
 801361e:	d1d6      	bne.n	80135ce <_svfiprintf_r+0x176>
 8013620:	89ab      	ldrh	r3, [r5, #12]
 8013622:	065b      	lsls	r3, r3, #25
 8013624:	f53f af2c 	bmi.w	8013480 <_svfiprintf_r+0x28>
 8013628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801362a:	b01d      	add	sp, #116	; 0x74
 801362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013630:	ab03      	add	r3, sp, #12
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	462a      	mov	r2, r5
 8013636:	4b06      	ldr	r3, [pc, #24]	; (8013650 <_svfiprintf_r+0x1f8>)
 8013638:	a904      	add	r1, sp, #16
 801363a:	4638      	mov	r0, r7
 801363c:	f000 f87a 	bl	8013734 <_printf_i>
 8013640:	e7eb      	b.n	801361a <_svfiprintf_r+0x1c2>
 8013642:	bf00      	nop
 8013644:	08013c68 	.word	0x08013c68
 8013648:	08013c72 	.word	0x08013c72
 801364c:	00000000 	.word	0x00000000
 8013650:	080133a1 	.word	0x080133a1
 8013654:	08013c6e 	.word	0x08013c6e

08013658 <_printf_common>:
 8013658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801365c:	4616      	mov	r6, r2
 801365e:	4699      	mov	r9, r3
 8013660:	688a      	ldr	r2, [r1, #8]
 8013662:	690b      	ldr	r3, [r1, #16]
 8013664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013668:	4293      	cmp	r3, r2
 801366a:	bfb8      	it	lt
 801366c:	4613      	movlt	r3, r2
 801366e:	6033      	str	r3, [r6, #0]
 8013670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013674:	4607      	mov	r7, r0
 8013676:	460c      	mov	r4, r1
 8013678:	b10a      	cbz	r2, 801367e <_printf_common+0x26>
 801367a:	3301      	adds	r3, #1
 801367c:	6033      	str	r3, [r6, #0]
 801367e:	6823      	ldr	r3, [r4, #0]
 8013680:	0699      	lsls	r1, r3, #26
 8013682:	bf42      	ittt	mi
 8013684:	6833      	ldrmi	r3, [r6, #0]
 8013686:	3302      	addmi	r3, #2
 8013688:	6033      	strmi	r3, [r6, #0]
 801368a:	6825      	ldr	r5, [r4, #0]
 801368c:	f015 0506 	ands.w	r5, r5, #6
 8013690:	d106      	bne.n	80136a0 <_printf_common+0x48>
 8013692:	f104 0a19 	add.w	sl, r4, #25
 8013696:	68e3      	ldr	r3, [r4, #12]
 8013698:	6832      	ldr	r2, [r6, #0]
 801369a:	1a9b      	subs	r3, r3, r2
 801369c:	42ab      	cmp	r3, r5
 801369e:	dc26      	bgt.n	80136ee <_printf_common+0x96>
 80136a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136a4:	1e13      	subs	r3, r2, #0
 80136a6:	6822      	ldr	r2, [r4, #0]
 80136a8:	bf18      	it	ne
 80136aa:	2301      	movne	r3, #1
 80136ac:	0692      	lsls	r2, r2, #26
 80136ae:	d42b      	bmi.n	8013708 <_printf_common+0xb0>
 80136b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136b4:	4649      	mov	r1, r9
 80136b6:	4638      	mov	r0, r7
 80136b8:	47c0      	blx	r8
 80136ba:	3001      	adds	r0, #1
 80136bc:	d01e      	beq.n	80136fc <_printf_common+0xa4>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	68e5      	ldr	r5, [r4, #12]
 80136c2:	6832      	ldr	r2, [r6, #0]
 80136c4:	f003 0306 	and.w	r3, r3, #6
 80136c8:	2b04      	cmp	r3, #4
 80136ca:	bf08      	it	eq
 80136cc:	1aad      	subeq	r5, r5, r2
 80136ce:	68a3      	ldr	r3, [r4, #8]
 80136d0:	6922      	ldr	r2, [r4, #16]
 80136d2:	bf0c      	ite	eq
 80136d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136d8:	2500      	movne	r5, #0
 80136da:	4293      	cmp	r3, r2
 80136dc:	bfc4      	itt	gt
 80136de:	1a9b      	subgt	r3, r3, r2
 80136e0:	18ed      	addgt	r5, r5, r3
 80136e2:	2600      	movs	r6, #0
 80136e4:	341a      	adds	r4, #26
 80136e6:	42b5      	cmp	r5, r6
 80136e8:	d11a      	bne.n	8013720 <_printf_common+0xc8>
 80136ea:	2000      	movs	r0, #0
 80136ec:	e008      	b.n	8013700 <_printf_common+0xa8>
 80136ee:	2301      	movs	r3, #1
 80136f0:	4652      	mov	r2, sl
 80136f2:	4649      	mov	r1, r9
 80136f4:	4638      	mov	r0, r7
 80136f6:	47c0      	blx	r8
 80136f8:	3001      	adds	r0, #1
 80136fa:	d103      	bne.n	8013704 <_printf_common+0xac>
 80136fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013704:	3501      	adds	r5, #1
 8013706:	e7c6      	b.n	8013696 <_printf_common+0x3e>
 8013708:	18e1      	adds	r1, r4, r3
 801370a:	1c5a      	adds	r2, r3, #1
 801370c:	2030      	movs	r0, #48	; 0x30
 801370e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013712:	4422      	add	r2, r4
 8013714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801371c:	3302      	adds	r3, #2
 801371e:	e7c7      	b.n	80136b0 <_printf_common+0x58>
 8013720:	2301      	movs	r3, #1
 8013722:	4622      	mov	r2, r4
 8013724:	4649      	mov	r1, r9
 8013726:	4638      	mov	r0, r7
 8013728:	47c0      	blx	r8
 801372a:	3001      	adds	r0, #1
 801372c:	d0e6      	beq.n	80136fc <_printf_common+0xa4>
 801372e:	3601      	adds	r6, #1
 8013730:	e7d9      	b.n	80136e6 <_printf_common+0x8e>
	...

08013734 <_printf_i>:
 8013734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013738:	460c      	mov	r4, r1
 801373a:	4691      	mov	r9, r2
 801373c:	7e27      	ldrb	r7, [r4, #24]
 801373e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013740:	2f78      	cmp	r7, #120	; 0x78
 8013742:	4680      	mov	r8, r0
 8013744:	469a      	mov	sl, r3
 8013746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801374a:	d807      	bhi.n	801375c <_printf_i+0x28>
 801374c:	2f62      	cmp	r7, #98	; 0x62
 801374e:	d80a      	bhi.n	8013766 <_printf_i+0x32>
 8013750:	2f00      	cmp	r7, #0
 8013752:	f000 80d8 	beq.w	8013906 <_printf_i+0x1d2>
 8013756:	2f58      	cmp	r7, #88	; 0x58
 8013758:	f000 80a3 	beq.w	80138a2 <_printf_i+0x16e>
 801375c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013764:	e03a      	b.n	80137dc <_printf_i+0xa8>
 8013766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801376a:	2b15      	cmp	r3, #21
 801376c:	d8f6      	bhi.n	801375c <_printf_i+0x28>
 801376e:	a001      	add	r0, pc, #4	; (adr r0, 8013774 <_printf_i+0x40>)
 8013770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013774:	080137cd 	.word	0x080137cd
 8013778:	080137e1 	.word	0x080137e1
 801377c:	0801375d 	.word	0x0801375d
 8013780:	0801375d 	.word	0x0801375d
 8013784:	0801375d 	.word	0x0801375d
 8013788:	0801375d 	.word	0x0801375d
 801378c:	080137e1 	.word	0x080137e1
 8013790:	0801375d 	.word	0x0801375d
 8013794:	0801375d 	.word	0x0801375d
 8013798:	0801375d 	.word	0x0801375d
 801379c:	0801375d 	.word	0x0801375d
 80137a0:	080138ed 	.word	0x080138ed
 80137a4:	08013811 	.word	0x08013811
 80137a8:	080138cf 	.word	0x080138cf
 80137ac:	0801375d 	.word	0x0801375d
 80137b0:	0801375d 	.word	0x0801375d
 80137b4:	0801390f 	.word	0x0801390f
 80137b8:	0801375d 	.word	0x0801375d
 80137bc:	08013811 	.word	0x08013811
 80137c0:	0801375d 	.word	0x0801375d
 80137c4:	0801375d 	.word	0x0801375d
 80137c8:	080138d7 	.word	0x080138d7
 80137cc:	680b      	ldr	r3, [r1, #0]
 80137ce:	1d1a      	adds	r2, r3, #4
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	600a      	str	r2, [r1, #0]
 80137d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80137d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80137dc:	2301      	movs	r3, #1
 80137de:	e0a3      	b.n	8013928 <_printf_i+0x1f4>
 80137e0:	6825      	ldr	r5, [r4, #0]
 80137e2:	6808      	ldr	r0, [r1, #0]
 80137e4:	062e      	lsls	r6, r5, #24
 80137e6:	f100 0304 	add.w	r3, r0, #4
 80137ea:	d50a      	bpl.n	8013802 <_printf_i+0xce>
 80137ec:	6805      	ldr	r5, [r0, #0]
 80137ee:	600b      	str	r3, [r1, #0]
 80137f0:	2d00      	cmp	r5, #0
 80137f2:	da03      	bge.n	80137fc <_printf_i+0xc8>
 80137f4:	232d      	movs	r3, #45	; 0x2d
 80137f6:	426d      	negs	r5, r5
 80137f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137fc:	485e      	ldr	r0, [pc, #376]	; (8013978 <_printf_i+0x244>)
 80137fe:	230a      	movs	r3, #10
 8013800:	e019      	b.n	8013836 <_printf_i+0x102>
 8013802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013806:	6805      	ldr	r5, [r0, #0]
 8013808:	600b      	str	r3, [r1, #0]
 801380a:	bf18      	it	ne
 801380c:	b22d      	sxthne	r5, r5
 801380e:	e7ef      	b.n	80137f0 <_printf_i+0xbc>
 8013810:	680b      	ldr	r3, [r1, #0]
 8013812:	6825      	ldr	r5, [r4, #0]
 8013814:	1d18      	adds	r0, r3, #4
 8013816:	6008      	str	r0, [r1, #0]
 8013818:	0628      	lsls	r0, r5, #24
 801381a:	d501      	bpl.n	8013820 <_printf_i+0xec>
 801381c:	681d      	ldr	r5, [r3, #0]
 801381e:	e002      	b.n	8013826 <_printf_i+0xf2>
 8013820:	0669      	lsls	r1, r5, #25
 8013822:	d5fb      	bpl.n	801381c <_printf_i+0xe8>
 8013824:	881d      	ldrh	r5, [r3, #0]
 8013826:	4854      	ldr	r0, [pc, #336]	; (8013978 <_printf_i+0x244>)
 8013828:	2f6f      	cmp	r7, #111	; 0x6f
 801382a:	bf0c      	ite	eq
 801382c:	2308      	moveq	r3, #8
 801382e:	230a      	movne	r3, #10
 8013830:	2100      	movs	r1, #0
 8013832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013836:	6866      	ldr	r6, [r4, #4]
 8013838:	60a6      	str	r6, [r4, #8]
 801383a:	2e00      	cmp	r6, #0
 801383c:	bfa2      	ittt	ge
 801383e:	6821      	ldrge	r1, [r4, #0]
 8013840:	f021 0104 	bicge.w	r1, r1, #4
 8013844:	6021      	strge	r1, [r4, #0]
 8013846:	b90d      	cbnz	r5, 801384c <_printf_i+0x118>
 8013848:	2e00      	cmp	r6, #0
 801384a:	d04d      	beq.n	80138e8 <_printf_i+0x1b4>
 801384c:	4616      	mov	r6, r2
 801384e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013852:	fb03 5711 	mls	r7, r3, r1, r5
 8013856:	5dc7      	ldrb	r7, [r0, r7]
 8013858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801385c:	462f      	mov	r7, r5
 801385e:	42bb      	cmp	r3, r7
 8013860:	460d      	mov	r5, r1
 8013862:	d9f4      	bls.n	801384e <_printf_i+0x11a>
 8013864:	2b08      	cmp	r3, #8
 8013866:	d10b      	bne.n	8013880 <_printf_i+0x14c>
 8013868:	6823      	ldr	r3, [r4, #0]
 801386a:	07df      	lsls	r7, r3, #31
 801386c:	d508      	bpl.n	8013880 <_printf_i+0x14c>
 801386e:	6923      	ldr	r3, [r4, #16]
 8013870:	6861      	ldr	r1, [r4, #4]
 8013872:	4299      	cmp	r1, r3
 8013874:	bfde      	ittt	le
 8013876:	2330      	movle	r3, #48	; 0x30
 8013878:	f806 3c01 	strble.w	r3, [r6, #-1]
 801387c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013880:	1b92      	subs	r2, r2, r6
 8013882:	6122      	str	r2, [r4, #16]
 8013884:	f8cd a000 	str.w	sl, [sp]
 8013888:	464b      	mov	r3, r9
 801388a:	aa03      	add	r2, sp, #12
 801388c:	4621      	mov	r1, r4
 801388e:	4640      	mov	r0, r8
 8013890:	f7ff fee2 	bl	8013658 <_printf_common>
 8013894:	3001      	adds	r0, #1
 8013896:	d14c      	bne.n	8013932 <_printf_i+0x1fe>
 8013898:	f04f 30ff 	mov.w	r0, #4294967295
 801389c:	b004      	add	sp, #16
 801389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138a2:	4835      	ldr	r0, [pc, #212]	; (8013978 <_printf_i+0x244>)
 80138a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138a8:	6823      	ldr	r3, [r4, #0]
 80138aa:	680e      	ldr	r6, [r1, #0]
 80138ac:	061f      	lsls	r7, r3, #24
 80138ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80138b2:	600e      	str	r6, [r1, #0]
 80138b4:	d514      	bpl.n	80138e0 <_printf_i+0x1ac>
 80138b6:	07d9      	lsls	r1, r3, #31
 80138b8:	bf44      	itt	mi
 80138ba:	f043 0320 	orrmi.w	r3, r3, #32
 80138be:	6023      	strmi	r3, [r4, #0]
 80138c0:	b91d      	cbnz	r5, 80138ca <_printf_i+0x196>
 80138c2:	6823      	ldr	r3, [r4, #0]
 80138c4:	f023 0320 	bic.w	r3, r3, #32
 80138c8:	6023      	str	r3, [r4, #0]
 80138ca:	2310      	movs	r3, #16
 80138cc:	e7b0      	b.n	8013830 <_printf_i+0xfc>
 80138ce:	6823      	ldr	r3, [r4, #0]
 80138d0:	f043 0320 	orr.w	r3, r3, #32
 80138d4:	6023      	str	r3, [r4, #0]
 80138d6:	2378      	movs	r3, #120	; 0x78
 80138d8:	4828      	ldr	r0, [pc, #160]	; (801397c <_printf_i+0x248>)
 80138da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138de:	e7e3      	b.n	80138a8 <_printf_i+0x174>
 80138e0:	065e      	lsls	r6, r3, #25
 80138e2:	bf48      	it	mi
 80138e4:	b2ad      	uxthmi	r5, r5
 80138e6:	e7e6      	b.n	80138b6 <_printf_i+0x182>
 80138e8:	4616      	mov	r6, r2
 80138ea:	e7bb      	b.n	8013864 <_printf_i+0x130>
 80138ec:	680b      	ldr	r3, [r1, #0]
 80138ee:	6826      	ldr	r6, [r4, #0]
 80138f0:	6960      	ldr	r0, [r4, #20]
 80138f2:	1d1d      	adds	r5, r3, #4
 80138f4:	600d      	str	r5, [r1, #0]
 80138f6:	0635      	lsls	r5, r6, #24
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	d501      	bpl.n	8013900 <_printf_i+0x1cc>
 80138fc:	6018      	str	r0, [r3, #0]
 80138fe:	e002      	b.n	8013906 <_printf_i+0x1d2>
 8013900:	0671      	lsls	r1, r6, #25
 8013902:	d5fb      	bpl.n	80138fc <_printf_i+0x1c8>
 8013904:	8018      	strh	r0, [r3, #0]
 8013906:	2300      	movs	r3, #0
 8013908:	6123      	str	r3, [r4, #16]
 801390a:	4616      	mov	r6, r2
 801390c:	e7ba      	b.n	8013884 <_printf_i+0x150>
 801390e:	680b      	ldr	r3, [r1, #0]
 8013910:	1d1a      	adds	r2, r3, #4
 8013912:	600a      	str	r2, [r1, #0]
 8013914:	681e      	ldr	r6, [r3, #0]
 8013916:	6862      	ldr	r2, [r4, #4]
 8013918:	2100      	movs	r1, #0
 801391a:	4630      	mov	r0, r6
 801391c:	f7ec fd00 	bl	8000320 <memchr>
 8013920:	b108      	cbz	r0, 8013926 <_printf_i+0x1f2>
 8013922:	1b80      	subs	r0, r0, r6
 8013924:	6060      	str	r0, [r4, #4]
 8013926:	6863      	ldr	r3, [r4, #4]
 8013928:	6123      	str	r3, [r4, #16]
 801392a:	2300      	movs	r3, #0
 801392c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013930:	e7a8      	b.n	8013884 <_printf_i+0x150>
 8013932:	6923      	ldr	r3, [r4, #16]
 8013934:	4632      	mov	r2, r6
 8013936:	4649      	mov	r1, r9
 8013938:	4640      	mov	r0, r8
 801393a:	47d0      	blx	sl
 801393c:	3001      	adds	r0, #1
 801393e:	d0ab      	beq.n	8013898 <_printf_i+0x164>
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	079b      	lsls	r3, r3, #30
 8013944:	d413      	bmi.n	801396e <_printf_i+0x23a>
 8013946:	68e0      	ldr	r0, [r4, #12]
 8013948:	9b03      	ldr	r3, [sp, #12]
 801394a:	4298      	cmp	r0, r3
 801394c:	bfb8      	it	lt
 801394e:	4618      	movlt	r0, r3
 8013950:	e7a4      	b.n	801389c <_printf_i+0x168>
 8013952:	2301      	movs	r3, #1
 8013954:	4632      	mov	r2, r6
 8013956:	4649      	mov	r1, r9
 8013958:	4640      	mov	r0, r8
 801395a:	47d0      	blx	sl
 801395c:	3001      	adds	r0, #1
 801395e:	d09b      	beq.n	8013898 <_printf_i+0x164>
 8013960:	3501      	adds	r5, #1
 8013962:	68e3      	ldr	r3, [r4, #12]
 8013964:	9903      	ldr	r1, [sp, #12]
 8013966:	1a5b      	subs	r3, r3, r1
 8013968:	42ab      	cmp	r3, r5
 801396a:	dcf2      	bgt.n	8013952 <_printf_i+0x21e>
 801396c:	e7eb      	b.n	8013946 <_printf_i+0x212>
 801396e:	2500      	movs	r5, #0
 8013970:	f104 0619 	add.w	r6, r4, #25
 8013974:	e7f5      	b.n	8013962 <_printf_i+0x22e>
 8013976:	bf00      	nop
 8013978:	08013c79 	.word	0x08013c79
 801397c:	08013c8a 	.word	0x08013c8a

08013980 <memmove>:
 8013980:	4288      	cmp	r0, r1
 8013982:	b510      	push	{r4, lr}
 8013984:	eb01 0402 	add.w	r4, r1, r2
 8013988:	d902      	bls.n	8013990 <memmove+0x10>
 801398a:	4284      	cmp	r4, r0
 801398c:	4623      	mov	r3, r4
 801398e:	d807      	bhi.n	80139a0 <memmove+0x20>
 8013990:	1e43      	subs	r3, r0, #1
 8013992:	42a1      	cmp	r1, r4
 8013994:	d008      	beq.n	80139a8 <memmove+0x28>
 8013996:	f811 2b01 	ldrb.w	r2, [r1], #1
 801399a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801399e:	e7f8      	b.n	8013992 <memmove+0x12>
 80139a0:	4402      	add	r2, r0
 80139a2:	4601      	mov	r1, r0
 80139a4:	428a      	cmp	r2, r1
 80139a6:	d100      	bne.n	80139aa <memmove+0x2a>
 80139a8:	bd10      	pop	{r4, pc}
 80139aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139b2:	e7f7      	b.n	80139a4 <memmove+0x24>

080139b4 <_realloc_r>:
 80139b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139b6:	4607      	mov	r7, r0
 80139b8:	4614      	mov	r4, r2
 80139ba:	460e      	mov	r6, r1
 80139bc:	b921      	cbnz	r1, 80139c8 <_realloc_r+0x14>
 80139be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80139c2:	4611      	mov	r1, r2
 80139c4:	f7ff bb9c 	b.w	8013100 <_malloc_r>
 80139c8:	b922      	cbnz	r2, 80139d4 <_realloc_r+0x20>
 80139ca:	f7ff fc99 	bl	8013300 <_free_r>
 80139ce:	4625      	mov	r5, r4
 80139d0:	4628      	mov	r0, r5
 80139d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139d4:	f000 f814 	bl	8013a00 <_malloc_usable_size_r>
 80139d8:	42a0      	cmp	r0, r4
 80139da:	d20f      	bcs.n	80139fc <_realloc_r+0x48>
 80139dc:	4621      	mov	r1, r4
 80139de:	4638      	mov	r0, r7
 80139e0:	f7ff fb8e 	bl	8013100 <_malloc_r>
 80139e4:	4605      	mov	r5, r0
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d0f2      	beq.n	80139d0 <_realloc_r+0x1c>
 80139ea:	4631      	mov	r1, r6
 80139ec:	4622      	mov	r2, r4
 80139ee:	f7ff fb71 	bl	80130d4 <memcpy>
 80139f2:	4631      	mov	r1, r6
 80139f4:	4638      	mov	r0, r7
 80139f6:	f7ff fc83 	bl	8013300 <_free_r>
 80139fa:	e7e9      	b.n	80139d0 <_realloc_r+0x1c>
 80139fc:	4635      	mov	r5, r6
 80139fe:	e7e7      	b.n	80139d0 <_realloc_r+0x1c>

08013a00 <_malloc_usable_size_r>:
 8013a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a04:	1f18      	subs	r0, r3, #4
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	bfbc      	itt	lt
 8013a0a:	580b      	ldrlt	r3, [r1, r0]
 8013a0c:	18c0      	addlt	r0, r0, r3
 8013a0e:	4770      	bx	lr

08013a10 <_init>:
 8013a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a12:	bf00      	nop
 8013a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a16:	bc08      	pop	{r3}
 8013a18:	469e      	mov	lr, r3
 8013a1a:	4770      	bx	lr

08013a1c <_fini>:
 8013a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a1e:	bf00      	nop
 8013a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a22:	bc08      	pop	{r3}
 8013a24:	469e      	mov	lr, r3
 8013a26:	4770      	bx	lr
