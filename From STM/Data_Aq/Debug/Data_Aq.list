
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fa8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08015278  08015278  00025278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080154f4  080154f4  000254f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080154fc  080154fc  000254fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015500  08015500  00025500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000080a4  24000000  08015504  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240080a4  0801d5a8  000380a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24008104  0801d608  00038104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f9c8  24008164  0801d668  00038164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24027b2c  0801d668  00047b2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00038164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048f7d  00000000  00000000  00038192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006daf  00000000  00000000  0008110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00087ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002248  00000000  00000000  0008a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009004  00000000  00000000  0008c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030b54  00000000  00000000  0009558c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a8b6  00000000  00000000  000c60e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00230996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a038  00000000  00000000  002309ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008164 	.word	0x24008164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015260 	.word	0x08015260

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24008168 	.word	0x24008168
 800030c:	08015260 	.word	0x08015260

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	4829      	ldr	r0, [pc, #164]	; (80007dc <main+0xb0>)
 8000736:	f7ff ffbf 	bl	80006b8 <HalfKBWrite>
  for(int i = 0; i <65;i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e009      	b.n	8000754 <main+0x28>
  {
  	  pData[i]=i;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <main+0xb4>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <65;i++)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b40      	cmp	r3, #64	; 0x40
 8000758:	ddf2      	ble.n	8000740 <main+0x14>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f002 fdf5 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f851 	bl	8000804 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000762:	f000 f8c9 	bl	80008f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 fb07 	bl	8000d78 <MX_GPIO_Init>
  MX_ETH_Init();
 800076a:	f000 f8f5 	bl	8000958 <MX_ETH_Init>
  MX_MDMA_Init();
 800076e:	f000 fa9f 	bl	8000cb0 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000772:	f000 f9a3 	bl	8000abc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000776:	f00d f9bd 	bl	800daf4 <MX_FATFS_Init>
  MX_DMA_Init();
 800077a:	f000 fa79 	bl	8000c70 <MX_DMA_Init>
  MX_TIM2_Init();
 800077e:	f000 f9cb 	bl	8000b18 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000782:	f000 fa21 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000786:	f000 fa6b 	bl	8000c60 <MX_USB_OTG_HS_USB_Init>
  MX_OCTOSPI1_Init();
 800078a:	f000 f931 	bl	80009f0 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  EnableMemMappedQuadMode();
 800078e:	f000 fcc7 	bl	8001120 <EnableMemMappedQuadMode>
  TIM2->CCR1 = 2;
 8000792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000796:	2202      	movs	r2, #2
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800079a:	2100      	movs	r1, #0
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <main+0xb8>)
 800079e:	f00a faa5 	bl	800acec <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <main+0xbc>)
 80007a8:	f005 f9d8 	bl	8005b5c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007ac:	f010 fb2c 	bl	8010e08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDCard */
  SDCardHandle = osThreadNew(StartSDCardTask, NULL, &SDCard_attributes);
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <main+0xc0>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0xc4>)
 80007b6:	f010 fba8 	bl	8010f0a <osThreadNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <main+0xc8>)
 80007be:	6013      	str	r3, [r2, #0]

  /* creation of ServiceADC */
  ServiceADCHandle = osThreadNew(StartServiceADC, NULL, &ServiceADC_attributes);
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <main+0xcc>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <main+0xd0>)
 80007c6:	f010 fba0 	bl	8010f0a <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <main+0xd4>)
 80007ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007d0:	f010 fb60 	bl	8010e94 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  char str[80]={0};
  //  HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
    Error_Handler();
 80007d4:	f000 fd44 	bl	8001260 <Error_Handler>
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0xac>
 80007da:	bf00      	nop
 80007dc:	24000028 	.word	0x24000028
 80007e0:	24008180 	.word	0x24008180
 80007e4:	240274a8 	.word	0x240274a8
 80007e8:	58020400 	.word	0x58020400
 80007ec:	08015324 	.word	0x08015324
 80007f0:	08001189 	.word	0x08001189
 80007f4:	240271bc 	.word	0x240271bc
 80007f8:	08015348 	.word	0x08015348
 80007fc:	080011f9 	.word	0x080011f9
 8000800:	240274a4 	.word	0x240274a4

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	; 0x70
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f014 f894 	bl	8014940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f014 f88e 	bl	8014940 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000824:	2002      	movs	r0, #2
 8000826:	f005 fc7f 	bl	8006128 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <SystemClock_Config+0xec>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <SystemClock_Config+0xec>)
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <SystemClock_Config+0xec>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000846:	bf00      	nop
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xec>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000854:	d1f8      	bne.n	8000848 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <SystemClock_Config+0xf0>)
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	f023 0303 	bic.w	r3, r3, #3
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <SystemClock_Config+0xf0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000866:	2321      	movs	r3, #33	; 0x21
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800086a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000880:	f240 1313 	movw	r3, #275	; 0x113
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000892:	2304      	movs	r3, #4
 8000894:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000896:	2300      	movs	r3, #0
 8000898:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fc7a 	bl	800619c <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ae:	f000 fcd7 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	233f      	movs	r3, #63	; 0x3f
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2303      	movs	r3, #3
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008be:	2308      	movs	r3, #8
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2103      	movs	r1, #3
 80008d8:	4618      	mov	r0, r3
 80008da:	f006 f80b 	bl	80068f4 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008e4:	f000 fcbc 	bl	8001260 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3770      	adds	r7, #112	; 0x70
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	58024800 	.word	0x58024800
 80008f4:	58024400 	.word	0x58024400

080008f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ae      	sub	sp, #184	; 0xb8
 80008fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	22b4      	movs	r2, #180	; 0xb4
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f014 f81b 	bl	8014940 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SDMMC;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <PeriphCommonClock_Config+0x5c>)
 800090c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000912:	2319      	movs	r3, #25
 8000914:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000922:	23c0      	movs	r3, #192	; 0xc0
 8000924:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800092e:	2320      	movs	r3, #32
 8000930:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4618      	mov	r0, r3
 800093c:	f006 fba8 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000946:	f000 fc8b 	bl	8001260 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	37b8      	adds	r7, #184	; 0xb8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	02010000 	.word	0x02010000

08000958 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ETH_Init+0x80>)
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <MX_ETH_Init+0x84>)
 8000960:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_ETH_Init+0x88>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_ETH_Init+0x88>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_ETH_Init+0x88>)
 8000970:	22e1      	movs	r2, #225	; 0xe1
 8000972:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_ETH_Init+0x88>)
 8000976:	2200      	movs	r2, #0
 8000978:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_ETH_Init+0x88>)
 800097c:	2200      	movs	r2, #0
 800097e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_ETH_Init+0x88>)
 8000982:	2200      	movs	r2, #0
 8000984:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_ETH_Init+0x80>)
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_ETH_Init+0x88>)
 800098a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_ETH_Init+0x80>)
 800098e:	2201      	movs	r2, #1
 8000990:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_ETH_Init+0x80>)
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <MX_ETH_Init+0x8c>)
 8000996:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_ETH_Init+0x80>)
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_ETH_Init+0x90>)
 800099c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_ETH_Init+0x80>)
 80009a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x80>)
 80009a8:	f004 fb02 	bl	8004fb0 <HAL_ETH_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009b2:	f000 fc55 	bl	8001260 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_ETH_Init+0x94>)
 80009bc:	f013 ffc0 	bl	8014940 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_ETH_Init+0x94>)
 80009c2:	2221      	movs	r2, #33	; 0x21
 80009c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_ETH_Init+0x94>)
 80009c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_ETH_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24027564 	.word	0x24027564
 80009dc:	40028000 	.word	0x40028000
 80009e0:	240081c4 	.word	0x240081c4
 80009e4:	24008104 	.word	0x24008104
 80009e8:	240080a4 	.word	0x240080a4
 80009ec:	240275ec 	.word	0x240275ec

080009f0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <MX_OCTOSPI1_Init+0xc4>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 8;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 50;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a3e:	2232      	movs	r2, #50	; 0x32
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a6e:	f000 ff85 	bl	800197c <HAL_OSPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 fbf2 	bl	8001260 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a84:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a88:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_OCTOSPI1_Init+0xc8>)
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_OCTOSPI1_Init+0xc0>)
 8000a98:	f001 fb00 	bl	800209c <HAL_OSPIM_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8000aa2:	f000 fbdd 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24027158 	.word	0x24027158
 8000ab4:	52005000 	.word	0x52005000
 8000ab8:	01000001 	.word	0x01000001

08000abc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MX_SDMMC1_SD_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ace:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad2:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_SDMMC1_SD_Init+0x50>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SDMMC1_SD_Init+0x58>)
 8000aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <MX_SDMMC1_SD_Init+0x58>)
 8000aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af2:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SDMMC1_SD_Init+0x58>)
 8000af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <MX_SDMMC1_SD_Init+0x58>)
 8000afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000afe:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	240271c0 	.word	0x240271c0
 8000b10:	52007000 	.word	0x52007000
 8000b14:	58024400 	.word	0x58024400

08000b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b64:	f00a f86a 	bl	800ac3c <HAL_TIM_PWM_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b6e:	f000 fb77 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000b82:	f00a ffcd 	bl	800bb20 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b8c:	f000 fb68 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b90:	2360      	movs	r3, #96	; 0x60
 8000b92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000ba8:	f00a fadc 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000bb2:	f000 fb55 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM2_Init+0xac>)
 8000bb8:	f000 fe42 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	240274a8 	.word	0x240274a8

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <MX_USART3_UART_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c12:	f00b f83f 	bl	800bc94 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 fb20 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c24:	f00c f8d2 	bl	800cdcc <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 fb17 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c36:	f00c f907 	bl	800ce48 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 fb0e 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c46:	f00c f888 	bl	800cd5a <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 fb06 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240270c4 	.word	0x240270c4
 8000c5c:	40004800 	.word	0x40004800

08000c60 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_DMA_Init+0x3c>)
 8000c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <MX_DMA_Init+0x3c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_DMA_Init+0x3c>)
 8000c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2105      	movs	r1, #5
 8000c98:	200c      	movs	r0, #12
 8000c9a:	f002 fca1 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c9e:	200c      	movs	r0, #12
 8000ca0:	f002 fcb8 	bl	8003614 <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400

08000cb0 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <MX_MDMA_Init+0xbc>)
 8000cb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cbc:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <MX_MDMA_Init+0xbc>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_MDMA_Init+0xbc>)
 8000cc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <MX_MDMA_Init+0xc4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000cdc:	221d      	movs	r2, #29
 8000cde:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d32:	f004 ff46 	bl	8005bc2 <HAL_MDMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000d3c:	f000 fa90 	bl	8001260 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_MDMA_Init+0xc0>)
 8000d46:	f004 ff88 	bl	8005c5a <HAL_MDMA_ConfigPostRequestMask>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000d50:	f000 fa86 	bl	8001260 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2105      	movs	r1, #5
 8000d58:	207a      	movs	r0, #122	; 0x7a
 8000d5a:	f002 fc41 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d5e:	207a      	movs	r0, #122	; 0x7a
 8000d60:	f002 fc58 	bl	8003614 <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	240274f8 	.word	0x240274f8
 8000d74:	52000040 	.word	0x52000040

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8e:	4b82      	ldr	r3, [pc, #520]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a80      	ldr	r2, [pc, #512]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b7e      	ldr	r3, [pc, #504]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b7a      	ldr	r3, [pc, #488]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a79      	ldr	r2, [pc, #484]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b76      	ldr	r3, [pc, #472]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	4b73      	ldr	r3, [pc, #460]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	4a71      	ldr	r2, [pc, #452]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dda:	4b6f      	ldr	r3, [pc, #444]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de8:	4b6b      	ldr	r3, [pc, #428]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	4a6a      	ldr	r2, [pc, #424]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df8:	4b67      	ldr	r3, [pc, #412]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b64      	ldr	r3, [pc, #400]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a62      	ldr	r2, [pc, #392]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b60      	ldr	r3, [pc, #384]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a5b      	ldr	r2, [pc, #364]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a53      	ldr	r2, [pc, #332]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b49      	ldr	r3, [pc, #292]	; (8000f98 <MX_GPIO_Init+0x220>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e84:	4845      	ldr	r0, [pc, #276]	; (8000f9c <MX_GPIO_Init+0x224>)
 8000e86:	f004 fe69 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dummy_Data_GPIO_Port, Dummy_Data_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4844      	ldr	r0, [pc, #272]	; (8000fa0 <MX_GPIO_Init+0x228>)
 8000e90:	f004 fe64 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <MX_GPIO_Init+0x22c>)
 8000e9c:	f004 fe5e 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4840      	ldr	r0, [pc, #256]	; (8000fa8 <MX_GPIO_Init+0x230>)
 8000ea6:	f004 fe59 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	483b      	ldr	r0, [pc, #236]	; (8000fac <MX_GPIO_Init+0x234>)
 8000ec0:	f004 fc8c 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000ec4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	482f      	ldr	r0, [pc, #188]	; (8000f9c <MX_GPIO_Init+0x224>)
 8000ede:	f004 fc7d 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Dummy_Data_Pin */
  GPIO_InitStruct.Pin = Dummy_Data_Pin;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Dummy_Data_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0x228>)
 8000efa:	f004 fc6f 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0x22c>)
 8000f18:	f004 fc60 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <MX_GPIO_Init+0x228>)
 8000f32:	f004 fc53 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0x238>)
 8000f4c:	f004 fc46 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f62:	230a      	movs	r3, #10
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_GPIO_Init+0x238>)
 8000f6e:	f004 fc35 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f72:	2302      	movs	r3, #2
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_GPIO_Init+0x230>)
 8000f8a:	f004 fc27 	bl	80057dc <HAL_GPIO_Init>

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	; 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020400 	.word	0x58020400
 8000fa0:	58021800 	.word	0x58021800
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020800 	.word	0x58020800
 8000fb0:	58020000 	.word	0x58020000

08000fb4 <WriteTime>:

/* USER CODE BEGIN 4 */

void WriteTime()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8000fb8:	2233      	movs	r2, #51	; 0x33
 8000fba:	4918      	ldr	r1, [pc, #96]	; (800101c <WriteTime+0x68>)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <WriteTime+0x6c>)
 8000fbe:	f00e fdef 	bl	800fba0 <f_open>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <WriteTime+0x70>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <WriteTime+0x70>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <WriteTime+0x22>
	{
		Error_Handler();
 8000fd2:	f000 f945 	bl	8001260 <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",(uint)HAL_GetTick());
 8000fd6:	f002 fa07 	bl	80033e8 <HAL_GetTick>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4912      	ldr	r1, [pc, #72]	; (8001028 <WriteTime+0x74>)
 8000fe0:	4812      	ldr	r0, [pc, #72]	; (800102c <WriteTime+0x78>)
 8000fe2:	f013 fd89 	bl	8014af8 <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <WriteTime+0x78>)
 8000fe8:	f7ff f992 	bl	8000310 <strlen>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <WriteTime+0x7c>)
 8000ff0:	490e      	ldr	r1, [pc, #56]	; (800102c <WriteTime+0x78>)
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <WriteTime+0x6c>)
 8000ff4:	f00e ff99 	bl	800ff2a <f_write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <WriteTime+0x70>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <WriteTime+0x7c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <WriteTime+0x62>
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <WriteTime+0x70>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <WriteTime+0x6c>)
 8001012:	f00f f9b7 	bl	8010384 <f_close>
	}
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	08015298 	.word	0x08015298
 8001020:	24027678 	.word	0x24027678
 8001024:	240274f4 	.word	0x240274f4
 8001028:	080152a0 	.word	0x080152a0
 800102c:	24000000 	.word	0x24000000
 8001030:	24027154 	.word	0x24027154

08001034 <FS_MOUNT>:



static void FS_MOUNT(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	4914      	ldr	r1, [pc, #80]	; (8001090 <FS_MOUNT+0x5c>)
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <FS_MOUNT+0x60>)
 8001040:	f00e fd4a 	bl	800fad8 <f_mount>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <FS_MOUNT+0x64>)
 800104a:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <FS_MOUNT+0x64>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d119      	bne.n	8001088 <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <FS_MOUNT+0x68>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d115      	bne.n	8001088 <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <FS_MOUNT+0x6c>)
 8001064:	2200      	movs	r2, #0
 8001066:	2107      	movs	r1, #7
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <FS_MOUNT+0x5c>)
 800106a:	f00f f9bb 	bl	80103e4 <f_mkfs>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <FS_MOUNT+0x64>)
 8001074:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <FS_MOUNT+0x64>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <FS_MOUNT+0x4e>
			{
				Error_Handler();
 800107e:	f000 f8ef 	bl	8001260 <Error_Handler>
			}
		isFsCreated = 1;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <FS_MOUNT+0x68>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24027674 	.word	0x24027674
 8001094:	240278a8 	.word	0x240278a8
 8001098:	240274f4 	.word	0x240274f4
 800109c:	24008028 	.word	0x24008028
 80010a0:	24027240 	.word	0x24027240

080010a4 <FS_SPAM>:

static void FS_SPAM(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 80010aa:	2233      	movs	r2, #51	; 0x33
 80010ac:	4917      	ldr	r1, [pc, #92]	; (800110c <FS_SPAM+0x68>)
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <FS_SPAM+0x6c>)
 80010b0:	f00e fd76 	bl	800fba0 <f_open>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <FS_SPAM+0x70>)
 80010ba:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <FS_SPAM+0x70>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d11e      	bne.n	8001102 <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	e00d      	b.n	80010e6 <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <FS_SPAM+0x74>)
 80010cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d0:	4912      	ldr	r1, [pc, #72]	; (800111c <FS_SPAM+0x78>)
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <FS_SPAM+0x6c>)
 80010d4:	f00e ff29 	bl	800ff2a <f_write>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <FS_SPAM+0x70>)
 80010de:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b63      	cmp	r3, #99	; 0x63
 80010ea:	ddee      	ble.n	80010ca <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <FS_SPAM+0x74>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <FS_SPAM+0x5e>
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <FS_SPAM+0x70>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <FS_SPAM+0x6c>)
 80010fe:	f00f f941 	bl	8010384 <f_close>
		}
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	080152bc 	.word	0x080152bc
 8001110:	24027678 	.word	0x24027678
 8001114:	240274f4 	.word	0x240274f4
 8001118:	24027154 	.word	0x24027154
 800111c:	24000028 	.word	0x24000028

08001120 <EnableMemMappedQuadMode>:


void EnableMemMappedQuadMode(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	HAL_StatusTypeDef res;
//	OSPI_MemoryMappedTypeDef sMemMappedCfg;

	sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
	sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
	// sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
	// sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
	// sCommand.Instruction = 0;

	sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
	// sCommand.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
	// sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
	// sCommand.Address = 0xF;
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	; 0x30

	sCommand.DataMode = HAL_OSPI_DATA_8_LINES;
 8001142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Using Single Data Rate (SDR)
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_ONLY_FIRST_CMD;
 800114c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001150:	653b      	str	r3, [r7, #80]	; 0x50

	sCommand.NbData = 64;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48

	res = HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4619      	mov	r1, r3
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <EnableMemMappedQuadMode+0x64>)
 8001164:	f000 fe0a 	bl	8001d7c <HAL_OSPI_Command>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res != HAL_OK)
 800116e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <EnableMemMappedQuadMode+0x5a>
	{
		Error_Handler();
 8001176:	f000 f873 	bl	8001260 <Error_Handler>
	}
}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	; 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24027158 	.word	0x24027158

08001188 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(ServiceADCHandle);
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <StartSDCardTask+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f011 fcbb 	bl	8012b14 <vTaskSuspend>
	FS_MOUNT();
 800119e:	f7ff ff49 	bl	8001034 <FS_MOUNT>
	vTaskResume(ServiceADCHandle);
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <StartSDCardTask+0x64>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f011 fd5c 	bl	8012c64 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {
	counter++;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2102      	movs	r1, #2
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <StartSDCardTask+0x68>)
 80011b8:	f004 fcd0 	bl	8005b5c <HAL_GPIO_WritePin>
	WriteTime();
 80011bc:	f7ff fefa 	bl	8000fb4 <WriteTime>
	FS_SPAM();
 80011c0:	f7ff ff70 	bl	80010a4 <FS_SPAM>
	WriteTime();
 80011c4:	f7ff fef6 	bl	8000fb4 <WriteTime>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2102      	movs	r1, #2
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <StartSDCardTask+0x68>)
 80011ce:	f004 fcc5 	bl	8005b5c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <StartSDCardTask+0x6c>)
 80011d8:	f004 fcd9 	bl	8005b8e <HAL_GPIO_TogglePin>
	if(counter>=1){
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dde4      	ble.n	80011ac <StartSDCardTask+0x24>
		osDelay(10000);
 80011e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80011e6:	f00f ff22 	bl	801102e <osDelay>
	counter++;
 80011ea:	e7df      	b.n	80011ac <StartSDCardTask+0x24>
 80011ec:	240274a4 	.word	0x240274a4
 80011f0:	58021000 	.word	0x58021000
 80011f4:	58020400 	.word	0x58020400

080011f8 <StartServiceADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServiceADC */
void StartServiceADC(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServiceADC */
	//vTaskSuspend(NULL);
  /* Infinite loop */
  for(;;)
  {
	res = HAL_OSPI_Receive(&hospi1,pData ,HAL_MAX_DELAY-1);
 8001200:	f06f 0201 	mvn.w	r2, #1
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <StartServiceADC+0x38>)
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <StartServiceADC+0x3c>)
 8001208:	f000 fe45 	bl	8001e96 <HAL_OSPI_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <StartServiceADC+0x40>)
 8001212:	701a      	strb	r2, [r3, #0]
	if(res !=HAL_OK) Error_Handler();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <StartServiceADC+0x40>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <StartServiceADC+0x28>
 800121c:	f000 f820 	bl	8001260 <Error_Handler>
	hospi1.State = HAL_OSPI_STATE_CMD_CFG;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <StartServiceADC+0x3c>)
 8001222:	2204      	movs	r2, #4
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
	osDelay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f00f ff01 	bl	801102e <osDelay>
	res = HAL_OSPI_Receive(&hospi1,pData ,HAL_MAX_DELAY-1);
 800122c:	e7e8      	b.n	8001200 <StartServiceADC+0x8>
 800122e:	bf00      	nop
 8001230:	24008180 	.word	0x24008180
 8001234:	24027158 	.word	0x24027158
 8001238:	240274f4 	.word	0x240274f4

0800123c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124e:	f002 f8b7 	bl	80033c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2101      	movs	r1, #1
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <Error_Handler+0x2c>)
 800126a:	f004 fc77 	bl	8005b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2102      	movs	r1, #2
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <Error_Handler+0x30>)
 8001274:	f004 fc72 	bl	8005b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <Error_Handler+0x2c>)
 8001280:	f004 fc6c 	bl	8005b5c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x28>
 800128a:	bf00      	nop
 800128c:	58020400 	.word	0x58020400
 8001290:	58021000 	.word	0x58021000

08001294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x38>)
 800129c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_MspInit+0x38>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_MspInit+0x38>)
 80012ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	210f      	movs	r1, #15
 80012bc:	f06f 0001 	mvn.w	r0, #1
 80012c0:	f002 f98e 	bl	80035e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	58024400 	.word	0x58024400

080012d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_ETH_MspInit+0x184>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	f040 80ab 	bne.w	800144a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_ETH_MspInit+0x188>)
 80012f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fa:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_ETH_MspInit+0x188>)
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001304:	4b54      	ldr	r3, [pc, #336]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_ETH_MspInit+0x188>)
 800131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001336:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001354:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135e:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_ETH_MspInit+0x188>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_ETH_MspInit+0x188>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_ETH_MspInit+0x188>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_ETH_MspInit+0x188>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_ETH_MspInit+0x188>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_ETH_MspInit+0x188>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_ETH_MspInit+0x188>)
 80013b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_ETH_MspInit+0x188>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013c6:	2332      	movs	r3, #50	; 0x32
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d6:	230b      	movs	r3, #11
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <HAL_ETH_MspInit+0x18c>)
 80013e2:	f004 f9fb 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013e6:	2386      	movs	r3, #134	; 0x86
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f6:	230b      	movs	r3, #11
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <HAL_ETH_MspInit+0x190>)
 8001402:	f004 f9eb 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001418:	230b      	movs	r3, #11
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4810      	ldr	r0, [pc, #64]	; (8001464 <HAL_ETH_MspInit+0x194>)
 8001424:	f004 f9da 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001428:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143a:	230b      	movs	r3, #11
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <HAL_ETH_MspInit+0x198>)
 8001446:	f004 f9c9 	bl	80057dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40028000 	.word	0x40028000
 8001458:	58024400 	.word	0x58024400
 800145c:	58020800 	.word	0x58020800
 8001460:	58020000 	.word	0x58020000
 8001464:	58020400 	.word	0x58020400
 8001468:	58021800 	.word	0x58021800

0800146c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a83      	ldr	r2, [pc, #524]	; (8001698 <HAL_OSPI_MspInit+0x22c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	f040 80ff 	bne.w	800168e <HAL_OSPI_MspInit+0x222>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001490:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_OSPI_MspInit+0x230>)
 8001492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001496:	4a81      	ldr	r2, [pc, #516]	; (800169c <HAL_OSPI_MspInit+0x230>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80014ae:	4b7b      	ldr	r3, [pc, #492]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014b4:	4a79      	ldr	r2, [pc, #484]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014be:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014cc:	4b73      	ldr	r3, [pc, #460]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a72      	ldr	r2, [pc, #456]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b6f      	ldr	r3, [pc, #444]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	4b6c      	ldr	r3, [pc, #432]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a6a      	ldr	r2, [pc, #424]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_OSPI_MspInit+0x230>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_OSPI_MspInit+0x230>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_OSPI_MspInit+0x230>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b60      	ldr	r3, [pc, #384]	; (800169c <HAL_OSPI_MspInit+0x230>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    PC3_C     ------> OCTOSPIM_P1_IO6
    PE7     ------> OCTOSPIM_P1_IO4
    PE10     ------> OCTOSPIM_P1_IO7
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001526:	2304      	movs	r3, #4
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001536:	2309      	movs	r3, #9
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4857      	ldr	r0, [pc, #348]	; (80016a0 <HAL_OSPI_MspInit+0x234>)
 8001542:	f004 f94b 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001546:	f44f 7350 	mov.w	r3, #832	; 0x340
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001558:	230a      	movs	r3, #10
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4850      	ldr	r0, [pc, #320]	; (80016a4 <HAL_OSPI_MspInit+0x238>)
 8001564:	f004 f93a 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800157a:	2309      	movs	r3, #9
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4847      	ldr	r0, [pc, #284]	; (80016a4 <HAL_OSPI_MspInit+0x238>)
 8001586:	f004 f929 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158a:	230c      	movs	r3, #12
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 800159a:	2304      	movs	r3, #4
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4840      	ldr	r0, [pc, #256]	; (80016a8 <HAL_OSPI_MspInit+0x23c>)
 80015a6:	f004 f919 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80015aa:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015bc:	230a      	movs	r3, #10
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4836      	ldr	r0, [pc, #216]	; (80016a0 <HAL_OSPI_MspInit+0x234>)
 80015c8:	f004 f908 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80015de:	230b      	movs	r3, #11
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	482d      	ldr	r0, [pc, #180]	; (80016a0 <HAL_OSPI_MspInit+0x234>)
 80015ea:	f004 f8f7 	bl	80057dc <HAL_GPIO_Init>

    /* OCTOSPI1 MDMA Init */
    /* OCTOSPI1_FIFO_TH Init */
    hmdma_octospi1_fifo_th.Instance = MDMA_Channel1;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 80015f0:	4a2f      	ldr	r2, [pc, #188]	; (80016b0 <HAL_OSPI_MspInit+0x244>)
 80015f2:	601a      	str	r2, [r3, #0]
    hmdma_octospi1_fifo_th.Init.Request = MDMA_REQUEST_OCTOSPI1_FIFO_TH;
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 80015f6:	2216      	movs	r2, #22
 80015f8:	605a      	str	r2, [r3, #4]
    hmdma_octospi1_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hmdma_octospi1_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hmdma_octospi1_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
    hmdma_octospi1_fifo_th.Init.SourceInc = MDMA_SRC_INC_DOUBLEWORD;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800160e:	f240 3202 	movw	r2, #770	; 0x302
 8001612:	615a      	str	r2, [r3, #20]
    hmdma_octospi1_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DOUBLEWORD;
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001616:	f640 4208 	movw	r2, #3080	; 0xc08
 800161a:	619a      	str	r2, [r3, #24]
    hmdma_octospi1_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800161e:	2220      	movs	r2, #32
 8001620:	61da      	str	r2, [r3, #28]
    hmdma_octospi1_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	621a      	str	r2, [r3, #32]
    hmdma_octospi1_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800162a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_octospi1_fifo_th.Init.BufferTransferLength = 1;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001632:	2201      	movs	r2, #1
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_octospi1_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_octospi1_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800163e:	2200      	movs	r2, #0
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_octospi1_fifo_th.Init.SourceBlockAddressOffset = 0;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_octospi1_fifo_th.Init.DestBlockAddressOffset = 0;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_octospi1_fifo_th) != HAL_OK)
 800164e:	4817      	ldr	r0, [pc, #92]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001650:	f004 fab7 	bl	8005bc2 <HAL_MDMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_OSPI_MspInit+0x1f2>
    {
      Error_Handler();
 800165a:	f7ff fe01 	bl	8001260 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_octospi1_fifo_th, 0, 0) != HAL_OK)
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001664:	f004 faf9 	bl	8005c5a <HAL_MDMA_ConfigPostRequestMask>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_OSPI_MspInit+0x206>
    {
      Error_Handler();
 800166e:	f7ff fdf7 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hospi,hmdma,hmdma_octospi1_fifo_th);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 8001676:	651a      	str	r2, [r3, #80]	; 0x50
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_OSPI_MspInit+0x240>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6413      	str	r3, [r2, #64]	; 0x40

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	205c      	movs	r0, #92	; 0x5c
 8001684:	f001 ffac 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001688:	205c      	movs	r0, #92	; 0x5c
 800168a:	f001 ffc3 	bl	8003614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	52005000 	.word	0x52005000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58021000 	.word	0x58021000
 80016a4:	58021400 	.word	0x58021400
 80016a8:	58020800 	.word	0x58020800
 80016ac:	24026fe0 	.word	0x24026fe0
 80016b0:	52000080 	.word	0x52000080

080016b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2e      	ldr	r2, [pc, #184]	; (800178c <HAL_SD_MspInit+0xd8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d155      	bne.n	8001782 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_SD_MspInit+0xdc>)
 80016d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <HAL_SD_MspInit+0xdc>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_SD_MspInit+0xdc>)
 80016e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_SD_MspInit+0xdc>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_SD_MspInit+0xdc>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_SD_MspInit+0xdc>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_SD_MspInit+0xdc>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_SD_MspInit+0xdc>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_SD_MspInit+0xdc>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001730:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001734:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001742:	230c      	movs	r3, #12
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <HAL_SD_MspInit+0xe0>)
 800174e:	f004 f845 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001752:	2304      	movs	r3, #4
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001762:	230c      	movs	r3, #12
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <HAL_SD_MspInit+0xe4>)
 800176e:	f004 f835 	bl	80057dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2031      	movs	r0, #49	; 0x31
 8001778:	f001 ff32 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800177c:	2031      	movs	r0, #49	; 0x31
 800177e:	f001 ff49 	bl	8003614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	52007000 	.word	0x52007000
 8001790:	58024400 	.word	0x58024400
 8001794:	58020800 	.word	0x58020800
 8001798:	58020c00 	.word	0x58020c00

0800179c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d13d      	bne.n	800182a <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_TIM_PWM_MspInit+0x98>)
 80017b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b4:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <HAL_TIM_PWM_MspInit+0x98>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_TIM_PWM_MspInit+0x98>)
 80017c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream1;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_TIM_PWM_MspInit+0xa0>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017d4:	2212      	movs	r2, #18
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 8001810:	f001 ff0e 	bl	8003630 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800181a:	f7ff fd21 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_TIM_PWM_MspInit+0x9c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
 8001838:	2402704c 	.word	0x2402704c
 800183c:	40020028 	.word	0x40020028

08001840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001860:	d11e      	bne.n	80018a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4619      	mov	r1, r3
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <HAL_TIM_MspPostInit+0x6c>)
 800189c:	f003 ff9e 	bl	80057dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020000 	.word	0x58020000

080018b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0b6      	sub	sp, #216	; 0xd8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	22b4      	movs	r2, #180	; 0xb4
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f013 f835 	bl	8014940 <memset>
  if(huart->Instance==USART3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_UART_MspInit+0xc0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d142      	bne.n	8001966 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e0:	2302      	movs	r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4618      	mov	r0, r3
 80018f0:	f005 fbce 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018fa:	f7ff fcb1 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_UART_MspInit+0xc4>)
 8001900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_UART_MspInit+0xc4>)
 8001906:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_UART_MspInit+0xc4>)
 8001910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_UART_MspInit+0xc4>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <HAL_UART_MspInit+0xc4>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0xc4>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800193a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001954:	2307      	movs	r3, #7
 8001956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_UART_MspInit+0xc8>)
 8001962:	f003 ff3b 	bl	80057dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	37d8      	adds	r7, #216	; 0xd8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40004800 	.word	0x40004800
 8001974:	58024400 	.word	0x58024400
 8001978:	58020c00 	.word	0x58020c00

0800197c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f001 fd2e 	bl	80033e8 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e0a6      	b.n	8001ae8 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 809f 	bne.w	8001ae8 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fd5e 	bl	800146c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80019b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb61 	bl	800207c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_OSPI_Init+0x178>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68d1      	ldr	r1, [r2, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6912      	ldr	r2, [r2, #16]
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0412      	lsls	r2, r2, #16
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6952      	ldr	r2, [r2, #20]
 80019d6:	3a01      	subs	r2, #1
 80019d8:	0212      	lsls	r2, r2, #8
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	69d2      	ldr	r2, [r2, #28]
 80019e8:	4311      	orrs	r1, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a22:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2200      	movs	r2, #0
 8001a48:	2120      	movs	r1, #32
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 f878 	bl	8002b40 <OSPI_WaitFlagStateUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d146      	bne.n	8001ae8 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a90:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d107      	bne.n	8001ad0 <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0202 	orr.w	r2, r2, #2
 8001ace:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ad8:	d103      	bne.n	8001ae2 <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
 8001ae0:	e002      	b.n	8001ae8 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f8e0f88c 	.word	0xf8e0f88c

08001af8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3350      	adds	r3, #80	; 0x50
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03a      	beq.n	8001b9e <HAL_OSPI_IRQHandler+0xa6>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d035      	beq.n	8001b9e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b18      	cmp	r3, #24
 8001b36:	d10f      	bne.n	8001b58 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b56:	e012      	b.n	8001b7e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b28      	cmp	r3, #40	; 0x28
 8001b5c:	d10f      	bne.n	8001b7e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b94:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fa34 	bl	8002004 <HAL_OSPI_FifoThresholdCallback>
 8001b9c:	e0e7      	b.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d067      	beq.n	8001c78 <HAL_OSPI_IRQHandler+0x180>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d062      	beq.n	8001c78 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b28      	cmp	r3, #40	; 0x28
 8001bb6:	d131      	bne.n	8001c1c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_OSPI_IRQHandler+0xf4>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d010      	beq.n	8001bec <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	1e5a      	subs	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001bea:	e0bd      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 80b9 	bne.w	8001d68 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fa09 	bl	800202c <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001c1a:	e0a5      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2202      	movs	r2, #2
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001c32:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d103      	bne.n	8001c48 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f9fd 	bl	8002040 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001c46:	e08f      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d103      	bne.n	8001c56 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f9e2 	bl	8002018 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001c54:	e088      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c5c:	f040 8084 	bne.w	8001d68 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f9c1 	bl	8001ff0 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001c6e:	e07b      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f9b3 	bl	8001fdc <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001c76:	e077      	b.n	8001d68 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01e      	beq.n	8001cc0 <HAL_OSPI_IRQHandler+0x1c8>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d019      	beq.n	8001cc0 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f9cb 	bl	8002054 <HAL_OSPI_StatusMatchCallback>
 8001cbe:	e056      	b.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03c      	beq.n	8001d44 <HAL_OSPI_IRQHandler+0x24c>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d037      	beq.n	8001d44 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001cea:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01a      	beq.n	8001d36 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_OSPI_IRQHandler+0x280>)
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 ffee 	bl	8005cfe <HAL_MDMA_Abort_IT>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d021      	beq.n	8001d6c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f954 	bl	8001fdc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001d34:	e01a      	b.n	8001d6c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f94d 	bl	8001fdc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001d42:	e013      	b.n	8001d6c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f981 	bl	8002068 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d66:	e002      	b.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001d6c:	bf00      	nop
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08002ac9 	.word	0x08002ac9

08001d7c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f001 fb2e 	bl	80033e8 <HAL_GetTick>
 8001d8c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d104      	bne.n	8001daa <HAL_OSPI_Command+0x2e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001da8:	d115      	bne.n	8001dd6 <HAL_OSPI_Command+0x5a>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b14      	cmp	r3, #20
 8001dae:	d107      	bne.n	8001dc0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d00e      	beq.n	8001dd6 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_OSPI_Command+0x5a>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b24      	cmp	r3, #36	; 0x24
 8001dc4:	d15b      	bne.n	8001e7e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d003      	beq.n	8001dd6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d153      	bne.n	8001e7e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2120      	movs	r1, #32
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fead 	bl	8002b40 <OSPI_WaitFlagStateUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d14c      	bne.n	8001e8a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fed9 	bl	8002bb0 <OSPI_ConfigCmd>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d140      	bne.n	8001e8a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10e      	bne.n	8001e2e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2201      	movs	r2, #1
 8001e18:	2102      	movs	r1, #2
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fe90 	bl	8002b40 <OSPI_WaitFlagStateUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001e2c:	e02d      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d103      	bne.n	8001e3e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8001e3c:	e025      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10b      	bne.n	8001e5e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2b24      	cmp	r3, #36	; 0x24
 8001e4c:	d103      	bne.n	8001e56 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2204      	movs	r2, #4
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8001e54:	e019      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2214      	movs	r2, #20
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8001e5c:	e015      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d111      	bne.n	8001e8a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	2b14      	cmp	r3, #20
 8001e6c:	d103      	bne.n	8001e76 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2204      	movs	r2, #4
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8001e74:	e009      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2224      	movs	r2, #36	; 0x24
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8001e7c:	e005      	b.n	8001e8a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2210      	movs	r2, #16
 8001e86:	659a      	str	r2, [r3, #88]	; 0x58
 8001e88:	e000      	b.n	8001e8c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001e8a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001e8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b08c      	sub	sp, #48	; 0x30
 8001e9a:	af02      	add	r7, sp, #8
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ea2:	f001 faa1 	bl	80033e8 <HAL_GetTick>
 8001ea6:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3350      	adds	r3, #80	; 0x50
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed4:	e07c      	b.n	8001fd0 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d172      	bne.n	8001fc4 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f14:	d104      	bne.n	8001f20 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	649a      	str	r2, [r3, #72]	; 0x48
 8001f1e:	e011      	b.n	8001f44 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	649a      	str	r2, [r3, #72]	; 0x48
 8001f38:	e004      	b.n	8001f44 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fdf6 	bl	8002b40 <OSPI_WaitFlagStateUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8001f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d114      	bne.n	8001f8c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1dc      	bne.n	8001f44 <HAL_OSPI_Receive+0xae>
 8001f8a:	e000      	b.n	8001f8e <HAL_OSPI_Receive+0xf8>
          break;
 8001f8c:	bf00      	nop

      if (status == HAL_OK)
 8001f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11c      	bne.n	8001fd0 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fdcd 	bl	8002b40 <OSPI_WaitFlagStateUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8001fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001fc2:	e005      	b.n	8001fd0 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 8001fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	; 0x50
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4aa3      	ldr	r2, [pc, #652]	; (8002348 <HAL_OSPIM_Config+0x2ac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d105      	bne.n	80020ca <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80020c8:	e004      	b.n	80020d4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80020ca:	2301      	movs	r3, #1
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80020da:	e01d      	b.n	8002118 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80020dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2d8      	uxtb	r0, r3
 80020e4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80020e8:	f107 0114 	add.w	r1, r7, #20
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	4619      	mov	r1, r3
 80020f8:	f000 fee6 	bl	8002ec8 <OSPIM_GetConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2208      	movs	r2, #8
 800210c:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800210e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002112:	3301      	adds	r3, #1
 8002114:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800211c:	2b01      	cmp	r3, #1
 800211e:	d9dd      	bls.n	80020dc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002120:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 84c3 	bne.w	8002ab0 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800212a:	4b87      	ldr	r3, [pc, #540]	; (8002348 <HAL_OSPIM_Config+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002136:	4b84      	ldr	r3, [pc, #528]	; (8002348 <HAL_OSPIM_Config+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a83      	ldr	r2, [pc, #524]	; (8002348 <HAL_OSPIM_Config+0x2ac>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002142:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_OSPIM_Config+0x2b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_OSPIM_Config+0x2b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_OSPIM_Config+0x2b0>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002166:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002172:	4977      	ldr	r1, [pc, #476]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002182:	4413      	add	r3, r2
 8002184:	3b34      	subs	r3, #52	; 0x34
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	486f      	ldr	r0, [pc, #444]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021a0:	4413      	add	r3, r2
 80021a2:	3b34      	subs	r3, #52	; 0x34
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4403      	add	r3, r0
 80021b0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80ca 	beq.w	8002354 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a62      	ldr	r2, [pc, #392]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80021cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 8178 	bne.w	80024c6 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80021d6:	495e      	ldr	r1, [pc, #376]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80021d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021e8:	4413      	add	r3, r2
 80021ea:	3b3c      	subs	r3, #60	; 0x3c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	4856      	ldr	r0, [pc, #344]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80021f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002208:	4413      	add	r3, r2
 800220a:	3b3c      	subs	r3, #60	; 0x3c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	f041 0202 	orr.w	r2, r1, #2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4403      	add	r3, r0
 8002218:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800221a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800222a:	4413      	add	r3, r2
 800222c:	3b38      	subs	r3, #56	; 0x38
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d021      	beq.n	8002278 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8002234:	4946      	ldr	r1, [pc, #280]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002236:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002246:	4413      	add	r3, r2
 8002248:	3b38      	subs	r3, #56	; 0x38
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	483e      	ldr	r0, [pc, #248]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002256:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002266:	4413      	add	r3, r2
 8002268:	3b38      	subs	r3, #56	; 0x38
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	f041 0220 	orr.w	r2, r1, #32
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002278:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002288:	4413      	add	r3, r2
 800228a:	3b30      	subs	r3, #48	; 0x30
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8002292:	492f      	ldr	r1, [pc, #188]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002294:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022a4:	4413      	add	r3, r2
 80022a6:	3b30      	subs	r3, #48	; 0x30
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	4826      	ldr	r0, [pc, #152]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80022b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022c8:	4413      	add	r3, r2
 80022ca:	3b30      	subs	r3, #48	; 0x30
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4403      	add	r3, r0
 80022dc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80022de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022ee:	4413      	add	r3, r2
 80022f0:	3b2c      	subs	r3, #44	; 0x2c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80e6 	beq.w	80024c6 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80022fa:	4915      	ldr	r1, [pc, #84]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 80022fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800230c:	4413      	add	r3, r2
 800230e:	3b2c      	subs	r3, #44	; 0x2c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	480c      	ldr	r0, [pc, #48]	; (8002350 <HAL_OSPIM_Config+0x2b4>)
 8002320:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002330:	4413      	add	r3, r2
 8002332:	3b2c      	subs	r3, #44	; 0x2c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4403      	add	r3, r0
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	e0be      	b.n	80024c6 <HAL_OSPIM_Config+0x42a>
 8002348:	52005000 	.word	0x52005000
 800234c:	5200a000 	.word	0x5200a000
 8002350:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002362:	4413      	add	r3, r2
 8002364:	3b3c      	subs	r3, #60	; 0x3c
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80ac 	beq.w	80024c6 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800236e:	499d      	ldr	r1, [pc, #628]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 8002370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800237e:	4413      	add	r3, r2
 8002380:	3b3c      	subs	r3, #60	; 0x3c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	4895      	ldr	r0, [pc, #596]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 800238e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800239c:	4413      	add	r3, r2
 800239e:	3b3c      	subs	r3, #60	; 0x3c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f021 0201 	bic.w	r2, r1, #1
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80023ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80023bc:	4413      	add	r3, r2
 80023be:	3b38      	subs	r3, #56	; 0x38
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01f      	beq.n	8002406 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80023c6:	4987      	ldr	r1, [pc, #540]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 80023c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80023d6:	4413      	add	r3, r2
 80023d8:	3b38      	subs	r3, #56	; 0x38
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3b01      	subs	r3, #1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	487f      	ldr	r0, [pc, #508]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 80023e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80023f4:	4413      	add	r3, r2
 80023f6:	3b38      	subs	r3, #56	; 0x38
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f021 0210 	bic.w	r2, r1, #16
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4403      	add	r3, r0
 8002404:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002414:	4413      	add	r3, r2
 8002416:	3b30      	subs	r3, #48	; 0x30
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d023      	beq.n	8002466 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800241e:	4971      	ldr	r1, [pc, #452]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 8002420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800242e:	4413      	add	r3, r2
 8002430:	3b30      	subs	r3, #48	; 0x30
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	4868      	ldr	r0, [pc, #416]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 8002442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002450:	4413      	add	r3, r2
 8002452:	3b30      	subs	r3, #48	; 0x30
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3b01      	subs	r3, #1
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002474:	4413      	add	r3, r2
 8002476:	3b2c      	subs	r3, #44	; 0x2c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d023      	beq.n	80024c6 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800247e:	4959      	ldr	r1, [pc, #356]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 8002480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800248e:	4413      	add	r3, r2
 8002490:	3b2c      	subs	r3, #44	; 0x2c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	4850      	ldr	r0, [pc, #320]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 80024a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024b0:	4413      	add	r3, r2
 80024b2:	3b2c      	subs	r3, #44	; 0x2c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4403      	add	r3, r0
 80024c4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024da:	4413      	add	r3, r2
 80024dc:	3b3c      	subs	r3, #60	; 0x3c
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4299      	cmp	r1, r3
 80024e2:	d03c      	beq.n	800255e <HAL_OSPIM_Config+0x4c2>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024f8:	4413      	add	r3, r2
 80024fa:	3b38      	subs	r3, #56	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4299      	cmp	r1, r3
 8002500:	d02d      	beq.n	800255e <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002516:	4413      	add	r3, r2
 8002518:	3b34      	subs	r3, #52	; 0x34
 800251a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800251c:	4299      	cmp	r1, r3
 800251e:	d01e      	beq.n	800255e <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	68d9      	ldr	r1, [r3, #12]
 8002524:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002534:	4413      	add	r3, r2
 8002536:	3b30      	subs	r3, #48	; 0x30
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4299      	cmp	r1, r3
 800253c:	d00f      	beq.n	800255e <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002552:	4413      	add	r3, r2
 8002554:	3b2c      	subs	r3, #44	; 0x2c
 8002556:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002558:	4299      	cmp	r1, r3
 800255a:	f040 811e 	bne.w	800279a <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002572:	4413      	add	r3, r2
 8002574:	3b3c      	subs	r3, #60	; 0x3c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4299      	cmp	r1, r3
 800257a:	d135      	bne.n	80025e8 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002590:	4413      	add	r3, r2
 8002592:	3b38      	subs	r3, #56	; 0x38
 8002594:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002596:	4299      	cmp	r1, r3
 8002598:	d126      	bne.n	80025e8 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	68d9      	ldr	r1, [r3, #12]
 800259e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025ae:	4413      	add	r3, r2
 80025b0:	3b30      	subs	r3, #48	; 0x30
 80025b2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80025b4:	4299      	cmp	r1, r3
 80025b6:	d117      	bne.n	80025e8 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6919      	ldr	r1, [r3, #16]
 80025bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025cc:	4413      	add	r3, r2
 80025ce:	3b2c      	subs	r3, #44	; 0x2c
 80025d0:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80025d2:	4299      	cmp	r1, r3
 80025d4:	d108      	bne.n	80025e8 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80025d6:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <HAL_OSPIM_Config+0x548>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e0da      	b.n	800279a <HAL_OSPIM_Config+0x6fe>
 80025e4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80025e8:	49c2      	ldr	r1, [pc, #776]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80025ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025fa:	4413      	add	r3, r2
 80025fc:	3b3c      	subs	r3, #60	; 0x3c
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3b01      	subs	r3, #1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	48ba      	ldr	r0, [pc, #744]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800260a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800261a:	4413      	add	r3, r2
 800261c:	3b3c      	subs	r3, #60	; 0x3c
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	f021 0201 	bic.w	r2, r1, #1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4403      	add	r3, r0
 800262a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800262c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800263c:	4413      	add	r3, r2
 800263e:	3b38      	subs	r3, #56	; 0x38
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d021      	beq.n	800268a <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002646:	49ab      	ldr	r1, [pc, #684]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002648:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002658:	4413      	add	r3, r2
 800265a:	3b38      	subs	r3, #56	; 0x38
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3b01      	subs	r3, #1
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	48a3      	ldr	r0, [pc, #652]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002668:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002678:	4413      	add	r3, r2
 800267a:	3b38      	subs	r3, #56	; 0x38
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	f021 0210 	bic.w	r2, r1, #16
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4403      	add	r3, r0
 8002688:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800268a:	499a      	ldr	r1, [pc, #616]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800268c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800269c:	4413      	add	r3, r2
 800269e:	3b34      	subs	r3, #52	; 0x34
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	4892      	ldr	r0, [pc, #584]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80026ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026bc:	4413      	add	r3, r2
 80026be:	3b34      	subs	r3, #52	; 0x34
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80026ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026de:	4413      	add	r3, r2
 80026e0:	3b30      	subs	r3, #48	; 0x30
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80026e8:	4982      	ldr	r1, [pc, #520]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80026ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026fa:	4413      	add	r3, r2
 80026fc:	3b30      	subs	r3, #48	; 0x30
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3b01      	subs	r3, #1
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	4879      	ldr	r0, [pc, #484]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800270e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800271e:	4413      	add	r3, r2
 8002720:	3b30      	subs	r3, #48	; 0x30
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3b01      	subs	r3, #1
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002734:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002744:	4413      	add	r3, r2
 8002746:	3b2c      	subs	r3, #44	; 0x2c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d025      	beq.n	800279a <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800274e:	4969      	ldr	r1, [pc, #420]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002750:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002760:	4413      	add	r3, r2
 8002762:	3b2c      	subs	r3, #44	; 0x2c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3b01      	subs	r3, #1
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	4860      	ldr	r0, [pc, #384]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002774:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002784:	4413      	add	r3, r2
 8002786:	3b2c      	subs	r3, #44	; 0x2c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4403      	add	r3, r0
 8002798:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800279a:	4a56      	ldr	r2, [pc, #344]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	431a      	orrs	r2, r3
 80027b2:	4950      	ldr	r1, [pc, #320]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d90a      	bls.n	80027ec <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	4943      	ldr	r1, [pc, #268]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80027ec:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 809b 	beq.w	8002930 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 0203 	bic.w	r2, r3, #3
 800280c:	4939      	ldr	r1, [pc, #228]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	3b01      	subs	r3, #1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f042 0210 	orr.w	r2, r2, #16
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800286c:	4921      	ldr	r1, [pc, #132]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	3b01      	subs	r3, #1
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	e019      	b.n	80028b8 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028a2:	4914      	ldr	r1, [pc, #80]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d019      	beq.n	80028f8 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80028c4:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028da:	4906      	ldr	r1, [pc, #24]	; (80028f4 <HAL_OSPIM_Config+0x858>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e0c6      	b.n	8002a80 <HAL_OSPIM_Config+0x9e4>
 80028f2:	bf00      	nop
 80028f4:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80bf 	beq.w	8002a80 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002902:	4a6e      	ldr	r2, [pc, #440]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	3b01      	subs	r3, #1
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002918:	4968      	ldr	r1, [pc, #416]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	3b01      	subs	r3, #1
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	e0a7      	b.n	8002a80 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3b01      	subs	r3, #1
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	431a      	orrs	r2, r3
 8002948:	495c      	ldr	r1, [pc, #368]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002962:	4a56      	ldr	r2, [pc, #344]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	3b01      	subs	r3, #1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	431a      	orrs	r2, r3
 800297a:	4950      	ldr	r1, [pc, #320]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	3b01      	subs	r3, #1
 8002982:	f042 0210 	orr.w	r2, r2, #16
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d019      	beq.n	80029cc <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	049b      	lsls	r3, r3, #18
 80029b2:	431a      	orrs	r2, r3
 80029b4:	4941      	ldr	r1, [pc, #260]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	e01c      	b.n	8002a06 <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d018      	beq.n	8002a06 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	431a      	orrs	r2, r3
 80029f0:	4932      	ldr	r1, [pc, #200]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2a:	049b      	lsls	r3, r3, #18
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	4923      	ldr	r1, [pc, #140]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	e01c      	b.n	8002a80 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d018      	beq.n	8002a80 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	4914      	ldr	r1, [pc, #80]	; (8002abc <HAL_OSPIM_Config+0xa20>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002a80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_OSPIM_Config+0xa24>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <HAL_OSPIM_Config+0xa24>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002a98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <HAL_OSPIM_Config+0xa28>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_OSPIM_Config+0xa28>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002ab0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3750      	adds	r7, #80	; 0x50
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	5200b400 	.word	0x5200b400
 8002ac0:	52005000 	.word	0x52005000
 8002ac4:	5200a000 	.word	0x5200a000

08002ac8 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d122      	bne.n	8002b2c <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8002b1c:	e00c      	b.n	8002b38 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2202      	movs	r2, #2
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff fa63 	bl	8001ff0 <HAL_OSPI_AbortCpltCallback>
}
 8002b2a:	e005      	b.n	8002b38 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fa52 	bl	8001fdc <HAL_OSPI_ErrorCallback>
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b50:	e01a      	b.n	8002b88 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d016      	beq.n	8002b88 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f000 fc45 	bl	80033e8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e00e      	b.n	8002ba6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1d6      	bne.n	8002b52 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d114      	bne.n	8002c1e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bfc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c06:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002c10:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e02c      	b.n	8002c78 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d114      	bne.n	8002c50 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002c2e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002c38:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002c42:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e013      	b.n	8002c78 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c58:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002c62:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002c6c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	431a      	orrs	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	4319      	orrs	r1, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	430b      	orrs	r3, r1
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 021f 	bic.w	r2, r3, #31
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8095 	beq.w	8002e16 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d053      	beq.n	8002d9c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01e      	beq.n	8002d3a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <OSPI_ConfigCmd+0x308>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68d1      	ldr	r1, [r2, #12]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	6952      	ldr	r2, [r2, #20]
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	6912      	ldr	r2, [r2, #16]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	69d2      	ldr	r2, [r2, #28]
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	6a12      	ldr	r2, [r2, #32]
 8002d24:	4311      	orrs	r1, r2
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d30:	430a      	orrs	r2, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e026      	b.n	8002d88 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	; (8002ebc <OSPI_ConfigCmd+0x30c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	68d1      	ldr	r1, [r2, #12]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6952      	ldr	r2, [r2, #20]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6912      	ldr	r2, [r2, #16]
 8002d50:	4311      	orrs	r1, r2
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	69d2      	ldr	r2, [r2, #28]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	6a12      	ldr	r2, [r2, #32]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d72:	d109      	bne.n	8002d88 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d105      	bne.n	8002d88 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6992      	ldr	r2, [r2, #24]
 8002d98:	649a      	str	r2, [r3, #72]	; 0x48
 8002d9a:	e085      	b.n	8002ea8 <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <OSPI_ConfigCmd+0x310>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	68d1      	ldr	r1, [r2, #12]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	6952      	ldr	r2, [r2, #20]
 8002db4:	4311      	orrs	r1, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6912      	ldr	r2, [r2, #16]
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e01d      	b.n	8002e0c <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68d9      	ldr	r1, [r3, #12]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4319      	orrs	r1, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d109      	bne.n	8002e0c <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d105      	bne.n	8002e0c <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e048      	b.n	8002ea8 <OSPI_ConfigCmd+0x2f8>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02e      	beq.n	8002e7c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <OSPI_ConfigCmd+0x314>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	69d1      	ldr	r1, [r2, #28]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e36:	4311      	orrs	r1, r2
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6a12      	ldr	r2, [r2, #32]
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e42:	4311      	orrs	r1, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e00e      	b.n	8002e70 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	69d9      	ldr	r1, [r3, #28]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	4319      	orrs	r1, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6992      	ldr	r2, [r2, #24]
 8002e78:	649a      	str	r2, [r3, #72]	; 0x48
 8002e7a:	e015      	b.n	8002ea8 <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
		if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <OSPI_ConfigCmd+0x2ee>
		{
			// ---- Command with data ----

			// Configure the CCR register with all communication parameters
			MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_DMODE  | OCTOSPI_CCR_DDTR),
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	430b      	orrs	r3, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e004      	b.n	8002ea8 <OSPI_ConfigCmd+0x2f8>
								 (cmd->DataMode    | cmd->DataDtrMode));
		}else{
		      /* ---- Invalid command configuration (no instruction, no address) ---- */
		      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	77fb      	strb	r3, [r7, #31]
		      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	659a      	str	r2, [r3, #88]	; 0x58
		}
    }
  }

  /* Return function status */
  return status;
 8002ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	f0ffc0c0 	.word	0xf0ffc0c0
 8002ebc:	ffffc0c0 	.word	0xffffc0c0
 8002ec0:	f0ffffc0 	.word	0xf0ffffc0
 8002ec4:	f0ffc0ff 	.word	0xf0ffc0ff

08002ec8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <OSPIM_GetConfig+0x26>
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d802      	bhi.n	8002eee <OSPIM_GetConfig+0x26>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
 8002ef2:	e098      	b.n	8003026 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d10b      	bne.n	8002f30 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002f18:	4b46      	ldr	r3, [pc, #280]	; (8003034 <OSPIM_GetConfig+0x16c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002f24:	4b44      	ldr	r3, [pc, #272]	; (8003038 <OSPIM_GetConfig+0x170>)
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e002      	b.n	8002f30 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e074      	b.n	8003020 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002f36:	4a3f      	ldr	r2, [pc, #252]	; (8003034 <OSPIM_GetConfig+0x16c>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4053      	eors	r3, r2
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4053      	eors	r3, r2
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4053      	eors	r3, r2
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d018      	beq.n	8002fde <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4053      	eors	r3, r2
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d111      	bne.n	8002fde <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e005      	b.n	8002fde <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d018      	beq.n	800301a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4053      	eors	r3, r2
 8002fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d111      	bne.n	800301a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	e005      	b.n	800301a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3301      	adds	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d987      	bls.n	8002f36 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	5200b400 	.word	0x5200b400
 8003038:	04040222 	.word	0x04040222

0800303c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	d844      	bhi.n	80030d4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800304a:	2200      	movs	r2, #0
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	2019      	movs	r0, #25
 8003050:	f000 fac6 	bl	80035e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003054:	2019      	movs	r0, #25
 8003056:	f000 fadd 	bl	8003614 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_InitTick+0xb0>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_InitTick+0xb4>)
 8003062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003066:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_InitTick+0xb4>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_InitTick+0xb4>)
 8003072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800307e:	f107 020c 	add.w	r2, r7, #12
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 ffbf 	bl	800700c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800308e:	f003 ffa7 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 8003092:	4603      	mov	r3, r0
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_InitTick+0xb8>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	0c9b      	lsrs	r3, r3, #18
 80030a2:	3b01      	subs	r3, #1
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_InitTick+0xbc>)
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <HAL_InitTick+0xc0>)
 80030aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_InitTick+0xbc>)
 80030ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030b2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_InitTick+0xbc>)
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_InitTick+0xbc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_InitTick+0xbc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80030c6:	480c      	ldr	r0, [pc, #48]	; (80030f8 <HAL_InitTick+0xbc>)
 80030c8:	f007 fcd0 	bl	800aa6c <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <HAL_InitTick+0xa6>
 80030d2:	e001      	b.n	80030d8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e005      	b.n	80030e4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <HAL_InitTick+0xbc>)
 80030da:	f007 fd29 	bl	800ab30 <HAL_TIM_Base_Start_IT>
 80030de:	4603      	mov	r3, r0
 80030e0:	e000      	b.n	80030e4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3738      	adds	r7, #56	; 0x38
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	24008034 	.word	0x24008034
 80030f0:	58024400 	.word	0x58024400
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	24027620 	.word	0x24027620
 80030fc:	40010000 	.word	0x40010000

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA1_Stream1_IRQHandler+0x10>)
 8003132:	f000 fdd7 	bl	8003ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2402704c 	.word	0x2402704c

08003140 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <TIM1_UP_IRQHandler+0x10>)
 8003146:	f007 feed 	bl	800af24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	24027620 	.word	0x24027620

08003154 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <SDMMC1_IRQHandler+0x10>)
 800315a:	f006 fa95 	bl	8009688 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	240271c0 	.word	0x240271c0

08003168 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <OCTOSPI1_IRQHandler+0x10>)
 800316e:	f7fe fcc3 	bl	8001af8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	24027158 	.word	0x24027158

0800317c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <MDMA_IRQHandler+0x14>)
 8003182:	f002 fde3 	bl	8005d4c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_octospi1_fifo_th);
 8003186:	4803      	ldr	r0, [pc, #12]	; (8003194 <MDMA_IRQHandler+0x18>)
 8003188:	f002 fde0 	bl	8005d4c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	240274f8 	.word	0x240274f8
 8003194:	24026fe0 	.word	0x24026fe0

08003198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <_sbrk+0x5c>)
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <_sbrk+0x60>)
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <_sbrk+0x64>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <_sbrk+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d207      	bcs.n	80031d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c8:	f011 fb80 	bl	80148cc <__errno>
 80031cc:	4603      	mov	r3, r0
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e009      	b.n	80031ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <_sbrk+0x64>)
 80031e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	24050000 	.word	0x24050000
 80031f8:	00000400 	.word	0x00000400
 80031fc:	240081cc 	.word	0x240081cc
 8003200:	24027b30 	.word	0x24027b30

08003204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <SystemInit+0xd0>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <SystemInit+0xd0>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <SystemInit+0xd4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	2b06      	cmp	r3, #6
 8003222:	d807      	bhi.n	8003234 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003224:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <SystemInit+0xd4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 030f 	bic.w	r3, r3, #15
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <SystemInit+0xd4>)
 800322e:	f043 0307 	orr.w	r3, r3, #7
 8003232:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <SystemInit+0xd8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <SystemInit+0xd8>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <SystemInit+0xd8>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <SystemInit+0xd8>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4924      	ldr	r1, [pc, #144]	; (80032dc <SystemInit+0xd8>)
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <SystemInit+0xdc>)
 800324e:	4013      	ands	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <SystemInit+0xd4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <SystemInit+0xd4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 030f 	bic.w	r3, r3, #15
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <SystemInit+0xd4>)
 8003268:	f043 0307 	orr.w	r3, r3, #7
 800326c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <SystemInit+0xd8>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <SystemInit+0xd8>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <SystemInit+0xd8>)
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003280:	4b16      	ldr	r3, [pc, #88]	; (80032dc <SystemInit+0xd8>)
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <SystemInit+0xe0>)
 8003284:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <SystemInit+0xd8>)
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <SystemInit+0xe4>)
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <SystemInit+0xd8>)
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <SystemInit+0xe8>)
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <SystemInit+0xd8>)
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <SystemInit+0xd8>)
 800329a:	4a14      	ldr	r2, [pc, #80]	; (80032ec <SystemInit+0xe8>)
 800329c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <SystemInit+0xd8>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <SystemInit+0xd8>)
 80032a6:	4a11      	ldr	r2, [pc, #68]	; (80032ec <SystemInit+0xe8>)
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <SystemInit+0xd8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <SystemInit+0xd8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <SystemInit+0xd8>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <SystemInit+0xd8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <SystemInit+0xec>)
 80032c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80032c8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00
 80032d8:	52002000 	.word	0x52002000
 80032dc:	58024400 	.word	0x58024400
 80032e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80032e4:	02020200 	.word	0x02020200
 80032e8:	01ff0000 	.word	0x01ff0000
 80032ec:	01010280 	.word	0x01010280
 80032f0:	52004000 	.word	0x52004000

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032f8:	f7ff ff84 	bl	8003204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032fc:	480c      	ldr	r0, [pc, #48]	; (8003330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003314:	4c0a      	ldr	r4, [pc, #40]	; (8003340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003322:	f011 fad9 	bl	80148d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7fd fa01 	bl	800072c <main>
  bx  lr
 800332a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800332c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003330:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003334:	240080a4 	.word	0x240080a4
  ldr r2, =_sidata
 8003338:	08015504 	.word	0x08015504
  ldr r2, =_sbss
 800333c:	24008164 	.word	0x24008164
  ldr r4, =_ebss
 8003340:	24027b2c 	.word	0x24027b2c

08003344 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC3_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334e:	2003      	movs	r0, #3
 8003350:	f000 f93b 	bl	80035ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003354:	f003 fc84 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_Init+0x68>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	4913      	ldr	r1, [pc, #76]	; (80033b4 <HAL_Init+0x6c>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_Init+0x68>)
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_Init+0x6c>)
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_Init+0x70>)
 800338a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800338c:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <HAL_Init+0x74>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003392:	200f      	movs	r0, #15
 8003394:	f7ff fe52 	bl	800303c <HAL_InitTick>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e002      	b.n	80033a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033a2:	f7fd ff77 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	58024400 	.word	0x58024400
 80033b4:	0801536c 	.word	0x0801536c
 80033b8:	24008030 	.word	0x24008030
 80033bc:	2400802c 	.word	0x2400802c

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	24008038 	.word	0x24008038
 80033e4:	2402766c 	.word	0x2402766c

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	2402766c 	.word	0x2402766c

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	24008038 	.word	0x24008038

08003448 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003458:	4904      	ldr	r1, [pc, #16]	; (800346c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	58000400 	.word	0x58000400

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	4313      	orrs	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x40>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00
 80034b4:	05fa0000 	.word	0x05fa0000

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
         );
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff4c 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ee:	f7ff ff63 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 80035f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f7ff ffb3 	bl	8003564 <NVIC_EncodePriority>
 80035fe:	4602      	mov	r2, r0
 8003600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff82 	bl	8003510 <__NVIC_SetPriority>
}
 800360c:	bf00      	nop
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff56 	bl	80034d4 <__NVIC_EnableIRQ>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff fed6 	bl	80033e8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e314      	b.n	8003c72 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a66      	ldr	r2, [pc, #408]	; (80037e8 <HAL_DMA_Init+0x1b8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_DMA_Init+0x1bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_DMA_Init+0x1c0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a62      	ldr	r2, [pc, #392]	; (80037f4 <HAL_DMA_Init+0x1c4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <HAL_DMA_Init+0x1c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5f      	ldr	r2, [pc, #380]	; (80037fc <HAL_DMA_Init+0x1cc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_DMA_Init+0x1d0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5c      	ldr	r2, [pc, #368]	; (8003804 <HAL_DMA_Init+0x1d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5a      	ldr	r2, [pc, #360]	; (8003808 <HAL_DMA_Init+0x1d8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <HAL_DMA_Init+0x1dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_DMA_Init+0x1e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_DMA_Init+0x1e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_DMA_Init+0x1e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a53      	ldr	r2, [pc, #332]	; (800381c <HAL_DMA_Init+0x1ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_DMA_Init+0x1f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_DMA_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Init+0xbc>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_DMA_Init+0xbe>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 813c 	beq.w	800396c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a37      	ldr	r2, [pc, #220]	; (80037e8 <HAL_DMA_Init+0x1b8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d04a      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_DMA_Init+0x1bc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d045      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <HAL_DMA_Init+0x1c0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d040      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a33      	ldr	r2, [pc, #204]	; (80037f4 <HAL_DMA_Init+0x1c4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d03b      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_DMA_Init+0x1c8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d036      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a30      	ldr	r2, [pc, #192]	; (80037fc <HAL_DMA_Init+0x1cc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d031      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_DMA_Init+0x1d0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d02c      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <HAL_DMA_Init+0x1d4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d027      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <HAL_DMA_Init+0x1d8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d022      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_DMA_Init+0x1dc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d01d      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_DMA_Init+0x1e0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_DMA_Init+0x1e4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_DMA_Init+0x1e8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_DMA_Init+0x1ec>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_DMA_Init+0x1f0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_DMA_Init+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <HAL_DMA_Init+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <HAL_DMA_Init+0x196>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c6:	e02f      	b.n	8003828 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c8:	f7ff fe0e 	bl	80033e8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d928      	bls.n	8003828 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e244      	b.n	8003c72 <HAL_DMA_Init+0x642>
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1c8      	bne.n	80037c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <HAL_DMA_Init+0x424>)
 8003842:	4013      	ands	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800384e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d107      	bne.n	800388c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4313      	orrs	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b28      	cmp	r3, #40	; 0x28
 8003892:	d903      	bls.n	800389c <HAL_DMA_Init+0x26c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b2e      	cmp	r3, #46	; 0x2e
 800389a:	d91f      	bls.n	80038dc <HAL_DMA_Init+0x2ac>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b3e      	cmp	r3, #62	; 0x3e
 80038a2:	d903      	bls.n	80038ac <HAL_DMA_Init+0x27c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b42      	cmp	r3, #66	; 0x42
 80038aa:	d917      	bls.n	80038dc <HAL_DMA_Init+0x2ac>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b46      	cmp	r3, #70	; 0x46
 80038b2:	d903      	bls.n	80038bc <HAL_DMA_Init+0x28c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b48      	cmp	r3, #72	; 0x48
 80038ba:	d90f      	bls.n	80038dc <HAL_DMA_Init+0x2ac>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b4e      	cmp	r3, #78	; 0x4e
 80038c2:	d903      	bls.n	80038cc <HAL_DMA_Init+0x29c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b52      	cmp	r3, #82	; 0x52
 80038ca:	d907      	bls.n	80038dc <HAL_DMA_Init+0x2ac>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b73      	cmp	r3, #115	; 0x73
 80038d2:	d905      	bls.n	80038e0 <HAL_DMA_Init+0x2b0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b77      	cmp	r3, #119	; 0x77
 80038da:	d801      	bhi.n	80038e0 <HAL_DMA_Init+0x2b0>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_DMA_Init+0x2b2>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 0307 	bic.w	r3, r3, #7
 8003904:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b04      	cmp	r3, #4
 8003916:	d117      	bne.n	8003948 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f001 f9b6 	bl	8004c9c <DMA_CheckFifoParam>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e194      	b.n	8003c72 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f001 f8f1 	bl	8004b38 <DMA_CalcBaseAndBitshift>
 8003956:	4603      	mov	r3, r0
 8003958:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	223f      	movs	r2, #63	; 0x3f
 8003964:	409a      	lsls	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	e0ca      	b.n	8003b02 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <HAL_DMA_Init+0x428>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a38      	ldr	r2, [pc, #224]	; (8003a5c <HAL_DMA_Init+0x42c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01d      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a36      	ldr	r2, [pc, #216]	; (8003a60 <HAL_DMA_Init+0x430>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <HAL_DMA_Init+0x434>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a33      	ldr	r2, [pc, #204]	; (8003a68 <HAL_DMA_Init+0x438>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a32      	ldr	r2, [pc, #200]	; (8003a6c <HAL_DMA_Init+0x43c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <HAL_DMA_Init+0x440>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_DMA_Init+0x38c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <HAL_DMA_Init+0x444>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Init+0x390>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_DMA_Init+0x392>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8094 	beq.w	8003af0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_DMA_Init+0x428>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d021      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_DMA_Init+0x42c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d01c      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_DMA_Init+0x430>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_DMA_Init+0x434>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d012      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_DMA_Init+0x438>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_DMA_Init+0x43c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d008      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_DMA_Init+0x440>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <HAL_DMA_Init+0x3e6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_DMA_Init+0x444>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_DMA_Init+0x448>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d01d      	beq.n	8003a7c <HAL_DMA_Init+0x44c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d102      	bne.n	8003a4e <HAL_DMA_Init+0x41e>
 8003a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a4c:	e017      	b.n	8003a7e <HAL_DMA_Init+0x44e>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e015      	b.n	8003a7e <HAL_DMA_Init+0x44e>
 8003a52:	bf00      	nop
 8003a54:	fe10803f 	.word	0xfe10803f
 8003a58:	58025408 	.word	0x58025408
 8003a5c:	5802541c 	.word	0x5802541c
 8003a60:	58025430 	.word	0x58025430
 8003a64:	58025444 	.word	0x58025444
 8003a68:	58025458 	.word	0x58025458
 8003a6c:	5802546c 	.word	0x5802546c
 8003a70:	58025480 	.word	0x58025480
 8003a74:	58025494 	.word	0x58025494
 8003a78:	fffe000f 	.word	0xfffe000f
 8003a7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003aa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b6e      	ldr	r3, [pc, #440]	; (8003c7c <HAL_DMA_Init+0x64c>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4a6e      	ldr	r2, [pc, #440]	; (8003c80 <HAL_DMA_Init+0x650>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f001 f82f 	bl	8004b38 <DMA_CalcBaseAndBitshift>
 8003ada:	4603      	mov	r3, r0
 8003adc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	e008      	b.n	8003b02 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0b7      	b.n	8003c72 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5f      	ldr	r2, [pc, #380]	; (8003c84 <HAL_DMA_Init+0x654>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d072      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_DMA_Init+0x658>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d06d      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_DMA_Init+0x65c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d068      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5a      	ldr	r2, [pc, #360]	; (8003c90 <HAL_DMA_Init+0x660>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d063      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_DMA_Init+0x664>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d05e      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_DMA_Init+0x668>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d059      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_DMA_Init+0x66c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d054      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_DMA_Init+0x670>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04f      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a53      	ldr	r2, [pc, #332]	; (8003ca4 <HAL_DMA_Init+0x674>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <HAL_DMA_Init+0x678>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a50      	ldr	r2, [pc, #320]	; (8003cac <HAL_DMA_Init+0x67c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_DMA_Init+0x680>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4d      	ldr	r2, [pc, #308]	; (8003cb4 <HAL_DMA_Init+0x684>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_DMA_Init+0x688>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_DMA_Init+0x68c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_DMA_Init+0x690>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a47      	ldr	r2, [pc, #284]	; (8003cc4 <HAL_DMA_Init+0x694>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a45      	ldr	r2, [pc, #276]	; (8003cc8 <HAL_DMA_Init+0x698>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a44      	ldr	r2, [pc, #272]	; (8003ccc <HAL_DMA_Init+0x69c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a42      	ldr	r2, [pc, #264]	; (8003cd0 <HAL_DMA_Init+0x6a0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <HAL_DMA_Init+0x6a4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3f      	ldr	r2, [pc, #252]	; (8003cd8 <HAL_DMA_Init+0x6a8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <HAL_DMA_Init+0x6ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_Init+0x5c2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <HAL_DMA_Init+0x6b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_DMA_Init+0x5c8>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d032      	beq.n	8003c62 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 f8c9 	bl	8004d94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d102      	bne.n	8003c10 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <HAL_DMA_Init+0x620>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d80c      	bhi.n	8003c50 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 f946 	bl	8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e008      	b.n	8003c62 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	a7fdabf8 	.word	0xa7fdabf8
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
 8003cc4:	58025408 	.word	0x58025408
 8003cc8:	5802541c 	.word	0x5802541c
 8003ccc:	58025430 	.word	0x58025430
 8003cd0:	58025444 	.word	0x58025444
 8003cd4:	58025458 	.word	0x58025458
 8003cd8:	5802546c 	.word	0x5802546c
 8003cdc:	58025480 	.word	0x58025480
 8003ce0:	58025494 	.word	0x58025494

08003ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf0:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_DMA_IRQHandler+0x1ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <HAL_DMA_IRQHandler+0x1b0>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5f      	ldr	r2, [pc, #380]	; (8003e98 <HAL_DMA_IRQHandler+0x1b4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d04a      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5d      	ldr	r2, [pc, #372]	; (8003e9c <HAL_DMA_IRQHandler+0x1b8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d045      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d040      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d03b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a59      	ldr	r2, [pc, #356]	; (8003ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d036      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a57      	ldr	r2, [pc, #348]	; (8003eac <HAL_DMA_IRQHandler+0x1c8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d031      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a56      	ldr	r2, [pc, #344]	; (8003eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d02c      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d027      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a53      	ldr	r2, [pc, #332]	; (8003eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d022      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a51      	ldr	r2, [pc, #324]	; (8003ebc <HAL_DMA_IRQHandler+0x1d8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01d      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a50      	ldr	r2, [pc, #320]	; (8003ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d018      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a4e      	ldr	r2, [pc, #312]	; (8003ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ecc <HAL_DMA_IRQHandler+0x1e8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a4a      	ldr	r2, [pc, #296]	; (8003ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_DMA_IRQHandler+0xd6>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_DMA_IRQHandler+0xd8>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 842b 	beq.w	8004618 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a2 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2e      	ldr	r2, [pc, #184]	; (8003e98 <HAL_DMA_IRQHandler+0x1b4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04a      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <HAL_DMA_IRQHandler+0x1b8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d045      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <HAL_DMA_IRQHandler+0x1bc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d040      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <HAL_DMA_IRQHandler+0x1c0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d03b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_DMA_IRQHandler+0x1c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d027      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d022      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <HAL_DMA_IRQHandler+0x1d8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_DMA_IRQHandler+0x1e8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d12f      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x1f4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e02e      	b.n	8003eec <HAL_DMA_IRQHandler+0x208>
 8003e8e:	bf00      	nop
 8003e90:	2400802c 	.word	0x2400802c
 8003e94:	1b4e81b5 	.word	0x1b4e81b5
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2208      	movs	r2, #8
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06e      	beq.n	8004010 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a69      	ldr	r2, [pc, #420]	; (80040dc <HAL_DMA_IRQHandler+0x3f8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a67      	ldr	r2, [pc, #412]	; (80040e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a66      	ldr	r2, [pc, #408]	; (80040e4 <HAL_DMA_IRQHandler+0x400>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a64      	ldr	r2, [pc, #400]	; (80040e8 <HAL_DMA_IRQHandler+0x404>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a63      	ldr	r2, [pc, #396]	; (80040ec <HAL_DMA_IRQHandler+0x408>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a61      	ldr	r2, [pc, #388]	; (80040f0 <HAL_DMA_IRQHandler+0x40c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a60      	ldr	r2, [pc, #384]	; (80040f4 <HAL_DMA_IRQHandler+0x410>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_DMA_IRQHandler+0x414>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5d      	ldr	r2, [pc, #372]	; (80040fc <HAL_DMA_IRQHandler+0x418>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <HAL_DMA_IRQHandler+0x41c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_DMA_IRQHandler+0x420>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	; (8004108 <HAL_DMA_IRQHandler+0x424>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a57      	ldr	r2, [pc, #348]	; (800410c <HAL_DMA_IRQHandler+0x428>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a55      	ldr	r2, [pc, #340]	; (8004110 <HAL_DMA_IRQHandler+0x42c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a54      	ldr	r2, [pc, #336]	; (8004114 <HAL_DMA_IRQHandler+0x430>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	; (8004118 <HAL_DMA_IRQHandler+0x434>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0x304>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e003      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x30c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2204      	movs	r2, #4
 800401a:	409a      	lsls	r2, r3
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 808f 	beq.w	8004144 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <HAL_DMA_IRQHandler+0x3f8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d045      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <HAL_DMA_IRQHandler+0x400>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d040      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <HAL_DMA_IRQHandler+0x404>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <HAL_DMA_IRQHandler+0x408>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_DMA_IRQHandler+0x40c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <HAL_DMA_IRQHandler+0x410>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02c      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_DMA_IRQHandler+0x414>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a20      	ldr	r2, [pc, #128]	; (80040fc <HAL_DMA_IRQHandler+0x418>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_DMA_IRQHandler+0x41c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <HAL_DMA_IRQHandler+0x420>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_DMA_IRQHandler+0x424>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1a      	ldr	r2, [pc, #104]	; (800410c <HAL_DMA_IRQHandler+0x428>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_DMA_IRQHandler+0x42c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_DMA_IRQHandler+0x430>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <HAL_DMA_IRQHandler+0x434>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d12a      	bne.n	800411c <HAL_DMA_IRQHandler+0x438>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e023      	b.n	8004124 <HAL_DMA_IRQHandler+0x440>
 80040dc:	40020010 	.word	0x40020010
 80040e0:	40020028 	.word	0x40020028
 80040e4:	40020040 	.word	0x40020040
 80040e8:	40020058 	.word	0x40020058
 80040ec:	40020070 	.word	0x40020070
 80040f0:	40020088 	.word	0x40020088
 80040f4:	400200a0 	.word	0x400200a0
 80040f8:	400200b8 	.word	0x400200b8
 80040fc:	40020410 	.word	0x40020410
 8004100:	40020428 	.word	0x40020428
 8004104:	40020440 	.word	0x40020440
 8004108:	40020458 	.word	0x40020458
 800410c:	40020470 	.word	0x40020470
 8004110:	40020488 	.word	0x40020488
 8004114:	400204a0 	.word	0x400204a0
 8004118:	400204b8 	.word	0x400204b8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	2204      	movs	r2, #4
 8004132:	409a      	lsls	r2, r3
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2210      	movs	r2, #16
 800414e:	409a      	lsls	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a6 	beq.w	80042a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a85      	ldr	r2, [pc, #532]	; (8004374 <HAL_DMA_IRQHandler+0x690>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04a      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <HAL_DMA_IRQHandler+0x694>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a82      	ldr	r2, [pc, #520]	; (800437c <HAL_DMA_IRQHandler+0x698>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d040      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a80      	ldr	r2, [pc, #512]	; (8004380 <HAL_DMA_IRQHandler+0x69c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7f      	ldr	r2, [pc, #508]	; (8004384 <HAL_DMA_IRQHandler+0x6a0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d036      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a7d      	ldr	r2, [pc, #500]	; (8004388 <HAL_DMA_IRQHandler+0x6a4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7c      	ldr	r2, [pc, #496]	; (800438c <HAL_DMA_IRQHandler+0x6a8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d02c      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7a      	ldr	r2, [pc, #488]	; (8004390 <HAL_DMA_IRQHandler+0x6ac>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a79      	ldr	r2, [pc, #484]	; (8004394 <HAL_DMA_IRQHandler+0x6b0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a77      	ldr	r2, [pc, #476]	; (8004398 <HAL_DMA_IRQHandler+0x6b4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a76      	ldr	r2, [pc, #472]	; (800439c <HAL_DMA_IRQHandler+0x6b8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_DMA_IRQHandler+0x6bc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_DMA_IRQHandler+0x6c0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a71      	ldr	r2, [pc, #452]	; (80043a8 <HAL_DMA_IRQHandler+0x6c4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a70      	ldr	r2, [pc, #448]	; (80043ac <HAL_DMA_IRQHandler+0x6c8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <HAL_DMA_IRQHandler+0x6cc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10a      	bne.n	8004210 <HAL_DMA_IRQHandler+0x52c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e009      	b.n	8004224 <HAL_DMA_IRQHandler+0x540>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03e      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2210      	movs	r2, #16
 8004232:	409a      	lsls	r2, r3
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d108      	bne.n	8004266 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d024      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	e01f      	b.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01b      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
 8004276:	e016      	b.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2220      	movs	r2, #32
 80042b0:	409a      	lsls	r2, r3
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8110 	beq.w	80044dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	; (8004374 <HAL_DMA_IRQHandler+0x690>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d04a      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <HAL_DMA_IRQHandler+0x694>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d045      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a29      	ldr	r2, [pc, #164]	; (800437c <HAL_DMA_IRQHandler+0x698>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d040      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <HAL_DMA_IRQHandler+0x69c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d03b      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <HAL_DMA_IRQHandler+0x6a0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d036      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a25      	ldr	r2, [pc, #148]	; (8004388 <HAL_DMA_IRQHandler+0x6a4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d031      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <HAL_DMA_IRQHandler+0x6a8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02c      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a22      	ldr	r2, [pc, #136]	; (8004390 <HAL_DMA_IRQHandler+0x6ac>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d027      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <HAL_DMA_IRQHandler+0x6b0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <HAL_DMA_IRQHandler+0x6b4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d01d      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1d      	ldr	r2, [pc, #116]	; (800439c <HAL_DMA_IRQHandler+0x6b8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <HAL_DMA_IRQHandler+0x6bc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <HAL_DMA_IRQHandler+0x6c0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_DMA_IRQHandler+0x6c4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_DMA_IRQHandler+0x6c8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_DMA_IRQHandler+0x6cc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d12b      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x6d0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e02a      	b.n	80043c8 <HAL_DMA_IRQHandler+0x6e4>
 8004372:	bf00      	nop
 8004374:	40020010 	.word	0x40020010
 8004378:	40020028 	.word	0x40020028
 800437c:	40020040 	.word	0x40020040
 8004380:	40020058 	.word	0x40020058
 8004384:	40020070 	.word	0x40020070
 8004388:	40020088 	.word	0x40020088
 800438c:	400200a0 	.word	0x400200a0
 8004390:	400200b8 	.word	0x400200b8
 8004394:	40020410 	.word	0x40020410
 8004398:	40020428 	.word	0x40020428
 800439c:	40020440 	.word	0x40020440
 80043a0:	40020458 	.word	0x40020458
 80043a4:	40020470 	.word	0x40020470
 80043a8:	40020488 	.word	0x40020488
 80043ac:	400204a0 	.word	0x400204a0
 80043b0:	400204b8 	.word	0x400204b8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8087 	beq.w	80044dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2220      	movs	r2, #32
 80043d8:	409a      	lsls	r2, r3
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d139      	bne.n	800445e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0216 	bic.w	r2, r2, #22
 80043f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004408:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <HAL_DMA_IRQHandler+0x736>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0208 	bic.w	r2, r2, #8
 8004428:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	223f      	movs	r2, #63	; 0x3f
 8004434:	409a      	lsls	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 834a 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
          }
          return;
 800445c:	e344      	b.n	8004ae8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	2b00      	cmp	r3, #0
 8004480:	d02c      	beq.n	80044dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
 800448a:	e027      	b.n	80044dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e01e      	b.n	80044dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0210 	bic.w	r2, r2, #16
 80044ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8306 	beq.w	8004af2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8088 	beq.w	8004604 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <HAL_DMA_IRQHandler+0xa08>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a79      	ldr	r2, [pc, #484]	; (80046f0 <HAL_DMA_IRQHandler+0xa0c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	; (80046f4 <HAL_DMA_IRQHandler+0xa10>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <HAL_DMA_IRQHandler+0xa14>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a74      	ldr	r2, [pc, #464]	; (80046fc <HAL_DMA_IRQHandler+0xa18>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	; (8004700 <HAL_DMA_IRQHandler+0xa1c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a71      	ldr	r2, [pc, #452]	; (8004704 <HAL_DMA_IRQHandler+0xa20>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a70      	ldr	r2, [pc, #448]	; (8004708 <HAL_DMA_IRQHandler+0xa24>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_DMA_IRQHandler+0xa28>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6d      	ldr	r2, [pc, #436]	; (8004710 <HAL_DMA_IRQHandler+0xa2c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6b      	ldr	r2, [pc, #428]	; (8004714 <HAL_DMA_IRQHandler+0xa30>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6a      	ldr	r2, [pc, #424]	; (8004718 <HAL_DMA_IRQHandler+0xa34>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a68      	ldr	r2, [pc, #416]	; (800471c <HAL_DMA_IRQHandler+0xa38>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a67      	ldr	r2, [pc, #412]	; (8004720 <HAL_DMA_IRQHandler+0xa3c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a65      	ldr	r2, [pc, #404]	; (8004724 <HAL_DMA_IRQHandler+0xa40>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a64      	ldr	r2, [pc, #400]	; (8004728 <HAL_DMA_IRQHandler+0xa44>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <HAL_DMA_IRQHandler+0x8ca>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e007      	b.n	80045be <HAL_DMA_IRQHandler+0x8da>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d307      	bcc.n	80045da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f2      	bne.n	80045be <HAL_DMA_IRQHandler+0x8da>
 80045d8:	e000      	b.n	80045dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2203      	movs	r2, #3
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045f2:	e003      	b.n	80045fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8272 	beq.w	8004af2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
 8004616:	e26c      	b.n	8004af2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a43      	ldr	r2, [pc, #268]	; (800472c <HAL_DMA_IRQHandler+0xa48>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d022      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a42      	ldr	r2, [pc, #264]	; (8004730 <HAL_DMA_IRQHandler+0xa4c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d01d      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a40      	ldr	r2, [pc, #256]	; (8004734 <HAL_DMA_IRQHandler+0xa50>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d018      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3f      	ldr	r2, [pc, #252]	; (8004738 <HAL_DMA_IRQHandler+0xa54>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3d      	ldr	r2, [pc, #244]	; (800473c <HAL_DMA_IRQHandler+0xa58>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3c      	ldr	r2, [pc, #240]	; (8004740 <HAL_DMA_IRQHandler+0xa5c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3a      	ldr	r2, [pc, #232]	; (8004744 <HAL_DMA_IRQHandler+0xa60>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_DMA_IRQHandler+0x984>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a39      	ldr	r2, [pc, #228]	; (8004748 <HAL_DMA_IRQHandler+0xa64>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_DMA_IRQHandler+0x988>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_DMA_IRQHandler+0x98a>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 823f 	beq.w	8004af2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2204      	movs	r2, #4
 8004686:	409a      	lsls	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80cd 	beq.w	800482c <HAL_DMA_IRQHandler+0xb48>
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80c7 	beq.w	800482c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2204      	movs	r2, #4
 80046a8:	409a      	lsls	r2, r3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d049      	beq.n	800474c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8210 	beq.w	8004aec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d4:	e20a      	b.n	8004aec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8206 	beq.w	8004aec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e8:	e200      	b.n	8004aec <HAL_DMA_IRQHandler+0xe08>
 80046ea:	bf00      	nop
 80046ec:	40020010 	.word	0x40020010
 80046f0:	40020028 	.word	0x40020028
 80046f4:	40020040 	.word	0x40020040
 80046f8:	40020058 	.word	0x40020058
 80046fc:	40020070 	.word	0x40020070
 8004700:	40020088 	.word	0x40020088
 8004704:	400200a0 	.word	0x400200a0
 8004708:	400200b8 	.word	0x400200b8
 800470c:	40020410 	.word	0x40020410
 8004710:	40020428 	.word	0x40020428
 8004714:	40020440 	.word	0x40020440
 8004718:	40020458 	.word	0x40020458
 800471c:	40020470 	.word	0x40020470
 8004720:	40020488 	.word	0x40020488
 8004724:	400204a0 	.word	0x400204a0
 8004728:	400204b8 	.word	0x400204b8
 800472c:	58025408 	.word	0x58025408
 8004730:	5802541c 	.word	0x5802541c
 8004734:	58025430 	.word	0x58025430
 8004738:	58025444 	.word	0x58025444
 800473c:	58025458 	.word	0x58025458
 8004740:	5802546c 	.word	0x5802546c
 8004744:	58025480 	.word	0x58025480
 8004748:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d160      	bne.n	8004818 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a8c      	ldr	r2, [pc, #560]	; (800498c <HAL_DMA_IRQHandler+0xca8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a8a      	ldr	r2, [pc, #552]	; (8004990 <HAL_DMA_IRQHandler+0xcac>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a89      	ldr	r2, [pc, #548]	; (8004994 <HAL_DMA_IRQHandler+0xcb0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a87      	ldr	r2, [pc, #540]	; (8004998 <HAL_DMA_IRQHandler+0xcb4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a86      	ldr	r2, [pc, #536]	; (800499c <HAL_DMA_IRQHandler+0xcb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a84      	ldr	r2, [pc, #528]	; (80049a0 <HAL_DMA_IRQHandler+0xcbc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a83      	ldr	r2, [pc, #524]	; (80049a4 <HAL_DMA_IRQHandler+0xcc0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a81      	ldr	r2, [pc, #516]	; (80049a8 <HAL_DMA_IRQHandler+0xcc4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_DMA_IRQHandler+0xcc8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7e      	ldr	r2, [pc, #504]	; (80049b0 <HAL_DMA_IRQHandler+0xccc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7d      	ldr	r2, [pc, #500]	; (80049b4 <HAL_DMA_IRQHandler+0xcd0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7b      	ldr	r2, [pc, #492]	; (80049b8 <HAL_DMA_IRQHandler+0xcd4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7a      	ldr	r2, [pc, #488]	; (80049bc <HAL_DMA_IRQHandler+0xcd8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a78      	ldr	r2, [pc, #480]	; (80049c0 <HAL_DMA_IRQHandler+0xcdc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a77      	ldr	r2, [pc, #476]	; (80049c4 <HAL_DMA_IRQHandler+0xce0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xb12>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a75      	ldr	r2, [pc, #468]	; (80049c8 <HAL_DMA_IRQHandler+0xce4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <HAL_DMA_IRQHandler+0xb24>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e007      	b.n	8004818 <HAL_DMA_IRQHandler+0xb34>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8165 	beq.w	8004aec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800482a:	e15f      	b.n	8004aec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2202      	movs	r2, #2
 8004836:	409a      	lsls	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80c5 	beq.w	80049cc <HAL_DMA_IRQHandler+0xce8>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80bf 	beq.w	80049cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2202      	movs	r2, #2
 8004858:	409a      	lsls	r2, r3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d018      	beq.n	800489a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 813a 	beq.w	8004af0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004884:	e134      	b.n	8004af0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8130 	beq.w	8004af0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	e12a      	b.n	8004af0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d168      	bne.n	8004976 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a38      	ldr	r2, [pc, #224]	; (800498c <HAL_DMA_IRQHandler+0xca8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04a      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a37      	ldr	r2, [pc, #220]	; (8004990 <HAL_DMA_IRQHandler+0xcac>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d045      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a35      	ldr	r2, [pc, #212]	; (8004994 <HAL_DMA_IRQHandler+0xcb0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a34      	ldr	r2, [pc, #208]	; (8004998 <HAL_DMA_IRQHandler+0xcb4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03b      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a32      	ldr	r2, [pc, #200]	; (800499c <HAL_DMA_IRQHandler+0xcb8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d036      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <HAL_DMA_IRQHandler+0xcbc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d031      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <HAL_DMA_IRQHandler+0xcc0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02c      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <HAL_DMA_IRQHandler+0xcc4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d027      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <HAL_DMA_IRQHandler+0xcc8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <HAL_DMA_IRQHandler+0xccc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <HAL_DMA_IRQHandler+0xcd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <HAL_DMA_IRQHandler+0xcd4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a26      	ldr	r2, [pc, #152]	; (80049bc <HAL_DMA_IRQHandler+0xcd8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <HAL_DMA_IRQHandler+0xcdc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <HAL_DMA_IRQHandler+0xce0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_DMA_IRQHandler+0xc60>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <HAL_DMA_IRQHandler+0xce4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <HAL_DMA_IRQHandler+0xc72>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0214 	bic.w	r2, r2, #20
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e007      	b.n	8004966 <HAL_DMA_IRQHandler+0xc82>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 020a 	bic.w	r2, r2, #10
 8004964:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80b8 	beq.w	8004af0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004988:	e0b2      	b.n	8004af0 <HAL_DMA_IRQHandler+0xe0c>
 800498a:	bf00      	nop
 800498c:	40020010 	.word	0x40020010
 8004990:	40020028 	.word	0x40020028
 8004994:	40020040 	.word	0x40020040
 8004998:	40020058 	.word	0x40020058
 800499c:	40020070 	.word	0x40020070
 80049a0:	40020088 	.word	0x40020088
 80049a4:	400200a0 	.word	0x400200a0
 80049a8:	400200b8 	.word	0x400200b8
 80049ac:	40020410 	.word	0x40020410
 80049b0:	40020428 	.word	0x40020428
 80049b4:	40020440 	.word	0x40020440
 80049b8:	40020458 	.word	0x40020458
 80049bc:	40020470 	.word	0x40020470
 80049c0:	40020488 	.word	0x40020488
 80049c4:	400204a0 	.word	0x400204a0
 80049c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2208      	movs	r2, #8
 80049d6:	409a      	lsls	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8088 	beq.w	8004af2 <HAL_DMA_IRQHandler+0xe0e>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8082 	beq.w	8004af2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <HAL_DMA_IRQHandler+0xe14>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d04a      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <HAL_DMA_IRQHandler+0xe18>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d045      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <HAL_DMA_IRQHandler+0xe1c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d040      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3c      	ldr	r2, [pc, #240]	; (8004b04 <HAL_DMA_IRQHandler+0xe20>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d03b      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3b      	ldr	r2, [pc, #236]	; (8004b08 <HAL_DMA_IRQHandler+0xe24>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d036      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_DMA_IRQHandler+0xe28>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d031      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <HAL_DMA_IRQHandler+0xe2c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d02c      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a36      	ldr	r2, [pc, #216]	; (8004b14 <HAL_DMA_IRQHandler+0xe30>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <HAL_DMA_IRQHandler+0xe34>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d022      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	; (8004b1c <HAL_DMA_IRQHandler+0xe38>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a32      	ldr	r2, [pc, #200]	; (8004b20 <HAL_DMA_IRQHandler+0xe3c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a30      	ldr	r2, [pc, #192]	; (8004b24 <HAL_DMA_IRQHandler+0xe40>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2f      	ldr	r2, [pc, #188]	; (8004b28 <HAL_DMA_IRQHandler+0xe44>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	; (8004b2c <HAL_DMA_IRQHandler+0xe48>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <HAL_DMA_IRQHandler+0xe4c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xdaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <HAL_DMA_IRQHandler+0xe50>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0xdbc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 021c 	bic.w	r2, r2, #28
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e007      	b.n	8004ab0 <HAL_DMA_IRQHandler+0xdcc>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 020e 	bic.w	r2, r2, #14
 8004aae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
 8004ae6:	e004      	b.n	8004af2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ae8:	bf00      	nop
 8004aea:	e002      	b.n	8004af2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40020010 	.word	0x40020010
 8004afc:	40020028 	.word	0x40020028
 8004b00:	40020040 	.word	0x40020040
 8004b04:	40020058 	.word	0x40020058
 8004b08:	40020070 	.word	0x40020070
 8004b0c:	40020088 	.word	0x40020088
 8004b10:	400200a0 	.word	0x400200a0
 8004b14:	400200b8 	.word	0x400200b8
 8004b18:	40020410 	.word	0x40020410
 8004b1c:	40020428 	.word	0x40020428
 8004b20:	40020440 	.word	0x40020440
 8004b24:	40020458 	.word	0x40020458
 8004b28:	40020470 	.word	0x40020470
 8004b2c:	40020488 	.word	0x40020488
 8004b30:	400204a0 	.word	0x400204a0
 8004b34:	400204b8 	.word	0x400204b8

08004b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a42      	ldr	r2, [pc, #264]	; (8004c50 <DMA_CalcBaseAndBitshift+0x118>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d04a      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d045      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3f      	ldr	r2, [pc, #252]	; (8004c58 <DMA_CalcBaseAndBitshift+0x120>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d040      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <DMA_CalcBaseAndBitshift+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d03b      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a3c      	ldr	r2, [pc, #240]	; (8004c60 <DMA_CalcBaseAndBitshift+0x128>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d036      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a3b      	ldr	r2, [pc, #236]	; (8004c64 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d031      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a39      	ldr	r2, [pc, #228]	; (8004c68 <DMA_CalcBaseAndBitshift+0x130>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02c      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <DMA_CalcBaseAndBitshift+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d027      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a36      	ldr	r2, [pc, #216]	; (8004c70 <DMA_CalcBaseAndBitshift+0x138>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d022      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d01d      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <DMA_CalcBaseAndBitshift+0x140>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d018      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <DMA_CalcBaseAndBitshift+0x144>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <DMA_CalcBaseAndBitshift+0x148>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <DMA_CalcBaseAndBitshift+0x150>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <DMA_CalcBaseAndBitshift+0x154>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d101      	bne.n	8004be4 <DMA_CalcBaseAndBitshift+0xac>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <DMA_CalcBaseAndBitshift+0xae>
 8004be4:	2300      	movs	r3, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d024      	beq.n	8004c34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	3b10      	subs	r3, #16
 8004bf2:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <DMA_CalcBaseAndBitshift+0x158>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d908      	bls.n	8004c24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <DMA_CalcBaseAndBitshift+0x160>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	1d1a      	adds	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	659a      	str	r2, [r3, #88]	; 0x58
 8004c22:	e00d      	b.n	8004c40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <DMA_CalcBaseAndBitshift+0x160>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6593      	str	r3, [r2, #88]	; 0x58
 8004c32:	e005      	b.n	8004c40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40020010 	.word	0x40020010
 8004c54:	40020028 	.word	0x40020028
 8004c58:	40020040 	.word	0x40020040
 8004c5c:	40020058 	.word	0x40020058
 8004c60:	40020070 	.word	0x40020070
 8004c64:	40020088 	.word	0x40020088
 8004c68:	400200a0 	.word	0x400200a0
 8004c6c:	400200b8 	.word	0x400200b8
 8004c70:	40020410 	.word	0x40020410
 8004c74:	40020428 	.word	0x40020428
 8004c78:	40020440 	.word	0x40020440
 8004c7c:	40020458 	.word	0x40020458
 8004c80:	40020470 	.word	0x40020470
 8004c84:	40020488 	.word	0x40020488
 8004c88:	400204a0 	.word	0x400204a0
 8004c8c:	400204b8 	.word	0x400204b8
 8004c90:	aaaaaaab 	.word	0xaaaaaaab
 8004c94:	0801537c 	.word	0x0801537c
 8004c98:	fffffc00 	.word	0xfffffc00

08004c9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d120      	bne.n	8004cf2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d858      	bhi.n	8004d6a <DMA_CheckFifoParam+0xce>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x24>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004d6b 	.word	0x08004d6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d048      	beq.n	8004d6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ce0:	e045      	b.n	8004d6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cea:	d142      	bne.n	8004d72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf0:	e03f      	b.n	8004d72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfa:	d123      	bne.n	8004d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d838      	bhi.n	8004d76 <DMA_CheckFifoParam+0xda>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <DMA_CheckFifoParam+0x70>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d23 	.word	0x08004d23
 8004d14:	08004d1d 	.word	0x08004d1d
 8004d18:	08004d35 	.word	0x08004d35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004d20:	e030      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d025      	beq.n	8004d7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d32:	e022      	b.n	8004d7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d3c:	d11f      	bne.n	8004d7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d42:	e01c      	b.n	8004d7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d902      	bls.n	8004d52 <DMA_CheckFifoParam+0xb6>
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d003      	beq.n	8004d58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d50:	e018      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
        break;
 8004d56:	e015      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00e      	beq.n	8004d82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
    break;
 8004d68:	e00b      	b.n	8004d82 <DMA_CheckFifoParam+0xe6>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e00a      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e008      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        break;
 8004d72:	bf00      	nop
 8004d74:	e006      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        break;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <DMA_CheckFifoParam+0xe8>
    break;
 8004d82:	bf00      	nop
    }
  }

  return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop

08004d94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a38      	ldr	r2, [pc, #224]	; (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d022      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a36      	ldr	r2, [pc, #216]	; (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01d      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a35      	ldr	r2, [pc, #212]	; (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d018      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	; (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a32      	ldr	r2, [pc, #200]	; (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00e      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a30      	ldr	r2, [pc, #192]	; (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01a      	beq.n	8004e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b08      	subs	r3, #8
 8004e04:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	2201      	movs	r2, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e30:	e024      	b.n	8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3b10      	subs	r3, #16
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d806      	bhi.n	8004e5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d902      	bls.n	8004e5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3308      	adds	r3, #8
 8004e58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2201      	movs	r2, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	58025408 	.word	0x58025408
 8004e8c:	5802541c 	.word	0x5802541c
 8004e90:	58025430 	.word	0x58025430
 8004e94:	58025444 	.word	0x58025444
 8004e98:	58025458 	.word	0x58025458
 8004e9c:	5802546c 	.word	0x5802546c
 8004ea0:	58025480 	.word	0x58025480
 8004ea4:	58025494 	.word	0x58025494
 8004ea8:	cccccccd 	.word	0xcccccccd
 8004eac:	16009600 	.word	0x16009600
 8004eb0:	58025880 	.word	0x58025880
 8004eb4:	aaaaaaab 	.word	0xaaaaaaab
 8004eb8:	400204b8 	.word	0x400204b8
 8004ebc:	4002040f 	.word	0x4002040f
 8004ec0:	10008200 	.word	0x10008200
 8004ec4:	40020880 	.word	0x40020880

08004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d04a      	beq.n	8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d847      	bhi.n	8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d022      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d01d      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d018      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00e      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f50:	671a      	str	r2, [r3, #112]	; 0x70
 8004f52:	e009      	b.n	8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a11      	ldr	r2, [pc, #68]	; (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	58025408 	.word	0x58025408
 8004f84:	5802541c 	.word	0x5802541c
 8004f88:	58025430 	.word	0x58025430
 8004f8c:	58025444 	.word	0x58025444
 8004f90:	58025458 	.word	0x58025458
 8004f94:	5802546c 	.word	0x5802546c
 8004f98:	58025480 	.word	0x58025480
 8004f9c:	58025494 	.word	0x58025494
 8004fa0:	1600963f 	.word	0x1600963f
 8004fa4:	58025940 	.word	0x58025940
 8004fa8:	1000823f 	.word	0x1000823f
 8004fac:	40020940 	.word	0x40020940

08004fb0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0c6      	b.n	8005150 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc f980 	bl	80012d0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2223      	movs	r2, #35	; 0x23
 8004fd4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd6:	4b60      	ldr	r3, [pc, #384]	; (8005158 <HAL_ETH_Init+0x1a8>)
 8004fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fdc:	4a5e      	ldr	r2, [pc, #376]	; (8005158 <HAL_ETH_Init+0x1a8>)
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fe6:	4b5c      	ldr	r3, [pc, #368]	; (8005158 <HAL_ETH_Init+0x1a8>)
 8004fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7a1b      	ldrb	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fe fa23 	bl	8003448 <HAL_SYSCFG_ETHInterfaceSelect>
 8005002:	e003      	b.n	800500c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005004:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005008:	f7fe fa1e 	bl	8003448 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005024:	f7fe f9e0 	bl	80033e8 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800502a:	e00f      	b.n	800504c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800502c:	f7fe f9dc 	bl	80033e8 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800503a:	d907      	bls.n	800504c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2204      	movs	r2, #4
 8005040:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	22e0      	movs	r2, #224	; 0xe0
 8005046:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e081      	b.n	8005150 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e6      	bne.n	800502c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fac0 	bl	80055e4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005064:	f001 ff76 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8005068:	4603      	mov	r3, r0
 800506a:	4a3c      	ldr	r2, [pc, #240]	; (800515c <HAL_ETH_Init+0x1ac>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	0c9a      	lsrs	r2, r3, #18
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3a01      	subs	r2, #1
 8005078:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa13 	bl	80054a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005098:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800509c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	22e0      	movs	r2, #224	; 0xe0
 80050b4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e04a      	b.n	8005150 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f241 1308 	movw	r3, #4360	; 0x1108
 80050c2:	4413      	add	r3, r2
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b26      	ldr	r3, [pc, #152]	; (8005160 <HAL_ETH_Init+0x1b0>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6952      	ldr	r2, [r2, #20]
 80050ce:	0052      	lsls	r2, r2, #1
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	6809      	ldr	r1, [r1, #0]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80050da:	440b      	add	r3, r1
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fad8 	bl	8005694 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fb1c 	bl	8005722 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	3305      	adds	r3, #5
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	4619      	mov	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	3303      	adds	r3, #3
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	061a      	lsls	r2, r3, #24
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	3302      	adds	r3, #2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	3301      	adds	r3, #1
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005128:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005136:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005138:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2210      	movs	r2, #16
 8005146:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2210      	movs	r2, #16
 800514c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	431bde83 	.word	0x431bde83
 8005160:	ffff8001 	.word	0xffff8001

08005164 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005176:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	791b      	ldrb	r3, [r3, #4]
 800517c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800517e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	7b1b      	ldrb	r3, [r3, #12]
 8005184:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005186:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	7b5b      	ldrb	r3, [r3, #13]
 800518c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800518e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	7b9b      	ldrb	r3, [r3, #14]
 8005194:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005196:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	7bdb      	ldrb	r3, [r3, #15]
 800519c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800519e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	7c12      	ldrb	r2, [r2, #16]
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d102      	bne.n	80051ae <ETH_SetMACConfig+0x4a>
 80051a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051ac:	e000      	b.n	80051b0 <ETH_SetMACConfig+0x4c>
 80051ae:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051b0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	7c52      	ldrb	r2, [r2, #17]
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d102      	bne.n	80051c0 <ETH_SetMACConfig+0x5c>
 80051ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051be:	e000      	b.n	80051c2 <ETH_SetMACConfig+0x5e>
 80051c0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051c2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7c9b      	ldrb	r3, [r3, #18]
 80051c8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051ca:	431a      	orrs	r2, r3
                                macconf->Speed |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80051d0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80051d6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	7f1b      	ldrb	r3, [r3, #28]
 80051dc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80051de:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	7f5b      	ldrb	r3, [r3, #29]
 80051e4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80051e6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	7f92      	ldrb	r2, [r2, #30]
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d102      	bne.n	80051f6 <ETH_SetMACConfig+0x92>
 80051f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f4:	e000      	b.n	80051f8 <ETH_SetMACConfig+0x94>
 80051f6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80051f8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	7fdb      	ldrb	r3, [r3, #31]
 80051fe:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005200:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005208:	2a00      	cmp	r2, #0
 800520a:	d102      	bne.n	8005212 <ETH_SetMACConfig+0xae>
 800520c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005210:	e000      	b.n	8005214 <ETH_SetMACConfig+0xb0>
 8005212:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005214:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800521a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005222:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005224:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b56      	ldr	r3, [pc, #344]	; (8005390 <ETH_SetMACConfig+0x22c>)
 8005236:	4013      	ands	r3, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	430b      	orrs	r3, r1
 8005240:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800524e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005250:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005258:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800525a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005262:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005264:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800526c:	2a00      	cmp	r2, #0
 800526e:	d102      	bne.n	8005276 <ETH_SetMACConfig+0x112>
 8005270:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005274:	e000      	b.n	8005278 <ETH_SetMACConfig+0x114>
 8005276:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005278:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <ETH_SetMACConfig+0x230>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	430b      	orrs	r3, r1
 8005294:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	4b3a      	ldr	r3, [pc, #232]	; (8005398 <ETH_SetMACConfig+0x234>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	430b      	orrs	r3, r1
 80052b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052c6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d101      	bne.n	80052d6 <ETH_SetMACConfig+0x172>
 80052d2:	2280      	movs	r2, #128	; 0x80
 80052d4:	e000      	b.n	80052d8 <ETH_SetMACConfig+0x174>
 80052d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80052d8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80052ee:	4013      	ands	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	68f9      	ldr	r1, [r7, #12]
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005300:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005308:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f023 0103 	bic.w	r1, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	430a      	orrs	r2, r1
 8005322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800532e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800534a:	2a00      	cmp	r2, #0
 800534c:	d101      	bne.n	8005352 <ETH_SetMACConfig+0x1ee>
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	e000      	b.n	8005354 <ETH_SetMACConfig+0x1f0>
 8005352:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005354:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800535c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800535e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005366:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005374:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	430a      	orrs	r2, r1
 8005380:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00048083 	.word	0x00048083
 8005394:	c0f88000 	.word	0xc0f88000
 8005398:	fffffef0 	.word	0xfffffef0

0800539c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b38      	ldr	r3, [pc, #224]	; (8005494 <ETH_SetDMAConfig+0xf8>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	6809      	ldr	r1, [r1, #0]
 80053bc:	431a      	orrs	r2, r3
 80053be:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80053c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	7b1b      	ldrb	r3, [r3, #12]
 80053d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f241 0304 	movw	r3, #4100	; 0x1004
 80053e2:	4413      	add	r3, r2
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <ETH_SetDMAConfig+0xfc>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6811      	ldr	r1, [r2, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80053f6:	440b      	add	r3, r1
 80053f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	7b5b      	ldrb	r3, [r3, #13]
 80053fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <ETH_SetDMAConfig+0x100>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	431a      	orrs	r2, r3
 800541e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005422:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	7d1b      	ldrb	r3, [r3, #20]
 800542c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800542e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	7f5b      	ldrb	r3, [r3, #29]
 8005434:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005442:	4413      	add	r3, r2
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <ETH_SetDMAConfig+0x104>)
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6811      	ldr	r1, [r2, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	431a      	orrs	r2, r3
 8005452:	f241 1304 	movw	r3, #4356	; 0x1104
 8005456:	440b      	add	r3, r1
 8005458:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7f1b      	ldrb	r3, [r3, #28]
 800545e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005470:	4413      	add	r3, r2
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <ETH_SetDMAConfig+0x108>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6811      	ldr	r1, [r2, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	431a      	orrs	r2, r3
 8005480:	f241 1308 	movw	r3, #4360	; 0x1108
 8005484:	440b      	add	r3, r1
 8005486:	601a      	str	r2, [r3, #0]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	ffff87fd 	.word	0xffff87fd
 8005498:	ffff2ffe 	.word	0xffff2ffe
 800549c:	fffec000 	.word	0xfffec000
 80054a0:	ffc0efef 	.word	0xffc0efef
 80054a4:	7fc0ffff 	.word	0x7fc0ffff

080054a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0a4      	sub	sp, #144	; 0x90
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054b6:	2300      	movs	r3, #0
 80054b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80054e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005500:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005504:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800550c:	2300      	movs	r3, #0
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005522:	2300      	movs	r3, #0
 8005524:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005526:	2300      	movs	r3, #0
 8005528:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800552a:	2300      	movs	r3, #0
 800552c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005540:	2320      	movs	r3, #32
 8005542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005552:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800555c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005564:	2302      	movs	r3, #2
 8005566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005582:	2300      	movs	r3, #0
 8005584:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800558c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fde6 	bl	8005164 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005598:	2301      	movs	r3, #1
 800559a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800559c:	2301      	movs	r3, #1
 800559e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80055c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fee1 	bl	800539c <ETH_SetDMAConfig>
}
 80055da:	bf00      	nop
 80055dc:	3790      	adds	r7, #144	; 0x90
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055fe:	f001 fca9 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8005602:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d908      	bls.n	800561e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d804      	bhi.n	800561e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e027      	b.n	800566e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a18      	ldr	r2, [pc, #96]	; (8005684 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d908      	bls.n	8005638 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d204      	bcs.n	8005638 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e01a      	b.n	800566e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a13      	ldr	r2, [pc, #76]	; (8005688 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d303      	bcc.n	8005648 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d911      	bls.n	800566c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d908      	bls.n	8005662 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d804      	bhi.n	8005662 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e005      	b.n	800566e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	e000      	b.n	800566e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800566c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	01312cff 	.word	0x01312cff
 8005684:	02160ebf 	.word	0x02160ebf
 8005688:	03938700 	.word	0x03938700
 800568c:	05f5e0ff 	.word	0x05f5e0ff
 8005690:	08f0d17f 	.word	0x08f0d17f

08005694 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e01d      	b.n	80056de <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68d9      	ldr	r1, [r3, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	3206      	adds	r2, #6
 80056d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d9de      	bls.n	80056a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f241 132c 	movw	r3, #4396	; 0x112c
 80056f2:	4413      	add	r3, r2
 80056f4:	2203      	movs	r2, #3
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68d9      	ldr	r1, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	f241 1314 	movw	r3, #4372	; 0x1114
 8005704:	4413      	add	r3, r2
 8005706:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e024      	b.n	800577a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6919      	ldr	r1, [r3, #16]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3310      	adds	r3, #16
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d9d7      	bls.n	8005730 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	f241 1330 	movw	r3, #4400	; 0x1130
 80057a6:	4413      	add	r3, r2
 80057a8:	2203      	movs	r2, #3
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6919      	ldr	r1, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80057b8:	4413      	add	r3, r2
 80057ba:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	f241 1328 	movw	r3, #4392	; 0x1128
 80057cc:	4413      	add	r3, r2
 80057ce:	6019      	str	r1, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	; 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057ea:	4b86      	ldr	r3, [pc, #536]	; (8005a04 <HAL_GPIO_Init+0x228>)
 80057ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ee:	e18c      	b.n	8005b0a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 817e 	beq.w	8005b04 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <HAL_GPIO_Init+0x44>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d130      	bne.n	8005882 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005856:	2201      	movs	r2, #1
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0201 	and.w	r2, r3, #1
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4313      	orrs	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b03      	cmp	r3, #3
 800588c:	d017      	beq.n	80058be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d123      	bne.n	8005912 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	08da      	lsrs	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3208      	adds	r2, #8
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	08da      	lsrs	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3208      	adds	r2, #8
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	2203      	movs	r2, #3
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80d8 	beq.w	8005b04 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005954:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <HAL_GPIO_Init+0x22c>)
 8005956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595a:	4a2b      	ldr	r2, [pc, #172]	; (8005a08 <HAL_GPIO_Init+0x22c>)
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005964:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <HAL_GPIO_Init+0x22c>)
 8005966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005972:	4a26      	ldr	r2, [pc, #152]	; (8005a0c <HAL_GPIO_Init+0x230>)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	3302      	adds	r3, #2
 800597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_GPIO_Init+0x234>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d04a      	beq.n	8005a34 <HAL_GPIO_Init+0x258>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <HAL_GPIO_Init+0x238>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <HAL_GPIO_Init+0x222>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <HAL_GPIO_Init+0x23c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d025      	beq.n	80059fa <HAL_GPIO_Init+0x21e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1a      	ldr	r2, [pc, #104]	; (8005a1c <HAL_GPIO_Init+0x240>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01f      	beq.n	80059f6 <HAL_GPIO_Init+0x21a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <HAL_GPIO_Init+0x244>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d019      	beq.n	80059f2 <HAL_GPIO_Init+0x216>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_GPIO_Init+0x248>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_GPIO_Init+0x212>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <HAL_GPIO_Init+0x24c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00d      	beq.n	80059ea <HAL_GPIO_Init+0x20e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_GPIO_Init+0x250>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <HAL_GPIO_Init+0x20a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <HAL_GPIO_Init+0x254>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d101      	bne.n	80059e2 <HAL_GPIO_Init+0x206>
 80059de:	2309      	movs	r3, #9
 80059e0:	e029      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059e2:	230a      	movs	r3, #10
 80059e4:	e027      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059e6:	2307      	movs	r3, #7
 80059e8:	e025      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059ea:	2306      	movs	r3, #6
 80059ec:	e023      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059ee:	2305      	movs	r3, #5
 80059f0:	e021      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059f2:	2304      	movs	r3, #4
 80059f4:	e01f      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059f6:	2303      	movs	r3, #3
 80059f8:	e01d      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e01b      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e019      	b.n	8005a36 <HAL_GPIO_Init+0x25a>
 8005a02:	bf00      	nop
 8005a04:	58000080 	.word	0x58000080
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	58000400 	.word	0x58000400
 8005a10:	58020000 	.word	0x58020000
 8005a14:	58020400 	.word	0x58020400
 8005a18:	58020800 	.word	0x58020800
 8005a1c:	58020c00 	.word	0x58020c00
 8005a20:	58021000 	.word	0x58021000
 8005a24:	58021400 	.word	0x58021400
 8005a28:	58021800 	.word	0x58021800
 8005a2c:	58021c00 	.word	0x58021c00
 8005a30:	58022400 	.word	0x58022400
 8005a34:	2300      	movs	r3, #0
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	f002 0203 	and.w	r2, r2, #3
 8005a3c:	0092      	lsls	r2, r2, #2
 8005a3e:	4093      	lsls	r3, r2
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a46:	4938      	ldr	r1, [pc, #224]	; (8005b28 <HAL_GPIO_Init+0x34c>)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f47f ae6b 	bne.w	80057f0 <HAL_GPIO_Init+0x14>
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	58000400 	.word	0x58000400

08005b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	887b      	ldrh	r3, [r7, #2]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e001      	b.n	8005b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b6c:	787b      	ldrb	r3, [r7, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b78:	e003      	b.n	8005b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b7a:	887b      	ldrh	r3, [r7, #2]
 8005b7c:	041a      	lsls	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	619a      	str	r2, [r3, #24]
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ba0:	887a      	ldrh	r2, [r7, #2]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	041a      	lsls	r2, r3, #16
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	43d9      	mvns	r1, r3
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	400b      	ands	r3, r1
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	619a      	str	r2, [r3, #24]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bca:	f7fd fc0d 	bl	80033e8 <HAL_GetTick>
 8005bce:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e03b      	b.n	8005c52 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005bfa:	e00f      	b.n	8005c1c <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005bfc:	f7fd fbf4 	bl	80033e8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d908      	bls.n	8005c1c <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2203      	movs	r2, #3
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01a      	b.n	8005c52 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e8      	bne.n	8005bfc <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f9e4 	bl	8005ff8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e03e      	b.n	8005cf2 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e037      	b.n	8005cf2 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d126      	bne.n	8005ce4 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11c      	bne.n	8005cde <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	e00d      	b.n	8005ce8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cda:	611a      	str	r2, [r3, #16]
 8005cdc:	e004      	b.n	8005ce8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
 8005ce2:	e001      	b.n	8005ce8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e017      	b.n	8005d40 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d004      	beq.n	8005d26 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2280      	movs	r2, #128	; 0x80
 8005d20:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e00c      	b.n	8005d40 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d58:	4b9a      	ldr	r3, [pc, #616]	; (8005fc4 <HAL_MDMA_IRQHandler+0x278>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a9a      	ldr	r2, [pc, #616]	; (8005fc8 <HAL_MDMA_IRQHandler+0x27c>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	0a9b      	lsrs	r3, r3, #10
 8005d64:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4b97      	ldr	r3, [pc, #604]	; (8005fcc <HAL_MDMA_IRQHandler+0x280>)
 8005d6e:	4413      	add	r3, r2
 8005d70:	099b      	lsrs	r3, r3, #6
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2201      	movs	r2, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005d7e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 812e 	beq.w	8005fea <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d054      	beq.n	8005e46 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d04d      	beq.n	8005e46 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0202 	bic.w	r2, r2, #2
 8005db8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd0:	f043 0201 	orr.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	669a      	str	r2, [r3, #104]	; 0x68
 8005dd8:	e005      	b.n	8005de6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dde:	f043 0202 	orr.w	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0a:	f043 0208 	orr.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e20:	f043 0210 	orr.w	r2, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d012      	beq.n	8005e7a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2210      	movs	r2, #16
 8005e68:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d012      	beq.n	8005eae <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d012      	beq.n	8005ee2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d039      	beq.n	8005f64 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d032      	beq.n	8005f64 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8005f0c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d110      	bne.n	8005f3c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d05d      	beq.n	8005fee <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
        }
        return;
 8005f3a:	e058      	b.n	8005fee <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d041      	beq.n	8005ff0 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2204      	movs	r2, #4
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d307      	bcc.n	8005fa0 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f2      	bne.n	8005f84 <HAL_MDMA_IRQHandler+0x238>
 8005f9e:	e000      	b.n	8005fa2 <HAL_MDMA_IRQHandler+0x256>
        break;
 8005fa0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2203      	movs	r2, #3
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fc0:	e00a      	b.n	8005fd8 <HAL_MDMA_IRQHandler+0x28c>
 8005fc2:	bf00      	nop
 8005fc4:	2400802c 	.word	0x2400802c
 8005fc8:	1b4e81b5 	.word	0x1b4e81b5
 8005fcc:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e002      	b.n	8005ff0 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8005fee:	bf00      	nop
    }
  }
}
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop

08005ff8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68d9      	ldr	r1, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800601e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800602a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006036:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006040:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800604c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800604e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d107      	bne.n	800606a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8006068:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	da11      	bge.n	800609e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006088:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	425b      	negs	r3, r3
 8006090:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	b292      	uxth	r2, r2
 800609a:	621a      	str	r2, [r3, #32]
 800609c:	e006      	b.n	80060ac <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	b292      	uxth	r2, r2
 80060aa:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da15      	bge.n	80060e0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80060c2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	425b      	negs	r3, r3
 80060ca:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a19      	ldr	r1, [r3, #32]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	041a      	lsls	r2, r3, #16
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	621a      	str	r2, [r3, #32]
 80060de:	e009      	b.n	80060f4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a19      	ldr	r1, [r3, #32]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	041a      	lsls	r2, r3, #16
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fc:	d006      	beq.n	800610c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	629a      	str	r2, [r3, #40]	; 0x28
 800610a:	e003      	b.n	8006114 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_PWREx_ConfigSupply+0x70>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d00a      	beq.n	8006152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800613c:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_PWREx_ConfigSupply+0x70>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d001      	beq.n	800614e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e01f      	b.n	800618e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e01d      	b.n	800618e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_PWREx_ConfigSupply+0x70>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f023 0207 	bic.w	r2, r3, #7
 800615a:	490f      	ldr	r1, [pc, #60]	; (8006198 <HAL_PWREx_ConfigSupply+0x70>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4313      	orrs	r3, r2
 8006160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006162:	f7fd f941 	bl	80033e8 <HAL_GetTick>
 8006166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006168:	e009      	b.n	800617e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800616a:	f7fd f93d 	bl	80033e8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006178:	d901      	bls.n	800617e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e007      	b.n	800618e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_PWREx_ConfigSupply+0x70>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	d1ee      	bne.n	800616a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	58024800 	.word	0x58024800

0800619c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08c      	sub	sp, #48	; 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e397      	b.n	80068de <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8087 	beq.w	80062ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061bc:	4b9e      	ldr	r3, [pc, #632]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061c6:	4b9c      	ldr	r3, [pc, #624]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d007      	beq.n	80061e2 <HAL_RCC_OscConfig+0x46>
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b18      	cmp	r3, #24
 80061d6:	d110      	bne.n	80061fa <HAL_RCC_OscConfig+0x5e>
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d10b      	bne.n	80061fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e2:	4b95      	ldr	r3, [pc, #596]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d06c      	beq.n	80062c8 <HAL_RCC_OscConfig+0x12c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d168      	bne.n	80062c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e371      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006202:	d106      	bne.n	8006212 <HAL_RCC_OscConfig+0x76>
 8006204:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a8b      	ldr	r2, [pc, #556]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e02e      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x98>
 800621a:	4b87      	ldr	r3, [pc, #540]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a86      	ldr	r2, [pc, #536]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b84      	ldr	r3, [pc, #528]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a83      	ldr	r2, [pc, #524]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800622c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e01d      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0xbc>
 800623e:	4b7e      	ldr	r3, [pc, #504]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7d      	ldr	r2, [pc, #500]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b7b      	ldr	r3, [pc, #492]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0xd4>
 8006258:	4b77      	ldr	r3, [pc, #476]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a76      	ldr	r2, [pc, #472]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b74      	ldr	r3, [pc, #464]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a73      	ldr	r2, [pc, #460]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fd f8b6 	bl	80033e8 <HAL_GetTick>
 800627c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006280:	f7fd f8b2 	bl	80033e8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e325      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006292:	4b69      	ldr	r3, [pc, #420]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0xe4>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fd f8a2 	bl	80033e8 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fd f89e 	bl	80033e8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	; 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e311      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ba:	4b5f      	ldr	r3, [pc, #380]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x10c>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 808a 	beq.w	80063ec <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062d8:	4b57      	ldr	r3, [pc, #348]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062e2:	4b55      	ldr	r3, [pc, #340]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_RCC_OscConfig+0x162>
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b18      	cmp	r3, #24
 80062f2:	d137      	bne.n	8006364 <HAL_RCC_OscConfig+0x1c8>
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d132      	bne.n	8006364 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062fe:	4b4e      	ldr	r3, [pc, #312]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x17a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e2e3      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006316:	4b48      	ldr	r3, [pc, #288]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 0219 	bic.w	r2, r3, #25
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4945      	ldr	r1, [pc, #276]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006324:	4313      	orrs	r3, r2
 8006326:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006328:	f7fd f85e 	bl	80033e8 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006330:	f7fd f85a 	bl	80033e8 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e2cd      	b.n	80068de <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006342:	4b3d      	ldr	r3, [pc, #244]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f0      	beq.n	8006330 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634e:	4b3a      	ldr	r3, [pc, #232]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	061b      	lsls	r3, r3, #24
 800635c:	4936      	ldr	r1, [pc, #216]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006362:	e043      	b.n	80063ec <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d026      	beq.n	80063ba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f023 0219 	bic.w	r2, r3, #25
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	492f      	ldr	r1, [pc, #188]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fd f833 	bl	80033e8 <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fd f82f 	bl	80033e8 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e2a2      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006398:	4b27      	ldr	r3, [pc, #156]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	4921      	ldr	r1, [pc, #132]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	e018      	b.n	80063ec <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fd f80f 	bl	80033e8 <HAL_GetTick>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fd f80b 	bl	80033e8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e27e      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f0      	bne.n	80063ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d06d      	beq.n	80064d4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006400:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b08      	cmp	r3, #8
 800640c:	d007      	beq.n	800641e <HAL_RCC_OscConfig+0x282>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b18      	cmp	r3, #24
 8006412:	d11e      	bne.n	8006452 <HAL_RCC_OscConfig+0x2b6>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d119      	bne.n	8006452 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_OscConfig+0x29c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_RCC_OscConfig+0x2a0>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d004      	beq.n	800643c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e253      	b.n	80068de <HAL_RCC_OscConfig+0x742>
 8006436:	bf00      	nop
 8006438:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800643c:	4ba3      	ldr	r3, [pc, #652]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	49a0      	ldr	r1, [pc, #640]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800644c:	4313      	orrs	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006450:	e040      	b.n	80064d4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d023      	beq.n	80064a2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800645a:	4b9c      	ldr	r3, [pc, #624]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a9b      	ldr	r2, [pc, #620]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7fc ffbf 	bl	80033e8 <HAL_GetTick>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800646e:	f7fc ffbb 	bl	80033e8 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e22e      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006480:	4b92      	ldr	r3, [pc, #584]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800648c:	4b8f      	ldr	r3, [pc, #572]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	498c      	ldr	r1, [pc, #560]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800649c:	4313      	orrs	r3, r2
 800649e:	60cb      	str	r3, [r1, #12]
 80064a0:	e018      	b.n	80064d4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064a2:	4b8a      	ldr	r3, [pc, #552]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a89      	ldr	r2, [pc, #548]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80064a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fc ff9b 	bl	80033e8 <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064b6:	f7fc ff97 	bl	80033e8 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e20a      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064c8:	4b80      	ldr	r3, [pc, #512]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f0      	bne.n	80064b6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d036      	beq.n	800654e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d019      	beq.n	800651c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e8:	4b78      	ldr	r3, [pc, #480]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80064ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ec:	4a77      	ldr	r2, [pc, #476]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f4:	f7fc ff78 	bl	80033e8 <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fc:	f7fc ff74 	bl	80033e8 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e1e7      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800650e:	4b6f      	ldr	r3, [pc, #444]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x360>
 800651a:	e018      	b.n	800654e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651c:	4b6b      	ldr	r3, [pc, #428]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800651e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006520:	4a6a      	ldr	r2, [pc, #424]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fc ff5e 	bl	80033e8 <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006530:	f7fc ff5a 	bl	80033e8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e1cd      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006542:	4b62      	ldr	r3, [pc, #392]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d036      	beq.n	80065c8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d019      	beq.n	8006596 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006562:	4b5a      	ldr	r3, [pc, #360]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a59      	ldr	r2, [pc, #356]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800656c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800656e:	f7fc ff3b 	bl	80033e8 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006576:	f7fc ff37 	bl	80033e8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1aa      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006588:	4b50      	ldr	r3, [pc, #320]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCC_OscConfig+0x3da>
 8006594:	e018      	b.n	80065c8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006596:	4b4d      	ldr	r3, [pc, #308]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a4c      	ldr	r2, [pc, #304]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800659c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065a2:	f7fc ff21 	bl	80033e8 <HAL_GetTick>
 80065a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065aa:	f7fc ff1d 	bl	80033e8 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e190      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065bc:	4b43      	ldr	r3, [pc, #268]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f0      	bne.n	80065aa <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8085 	beq.w	80066e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d6:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <HAL_RCC_OscConfig+0x534>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a3d      	ldr	r2, [pc, #244]	; (80066d0 <HAL_RCC_OscConfig+0x534>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065e2:	f7fc ff01 	bl	80033e8 <HAL_GetTick>
 80065e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fc fefd 	bl	80033e8 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b64      	cmp	r3, #100	; 0x64
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e170      	b.n	80068de <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065fc:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <HAL_RCC_OscConfig+0x534>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x482>
 8006610:	4b2e      	ldr	r3, [pc, #184]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a2d      	ldr	r2, [pc, #180]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
 800661c:	e02d      	b.n	800667a <HAL_RCC_OscConfig+0x4de>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x4a4>
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a28      	ldr	r2, [pc, #160]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a25      	ldr	r2, [pc, #148]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
 800663e:	e01c      	b.n	800667a <HAL_RCC_OscConfig+0x4de>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b05      	cmp	r3, #5
 8006646:	d10c      	bne.n	8006662 <HAL_RCC_OscConfig+0x4c6>
 8006648:	4b20      	ldr	r3, [pc, #128]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800664e:	f043 0304 	orr.w	r3, r3, #4
 8006652:	6713      	str	r3, [r2, #112]	; 0x70
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6713      	str	r3, [r2, #112]	; 0x70
 8006660:	e00b      	b.n	800667a <HAL_RCC_OscConfig+0x4de>
 8006662:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	4a19      	ldr	r2, [pc, #100]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	6713      	str	r3, [r2, #112]	; 0x70
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	4a16      	ldr	r2, [pc, #88]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d015      	beq.n	80066ae <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fc feb1 	bl	80033e8 <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006688:	e00a      	b.n	80066a0 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668a:	f7fc fead 	bl	80033e8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f241 3288 	movw	r2, #5000	; 0x1388
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e11e      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <HAL_RCC_OscConfig+0x530>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ee      	beq.n	800668a <HAL_RCC_OscConfig+0x4ee>
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ae:	f7fc fe9b 	bl	80033e8 <HAL_GetTick>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066b4:	e00e      	b.n	80066d4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b6:	f7fc fe97 	bl	80033e8 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d905      	bls.n	80066d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e108      	b.n	80068de <HAL_RCC_OscConfig+0x742>
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066d4:	4b84      	ldr	r3, [pc, #528]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ea      	bne.n	80066b6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80f9 	beq.w	80068dc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066ea:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f2:	2b18      	cmp	r3, #24
 80066f4:	f000 80b4 	beq.w	8006860 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f040 8095 	bne.w	800682c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b79      	ldr	r3, [pc, #484]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a78      	ldr	r2, [pc, #480]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fc fe6b 	bl	80033e8 <HAL_GetTick>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006716:	f7fc fe67 	bl	80033e8 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0da      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006728:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006734:	4b6c      	ldr	r3, [pc, #432]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006738:	4b6c      	ldr	r3, [pc, #432]	; (80068ec <HAL_RCC_OscConfig+0x750>)
 800673a:	4013      	ands	r3, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006744:	0112      	lsls	r2, r2, #4
 8006746:	430a      	orrs	r2, r1
 8006748:	4967      	ldr	r1, [pc, #412]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	628b      	str	r3, [r1, #40]	; 0x28
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	3b01      	subs	r3, #1
 8006754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	3b01      	subs	r3, #1
 800675e:	025b      	lsls	r3, r3, #9
 8006760:	b29b      	uxth	r3, r3
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	3b01      	subs	r3, #1
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	3b01      	subs	r3, #1
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800677e:	495a      	ldr	r1, [pc, #360]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006784:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	4a57      	ldr	r2, [pc, #348]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006790:	4b55      	ldr	r3, [pc, #340]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006794:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_RCC_OscConfig+0x754>)
 8006796:	4013      	ands	r3, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800679c:	00d2      	lsls	r2, r2, #3
 800679e:	4952      	ldr	r1, [pc, #328]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067a4:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	f023 020c 	bic.w	r2, r3, #12
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	494d      	ldr	r1, [pc, #308]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067b6:	4b4c      	ldr	r3, [pc, #304]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	f023 0202 	bic.w	r2, r3, #2
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4949      	ldr	r1, [pc, #292]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067c8:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a46      	ldr	r2, [pc, #280]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d4:	4b44      	ldr	r3, [pc, #272]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	4a43      	ldr	r2, [pc, #268]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067e0:	4b41      	ldr	r3, [pc, #260]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	4a40      	ldr	r2, [pc, #256]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80067ec:	4b3e      	ldr	r3, [pc, #248]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4a3d      	ldr	r2, [pc, #244]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f8:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3a      	ldr	r2, [pc, #232]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 80067fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fc fdf0 	bl	80033e8 <HAL_GetTick>
 8006808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800680c:	f7fc fdec 	bl	80033e8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e05f      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800681e:	4b32      	ldr	r3, [pc, #200]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x670>
 800682a:	e057      	b.n	80068dc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682c:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fc fdd6 	bl	80033e8 <HAL_GetTick>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006840:	f7fc fdd2 	bl	80033e8 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e045      	b.n	80068de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006852:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x6a4>
 800685e:	e03d      	b.n	80068dc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006860:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006866:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <HAL_RCC_OscConfig+0x74c>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b01      	cmp	r3, #1
 8006872:	d031      	beq.n	80068d8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0203 	and.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d12a      	bne.n	80068d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	091b      	lsrs	r3, r3, #4
 8006886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800688e:	429a      	cmp	r2, r3
 8006890:	d122      	bne.n	80068d8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11a      	bne.n	80068d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	0a5b      	lsrs	r3, r3, #9
 80068a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d111      	bne.n	80068d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d108      	bne.n	80068d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3730      	adds	r7, #48	; 0x30
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
 80068ec:	fffffc0c 	.word	0xfffffc0c
 80068f0:	ffff0007 	.word	0xffff0007

080068f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e19c      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006908:	4b8a      	ldr	r3, [pc, #552]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d910      	bls.n	8006938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006916:	4b87      	ldr	r3, [pc, #540]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 020f 	bic.w	r2, r3, #15
 800691e:	4985      	ldr	r1, [pc, #532]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4313      	orrs	r3, r2
 8006924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006926:	4b83      	ldr	r3, [pc, #524]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d001      	beq.n	8006938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e184      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	4b7b      	ldr	r3, [pc, #492]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006950:	429a      	cmp	r2, r3
 8006952:	d908      	bls.n	8006966 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006954:	4b78      	ldr	r3, [pc, #480]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	4975      	ldr	r1, [pc, #468]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006962:	4313      	orrs	r3, r2
 8006964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	4b70      	ldr	r3, [pc, #448]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800697e:	429a      	cmp	r2, r3
 8006980:	d908      	bls.n	8006994 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006982:	4b6d      	ldr	r3, [pc, #436]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	496a      	ldr	r1, [pc, #424]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006990:	4313      	orrs	r3, r2
 8006992:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d010      	beq.n	80069c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	4b64      	ldr	r3, [pc, #400]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d908      	bls.n	80069c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069b0:	4b61      	ldr	r3, [pc, #388]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	495e      	ldr	r1, [pc, #376]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d010      	beq.n	80069f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069da:	429a      	cmp	r2, r3
 80069dc:	d908      	bls.n	80069f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069de:	4b56      	ldr	r3, [pc, #344]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4953      	ldr	r1, [pc, #332]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	4b4d      	ldr	r3, [pc, #308]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d908      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a0c:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f023 020f 	bic.w	r2, r3, #15
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4947      	ldr	r1, [pc, #284]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d055      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a2a:	4b43      	ldr	r3, [pc, #268]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4940      	ldr	r1, [pc, #256]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d107      	bne.n	8006a54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a44:	4b3c      	ldr	r3, [pc, #240]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d121      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0f6      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d115      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0ea      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a74:	4b30      	ldr	r3, [pc, #192]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0de      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a84:	4b2c      	ldr	r3, [pc, #176]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0d6      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a94:	4b28      	ldr	r3, [pc, #160]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f023 0207 	bic.w	r2, r3, #7
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4925      	ldr	r1, [pc, #148]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fc fc9f 	bl	80033e8 <HAL_GetTick>
 8006aaa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aae:	f7fc fc9b 	bl	80033e8 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0be      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac4:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d1eb      	bne.n	8006aae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d208      	bcs.n	8006b04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	490e      	ldr	r1, [pc, #56]	; (8006b38 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d214      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 020f 	bic.w	r2, r3, #15
 8006b1a:	4906      	ldr	r1, [pc, #24]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e086      	b.n	8006c42 <HAL_RCC_ClockConfig+0x34e>
 8006b34:	52002000 	.word	0x52002000
 8006b38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	4b3f      	ldr	r3, [pc, #252]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d208      	bcs.n	8006b6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b58:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	4939      	ldr	r1, [pc, #228]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	4b34      	ldr	r3, [pc, #208]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d208      	bcs.n	8006b98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b86:	4b31      	ldr	r3, [pc, #196]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	492e      	ldr	r1, [pc, #184]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d208      	bcs.n	8006bc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bb4:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	4922      	ldr	r1, [pc, #136]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d208      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006be2:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4917      	ldr	r1, [pc, #92]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bf4:	f000 f834 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	4912      	ldr	r1, [pc, #72]	; (8006c50 <HAL_RCC_ClockConfig+0x35c>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c12:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <HAL_RCC_ClockConfig+0x358>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <HAL_RCC_ClockConfig+0x35c>)
 8006c1c:	5cd3      	ldrb	r3, [r2, r3]
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <HAL_RCC_ClockConfig+0x360>)
 8006c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <HAL_RCC_ClockConfig+0x364>)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCC_ClockConfig+0x368>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fc fa00 	bl	800303c <HAL_InitTick>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	58024400 	.word	0x58024400
 8006c50:	0801536c 	.word	0x0801536c
 8006c54:	24008030 	.word	0x24008030
 8006c58:	2400802c 	.word	0x2400802c
 8006c5c:	24008034 	.word	0x24008034

08006c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c66:	4bb3      	ldr	r3, [pc, #716]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c6e:	2b18      	cmp	r3, #24
 8006c70:	f200 8155 	bhi.w	8006f1e <HAL_RCC_GetSysClockFreq+0x2be>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006f1f 	.word	0x08006f1f
 8006c84:	08006f1f 	.word	0x08006f1f
 8006c88:	08006f1f 	.word	0x08006f1f
 8006c8c:	08006f1f 	.word	0x08006f1f
 8006c90:	08006f1f 	.word	0x08006f1f
 8006c94:	08006f1f 	.word	0x08006f1f
 8006c98:	08006f1f 	.word	0x08006f1f
 8006c9c:	08006d07 	.word	0x08006d07
 8006ca0:	08006f1f 	.word	0x08006f1f
 8006ca4:	08006f1f 	.word	0x08006f1f
 8006ca8:	08006f1f 	.word	0x08006f1f
 8006cac:	08006f1f 	.word	0x08006f1f
 8006cb0:	08006f1f 	.word	0x08006f1f
 8006cb4:	08006f1f 	.word	0x08006f1f
 8006cb8:	08006f1f 	.word	0x08006f1f
 8006cbc:	08006d0d 	.word	0x08006d0d
 8006cc0:	08006f1f 	.word	0x08006f1f
 8006cc4:	08006f1f 	.word	0x08006f1f
 8006cc8:	08006f1f 	.word	0x08006f1f
 8006ccc:	08006f1f 	.word	0x08006f1f
 8006cd0:	08006f1f 	.word	0x08006f1f
 8006cd4:	08006f1f 	.word	0x08006f1f
 8006cd8:	08006f1f 	.word	0x08006f1f
 8006cdc:	08006d13 	.word	0x08006d13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce0:	4b94      	ldr	r3, [pc, #592]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cec:	4b91      	ldr	r3, [pc, #580]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	08db      	lsrs	r3, r3, #3
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	4a90      	ldr	r2, [pc, #576]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006cfe:	e111      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d00:	4b8d      	ldr	r3, [pc, #564]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d02:	61bb      	str	r3, [r7, #24]
    break;
 8006d04:	e10e      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d06:	4b8d      	ldr	r3, [pc, #564]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d08:	61bb      	str	r3, [r7, #24]
    break;
 8006d0a:	e10b      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d0c:	4b8c      	ldr	r3, [pc, #560]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d0e:	61bb      	str	r3, [r7, #24]
    break;
 8006d10:	e108      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d12:	4b88      	ldr	r3, [pc, #544]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d1c:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d28:	4b82      	ldr	r3, [pc, #520]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d32:	4b80      	ldr	r3, [pc, #512]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	08db      	lsrs	r3, r3, #3
 8006d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80e1 	beq.w	8006f18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	f000 8083 	beq.w	8006e64 <HAL_RCC_GetSysClockFreq+0x204>
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f200 80a1 	bhi.w	8006ea8 <HAL_RCC_GetSysClockFreq+0x248>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0x114>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d056      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d72:	e099      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d74:	4b6f      	ldr	r3, [pc, #444]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d02d      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d80:	4b6c      	ldr	r3, [pc, #432]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	08db      	lsrs	r3, r3, #3
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006daa:	4b62      	ldr	r3, [pc, #392]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006dda:	e087      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b51      	ldr	r3, [pc, #324]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1e:	e065      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b40      	ldr	r3, [pc, #256]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e62:	e043      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea6:	e021      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eba:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ece:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006eec:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	0a5b      	lsrs	r3, r3, #9
 8006ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	ee07 3a90 	vmov	s15, r3
 8006f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f10:	ee17 3a90 	vmov	r3, s15
 8006f14:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f16:	e005      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
    break;
 8006f1c:	e002      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f1e:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f20:	61bb      	str	r3, [r7, #24]
    break;
 8006f22:	bf00      	nop
  }

  return sysclockfreq;
 8006f24:	69bb      	ldr	r3, [r7, #24]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3724      	adds	r7, #36	; 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	58024400 	.word	0x58024400
 8006f38:	03d09000 	.word	0x03d09000
 8006f3c:	003d0900 	.word	0x003d0900
 8006f40:	007a1200 	.word	0x007a1200
 8006f44:	46000000 	.word	0x46000000
 8006f48:	4c742400 	.word	0x4c742400
 8006f4c:	4a742400 	.word	0x4a742400
 8006f50:	4af42400 	.word	0x4af42400

08006f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f5a:	f7ff fe81 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	490f      	ldr	r1, [pc, #60]	; (8006fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f6c:	5ccb      	ldrb	r3, [r1, r3]
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f82:	5cd3      	ldrb	r3, [r2, r3]
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8e:	4a07      	ldr	r2, [pc, #28]	; (8006fac <HAL_RCC_GetHCLKFreq+0x58>)
 8006f90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f92:	4a07      	ldr	r2, [pc, #28]	; (8006fb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <HAL_RCC_GetHCLKFreq+0x58>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	0801536c 	.word	0x0801536c
 8006fac:	24008030 	.word	0x24008030
 8006fb0:	2400802c 	.word	0x2400802c

08006fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006fb8:	f7ff ffcc 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	091b      	lsrs	r3, r3, #4
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	4904      	ldr	r1, [pc, #16]	; (8006fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	0801536c 	.word	0x0801536c

08006fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fe4:	f7ff ffb6 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4904      	ldr	r1, [pc, #16]	; (8007008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	58024400 	.word	0x58024400
 8007008:	0801536c 	.word	0x0801536c

0800700c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	223f      	movs	r2, #63	; 0x3f
 800701a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0207 	and.w	r2, r3, #7
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007034:	4b14      	ldr	r3, [pc, #80]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007040:	4b11      	ldr	r3, [pc, #68]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007064:	4b08      	ldr	r3, [pc, #32]	; (8007088 <HAL_RCC_GetClockConfig+0x7c>)
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_RCC_GetClockConfig+0x80>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	58024400 	.word	0x58024400
 800708c:	52002000 	.word	0x52002000

08007090 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800709c:	2300      	movs	r3, #0
 800709e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d03f      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070b4:	d02a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ba:	d824      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c0:	d018      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c6:	d81e      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d0:	d007      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070d2:	e018      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4bab      	ldr	r3, [pc, #684]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4aaa      	ldr	r2, [pc, #680]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070e0:	e015      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 feff 	bl	8008eec <RCCEx_PLL2_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070f2:	e00c      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	2102      	movs	r1, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 ffa8 	bl	8009050 <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007104:	e003      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
      break;
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007114:	4b9b      	ldr	r3, [pc, #620]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	4998      	ldr	r1, [pc, #608]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007122:	4313      	orrs	r3, r2
 8007124:	650b      	str	r3, [r1, #80]	; 0x50
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d03d      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	2b04      	cmp	r3, #4
 800713e:	d826      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800715d 	.word	0x0800715d
 800714c:	0800716b 	.word	0x0800716b
 8007150:	0800717d 	.word	0x0800717d
 8007154:	08007195 	.word	0x08007195
 8007158:	08007195 	.word	0x08007195
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715c:	4b89      	ldr	r3, [pc, #548]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a88      	ldr	r2, [pc, #544]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007168:	e015      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f001 febb 	bl	8008eec <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800717a:	e00c      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f001 ff64 	bl	8009050 <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800718c:	e003      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
      break;
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800719c:	4b79      	ldr	r3, [pc, #484]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a0:	f023 0207 	bic.w	r2, r3, #7
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	4976      	ldr	r1, [pc, #472]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	650b      	str	r3, [r1, #80]	; 0x50
 80071ae:	e001      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d051      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071c6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80071ca:	d036      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80071cc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80071d0:	d830      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80071d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071d6:	d032      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80071d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071dc:	d82a      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80071de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071e2:	d02e      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80071e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071e8:	d824      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80071ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ee:	d018      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80071f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f4:	d81e      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80071fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071fe:	d007      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007200:	e018      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007202:	4b60      	ldr	r3, [pc, #384]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	4a5f      	ldr	r2, [pc, #380]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800720e:	e019      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3304      	adds	r3, #4
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f001 fe68 	bl	8008eec <RCCEx_PLL2_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007220:	e010      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3324      	adds	r3, #36	; 0x24
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f001 ff11 	bl	8009050 <RCCEx_PLL3_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007232:	e007      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
      break;
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800724a:	4b4e      	ldr	r3, [pc, #312]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007258:	494a      	ldr	r1, [pc, #296]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725a:	4313      	orrs	r3, r2
 800725c:	658b      	str	r3, [r1, #88]	; 0x58
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800726c:	2b00      	cmp	r3, #0
 800726e:	d051      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007276:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800727a:	d036      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800727c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007280:	d830      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007286:	d032      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800728c:	d82a      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800728e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007292:	d02e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007298:	d824      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800729a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800729e:	d018      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80072a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a4:	d81e      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80072aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072ae:	d007      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80072b0:	e018      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b2:	4b34      	ldr	r3, [pc, #208]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	4a33      	ldr	r2, [pc, #204]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072be:	e019      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fe10 	bl	8008eec <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3324      	adds	r3, #36	; 0x24
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 feb9 	bl	8009050 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072e2:	e007      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
      break;
 80072e8:	e004      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80072ea:	bf00      	nop
 80072ec:	e002      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80072ee:	bf00      	nop
 80072f0:	e000      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80072f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072fa:	4b22      	ldr	r3, [pc, #136]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007308:	491e      	ldr	r1, [pc, #120]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800730a:	4313      	orrs	r3, r2
 800730c:	658b      	str	r3, [r1, #88]	; 0x58
 800730e:	e001      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d035      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d01c      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007328:	2b30      	cmp	r3, #48	; 0x30
 800732a:	d817      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d00c      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007330:	2b20      	cmp	r3, #32
 8007332:	d813      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d016      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007338:	2b10      	cmp	r3, #16
 800733a:	d10f      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007348:	e00e      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3304      	adds	r3, #4
 800734e:	2102      	movs	r1, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fdcb 	bl	8008eec <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800735a:	e005      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10c      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737a:	4902      	ldr	r1, [pc, #8]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800737c:	4313      	orrs	r3, r2
 800737e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007380:	e004      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007382:	bf00      	nop
 8007384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d047      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a0:	d030      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80073a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a6:	d82a      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80073a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ac:	d02c      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80073ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073b2:	d824      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d018      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073be:	d81e      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80073c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c8:	d007      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073ca:	e018      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073cc:	4bac      	ldr	r3, [pc, #688]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4aab      	ldr	r2, [pc, #684]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80073d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073d8:	e017      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 fd83 	bl	8008eec <RCCEx_PLL2_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073ea:	e00e      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3324      	adds	r3, #36	; 0x24
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fe2c 	bl	8009050 <RCCEx_PLL3_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073fc:	e005      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
      break;
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007410:	4b9b      	ldr	r3, [pc, #620]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007414:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	4998      	ldr	r1, [pc, #608]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	650b      	str	r3, [r1, #80]	; 0x50
 8007422:	e001      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d049      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800743c:	d02e      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800743e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007442:	d828      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007448:	d02a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800744a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800744e:	d822      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007454:	d026      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800745a:	d81c      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800745c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007460:	d010      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007466:	d816      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01d      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007470:	d111      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fd37 	bl	8008eec <RCCEx_PLL2_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007482:	e012      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3324      	adds	r3, #36	; 0x24
 8007488:	2101      	movs	r1, #1
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fde0 	bl	8009050 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007494:	e009      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
      break;
 800749a:	e006      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800749c:	bf00      	nop
 800749e:	e004      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80074a0:	bf00      	nop
 80074a2:	e002      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80074a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074b0:	4b73      	ldr	r3, [pc, #460]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074bc:	4970      	ldr	r1, [pc, #448]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	650b      	str	r3, [r1, #80]	; 0x50
 80074c2:	e001      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d04b      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074de:	d02e      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80074e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e4:	d828      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80074e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ea:	d02a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80074ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f0:	d822      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80074f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074f6:	d026      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80074f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074fc:	d81c      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007502:	d010      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007508:	d816      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01d      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007512:	d111      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	2101      	movs	r1, #1
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fce6 	bl	8008eec <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007524:	e012      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fd8f 	bl	8009050 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007536:	e009      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	e006      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800753e:	bf00      	nop
 8007540:	e004      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007542:	bf00      	nop
 8007544:	e002      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800754a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007552:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007560:	4947      	ldr	r1, [pc, #284]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007562:	4313      	orrs	r3, r2
 8007564:	658b      	str	r3, [r1, #88]	; 0x58
 8007566:	e001      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02f      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007580:	d00e      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007586:	d814      	bhi.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800758c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007590:	d10f      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007592:	4b3b      	ldr	r3, [pc, #236]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	4a3a      	ldr	r2, [pc, #232]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800759e:	e00c      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	2101      	movs	r1, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fca0 	bl	8008eec <RCCEx_PLL2_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
      break;
 80075b6:	e000      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80075b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075c0:	4b2f      	ldr	r3, [pc, #188]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075cc:	492c      	ldr	r1, [pc, #176]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	650b      	str	r3, [r1, #80]	; 0x50
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d032      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d81b      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	0800762b 	.word	0x0800762b
 80075f8:	08007605 	.word	0x08007605
 80075fc:	08007613 	.word	0x08007613
 8007600:	0800762b 	.word	0x0800762b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007604:	4b1e      	ldr	r3, [pc, #120]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800760a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007610:	e00c      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3304      	adds	r3, #4
 8007616:	2102      	movs	r1, #2
 8007618:	4618      	mov	r0, r3
 800761a:	f001 fc67 	bl	8008eec <RCCEx_PLL2_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007622:	e003      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	75fb      	strb	r3, [r7, #23]
      break;
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800762a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	f023 0203 	bic.w	r2, r3, #3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	4910      	ldr	r1, [pc, #64]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007640:	4313      	orrs	r3, r2
 8007642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007644:	e001      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 808a 	beq.w	800776c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a09      	ldr	r2, [pc, #36]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800765e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007664:	f7fb fec0 	bl	80033e8 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800766a:	e00d      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800766c:	f7fb febc 	bl	80033e8 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d906      	bls.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	75fb      	strb	r3, [r7, #23]
        break;
 800767e:	e009      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007680:	58024400 	.word	0x58024400
 8007684:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007688:	4bb9      	ldr	r3, [pc, #740]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0eb      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d166      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800769a:	4bb6      	ldr	r3, [pc, #728]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800769c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076a4:	4053      	eors	r3, r2
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d013      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ae:	4bb1      	ldr	r3, [pc, #708]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076b8:	4bae      	ldr	r3, [pc, #696]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076bc:	4aad      	ldr	r2, [pc, #692]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076c4:	4bab      	ldr	r3, [pc, #684]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	4aaa      	ldr	r2, [pc, #680]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076d0:	4aa8      	ldr	r2, [pc, #672]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e0:	d115      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fb fe81 	bl	80033e8 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076e8:	e00b      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ea:	f7fb fe7d 	bl	80033e8 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d902      	bls.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007700:	e005      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007702:	4b9c      	ldr	r3, [pc, #624]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0ed      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d126      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800771a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007722:	d10d      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007724:	4b93      	ldr	r3, [pc, #588]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007732:	0919      	lsrs	r1, r3, #4
 8007734:	4b90      	ldr	r3, [pc, #576]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007736:	400b      	ands	r3, r1
 8007738:	498e      	ldr	r1, [pc, #568]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
 800773e:	e005      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007740:	4b8c      	ldr	r3, [pc, #560]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4a8b      	ldr	r2, [pc, #556]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007746:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800774a:	6113      	str	r3, [r2, #16]
 800774c:	4b89      	ldr	r3, [pc, #548]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800774e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775a:	4986      	ldr	r1, [pc, #536]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800775c:	4313      	orrs	r3, r2
 800775e:	670b      	str	r3, [r1, #112]	; 0x70
 8007760:	e004      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	75bb      	strb	r3, [r7, #22]
 8007766:	e001      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d07e      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	2b28      	cmp	r3, #40	; 0x28
 800777e:	d867      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	08007857 	.word	0x08007857
 800778c:	08007851 	.word	0x08007851
 8007790:	08007851 	.word	0x08007851
 8007794:	08007851 	.word	0x08007851
 8007798:	08007851 	.word	0x08007851
 800779c:	08007851 	.word	0x08007851
 80077a0:	08007851 	.word	0x08007851
 80077a4:	08007851 	.word	0x08007851
 80077a8:	0800782d 	.word	0x0800782d
 80077ac:	08007851 	.word	0x08007851
 80077b0:	08007851 	.word	0x08007851
 80077b4:	08007851 	.word	0x08007851
 80077b8:	08007851 	.word	0x08007851
 80077bc:	08007851 	.word	0x08007851
 80077c0:	08007851 	.word	0x08007851
 80077c4:	08007851 	.word	0x08007851
 80077c8:	0800783f 	.word	0x0800783f
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007851 	.word	0x08007851
 80077d4:	08007851 	.word	0x08007851
 80077d8:	08007851 	.word	0x08007851
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007851 	.word	0x08007851
 80077e8:	08007857 	.word	0x08007857
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007851 	.word	0x08007851
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007851 	.word	0x08007851
 80077fc:	08007851 	.word	0x08007851
 8007800:	08007851 	.word	0x08007851
 8007804:	08007851 	.word	0x08007851
 8007808:	08007857 	.word	0x08007857
 800780c:	08007851 	.word	0x08007851
 8007810:	08007851 	.word	0x08007851
 8007814:	08007851 	.word	0x08007851
 8007818:	08007851 	.word	0x08007851
 800781c:	08007851 	.word	0x08007851
 8007820:	08007851 	.word	0x08007851
 8007824:	08007851 	.word	0x08007851
 8007828:	08007857 	.word	0x08007857
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	2101      	movs	r1, #1
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fb5a 	bl	8008eec <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800783c:	e00c      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3324      	adds	r3, #36	; 0x24
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fc03 	bl	8009050 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800785e:	4b45      	ldr	r3, [pc, #276]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	4942      	ldr	r1, [pc, #264]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	654b      	str	r3, [r1, #84]	; 0x54
 8007870:	e001      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d037      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	2b05      	cmp	r3, #5
 8007888:	d820      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078d3 	.word	0x080078d3
 8007894:	080078a9 	.word	0x080078a9
 8007898:	080078bb 	.word	0x080078bb
 800789c:	080078d3 	.word	0x080078d3
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 fb1c 	bl	8008eec <RCCEx_PLL2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078b8:	e00c      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3324      	adds	r3, #36	; 0x24
 80078be:	2101      	movs	r1, #1
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fbc5 	bl	8009050 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
      break;
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80078d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078da:	4b26      	ldr	r3, [pc, #152]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f023 0207 	bic.w	r2, r3, #7
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4923      	ldr	r1, [pc, #140]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	654b      	str	r3, [r1, #84]	; 0x54
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d040      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007904:	2b05      	cmp	r3, #5
 8007906:	d821      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007953 	.word	0x08007953
 8007914:	08007929 	.word	0x08007929
 8007918:	0800793b 	.word	0x0800793b
 800791c:	08007953 	.word	0x08007953
 8007920:	08007953 	.word	0x08007953
 8007924:	08007953 	.word	0x08007953
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	2101      	movs	r1, #1
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fadc 	bl	8008eec <RCCEx_PLL2_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007938:	e00c      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	2101      	movs	r1, #1
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fb85 	bl	8009050 <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	f023 0207 	bic.w	r2, r3, #7
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	4902      	ldr	r1, [pc, #8]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800796a:	4313      	orrs	r3, r2
 800796c:	658b      	str	r3, [r1, #88]	; 0x58
 800796e:	e007      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007970:	58024800 	.word	0x58024800
 8007974:	58024400 	.word	0x58024400
 8007978:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d04b      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007996:	d02e      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799c:	d828      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a2:	d02a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d822      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80079aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ae:	d026      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80079b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b4:	d81c      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80079b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ba:	d010      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d816      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01d      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80079c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ca:	d111      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fa8a 	bl	8008eec <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079dc:	e012      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3324      	adds	r3, #36	; 0x24
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fb33 	bl	8009050 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079ee:	e009      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
      break;
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80079f6:	bf00      	nop
 80079f8:	e004      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80079fa:	bf00      	nop
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a0a:	4bb2      	ldr	r3, [pc, #712]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a18:	49ae      	ldr	r1, [pc, #696]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	654b      	str	r3, [r1, #84]	; 0x54
 8007a1e:	e001      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d04b      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a3a:	d02e      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007a3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a40:	d828      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a46:	d02a      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4c:	d822      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a52:	d026      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a58:	d81c      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a5e:	d010      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a64:	d816      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01d      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6e:	d111      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fa38 	bl	8008eec <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a80:	e012      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fae1 	bl	8009050 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a92:	e009      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
      break;
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e004      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e002      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007aae:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007abc:	4985      	ldr	r1, [pc, #532]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ac2:	e001      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d04b      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ada:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ade:	d02e      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007ae0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ae4:	d828      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aea:	d02a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af0:	d822      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007af2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007af6:	d026      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007af8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007afc:	d81c      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b02:	d010      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b08:	d816      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01d      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b12:	d111      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 f9e6 	bl	8008eec <RCCEx_PLL2_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b24:	e012      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3324      	adds	r3, #36	; 0x24
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fa8f 	bl	8009050 <RCCEx_PLL3_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b36:	e009      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3c:	e006      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e004      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007b42:	bf00      	nop
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b52:	4b60      	ldr	r3, [pc, #384]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b60:	495c      	ldr	r1, [pc, #368]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	658b      	str	r3, [r1, #88]	; 0x58
 8007b66:	e001      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d018      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b80:	d10a      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3324      	adds	r3, #36	; 0x24
 8007b86:	2102      	movs	r1, #2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 fa61 	bl	8009050 <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007b98:	4b4e      	ldr	r3, [pc, #312]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba4:	494b      	ldr	r1, [pc, #300]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d01a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3324      	adds	r3, #36	; 0x24
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 fa41 	bl	8009050 <RCCEx_PLL3_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bd8:	4b3e      	ldr	r3, [pc, #248]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	493b      	ldr	r1, [pc, #236]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d034      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c02:	d01d      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c08:	d817      	bhi.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c12:	d009      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c14:	e011      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 f965 	bl	8008eec <RCCEx_PLL2_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c26:	e00c      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3324      	adds	r3, #36	; 0x24
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fa0e 	bl	8009050 <RCCEx_PLL3_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3e:	e000      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c48:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c56:	491f      	ldr	r1, [pc, #124]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8007c5c:	e001      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d036      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c78:	d01c      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c7e:	d816      	bhi.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c84:	d003      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8a:	d007      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007c8c:	e00f      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	4a10      	ldr	r2, [pc, #64]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c9a:	e00c      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f9d4 	bl	8009050 <RCCEx_PLL3_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007cac:	e003      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cca:	4902      	ldr	r1, [pc, #8]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	654b      	str	r3, [r1, #84]	; 0x54
 8007cd0:	e004      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007cd2:	bf00      	nop
 8007cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d029      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d007      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007cf6:	e00f      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf8:	4b61      	ldr	r3, [pc, #388]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a60      	ldr	r2, [pc, #384]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d04:	e00b      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 f8ed 	bl	8008eec <RCCEx_PLL2_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d16:	e002      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d24:	4b56      	ldr	r3, [pc, #344]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d30:	4953      	ldr	r1, [pc, #332]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d36:	e001      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3324      	adds	r3, #36	; 0x24
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f97e 	bl	8009050 <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d030      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d72:	d017      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d78:	d811      	bhi.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7e:	d013      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d84:	d80b      	bhi.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d010      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8e:	d106      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d90:	4b3b      	ldr	r3, [pc, #236]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	4a3a      	ldr	r2, [pc, #232]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007d9c:	e007      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
      break;
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007da4:	bf00      	nop
 8007da6:	e002      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007da8:	bf00      	nop
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007db4:	4b32      	ldr	r3, [pc, #200]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dc0:	492f      	ldr	r1, [pc, #188]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	654b      	str	r3, [r1, #84]	; 0x54
 8007dc6:	e001      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007dd8:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de4:	4926      	ldr	r1, [pc, #152]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e02:	491f      	ldr	r1, [pc, #124]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00d      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	4a19      	ldr	r2, [pc, #100]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e1e:	6113      	str	r3, [r2, #16]
 8007e20:	4b17      	ldr	r3, [pc, #92]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e2a:	4915      	ldr	r1, [pc, #84]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da08      	bge.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	490e      	ldr	r1, [pc, #56]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e56:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e64:	4906      	ldr	r1, [pc, #24]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007e6a:	7dbb      	ldrb	r3, [r7, #22]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400

08007e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b090      	sub	sp, #64	; 0x40
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e92:	f040 8089 	bne.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007e96:	4b95      	ldr	r3, [pc, #596]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d87d      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ec1 	.word	0x08007ec1
 8007eb0:	08007ee5 	.word	0x08007ee5
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007f9d 	.word	0x08007f9d
 8007ebc:	08007f2d 	.word	0x08007f2d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ec0:	4b8a      	ldr	r3, [pc, #552]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ecc:	d107      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 feb8 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007edc:	e3ed      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee2:	e3ea      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee4:	4b81      	ldr	r3, [pc, #516]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef0:	d107      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef2:	f107 0318 	add.w	r3, r7, #24
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fbfe 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f00:	e3db      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f06:	e3d8      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f08:	4b78      	ldr	r3, [pc, #480]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f14:	d107      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fd40 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f24:	e3c9      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2a:	e3c6      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f2c:	4b6f      	ldr	r3, [pc, #444]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f36:	4b6d      	ldr	r3, [pc, #436]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d10c      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f48:	4b68      	ldr	r3, [pc, #416]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	4a67      	ldr	r2, [pc, #412]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5a:	e01e      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f5c:	4b63      	ldr	r3, [pc, #396]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f68:	d106      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f72:	4b60      	ldr	r3, [pc, #384]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f76:	e010      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f78:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f84:	d106      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f8e:	4b5a      	ldr	r3, [pc, #360]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f98:	e38f      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f9a:	e38e      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f9c:	4b57      	ldr	r3, [pc, #348]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa0:	e38b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa6:	e388      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fae:	f040 80a7 	bne.w	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007fb2:	4b4e      	ldr	r3, [pc, #312]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc2:	d054      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fca:	f200 808b 	bhi.w	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fd4:	f000 8083 	beq.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fde:	f200 8081 	bhi.w	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe8:	d02f      	beq.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ff0:	d878      	bhi.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ffe:	d012      	beq.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008000:	e070      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008002:	4b3a      	ldr	r3, [pc, #232]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800800e:	d107      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fe17 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800801e:	e34c      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008024:	e349      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008026:	4b31      	ldr	r3, [pc, #196]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800802e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008032:	d107      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008034:	f107 0318 	add.w	r3, r7, #24
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fb5d 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008042:	e33a      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008048:	e337      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800804a:	4b28      	ldr	r3, [pc, #160]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008056:	d107      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fc9f 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008066:	e328      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806c:	e325      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800806e:	4b1f      	ldr	r3, [pc, #124]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008076:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008078:	4b1c      	ldr	r3, [pc, #112]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b04      	cmp	r3, #4
 8008082:	d10c      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800808a:	4b18      	ldr	r3, [pc, #96]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	08db      	lsrs	r3, r3, #3
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	4a16      	ldr	r2, [pc, #88]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008096:	fa22 f303 	lsr.w	r3, r2, r3
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809c:	e01e      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080b2:	d102      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b8:	e010      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c6:	d106      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80080c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ce:	d102      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80080da:	e2ee      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80080dc:	e2ed      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e2:	e2ea      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e8:	e2e7      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80080ea:	bf00      	nop
 80080ec:	58024400 	.word	0x58024400
 80080f0:	03d09000 	.word	0x03d09000
 80080f4:	003d0900 	.word	0x003d0900
 80080f8:	007a1200 	.word	0x007a1200
 80080fc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008106:	f040 809c 	bne.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800810a:	4b9e      	ldr	r3, [pc, #632]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008112:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800811a:	d054      	beq.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008122:	f200 808b 	bhi.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800812c:	f000 8083 	beq.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008136:	f200 8081 	bhi.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008140:	d02f      	beq.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008148:	d878      	bhi.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008156:	d012      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008158:	e070      	b.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800815a:	4b8a      	ldr	r3, [pc, #552]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008166:	d107      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fd6b 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008176:	e2a0      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817c:	e29d      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800817e:	4b81      	ldr	r3, [pc, #516]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800818a:	d107      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818c:	f107 0318 	add.w	r3, r7, #24
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fab1 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800819a:	e28e      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a0:	e28b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081a2:	4b78      	ldr	r3, [pc, #480]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ae:	d107      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fbf3 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081be:	e27c      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c4:	e279      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081c6:	4b6f      	ldr	r3, [pc, #444]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081d0:	4b6c      	ldr	r3, [pc, #432]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d10c      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e2:	4b68      	ldr	r3, [pc, #416]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	08db      	lsrs	r3, r3, #3
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	4a66      	ldr	r2, [pc, #408]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80081ee:	fa22 f303 	lsr.w	r3, r2, r3
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f4:	e01e      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081f6:	4b63      	ldr	r3, [pc, #396]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008202:	d106      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800820a:	d102      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800820c:	4b5f      	ldr	r3, [pc, #380]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008210:	e010      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008212:	4b5c      	ldr	r3, [pc, #368]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821e:	d106      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008226:	d102      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008228:	4b59      	ldr	r3, [pc, #356]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800822c:	e002      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008232:	e242      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008234:	e241      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008236:	4b57      	ldr	r3, [pc, #348]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823a:	e23e      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008240:	e23b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008248:	f040 80a6 	bne.w	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800824c:	4b4d      	ldr	r3, [pc, #308]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008254:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800825c:	d054      	beq.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008264:	f200 808b 	bhi.w	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800826e:	f000 8083 	beq.w	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008278:	f200 8081 	bhi.w	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008282:	d02f      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828a:	d878      	bhi.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008298:	d012      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800829a:	e070      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800829c:	4b39      	ldr	r3, [pc, #228]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082a8:	d107      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fcca 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082b8:	e1ff      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082be:	e1fc      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082c0:	4b30      	ldr	r3, [pc, #192]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082cc:	d107      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ce:	f107 0318 	add.w	r3, r7, #24
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fa10 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082dc:	e1ed      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e2:	e1ea      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082e4:	4b27      	ldr	r3, [pc, #156]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f0:	d107      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f2:	f107 030c 	add.w	r3, r7, #12
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fb52 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008300:	e1db      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008306:	e1d8      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008308:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800830a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008310:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b04      	cmp	r3, #4
 800831c:	d10c      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008324:	4b17      	ldr	r3, [pc, #92]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	08db      	lsrs	r3, r3, #3
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	4a16      	ldr	r2, [pc, #88]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008336:	e01e      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008338:	4b12      	ldr	r3, [pc, #72]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008344:	d106      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800834c:	d102      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800834e:	4b0f      	ldr	r3, [pc, #60]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008352:	e010      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008354:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008360:	d106      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008368:	d102      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800836e:	e002      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008374:	e1a1      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008376:	e1a0      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008378:	4b06      	ldr	r3, [pc, #24]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800837c:	e19d      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e19a      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008384:	58024400 	.word	0x58024400
 8008388:	03d09000 	.word	0x03d09000
 800838c:	003d0900 	.word	0x003d0900
 8008390:	007a1200 	.word	0x007a1200
 8008394:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800839e:	d173      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80083a0:	4b9a      	ldr	r3, [pc, #616]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b0:	d02f      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b8:	d863      	bhi.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d004      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c6:	d012      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80083c8:	e05b      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ca:	4b90      	ldr	r3, [pc, #576]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d6:	d107      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d8:	f107 0318 	add.w	r3, r7, #24
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f98b 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083e6:	e168      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ec:	e165      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ee:	4b87      	ldr	r3, [pc, #540]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fa:	d107      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	4618      	mov	r0, r3
 8008402:	f000 facd 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800840a:	e156      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008410:	e153      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008412:	4b7e      	ldr	r3, [pc, #504]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800841a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800841c:	4b7b      	ldr	r3, [pc, #492]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b04      	cmp	r3, #4
 8008426:	d10c      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800842e:	4b77      	ldr	r3, [pc, #476]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a75      	ldr	r2, [pc, #468]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	e01e      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008442:	4b72      	ldr	r3, [pc, #456]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844e:	d106      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008456:	d102      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008458:	4b6e      	ldr	r3, [pc, #440]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800845c:	e010      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800845e:	4b6b      	ldr	r3, [pc, #428]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800846a:	d106      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008472:	d102      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008474:	4b68      	ldr	r3, [pc, #416]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008478:	e002      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800847e:	e11c      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008480:	e11b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008486:	e118      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848e:	d133      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008490:	4b5e      	ldr	r3, [pc, #376]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a6:	d012      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80084a8:	e023      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084aa:	4b58      	ldr	r3, [pc, #352]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fbc3 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084c6:	e0f8      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	e0f5      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ce:	4b4f      	ldr	r3, [pc, #316]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084dc:	f107 0318 	add.w	r3, r7, #24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f909 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084ea:	e0e6      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f0:	e0e3      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f6:	e0e0      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084fe:	f040 808d 	bne.w	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008502:	4b42      	ldr	r3, [pc, #264]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008506:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008512:	d06b      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800851a:	d874      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008522:	d056      	beq.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852a:	d86c      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008532:	d03b      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800853a:	d864      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008542:	d021      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800854a:	d85c      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008558:	d004      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800855a:	e054      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800855c:	f000 f8b6 	bl	80086cc <HAL_RCCEx_GetD3PCLK1Freq>
 8008560:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008562:	e0aa      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008564:	4b29      	ldr	r3, [pc, #164]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800856c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008572:	f107 0318 	add.w	r3, r7, #24
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f8be 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008580:	e09b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008586:	e098      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008588:	4b20      	ldr	r3, [pc, #128]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008594:	d107      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008596:	f107 030c 	add.w	r3, r7, #12
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fa00 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085a4:	e089      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085aa:	e086      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085ac:	4b17      	ldr	r3, [pc, #92]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d109      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a13      	ldr	r2, [pc, #76]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085ca:	e076      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d0:	e073      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085d2:	4b0e      	ldr	r3, [pc, #56]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d102      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085e4:	e069      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ea:	e066      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085ec:	4b07      	ldr	r3, [pc, #28]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f8:	d102      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085fe:	e05c      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008604:	e059      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800860a:	e056      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800860c:	58024400 	.word	0x58024400
 8008610:	03d09000 	.word	0x03d09000
 8008614:	003d0900 	.word	0x003d0900
 8008618:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008622:	d148      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008624:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008634:	d02a      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863c:	d838      	bhi.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800864a:	d00d      	beq.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800864c:	e030      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800864e:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008660:	e02b      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008666:	e028      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008668:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008674:	d107      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fae4 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008684:	e019      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800868a:	e016      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800868c:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008698:	d107      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869a:	f107 0318 	add.w	r3, r7, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f82a 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086a8:	e007      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ae:	e004      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b4:	e001      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3740      	adds	r7, #64	; 0x40
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	58024400 	.word	0x58024400
 80086c8:	007a1200 	.word	0x007a1200

080086cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086d0:	f7fe fc40 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	091b      	lsrs	r3, r3, #4
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	4904      	ldr	r1, [pc, #16]	; (80086f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086e2:	5ccb      	ldrb	r3, [r1, r3]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	58024400 	.word	0x58024400
 80086f4:	0801536c 	.word	0x0801536c

080086f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008700:	4ba1      	ldr	r3, [pc, #644]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800870a:	4b9f      	ldr	r3, [pc, #636]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	0b1b      	lsrs	r3, r3, #12
 8008710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008714:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008716:	4b9c      	ldr	r3, [pc, #624]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	091b      	lsrs	r3, r3, #4
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008722:	4b99      	ldr	r3, [pc, #612]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008726:	08db      	lsrs	r3, r3, #3
 8008728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8111 	beq.w	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b02      	cmp	r3, #2
 800874a:	f000 8083 	beq.w	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b02      	cmp	r3, #2
 8008752:	f200 80a1 	bhi.w	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d056      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008762:	e099      	b.n	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008764:	4b88      	ldr	r3, [pc, #544]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d02d      	beq.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008770:	4b85      	ldr	r3, [pc, #532]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a84      	ldr	r2, [pc, #528]	; (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b7b      	ldr	r3, [pc, #492]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087ca:	e087      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b6a      	ldr	r3, [pc, #424]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800880e:	e065      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b59      	ldr	r3, [pc, #356]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008852:	e043      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800899c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b48      	ldr	r3, [pc, #288]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a03 	vldr	s12, [r7, #12]
 800887a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008896:	e021      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b37      	ldr	r3, [pc, #220]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	0a5b      	lsrs	r3, r3, #9
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008902:	ee17 2a90 	vmov	r2, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800890a:	4b1f      	ldr	r3, [pc, #124]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008924:	edd7 6a07 	vldr	s13, [r7, #28]
 8008928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008930:	ee17 2a90 	vmov	r2, s15
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	0e1b      	lsrs	r3, r3, #24
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800894e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008952:	edd7 6a07 	vldr	s13, [r7, #28]
 8008956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895e:	ee17 2a90 	vmov	r2, s15
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008966:	e008      	b.n	800897a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
}
 800897a:	bf00      	nop
 800897c:	3724      	adds	r7, #36	; 0x24
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	46000000 	.word	0x46000000
 8008994:	4c742400 	.word	0x4c742400
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4af42400 	.word	0x4af42400

080089a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b089      	sub	sp, #36	; 0x24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a8:	4ba1      	ldr	r3, [pc, #644]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80089b2:	4b9f      	ldr	r3, [pc, #636]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	0d1b      	lsrs	r3, r3, #20
 80089b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089be:	4b9c      	ldr	r3, [pc, #624]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80089ca:	4b99      	ldr	r3, [pc, #612]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8111 	beq.w	8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	f000 8083 	beq.w	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	f200 80a1 	bhi.w	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d056      	beq.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a0a:	e099      	b.n	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a0c:	4b88      	ldr	r3, [pc, #544]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02d      	beq.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a18:	4b85      	ldr	r3, [pc, #532]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	08db      	lsrs	r3, r3, #3
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	4a84      	ldr	r2, [pc, #528]	; (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b7b      	ldr	r3, [pc, #492]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a72:	e087      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b6a      	ldr	r3, [pc, #424]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab6:	e065      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afa:	e043      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b48      	ldr	r3, [pc, #288]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b3e:	e021      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b84:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	0a5b      	lsrs	r3, r3, #9
 8008b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008baa:	ee17 2a90 	vmov	r2, s15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008bb2:	4b1f      	ldr	r3, [pc, #124]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	0c1b      	lsrs	r3, r3, #16
 8008bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbc:	ee07 3a90 	vmov	s15, r3
 8008bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bd8:	ee17 2a90 	vmov	r2, s15
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be4:	0e1b      	lsrs	r3, r3, #24
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c06:	ee17 2a90 	vmov	r2, s15
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c0e:	e008      	b.n	8008c22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
}
 8008c22:	bf00      	nop
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400
 8008c34:	03d09000 	.word	0x03d09000
 8008c38:	46000000 	.word	0x46000000
 8008c3c:	4c742400 	.word	0x4c742400
 8008c40:	4a742400 	.word	0x4a742400
 8008c44:	4af42400 	.word	0x4af42400

08008c48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c50:	4ba0      	ldr	r3, [pc, #640]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008c5a:	4b9e      	ldr	r3, [pc, #632]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c66:	4b9b      	ldr	r3, [pc, #620]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c70:	4b98      	ldr	r3, [pc, #608]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	fb02 f303 	mul.w	r3, r2, r3
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 8111 	beq.w	8008eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	f000 8083 	beq.w	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	f200 80a1 	bhi.w	8008de6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d056      	beq.n	8008d5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008cb0:	e099      	b.n	8008de6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb2:	4b88      	ldr	r3, [pc, #544]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d02d      	beq.n	8008d1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cbe:	4b85      	ldr	r3, [pc, #532]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	08db      	lsrs	r3, r3, #3
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	4a83      	ldr	r2, [pc, #524]	; (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008cca:	fa22 f303 	lsr.w	r3, r2, r3
 8008cce:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce8:	4b7a      	ldr	r3, [pc, #488]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d14:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d18:	e087      	b.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	ee07 3a90 	vmov	s15, r3
 8008d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2c:	4b69      	ldr	r3, [pc, #420]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d40:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d5c:	e065      	b.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	ee07 3a90 	vmov	s15, r3
 8008d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d70:	4b58      	ldr	r3, [pc, #352]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d84:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008da0:	e043      	b.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db4:	4b47      	ldr	r3, [pc, #284]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008de4:	e021      	b.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df8:	4b36      	ldr	r3, [pc, #216]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	0a5b      	lsrs	r3, r3, #9
 8008e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e50:	ee17 2a90 	vmov	r2, s15
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008e58:	4b1e      	ldr	r3, [pc, #120]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5c:	0c1b      	lsrs	r3, r3, #16
 8008e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e7e:	ee17 2a90 	vmov	r2, s15
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	0e1b      	lsrs	r3, r3, #24
 8008e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eac:	ee17 2a90 	vmov	r2, s15
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	609a      	str	r2, [r3, #8]
}
 8008ec8:	bf00      	nop
 8008eca:	3724      	adds	r7, #36	; 0x24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	03d09000 	.word	0x03d09000
 8008edc:	46000000 	.word	0x46000000
 8008ee0:	4c742400 	.word	0x4c742400
 8008ee4:	4a742400 	.word	0x4a742400
 8008ee8:	4af42400 	.word	0x4af42400

08008eec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008efa:	4b53      	ldr	r3, [pc, #332]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d101      	bne.n	8008f0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e099      	b.n	800903e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f0a:	4b4f      	ldr	r3, [pc, #316]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a4e      	ldr	r2, [pc, #312]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f16:	f7fa fa67 	bl	80033e8 <HAL_GetTick>
 8008f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f1c:	e008      	b.n	8008f30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f1e:	f7fa fa63 	bl	80033e8 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d901      	bls.n	8008f30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e086      	b.n	800903e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f30:	4b45      	ldr	r3, [pc, #276]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f0      	bne.n	8008f1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f3c:	4b42      	ldr	r3, [pc, #264]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	031b      	lsls	r3, r3, #12
 8008f4a:	493f      	ldr	r1, [pc, #252]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	025b      	lsls	r3, r3, #9
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	061b      	lsls	r3, r3, #24
 8008f7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f80:	4931      	ldr	r1, [pc, #196]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f86:	4b30      	ldr	r3, [pc, #192]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	492d      	ldr	r1, [pc, #180]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f98:	4b2b      	ldr	r3, [pc, #172]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	f023 0220 	bic.w	r2, r3, #32
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	4928      	ldr	r1, [pc, #160]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008faa:	4b27      	ldr	r3, [pc, #156]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	4a26      	ldr	r2, [pc, #152]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fb6:	4b24      	ldr	r3, [pc, #144]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <RCCEx_PLL2_Config+0x160>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	69d2      	ldr	r2, [r2, #28]
 8008fc2:	00d2      	lsls	r2, r2, #3
 8008fc4:	4920      	ldr	r1, [pc, #128]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fca:	4b1f      	ldr	r3, [pc, #124]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a1e      	ldr	r2, [pc, #120]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	f043 0310 	orr.w	r3, r3, #16
 8008fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	4a19      	ldr	r2, [pc, #100]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fe8:	e00f      	b.n	800900a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ff0:	4b15      	ldr	r3, [pc, #84]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8008ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ffc:	e005      	b.n	800900a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ffe:	4b12      	ldr	r3, [pc, #72]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	4a11      	ldr	r2, [pc, #68]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8009004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009008:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800900a:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a0e      	ldr	r2, [pc, #56]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8009010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009016:	f7fa f9e7 	bl	80033e8 <HAL_GetTick>
 800901a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800901c:	e008      	b.n	8009030 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800901e:	f7fa f9e3 	bl	80033e8 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e006      	b.n	800903e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009030:	4b05      	ldr	r3, [pc, #20]	; (8009048 <RCCEx_PLL2_Config+0x15c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0f0      	beq.n	800901e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	58024400 	.word	0x58024400
 800904c:	ffff0007 	.word	0xffff0007

08009050 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800905e:	4b53      	ldr	r3, [pc, #332]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d101      	bne.n	800906e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e099      	b.n	80091a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800906e:	4b4f      	ldr	r3, [pc, #316]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a4e      	ldr	r2, [pc, #312]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907a:	f7fa f9b5 	bl	80033e8 <HAL_GetTick>
 800907e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009080:	e008      	b.n	8009094 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009082:	f7fa f9b1 	bl	80033e8 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e086      	b.n	80091a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009094:	4b45      	ldr	r3, [pc, #276]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f0      	bne.n	8009082 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090a0:	4b42      	ldr	r3, [pc, #264]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	051b      	lsls	r3, r3, #20
 80090ae:	493f      	ldr	r1, [pc, #252]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	628b      	str	r3, [r1, #40]	; 0x28
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	025b      	lsls	r3, r3, #9
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	041b      	lsls	r3, r3, #16
 80090d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	3b01      	subs	r3, #1
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090e4:	4931      	ldr	r1, [pc, #196]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090ea:	4b30      	ldr	r3, [pc, #192]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	492d      	ldr	r1, [pc, #180]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090fc:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	4928      	ldr	r1, [pc, #160]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 800910a:	4313      	orrs	r3, r2
 800910c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800910e:	4b27      	ldr	r3, [pc, #156]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	4a26      	ldr	r2, [pc, #152]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 800911c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800911e:	4b24      	ldr	r3, [pc, #144]	; (80091b0 <RCCEx_PLL3_Config+0x160>)
 8009120:	4013      	ands	r3, r2
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	69d2      	ldr	r2, [r2, #28]
 8009126:	00d2      	lsls	r2, r2, #3
 8009128:	4920      	ldr	r1, [pc, #128]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800912e:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	4a1e      	ldr	r2, [pc, #120]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009140:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a19      	ldr	r2, [pc, #100]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800914a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800914c:	e00f      	b.n	800916e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009154:	4b15      	ldr	r3, [pc, #84]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a14      	ldr	r2, [pc, #80]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 800915a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800915e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009160:	e005      	b.n	800916e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009162:	4b12      	ldr	r3, [pc, #72]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4a11      	ldr	r2, [pc, #68]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800916c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800916e:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a0e      	ldr	r2, [pc, #56]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917a:	f7fa f935 	bl	80033e8 <HAL_GetTick>
 800917e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009180:	e008      	b.n	8009194 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009182:	f7fa f931 	bl	80033e8 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e006      	b.n	80091a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <RCCEx_PLL3_Config+0x15c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	58024400 	.word	0x58024400
 80091b0:	ffff0007 	.word	0xffff0007

080091b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e075      	b.n	80092b2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d105      	bne.n	80091de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7f8 fa6b 	bl	80016b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f868 	bl	80092bc <HAL_SD_InitCard>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e05d      	b.n	80092b2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fda7 	bl	8009d50 <HAL_SD_GetCardStatus>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e052      	b.n	80092b2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800920c:	7e3b      	ldrb	r3, [r7, #24]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009212:	7e7b      	ldrb	r3, [r7, #25]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10a      	bne.n	8009236 <HAL_SD_Init+0x82>
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <HAL_SD_Init+0x78>
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009232:	659a      	str	r2, [r3, #88]	; 0x58
 8009234:	e00b      	b.n	800924e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	2b01      	cmp	r3, #1
 800923c:	d104      	bne.n	8009248 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009244:	659a      	str	r2, [r3, #88]	; 0x58
 8009246:	e002      	b.n	800924e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fe65 	bl	8009f24 <HAL_SD_ConfigWideBusOperation>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e026      	b.n	80092b2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009264:	f7fa f8c0 	bl	80033e8 <HAL_GetTick>
 8009268:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800926a:	e011      	b.n	8009290 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800926c:	f7fa f8bc 	bl	80033e8 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d109      	bne.n	8009290 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009282:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e010      	b.n	80092b2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 ff59 	bl	800a148 <HAL_SD_GetCardState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b04      	cmp	r3, #4
 800929a:	d1e7      	bne.n	800926c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3728      	adds	r7, #40	; 0x28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b08d      	sub	sp, #52	; 0x34
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80092d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80092dc:	f7fe fdd2 	bl	8007e84 <HAL_RCCEx_GetPeriphCLKFreq>
 80092e0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80092f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e06a      	b.n	80093d2 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <HAL_SD_InitCard+0x120>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681c      	ldr	r4, [r3, #0]
 800930e:	466a      	mov	r2, sp
 8009310:	f107 0318 	add.w	r3, r7, #24
 8009314:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009318:	e882 0003 	stmia.w	r2, {r0, r1}
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009322:	4620      	mov	r0, r4
 8009324:	f003 fe1c 	bl	800cf60 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f003 fe5f 	bl	800cff0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800933e:	4a28      	ldr	r2, [pc, #160]	; (80093e0 <HAL_SD_InitCard+0x124>)
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	fbb2 f3f3 	udiv	r3, r2, r3
 8009346:	3301      	adds	r3, #1
 8009348:	4618      	mov	r0, r3
 800934a:	f7fa f859 	bl	8003400 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 ffe8 	bl	800a324 <SD_PowerON>
 8009354:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e02e      	b.n	80093d2 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 ff07 	bl	800a188 <SD_InitCard>
 800937a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	431a      	orrs	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e01b      	b.n	80093d2 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093a2:	4618      	mov	r0, r3
 80093a4:	f003 feba 	bl	800d11c <SDMMC_CmdBlockLength>
 80093a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00f      	beq.n	80093d0 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <HAL_SD_InitCard+0x128>)
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e000      	b.n	80093d2 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	372c      	adds	r7, #44	; 0x2c
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd90      	pop	{r4, r7, pc}
 80093da:	bf00      	nop
 80093dc:	014f8b59 	.word	0x014f8b59
 80093e0:	00012110 	.word	0x00012110
 80093e4:	1fe00fff 	.word	0x1fe00fff

080093e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	; 0x30
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d107      	bne.n	8009410 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e08d      	b.n	800952c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	f040 8086 	bne.w	800952a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	441a      	add	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800942e:	429a      	cmp	r2, r3
 8009430:	d907      	bls.n	8009442 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e074      	b.n	800952c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2203      	movs	r2, #3
 8009446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	025a      	lsls	r2, r3, #9
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	2b01      	cmp	r3, #1
 8009466:	d002      	beq.n	800946e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	025b      	lsls	r3, r3, #9
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800946e:	f04f 33ff 	mov.w	r3, #4294967295
 8009472:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	025b      	lsls	r3, r3, #9
 8009478:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800947a:	2390      	movs	r3, #144	; 0x90
 800947c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800947e:	2302      	movs	r3, #2
 8009480:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009482:	2300      	movs	r3, #0
 8009484:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009486:	2300      	movs	r3, #0
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f107 0210 	add.w	r2, r7, #16
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f003 fe15 	bl	800d0c4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2201      	movs	r2, #1
 80094b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d90a      	bls.n	80094d6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2282      	movs	r2, #130	; 0x82
 80094c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094cc:	4618      	mov	r0, r3
 80094ce:	f003 fe6b 	bl	800d1a8 <SDMMC_CmdReadMultiBlock>
 80094d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80094d4:	e009      	b.n	80094ea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2281      	movs	r2, #129	; 0x81
 80094da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094e2:	4618      	mov	r0, r3
 80094e4:	f003 fe3d 	bl	800d162 <SDMMC_CmdReadSingleBlock>
 80094e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d012      	beq.n	8009516 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a0f      	ldr	r2, [pc, #60]	; (8009534 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	431a      	orrs	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e00a      	b.n	800952c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009524:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	e000      	b.n	800952c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800952a:	2302      	movs	r3, #2
  }
}
 800952c:	4618      	mov	r0, r3
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	1fe00fff 	.word	0x1fe00fff

08009538 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08c      	sub	sp, #48	; 0x30
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d107      	bne.n	8009560 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009554:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e08d      	b.n	800967c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	f040 8086 	bne.w	800967a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	441a      	add	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957e:	429a      	cmp	r2, r3
 8009580:	d907      	bls.n	8009592 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009586:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e074      	b.n	800967c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2203      	movs	r2, #3
 8009596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	025a      	lsls	r2, r3, #9
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d002      	beq.n	80095be <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	025b      	lsls	r3, r3, #9
 80095bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095be:	f04f 33ff 	mov.w	r3, #4294967295
 80095c2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	025b      	lsls	r3, r3, #9
 80095c8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095ca:	2390      	movs	r3, #144	; 0x90
 80095cc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f107 0210 	add.w	r2, r7, #16
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f003 fd6d 	bl	800d0c4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095f8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d90a      	bls.n	8009626 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	22a0      	movs	r2, #160	; 0xa0
 8009614:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800961c:	4618      	mov	r0, r3
 800961e:	f003 fe09 	bl	800d234 <SDMMC_CmdWriteMultiBlock>
 8009622:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009624:	e009      	b.n	800963a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2290      	movs	r2, #144	; 0x90
 800962a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009632:	4618      	mov	r0, r3
 8009634:	f003 fddb 	bl	800d1ee <SDMMC_CmdWriteSingleBlock>
 8009638:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d012      	beq.n	8009666 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a0f      	ldr	r2, [pc, #60]	; (8009684 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	431a      	orrs	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e00a      	b.n	800967c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	e000      	b.n	800967c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800967a:	2302      	movs	r3, #2
  }
}
 800967c:	4618      	mov	r0, r3
 800967e:	3730      	adds	r7, #48	; 0x30
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	1fe00fff 	.word	0x1fe00fff

08009688 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d008      	beq.n	80096b6 <HAL_SD_IRQHandler+0x2e>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f924 	bl	800a8fc <SD_Read_IT>
 80096b4:	e19a      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 80ac 	beq.w	800981e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	4b9d      	ldr	r3, [pc, #628]	; (8009950 <HAL_SD_IRQHandler+0x2c8>)
 80096dc:	400b      	ands	r3, r1
 80096de:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80096ee:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096fe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d038      	beq.n	800977c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <HAL_SD_IRQHandler+0x96>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f003 fdaa 	bl	800d27c <SDMMC_CmdStopTransfer>
 8009728:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f959 	bl	80099f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a83      	ldr	r2, [pc, #524]	; (8009954 <HAL_SD_IRQHandler+0x2cc>)
 8009748:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d104      	bne.n	800976c <HAL_SD_IRQHandler+0xe4>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f004 fa5d 	bl	800dc2c <HAL_SD_RxCpltCallback>
 8009772:	e13b      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f004 fa4f 	bl	800dc18 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800977a:	e137      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 8132 	beq.w	80099ec <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2200      	movs	r2, #0
 800978e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <HAL_SD_IRQHandler+0x12c>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d011      	beq.n	80097d8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f003 fd5f 	bl	800d27c <SDMMC_CmdStopTransfer>
 80097be:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f90e 	bl	80099f4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <HAL_SD_IRQHandler+0x172>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f004 fa0c 	bl	800dc18 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <HAL_SD_IRQHandler+0x18e>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80eb 	beq.w	80099ec <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f004 fa08 	bl	800dc2c <HAL_SD_RxCpltCallback>
}
 800981c:	e0e6      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d008      	beq.n	800983e <HAL_SD_IRQHandler+0x1b6>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 f8a6 	bl	800a988 <SD_Write_IT>
 800983c:	e0d6      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80a2 	beq.w	8009992 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009860:	f043 0202 	orr.w	r2, r3, #2
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987a:	f043 0208 	orr.w	r2, r3, #8
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009888:	f003 0320 	and.w	r3, r3, #32
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009894:	f043 0220 	orr.w	r2, r3, #32
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	f043 0210 	orr.w	r2, r3, #16
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a26      	ldr	r2, [pc, #152]	; (8009954 <HAL_SD_IRQHandler+0x2cc>)
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80098cc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098dc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098fc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f003 fcba 	bl	800d27c <SDMMC_CmdStopTransfer>
 8009908:	4602      	mov	r2, r0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009922:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00f      	beq.n	8009958 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f854 	bl	80099f4 <HAL_SD_ErrorCallback>
}
 800994c:	e04e      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
 800994e:	bf00      	nop
 8009950:	ffff3ec5 	.word	0xffff3ec5
 8009954:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d044      	beq.n	80099ec <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	2b00      	cmp	r3, #0
 8009968:	d040      	beq.n	80099ec <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009978:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f832 	bl	80099f4 <HAL_SD_ErrorCallback>
}
 8009990:	e02c      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d025      	beq.n	80099ec <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10c      	bne.n	80099d2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 f848 	bl	800aa58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80099c8:	e010      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 f830 	bl	800aa30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80099d0:	e00c      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 f831 	bl	800aa44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80099e2:	e003      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 f819 	bl	800aa1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80099ea:	e7ff      	b.n	80099ec <HAL_SD_IRQHandler+0x364>
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a16:	0f9b      	lsrs	r3, r3, #30
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a22:	0e9b      	lsrs	r3, r3, #26
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a34:	0e1b      	lsrs	r3, r3, #24
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a46:	0c1b      	lsrs	r3, r3, #16
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	0a1b      	lsrs	r3, r3, #8
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	0d1b      	lsrs	r3, r3, #20
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a74:	0c1b      	lsrs	r3, r3, #16
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 030f 	and.w	r3, r3, #15
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a86:	0bdb      	lsrs	r3, r3, #15
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a98:	0b9b      	lsrs	r3, r3, #14
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aaa:	0b5b      	lsrs	r3, r3, #13
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abc:	0b1b      	lsrs	r3, r3, #12
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d163      	bne.n	8009ba0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009adc:	009a      	lsls	r2, r3, #2
 8009ade:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009ae8:	0f92      	lsrs	r2, r2, #30
 8009aea:	431a      	orrs	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009af4:	0edb      	lsrs	r3, r3, #27
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b06:	0e1b      	lsrs	r3, r3, #24
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b18:	0d5b      	lsrs	r3, r3, #21
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2a:	0c9b      	lsrs	r3, r3, #18
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b3c:	0bdb      	lsrs	r3, r3, #15
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	7e1b      	ldrb	r3, [r3, #24]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	3302      	adds	r3, #2
 8009b60:	2201      	movs	r2, #1
 8009b62:	fa02 f303 	lsl.w	r3, r2, r3
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b6a:	fb02 f203 	mul.w	r2, r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	7a1b      	ldrb	r3, [r3, #8]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	409a      	lsls	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009b8c:	0a52      	lsrs	r2, r2, #9
 8009b8e:	fb02 f203 	mul.w	r2, r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b9c:	655a      	str	r2, [r3, #84]	; 0x54
 8009b9e:	e031      	b.n	8009c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d11d      	bne.n	8009be4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bac:	041b      	lsls	r3, r3, #16
 8009bae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	029a      	lsls	r2, r3, #10
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	655a      	str	r2, [r3, #84]	; 0x54
 8009be2:	e00f      	b.n	8009c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a58      	ldr	r2, [pc, #352]	; (8009d4c <HAL_SD_GetCardCSD+0x344>)
 8009bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e09d      	b.n	8009d40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c08:	0b9b      	lsrs	r3, r3, #14
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c1a:	09db      	lsrs	r3, r3, #7
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c3c:	0fdb      	lsrs	r3, r3, #31
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c48:	0f5b      	lsrs	r3, r3, #29
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c5a:	0e9b      	lsrs	r3, r3, #26
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f003 0307 	and.w	r3, r3, #7
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6c:	0d9b      	lsrs	r3, r3, #22
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c7e:	0d5b      	lsrs	r3, r3, #21
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c9a:	0c1b      	lsrs	r3, r3, #16
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cae:	0bdb      	lsrs	r3, r3, #15
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cc2:	0b9b      	lsrs	r3, r3, #14
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd6:	0b5b      	lsrs	r3, r3, #13
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cea:	0b1b      	lsrs	r3, r3, #12
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cfe:	0a9b      	lsrs	r3, r3, #10
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	1fe00fff 	.word	0x1fe00fff

08009d50 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b094      	sub	sp, #80	; 0x50
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d101      	bne.n	8009d70 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0a7      	b.n	8009ec0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009d70:	f107 0308 	add.w	r3, r7, #8
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb62 	bl	800a440 <SD_SendSDStatus>
 8009d7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d011      	beq.n	8009da8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a4f      	ldr	r2, [pc, #316]	; (8009ec8 <HAL_SD_GetCardStatus+0x178>)
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d92:	431a      	orrs	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009da6:	e070      	b.n	8009e8a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	099b      	lsrs	r3, r3, #6
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	095b      	lsrs	r3, r3, #5
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	0e1b      	lsrs	r3, r3, #24
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	061a      	lsls	r2, r3, #24
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	021b      	lsls	r3, r3, #8
 8009dea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	0a1b      	lsrs	r3, r3, #8
 8009df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009df8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	0e1b      	lsrs	r3, r3, #24
 8009dfe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	0d1b      	lsrs	r3, r3, #20
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	0c1b      	lsrs	r3, r3, #16
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	0a9b      	lsrs	r3, r3, #10
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	0a1b      	lsrs	r3, r3, #8
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	091b      	lsrs	r3, r3, #4
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 030f 	and.w	r3, r3, #15
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e92:	4618      	mov	r0, r3
 8009e94:	f003 f942 	bl	800d11c <SDMMC_CmdBlockLength>
 8009e98:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00d      	beq.n	8009ebc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <HAL_SD_GetCardStatus+0x178>)
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eac:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009ebc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3750      	adds	r7, #80	; 0x50
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	1fe00fff 	.word	0x1fe00fff

08009ecc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b08d      	sub	sp, #52	; 0x34
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d02e      	beq.n	8009fa6 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f4e:	d106      	bne.n	8009f5e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8009f5c:	e029      	b.n	8009fb2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f64:	d10a      	bne.n	8009f7c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fb62 	bl	800a630 <SD_WideBus_Enable>
 8009f6c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	431a      	orrs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	635a      	str	r2, [r3, #52]	; 0x34
 8009f7a:	e01a      	b.n	8009fb2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fb9f 	bl	800a6c6 <SD_WideBus_Disable>
 8009f88:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	635a      	str	r2, [r3, #52]	; 0x34
 8009f96:	e00c      	b.n	8009fb2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8009fa4:	e005      	b.n	8009fb2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009faa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a5e      	ldr	r2, [pc, #376]	; (800a138 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009fc0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fc8:	e094      	b.n	800a0f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009fca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009fce:	f7fd ff59 	bl	8007e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8009fd2:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 8083 	beq.w	800a0e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695a      	ldr	r2, [r3, #20]
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	4950      	ldr	r1, [pc, #320]	; (800a13c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009ffa:	fba1 1303 	umull	r1, r3, r1, r3
 8009ffe:	0e1b      	lsrs	r3, r3, #24
 800a000:	429a      	cmp	r2, r3
 800a002:	d303      	bcc.n	800a00c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	e05a      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a014:	d103      	bne.n	800a01e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	e051      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a026:	d126      	bne.n	800a076 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10e      	bne.n	800a04e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	4a43      	ldr	r2, [pc, #268]	; (800a140 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d906      	bls.n	800a046 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	4a40      	ldr	r2, [pc, #256]	; (800a13c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a03c:	fba2 2303 	umull	r2, r3, r2, r3
 800a040:	0e5b      	lsrs	r3, r3, #25
 800a042:	61bb      	str	r3, [r7, #24]
 800a044:	e03d      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	e039      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	6a3a      	ldr	r2, [r7, #32]
 800a056:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05a:	4a39      	ldr	r2, [pc, #228]	; (800a140 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d906      	bls.n	800a06e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	4a36      	ldr	r2, [pc, #216]	; (800a13c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a064:	fba2 2303 	umull	r2, r3, r2, r3
 800a068:	0e5b      	lsrs	r3, r3, #25
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	e029      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	61bb      	str	r3, [r7, #24]
 800a074:	e025      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10e      	bne.n	800a09c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	4a30      	ldr	r2, [pc, #192]	; (800a144 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d906      	bls.n	800a094 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	4a2c      	ldr	r2, [pc, #176]	; (800a13c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a08a:	fba2 2303 	umull	r2, r3, r2, r3
 800a08e:	0e1b      	lsrs	r3, r3, #24
 800a090:	61bb      	str	r3, [r7, #24]
 800a092:	e016      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e012      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	6a3a      	ldr	r2, [r7, #32]
 800a0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a8:	4a26      	ldr	r2, [pc, #152]	; (800a144 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d906      	bls.n	800a0bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	4a22      	ldr	r2, [pc, #136]	; (800a13c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	0e1b      	lsrs	r3, r3, #24
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	e002      	b.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800a0d4:	f107 0308 	add.w	r3, r7, #8
 800a0d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f002 ff40 	bl	800cf60 <SDMMC_Init>
 800a0e0:	e008      	b.n	800a0f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f003 f80d 	bl	800d11c <SDMMC_CmdBlockLength>
 800a102:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00c      	beq.n	800a124 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	431a      	orrs	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a130:	4618      	mov	r0, r3
 800a132:	372c      	adds	r7, #44	; 0x2c
 800a134:	46bd      	mov	sp, r7
 800a136:	bd90      	pop	{r4, r7, pc}
 800a138:	1fe00fff 	.word	0x1fe00fff
 800a13c:	55e63b89 	.word	0x55e63b89
 800a140:	02faf080 	.word	0x02faf080
 800a144:	017d7840 	.word	0x017d7840

0800a148 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa40 	bl	800a5e0 <SD_SendStatus>
 800a160:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	431a      	orrs	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	0a5b      	lsrs	r3, r3, #9
 800a178:	f003 030f 	and.w	r3, r3, #15
 800a17c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a17e:	693b      	ldr	r3, [r7, #16]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b090      	sub	sp, #64	; 0x40
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a194:	f7f9 f928 	bl	80033e8 <HAL_GetTick>
 800a198:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f002 ff37 	bl	800d012 <SDMMC_GetPowerState>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a1ae:	e0b5      	b.n	800a31c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d02e      	beq.n	800a216 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f003 f982 	bl	800d4c6 <SDMMC_CmdSendCID>
 800a1c2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <SD_InitCard+0x46>
    {
      return errorstate;
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	e0a6      	b.n	800a31c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 ff62 	bl	800d09e <SDMMC_GetResponse>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f002 ff59 	bl	800d09e <SDMMC_GetResponse>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2108      	movs	r1, #8
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f002 ff50 	bl	800d09e <SDMMC_GetResponse>
 800a1fe:	4602      	mov	r2, r0
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	210c      	movs	r1, #12
 800a20a:	4618      	mov	r0, r3
 800a20c:	f002 ff47 	bl	800d09e <SDMMC_GetResponse>
 800a210:	4602      	mov	r2, r0
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d01d      	beq.n	800a25a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a21e:	e019      	b.n	800a254 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f107 020a 	add.w	r2, r7, #10
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f003 f98a 	bl	800d544 <SDMMC_CmdSetRelAdd>
 800a230:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <SD_InitCard+0xb4>
      {
        return errorstate;
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	e06f      	b.n	800a31c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a23c:	f7f9 f8d4 	bl	80033e8 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	f241 3287 	movw	r2, #4999	; 0x1387
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d902      	bls.n	800a254 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a24e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a252:	e063      	b.n	800a31c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a254:	897b      	ldrh	r3, [r7, #10]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0e2      	beq.n	800a220 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d036      	beq.n	800a2d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a262:	897b      	ldrh	r3, [r7, #10]
 800a264:	461a      	mov	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f003 f944 	bl	800d504 <SDMMC_CmdSendCSD>
 800a27c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <SD_InitCard+0x100>
    {
      return errorstate;
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	e049      	b.n	800a31c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f002 ff05 	bl	800d09e <SDMMC_GetResponse>
 800a294:	4602      	mov	r2, r0
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2104      	movs	r1, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 fefc 	bl	800d09e <SDMMC_GetResponse>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2108      	movs	r1, #8
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f002 fef3 	bl	800d09e <SDMMC_GetResponse>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	210c      	movs	r1, #12
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f002 feea 	bl	800d09e <SDMMC_GetResponse>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2104      	movs	r1, #4
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f002 fee1 	bl	800d09e <SDMMC_GetResponse>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	0d1a      	lsrs	r2, r3, #20
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fb8c 	bl	8009a08 <HAL_SD_GetCardCSD>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2fa:	e00f      	b.n	800a31c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f002 fff3 	bl	800d2f4 <SDMMC_CmdSelDesel>
 800a30e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <SD_InitCard+0x192>
  {
    return errorstate;
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	e000      	b.n	800a31c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3740      	adds	r7, #64	; 0x40
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f002 fffc 	bl	800d33a <SDMMC_CmdGoIdleState>
 800a342:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	e072      	b.n	800a434 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f003 f80f 	bl	800d376 <SDMMC_CmdOperCond>
 800a358:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a360:	d10d      	bne.n	800a37e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f002 ffe4 	bl	800d33a <SDMMC_CmdGoIdleState>
 800a372:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <SD_PowerON+0x60>
    {
      return errorstate;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	e05a      	b.n	800a434 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d137      	bne.n	800a3fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2100      	movs	r1, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f003 f80f 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a398:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d02d      	beq.n	800a3fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3a4:	e046      	b.n	800a434 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f003 f802 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a3b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <SD_PowerON+0x9a>
    {
      return errorstate;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	e03a      	b.n	800a434 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	491e      	ldr	r1, [pc, #120]	; (800a43c <SD_PowerON+0x118>)
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f003 f819 	bl	800d3fc <SDMMC_CmdAppOperCommand>
 800a3ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3d6:	e02d      	b.n	800a434 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f002 fe5d 	bl	800d09e <SDMMC_GetResponse>
 800a3e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	0fdb      	lsrs	r3, r3, #31
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <SD_PowerON+0xce>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <SD_PowerON+0xd0>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]

    count++;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a402:	4293      	cmp	r3, r2
 800a404:	d802      	bhi.n	800a40c <SD_PowerON+0xe8>
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0cc      	beq.n	800a3a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a412:	4293      	cmp	r3, r2
 800a414:	d902      	bls.n	800a41c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a41a:	e00b      	b.n	800a434 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	c1100000 	.word	0xc1100000

0800a440 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	; 0x30
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a44a:	f7f8 ffcd 	bl	80033e8 <HAL_GetTick>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f002 fe1f 	bl	800d09e <SDMMC_GetResponse>
 800a460:	4603      	mov	r3, r0
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a46a:	d102      	bne.n	800a472 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a46c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a470:	e0b0      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2140      	movs	r1, #64	; 0x40
 800a478:	4618      	mov	r0, r3
 800a47a:	f002 fe4f 	bl	800d11c <SDMMC_CmdBlockLength>
 800a47e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	e0a0      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49a:	041b      	lsls	r3, r3, #16
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f002 ff89 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a4a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	e08d      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a4be:	2340      	movs	r3, #64	; 0x40
 800a4c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a4c2:	2360      	movs	r3, #96	; 0x60
 800a4c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f107 0208 	add.w	r2, r7, #8
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f002 fdf1 	bl	800d0c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f003 f871 	bl	800d5ce <SDMMC_CmdStatusRegister>
 800a4ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d02b      	beq.n	800a54c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	e069      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a50e:	2300      	movs	r3, #0
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a512:	e00d      	b.n	800a530 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f002 fd4b 	bl	800cfb4 <SDMMC_ReadFIFO>
 800a51e:	4602      	mov	r2, r0
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	601a      	str	r2, [r3, #0]
        pData++;
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	3304      	adds	r3, #4
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	3301      	adds	r3, #1
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	2b07      	cmp	r3, #7
 800a534:	d9ee      	bls.n	800a514 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a536:	f7f8 ff57 	bl	80033e8 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d102      	bne.n	800a54c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a546:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a54a:	e043      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0d2      	beq.n	800a500 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a560:	f003 0308 	and.w	r3, r3, #8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a568:	2308      	movs	r3, #8
 800a56a:	e033      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a57a:	2302      	movs	r3, #2
 800a57c:	e02a      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d017      	beq.n	800a5bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a58c:	2320      	movs	r3, #32
 800a58e:	e021      	b.n	800a5d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4618      	mov	r0, r3
 800a596:	f002 fd0d 	bl	800cfb4 <SDMMC_ReadFIFO>
 800a59a:	4602      	mov	r2, r0
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	601a      	str	r2, [r3, #0]
    pData++;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a5a6:	f7f8 ff1f 	bl	80033e8 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b4:	d102      	bne.n	800a5bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a5b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ba:	e00b      	b.n	800a5d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e2      	bne.n	800a590 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a03      	ldr	r2, [pc, #12]	; (800a5dc <SD_SendSDStatus+0x19c>)
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3730      	adds	r7, #48	; 0x30
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	18000f3a 	.word	0x18000f3a

0800a5e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a5f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5f4:	e018      	b.n	800a628 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fe:	041b      	lsls	r3, r3, #16
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f002 ffc0 	bl	800d588 <SDMMC_CmdSendStatus>
 800a608:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	e009      	b.n	800a628 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f002 fd3f 	bl	800d09e <SDMMC_GetResponse>
 800a620:	4602      	mov	r2, r0
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	2300      	movs	r3, #0
 800a63e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2100      	movs	r1, #0
 800a646:	4618      	mov	r0, r3
 800a648:	f002 fd29 	bl	800d09e <SDMMC_GetResponse>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a656:	d102      	bne.n	800a65e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a65c:	e02f      	b.n	800a6be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a65e:	f107 030c 	add.w	r3, r7, #12
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f879 	bl	800a75c <SD_FindSCR>
 800a66a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	e023      	b.n	800a6be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01c      	beq.n	800a6ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a688:	041b      	lsls	r3, r3, #16
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f002 fe92 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a692:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	e00f      	b.n	800a6be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f002 fec9 	bl	800d43c <SDMMC_CmdBusWidth>
 800a6aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	e003      	b.n	800a6be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e001      	b.n	800a6be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b086      	sub	sp, #24
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2100      	movs	r1, #0
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f002 fcde 	bl	800d09e <SDMMC_GetResponse>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6ec:	d102      	bne.n	800a6f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a6ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6f2:	e02f      	b.n	800a754 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f82e 	bl	800a75c <SD_FindSCR>
 800a700:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	e023      	b.n	800a754 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d01c      	beq.n	800a750 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f002 fe47 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a728:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	e00f      	b.n	800a754 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 fe7e 	bl	800d43c <SDMMC_CmdBusWidth>
 800a740:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	e003      	b.n	800a754 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e001      	b.n	800a754 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a754:	4618      	mov	r0, r3
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a766:	f7f8 fe3f 	bl	80033e8 <HAL_GetTick>
 800a76a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a770:	2300      	movs	r3, #0
 800a772:	60bb      	str	r3, [r7, #8]
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2108      	movs	r1, #8
 800a782:	4618      	mov	r0, r3
 800a784:	f002 fcca 	bl	800d11c <SDMMC_CmdBlockLength>
 800a788:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	e0ad      	b.n	800a8f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79c:	041b      	lsls	r3, r3, #16
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f002 fe08 	bl	800d3b6 <SDMMC_CmdAppCommand>
 800a7a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	e09e      	b.n	800a8f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a7b8:	2308      	movs	r3, #8
 800a7ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a7bc:	2330      	movs	r3, #48	; 0x30
 800a7be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f107 0210 	add.w	r2, r7, #16
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f002 fc74 	bl	800d0c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f002 fe4e 	bl	800d482 <SDMMC_CmdSendSCR>
 800a7e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d027      	beq.n	800a83e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	e07e      	b.n	800a8f0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d113      	bne.n	800a828 <SD_FindSCR+0xcc>
 800a800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a802:	2b00      	cmp	r3, #0
 800a804:	d110      	bne.n	800a828 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 fbd2 	bl	800cfb4 <SDMMC_ReadFIFO>
 800a810:	4603      	mov	r3, r0
 800a812:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f002 fbcb 	bl	800cfb4 <SDMMC_ReadFIFO>
 800a81e:	4603      	mov	r3, r0
 800a820:	60fb      	str	r3, [r7, #12]
      index++;
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	3301      	adds	r3, #1
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a828:	f7f8 fdde 	bl	80033e8 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a836:	d102      	bne.n	800a83e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a83c:	e058      	b.n	800a8f0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a844:	f240 532a 	movw	r3, #1322	; 0x52a
 800a848:	4013      	ands	r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0d1      	beq.n	800a7f2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a864:	2308      	movs	r3, #8
 800a866:	e043      	b.n	800a8f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2202      	movs	r2, #2
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a87e:	2302      	movs	r3, #2
 800a880:	e036      	b.n	800a8f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2220      	movs	r2, #32
 800a896:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a898:	2320      	movs	r3, #32
 800a89a:	e029      	b.n	800a8f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a15      	ldr	r2, [pc, #84]	; (800a8f8 <SD_FindSCR+0x19c>)
 800a8a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	061a      	lsls	r2, r3, #24
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	0a1b      	lsrs	r3, r3, #8
 800a8b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	0e1b      	lsrs	r3, r3, #24
 800a8c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	601a      	str	r2, [r3, #0]
    scr++;
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	061a      	lsls	r2, r3, #24
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	0a1b      	lsrs	r3, r3, #8
 800a8de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a8e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	0e1b      	lsrs	r3, r3, #24
 800a8e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3738      	adds	r7, #56	; 0x38
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	18000f3a 	.word	0x18000f3a

0800a8fc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90e:	2b1f      	cmp	r3, #31
 800a910:	d936      	bls.n	800a980 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	e027      	b.n	800a968 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f002 fb49 	bl	800cfb4 <SDMMC_ReadFIFO>
 800a922:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	b2da      	uxtb	r2, r3
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	3301      	adds	r3, #1
 800a930:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	0a1b      	lsrs	r3, r3, #8
 800a936:	b2da      	uxtb	r2, r3
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3301      	adds	r3, #1
 800a940:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	0c1b      	lsrs	r3, r3, #16
 800a946:	b2da      	uxtb	r2, r3
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	3301      	adds	r3, #1
 800a950:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	0e1b      	lsrs	r3, r3, #24
 800a956:	b2da      	uxtb	r2, r3
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	3301      	adds	r3, #1
 800a960:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3301      	adds	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	d9d4      	bls.n	800a918 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	f1a3 0220 	sub.w	r2, r3, #32
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a980:	bf00      	nop
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	2b1f      	cmp	r3, #31
 800a99c:	d93a      	bls.n	800aa14 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	e02b      	b.n	800a9fc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	021a      	lsls	r2, r3, #8
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	041a      	lsls	r2, r3, #16
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	061a      	lsls	r2, r3, #24
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f107 020c 	add.w	r2, r7, #12
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f002 faec 	bl	800cfce <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	617b      	str	r3, [r7, #20]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b07      	cmp	r3, #7
 800aa00:	d9d0      	bls.n	800a9a4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f1a3 0220 	sub.w	r2, r3, #32
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	621a      	str	r2, [r3, #32]
  }
}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e049      	b.n	800ab12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f841 	bl	800ab1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	f000 fc96 	bl	800b3dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab22:	bf00      	nop
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d001      	beq.n	800ab48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e05e      	b.n	800ac06 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f042 0201 	orr.w	r2, r2, #1
 800ab5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a2b      	ldr	r2, [pc, #172]	; (800ac14 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d02c      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab72:	d027      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a27      	ldr	r2, [pc, #156]	; (800ac18 <HAL_TIM_Base_Start_IT+0xe8>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d022      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a26      	ldr	r2, [pc, #152]	; (800ac1c <HAL_TIM_Base_Start_IT+0xec>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d01d      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a24      	ldr	r2, [pc, #144]	; (800ac20 <HAL_TIM_Base_Start_IT+0xf0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d018      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a23      	ldr	r2, [pc, #140]	; (800ac24 <HAL_TIM_Base_Start_IT+0xf4>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d013      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a21      	ldr	r2, [pc, #132]	; (800ac28 <HAL_TIM_Base_Start_IT+0xf8>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d00e      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a20      	ldr	r2, [pc, #128]	; (800ac2c <HAL_TIM_Base_Start_IT+0xfc>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d009      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <HAL_TIM_Base_Start_IT+0x100>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d004      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x94>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <HAL_TIM_Base_Start_IT+0x104>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d115      	bne.n	800abf0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	4b1b      	ldr	r3, [pc, #108]	; (800ac38 <HAL_TIM_Base_Start_IT+0x108>)
 800abcc:	4013      	ands	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b06      	cmp	r3, #6
 800abd4:	d015      	beq.n	800ac02 <HAL_TIM_Base_Start_IT+0xd2>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abdc:	d011      	beq.n	800ac02 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0201 	orr.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abee:	e008      	b.n	800ac02 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f042 0201 	orr.w	r2, r2, #1
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e000      	b.n	800ac04 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	40010000 	.word	0x40010000
 800ac18:	40000400 	.word	0x40000400
 800ac1c:	40000800 	.word	0x40000800
 800ac20:	40000c00 	.word	0x40000c00
 800ac24:	40010400 	.word	0x40010400
 800ac28:	40001800 	.word	0x40001800
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	4000e000 	.word	0x4000e000
 800ac34:	4000e400 	.word	0x4000e400
 800ac38:	00010007 	.word	0x00010007

0800ac3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e049      	b.n	800ace2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7f6 fd9a 	bl	800179c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f000 fbae 	bl	800b3dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d109      	bne.n	800ad10 <HAL_TIM_PWM_Start+0x24>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	bf14      	ite	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	2300      	moveq	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	e03c      	b.n	800ad8a <HAL_TIM_PWM_Start+0x9e>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d109      	bne.n	800ad2a <HAL_TIM_PWM_Start+0x3e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	bf14      	ite	ne
 800ad22:	2301      	movne	r3, #1
 800ad24:	2300      	moveq	r3, #0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	e02f      	b.n	800ad8a <HAL_TIM_PWM_Start+0x9e>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d109      	bne.n	800ad44 <HAL_TIM_PWM_Start+0x58>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	bf14      	ite	ne
 800ad3c:	2301      	movne	r3, #1
 800ad3e:	2300      	moveq	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	e022      	b.n	800ad8a <HAL_TIM_PWM_Start+0x9e>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b0c      	cmp	r3, #12
 800ad48:	d109      	bne.n	800ad5e <HAL_TIM_PWM_Start+0x72>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	bf14      	ite	ne
 800ad56:	2301      	movne	r3, #1
 800ad58:	2300      	moveq	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	e015      	b.n	800ad8a <HAL_TIM_PWM_Start+0x9e>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b10      	cmp	r3, #16
 800ad62:	d109      	bne.n	800ad78 <HAL_TIM_PWM_Start+0x8c>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	bf14      	ite	ne
 800ad70:	2301      	movne	r3, #1
 800ad72:	2300      	moveq	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	e008      	b.n	800ad8a <HAL_TIM_PWM_Start+0x9e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	bf14      	ite	ne
 800ad84:	2301      	movne	r3, #1
 800ad86:	2300      	moveq	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e0ab      	b.n	800aeea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <HAL_TIM_PWM_Start+0xb6>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ada0:	e023      	b.n	800adea <HAL_TIM_PWM_Start+0xfe>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d104      	bne.n	800adb2 <HAL_TIM_PWM_Start+0xc6>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adb0:	e01b      	b.n	800adea <HAL_TIM_PWM_Start+0xfe>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d104      	bne.n	800adc2 <HAL_TIM_PWM_Start+0xd6>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adc0:	e013      	b.n	800adea <HAL_TIM_PWM_Start+0xfe>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b0c      	cmp	r3, #12
 800adc6:	d104      	bne.n	800add2 <HAL_TIM_PWM_Start+0xe6>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800add0:	e00b      	b.n	800adea <HAL_TIM_PWM_Start+0xfe>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b10      	cmp	r3, #16
 800add6:	d104      	bne.n	800ade2 <HAL_TIM_PWM_Start+0xf6>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2202      	movs	r2, #2
 800addc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ade0:	e003      	b.n	800adea <HAL_TIM_PWM_Start+0xfe>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2202      	movs	r2, #2
 800ade6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2201      	movs	r2, #1
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fe6e 	bl	800bad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a3d      	ldr	r2, [pc, #244]	; (800aef4 <HAL_TIM_PWM_Start+0x208>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d013      	beq.n	800ae2a <HAL_TIM_PWM_Start+0x13e>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a3c      	ldr	r2, [pc, #240]	; (800aef8 <HAL_TIM_PWM_Start+0x20c>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00e      	beq.n	800ae2a <HAL_TIM_PWM_Start+0x13e>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a3a      	ldr	r2, [pc, #232]	; (800aefc <HAL_TIM_PWM_Start+0x210>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d009      	beq.n	800ae2a <HAL_TIM_PWM_Start+0x13e>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a39      	ldr	r2, [pc, #228]	; (800af00 <HAL_TIM_PWM_Start+0x214>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d004      	beq.n	800ae2a <HAL_TIM_PWM_Start+0x13e>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a37      	ldr	r2, [pc, #220]	; (800af04 <HAL_TIM_PWM_Start+0x218>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d101      	bne.n	800ae2e <HAL_TIM_PWM_Start+0x142>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <HAL_TIM_PWM_Start+0x144>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a2a      	ldr	r2, [pc, #168]	; (800aef4 <HAL_TIM_PWM_Start+0x208>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d02c      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae56:	d027      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a2a      	ldr	r2, [pc, #168]	; (800af08 <HAL_TIM_PWM_Start+0x21c>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d022      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a29      	ldr	r2, [pc, #164]	; (800af0c <HAL_TIM_PWM_Start+0x220>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d01d      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a27      	ldr	r2, [pc, #156]	; (800af10 <HAL_TIM_PWM_Start+0x224>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d018      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a1f      	ldr	r2, [pc, #124]	; (800aef8 <HAL_TIM_PWM_Start+0x20c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d013      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a23      	ldr	r2, [pc, #140]	; (800af14 <HAL_TIM_PWM_Start+0x228>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00e      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a1b      	ldr	r2, [pc, #108]	; (800aefc <HAL_TIM_PWM_Start+0x210>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d009      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1f      	ldr	r2, [pc, #124]	; (800af18 <HAL_TIM_PWM_Start+0x22c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d004      	beq.n	800aea8 <HAL_TIM_PWM_Start+0x1bc>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a1e      	ldr	r2, [pc, #120]	; (800af1c <HAL_TIM_PWM_Start+0x230>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d115      	bne.n	800aed4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	4b1c      	ldr	r3, [pc, #112]	; (800af20 <HAL_TIM_PWM_Start+0x234>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b06      	cmp	r3, #6
 800aeb8:	d015      	beq.n	800aee6 <HAL_TIM_PWM_Start+0x1fa>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec0:	d011      	beq.n	800aee6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f042 0201 	orr.w	r2, r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed2:	e008      	b.n	800aee6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0201 	orr.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e000      	b.n	800aee8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40010400 	.word	0x40010400
 800aefc:	40014000 	.word	0x40014000
 800af00:	40014400 	.word	0x40014400
 800af04:	40014800 	.word	0x40014800
 800af08:	40000400 	.word	0x40000400
 800af0c:	40000800 	.word	0x40000800
 800af10:	40000c00 	.word	0x40000c00
 800af14:	40001800 	.word	0x40001800
 800af18:	4000e000 	.word	0x4000e000
 800af1c:	4000e400 	.word	0x4000e400
 800af20:	00010007 	.word	0x00010007

0800af24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b02      	cmp	r3, #2
 800af38:	d122      	bne.n	800af80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b02      	cmp	r3, #2
 800af46:	d11b      	bne.n	800af80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f06f 0202 	mvn.w	r2, #2
 800af50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f003 0303 	and.w	r3, r3, #3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa1a 	bl	800b3a0 <HAL_TIM_IC_CaptureCallback>
 800af6c:	e005      	b.n	800af7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa0c 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa1d 	bl	800b3b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	f003 0304 	and.w	r3, r3, #4
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d122      	bne.n	800afd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d11b      	bne.n	800afd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f06f 0204 	mvn.w	r2, #4
 800afa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f9f0 	bl	800b3a0 <HAL_TIM_IC_CaptureCallback>
 800afc0:	e005      	b.n	800afce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9e2 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f9f3 	bl	800b3b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b08      	cmp	r3, #8
 800afe0:	d122      	bne.n	800b028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	f003 0308 	and.w	r3, r3, #8
 800afec:	2b08      	cmp	r3, #8
 800afee:	d11b      	bne.n	800b028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f06f 0208 	mvn.w	r2, #8
 800aff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2204      	movs	r2, #4
 800affe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9c6 	bl	800b3a0 <HAL_TIM_IC_CaptureCallback>
 800b014:	e005      	b.n	800b022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f9b8 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9c9 	bl	800b3b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b10      	cmp	r3, #16
 800b034:	d122      	bne.n	800b07c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b10      	cmp	r3, #16
 800b042:	d11b      	bne.n	800b07c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f06f 0210 	mvn.w	r2, #16
 800b04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2208      	movs	r2, #8
 800b052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f99c 	bl	800b3a0 <HAL_TIM_IC_CaptureCallback>
 800b068:	e005      	b.n	800b076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f98e 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f99f 	bl	800b3b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b01      	cmp	r3, #1
 800b088:	d10e      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b01      	cmp	r3, #1
 800b096:	d107      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f06f 0201 	mvn.w	r2, #1
 800b0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7f6 f8ca 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b2:	2b80      	cmp	r3, #128	; 0x80
 800b0b4:	d10e      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c0:	2b80      	cmp	r3, #128	; 0x80
 800b0c2:	d107      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fdcc 	bl	800bc6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e2:	d10e      	bne.n	800b102 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ee:	2b80      	cmp	r3, #128	; 0x80
 800b0f0:	d107      	bne.n	800b102 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fdbf 	bl	800bc80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b40      	cmp	r3, #64	; 0x40
 800b10e:	d10e      	bne.n	800b12e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11a:	2b40      	cmp	r3, #64	; 0x40
 800b11c:	d107      	bne.n	800b12e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f94d 	bl	800b3c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	f003 0320 	and.w	r3, r3, #32
 800b138:	2b20      	cmp	r3, #32
 800b13a:	d10e      	bne.n	800b15a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b20      	cmp	r3, #32
 800b148:	d107      	bne.n	800b15a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f06f 0220 	mvn.w	r2, #32
 800b152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fd7f 	bl	800bc58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d101      	bne.n	800b182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b17e:	2302      	movs	r3, #2
 800b180:	e0ff      	b.n	800b382 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b14      	cmp	r3, #20
 800b18e:	f200 80f0 	bhi.w	800b372 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b192:	a201      	add	r2, pc, #4	; (adr r2, 800b198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b198:	0800b1ed 	.word	0x0800b1ed
 800b19c:	0800b373 	.word	0x0800b373
 800b1a0:	0800b373 	.word	0x0800b373
 800b1a4:	0800b373 	.word	0x0800b373
 800b1a8:	0800b22d 	.word	0x0800b22d
 800b1ac:	0800b373 	.word	0x0800b373
 800b1b0:	0800b373 	.word	0x0800b373
 800b1b4:	0800b373 	.word	0x0800b373
 800b1b8:	0800b26f 	.word	0x0800b26f
 800b1bc:	0800b373 	.word	0x0800b373
 800b1c0:	0800b373 	.word	0x0800b373
 800b1c4:	0800b373 	.word	0x0800b373
 800b1c8:	0800b2af 	.word	0x0800b2af
 800b1cc:	0800b373 	.word	0x0800b373
 800b1d0:	0800b373 	.word	0x0800b373
 800b1d4:	0800b373 	.word	0x0800b373
 800b1d8:	0800b2f1 	.word	0x0800b2f1
 800b1dc:	0800b373 	.word	0x0800b373
 800b1e0:	0800b373 	.word	0x0800b373
 800b1e4:	0800b373 	.word	0x0800b373
 800b1e8:	0800b331 	.word	0x0800b331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68b9      	ldr	r1, [r7, #8]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f998 	bl	800b528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	699a      	ldr	r2, [r3, #24]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0208 	orr.w	r2, r2, #8
 800b206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	699a      	ldr	r2, [r3, #24]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f022 0204 	bic.w	r2, r2, #4
 800b216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6999      	ldr	r1, [r3, #24]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	691a      	ldr	r2, [r3, #16]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	430a      	orrs	r2, r1
 800b228:	619a      	str	r2, [r3, #24]
      break;
 800b22a:	e0a5      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	4618      	mov	r0, r3
 800b234:	f000 fa08 	bl	800b648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	699a      	ldr	r2, [r3, #24]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6999      	ldr	r1, [r3, #24]
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	021a      	lsls	r2, r3, #8
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	619a      	str	r2, [r3, #24]
      break;
 800b26c:	e084      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	4618      	mov	r0, r3
 800b276:	f000 fa71 	bl	800b75c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	69da      	ldr	r2, [r3, #28]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f042 0208 	orr.w	r2, r2, #8
 800b288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69da      	ldr	r2, [r3, #28]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 0204 	bic.w	r2, r2, #4
 800b298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	69d9      	ldr	r1, [r3, #28]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	691a      	ldr	r2, [r3, #16]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	61da      	str	r2, [r3, #28]
      break;
 800b2ac:	e064      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fad9 	bl	800b86c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69da      	ldr	r2, [r3, #28]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69da      	ldr	r2, [r3, #28]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69d9      	ldr	r1, [r3, #28]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	021a      	lsls	r2, r3, #8
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	61da      	str	r2, [r3, #28]
      break;
 800b2ee:	e043      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fb22 	bl	800b940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0208 	orr.w	r2, r2, #8
 800b30a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0204 	bic.w	r2, r2, #4
 800b31a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	691a      	ldr	r2, [r3, #16]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b32e:	e023      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fb66 	bl	800ba08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b34a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b35a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	021a      	lsls	r2, r3, #8
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b370:	e002      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	75fb      	strb	r3, [r7, #23]
      break;
 800b376:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop

0800b38c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a44      	ldr	r2, [pc, #272]	; (800b500 <TIM_Base_SetConfig+0x124>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d013      	beq.n	800b41c <TIM_Base_SetConfig+0x40>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3fa:	d00f      	beq.n	800b41c <TIM_Base_SetConfig+0x40>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a41      	ldr	r2, [pc, #260]	; (800b504 <TIM_Base_SetConfig+0x128>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00b      	beq.n	800b41c <TIM_Base_SetConfig+0x40>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a40      	ldr	r2, [pc, #256]	; (800b508 <TIM_Base_SetConfig+0x12c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d007      	beq.n	800b41c <TIM_Base_SetConfig+0x40>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a3f      	ldr	r2, [pc, #252]	; (800b50c <TIM_Base_SetConfig+0x130>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_Base_SetConfig+0x40>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a3e      	ldr	r2, [pc, #248]	; (800b510 <TIM_Base_SetConfig+0x134>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d108      	bne.n	800b42e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a33      	ldr	r2, [pc, #204]	; (800b500 <TIM_Base_SetConfig+0x124>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d027      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43c:	d023      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a30      	ldr	r2, [pc, #192]	; (800b504 <TIM_Base_SetConfig+0x128>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d01f      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a2f      	ldr	r2, [pc, #188]	; (800b508 <TIM_Base_SetConfig+0x12c>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d01b      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a2e      	ldr	r2, [pc, #184]	; (800b50c <TIM_Base_SetConfig+0x130>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d017      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a2d      	ldr	r2, [pc, #180]	; (800b510 <TIM_Base_SetConfig+0x134>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d013      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a2c      	ldr	r2, [pc, #176]	; (800b514 <TIM_Base_SetConfig+0x138>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d00f      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a2b      	ldr	r2, [pc, #172]	; (800b518 <TIM_Base_SetConfig+0x13c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d00b      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a2a      	ldr	r2, [pc, #168]	; (800b51c <TIM_Base_SetConfig+0x140>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d007      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a29      	ldr	r2, [pc, #164]	; (800b520 <TIM_Base_SetConfig+0x144>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d003      	beq.n	800b486 <TIM_Base_SetConfig+0xaa>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a28      	ldr	r2, [pc, #160]	; (800b524 <TIM_Base_SetConfig+0x148>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d108      	bne.n	800b498 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b48c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a10      	ldr	r2, [pc, #64]	; (800b500 <TIM_Base_SetConfig+0x124>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d00f      	beq.n	800b4e4 <TIM_Base_SetConfig+0x108>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a12      	ldr	r2, [pc, #72]	; (800b510 <TIM_Base_SetConfig+0x134>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00b      	beq.n	800b4e4 <TIM_Base_SetConfig+0x108>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a11      	ldr	r2, [pc, #68]	; (800b514 <TIM_Base_SetConfig+0x138>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d007      	beq.n	800b4e4 <TIM_Base_SetConfig+0x108>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a10      	ldr	r2, [pc, #64]	; (800b518 <TIM_Base_SetConfig+0x13c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d003      	beq.n	800b4e4 <TIM_Base_SetConfig+0x108>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a0f      	ldr	r2, [pc, #60]	; (800b51c <TIM_Base_SetConfig+0x140>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d103      	bne.n	800b4ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	615a      	str	r2, [r3, #20]
}
 800b4f2:	bf00      	nop
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40010000 	.word	0x40010000
 800b504:	40000400 	.word	0x40000400
 800b508:	40000800 	.word	0x40000800
 800b50c:	40000c00 	.word	0x40000c00
 800b510:	40010400 	.word	0x40010400
 800b514:	40014000 	.word	0x40014000
 800b518:	40014400 	.word	0x40014400
 800b51c:	40014800 	.word	0x40014800
 800b520:	4000e000 	.word	0x4000e000
 800b524:	4000e400 	.word	0x4000e400

0800b528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	f023 0201 	bic.w	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4b37      	ldr	r3, [pc, #220]	; (800b630 <TIM_OC1_SetConfig+0x108>)
 800b554:	4013      	ands	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f023 0302 	bic.w	r3, r3, #2
 800b570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	4313      	orrs	r3, r2
 800b57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a2d      	ldr	r2, [pc, #180]	; (800b634 <TIM_OC1_SetConfig+0x10c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00f      	beq.n	800b5a4 <TIM_OC1_SetConfig+0x7c>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a2c      	ldr	r2, [pc, #176]	; (800b638 <TIM_OC1_SetConfig+0x110>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00b      	beq.n	800b5a4 <TIM_OC1_SetConfig+0x7c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a2b      	ldr	r2, [pc, #172]	; (800b63c <TIM_OC1_SetConfig+0x114>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d007      	beq.n	800b5a4 <TIM_OC1_SetConfig+0x7c>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <TIM_OC1_SetConfig+0x118>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d003      	beq.n	800b5a4 <TIM_OC1_SetConfig+0x7c>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a29      	ldr	r2, [pc, #164]	; (800b644 <TIM_OC1_SetConfig+0x11c>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d10c      	bne.n	800b5be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f023 0308 	bic.w	r3, r3, #8
 800b5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f023 0304 	bic.w	r3, r3, #4
 800b5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <TIM_OC1_SetConfig+0x10c>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d00f      	beq.n	800b5e6 <TIM_OC1_SetConfig+0xbe>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a1b      	ldr	r2, [pc, #108]	; (800b638 <TIM_OC1_SetConfig+0x110>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00b      	beq.n	800b5e6 <TIM_OC1_SetConfig+0xbe>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <TIM_OC1_SetConfig+0x114>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d007      	beq.n	800b5e6 <TIM_OC1_SetConfig+0xbe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a19      	ldr	r2, [pc, #100]	; (800b640 <TIM_OC1_SetConfig+0x118>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d003      	beq.n	800b5e6 <TIM_OC1_SetConfig+0xbe>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a18      	ldr	r2, [pc, #96]	; (800b644 <TIM_OC1_SetConfig+0x11c>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d111      	bne.n	800b60a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	621a      	str	r2, [r3, #32]
}
 800b624:	bf00      	nop
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	fffeff8f 	.word	0xfffeff8f
 800b634:	40010000 	.word	0x40010000
 800b638:	40010400 	.word	0x40010400
 800b63c:	40014000 	.word	0x40014000
 800b640:	40014400 	.word	0x40014400
 800b644:	40014800 	.word	0x40014800

0800b648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	f023 0210 	bic.w	r2, r3, #16
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	4b34      	ldr	r3, [pc, #208]	; (800b744 <TIM_OC2_SetConfig+0xfc>)
 800b674:	4013      	ands	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0320 	bic.w	r3, r3, #32
 800b692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a29      	ldr	r2, [pc, #164]	; (800b748 <TIM_OC2_SetConfig+0x100>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d003      	beq.n	800b6b0 <TIM_OC2_SetConfig+0x68>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a28      	ldr	r2, [pc, #160]	; (800b74c <TIM_OC2_SetConfig+0x104>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d10d      	bne.n	800b6cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a1e      	ldr	r2, [pc, #120]	; (800b748 <TIM_OC2_SetConfig+0x100>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00f      	beq.n	800b6f4 <TIM_OC2_SetConfig+0xac>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a1d      	ldr	r2, [pc, #116]	; (800b74c <TIM_OC2_SetConfig+0x104>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d00b      	beq.n	800b6f4 <TIM_OC2_SetConfig+0xac>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a1c      	ldr	r2, [pc, #112]	; (800b750 <TIM_OC2_SetConfig+0x108>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d007      	beq.n	800b6f4 <TIM_OC2_SetConfig+0xac>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a1b      	ldr	r2, [pc, #108]	; (800b754 <TIM_OC2_SetConfig+0x10c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d003      	beq.n	800b6f4 <TIM_OC2_SetConfig+0xac>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a1a      	ldr	r2, [pc, #104]	; (800b758 <TIM_OC2_SetConfig+0x110>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d113      	bne.n	800b71c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	621a      	str	r2, [r3, #32]
}
 800b736:	bf00      	nop
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	feff8fff 	.word	0xfeff8fff
 800b748:	40010000 	.word	0x40010000
 800b74c:	40010400 	.word	0x40010400
 800b750:	40014000 	.word	0x40014000
 800b754:	40014400 	.word	0x40014400
 800b758:	40014800 	.word	0x40014800

0800b75c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4b33      	ldr	r3, [pc, #204]	; (800b854 <TIM_OC3_SetConfig+0xf8>)
 800b788:	4013      	ands	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a28      	ldr	r2, [pc, #160]	; (800b858 <TIM_OC3_SetConfig+0xfc>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d003      	beq.n	800b7c2 <TIM_OC3_SetConfig+0x66>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a27      	ldr	r2, [pc, #156]	; (800b85c <TIM_OC3_SetConfig+0x100>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d10d      	bne.n	800b7de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a1d      	ldr	r2, [pc, #116]	; (800b858 <TIM_OC3_SetConfig+0xfc>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00f      	beq.n	800b806 <TIM_OC3_SetConfig+0xaa>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	; (800b85c <TIM_OC3_SetConfig+0x100>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d00b      	beq.n	800b806 <TIM_OC3_SetConfig+0xaa>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a1b      	ldr	r2, [pc, #108]	; (800b860 <TIM_OC3_SetConfig+0x104>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d007      	beq.n	800b806 <TIM_OC3_SetConfig+0xaa>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a1a      	ldr	r2, [pc, #104]	; (800b864 <TIM_OC3_SetConfig+0x108>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d003      	beq.n	800b806 <TIM_OC3_SetConfig+0xaa>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a19      	ldr	r2, [pc, #100]	; (800b868 <TIM_OC3_SetConfig+0x10c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d113      	bne.n	800b82e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b80c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	621a      	str	r2, [r3, #32]
}
 800b848:	bf00      	nop
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	fffeff8f 	.word	0xfffeff8f
 800b858:	40010000 	.word	0x40010000
 800b85c:	40010400 	.word	0x40010400
 800b860:	40014000 	.word	0x40014000
 800b864:	40014400 	.word	0x40014400
 800b868:	40014800 	.word	0x40014800

0800b86c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4b24      	ldr	r3, [pc, #144]	; (800b928 <TIM_OC4_SetConfig+0xbc>)
 800b898:	4013      	ands	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	031b      	lsls	r3, r3, #12
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	; (800b92c <TIM_OC4_SetConfig+0xc0>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC4_SetConfig+0x80>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a18      	ldr	r2, [pc, #96]	; (800b930 <TIM_OC4_SetConfig+0xc4>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC4_SetConfig+0x80>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a17      	ldr	r2, [pc, #92]	; (800b934 <TIM_OC4_SetConfig+0xc8>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC4_SetConfig+0x80>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a16      	ldr	r2, [pc, #88]	; (800b938 <TIM_OC4_SetConfig+0xcc>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC4_SetConfig+0x80>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <TIM_OC4_SetConfig+0xd0>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d109      	bne.n	800b900 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	019b      	lsls	r3, r3, #6
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	621a      	str	r2, [r3, #32]
}
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	feff8fff 	.word	0xfeff8fff
 800b92c:	40010000 	.word	0x40010000
 800b930:	40010400 	.word	0x40010400
 800b934:	40014000 	.word	0x40014000
 800b938:	40014400 	.word	0x40014400
 800b93c:	40014800 	.word	0x40014800

0800b940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4b21      	ldr	r3, [pc, #132]	; (800b9f0 <TIM_OC5_SetConfig+0xb0>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	041b      	lsls	r3, r3, #16
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a18      	ldr	r2, [pc, #96]	; (800b9f4 <TIM_OC5_SetConfig+0xb4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00f      	beq.n	800b9b6 <TIM_OC5_SetConfig+0x76>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a17      	ldr	r2, [pc, #92]	; (800b9f8 <TIM_OC5_SetConfig+0xb8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d00b      	beq.n	800b9b6 <TIM_OC5_SetConfig+0x76>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a16      	ldr	r2, [pc, #88]	; (800b9fc <TIM_OC5_SetConfig+0xbc>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d007      	beq.n	800b9b6 <TIM_OC5_SetConfig+0x76>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a15      	ldr	r2, [pc, #84]	; (800ba00 <TIM_OC5_SetConfig+0xc0>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d003      	beq.n	800b9b6 <TIM_OC5_SetConfig+0x76>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a14      	ldr	r2, [pc, #80]	; (800ba04 <TIM_OC5_SetConfig+0xc4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d109      	bne.n	800b9ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	621a      	str	r2, [r3, #32]
}
 800b9e4:	bf00      	nop
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	fffeff8f 	.word	0xfffeff8f
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	40010400 	.word	0x40010400
 800b9fc:	40014000 	.word	0x40014000
 800ba00:	40014400 	.word	0x40014400
 800ba04:	40014800 	.word	0x40014800

0800ba08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	4b22      	ldr	r3, [pc, #136]	; (800babc <TIM_OC6_SetConfig+0xb4>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	051b      	lsls	r3, r3, #20
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a19      	ldr	r2, [pc, #100]	; (800bac0 <TIM_OC6_SetConfig+0xb8>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00f      	beq.n	800ba80 <TIM_OC6_SetConfig+0x78>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a18      	ldr	r2, [pc, #96]	; (800bac4 <TIM_OC6_SetConfig+0xbc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00b      	beq.n	800ba80 <TIM_OC6_SetConfig+0x78>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <TIM_OC6_SetConfig+0xc0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d007      	beq.n	800ba80 <TIM_OC6_SetConfig+0x78>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a16      	ldr	r2, [pc, #88]	; (800bacc <TIM_OC6_SetConfig+0xc4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d003      	beq.n	800ba80 <TIM_OC6_SetConfig+0x78>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a15      	ldr	r2, [pc, #84]	; (800bad0 <TIM_OC6_SetConfig+0xc8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d109      	bne.n	800ba94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	029b      	lsls	r3, r3, #10
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	621a      	str	r2, [r3, #32]
}
 800baae:	bf00      	nop
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	feff8fff 	.word	0xfeff8fff
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40010400 	.word	0x40010400
 800bac8:	40014000 	.word	0x40014000
 800bacc:	40014400 	.word	0x40014400
 800bad0:	40014800 	.word	0x40014800

0800bad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f003 031f 	and.w	r3, r3, #31
 800bae6:	2201      	movs	r2, #1
 800bae8:	fa02 f303 	lsl.w	r3, r2, r3
 800baec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6a1a      	ldr	r2, [r3, #32]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	43db      	mvns	r3, r3
 800baf6:	401a      	ands	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a1a      	ldr	r2, [r3, #32]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f003 031f 	and.w	r3, r3, #31
 800bb06:	6879      	ldr	r1, [r7, #4]
 800bb08:	fa01 f303 	lsl.w	r3, r1, r3
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	621a      	str	r2, [r3, #32]
}
 800bb12:	bf00      	nop
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d101      	bne.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb34:	2302      	movs	r3, #2
 800bb36:	e077      	b.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a35      	ldr	r2, [pc, #212]	; (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d004      	beq.n	800bb6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a34      	ldr	r2, [pc, #208]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d108      	bne.n	800bb7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a25      	ldr	r2, [pc, #148]	; (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d02c      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbaa:	d027      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a22      	ldr	r2, [pc, #136]	; (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d022      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a21      	ldr	r2, [pc, #132]	; (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d01d      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a1f      	ldr	r2, [pc, #124]	; (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d018      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a1a      	ldr	r2, [pc, #104]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d013      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a1b      	ldr	r2, [pc, #108]	; (800bc48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d00e      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a1a      	ldr	r2, [pc, #104]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d009      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a18      	ldr	r2, [pc, #96]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d004      	beq.n	800bbfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a17      	ldr	r2, [pc, #92]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d10c      	bne.n	800bc16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	40010000 	.word	0x40010000
 800bc38:	40010400 	.word	0x40010400
 800bc3c:	40000400 	.word	0x40000400
 800bc40:	40000800 	.word	0x40000800
 800bc44:	40000c00 	.word	0x40000c00
 800bc48:	40001800 	.word	0x40001800
 800bc4c:	40014000 	.word	0x40014000
 800bc50:	4000e000 	.word	0x4000e000
 800bc54:	4000e400 	.word	0x4000e400

0800bc58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e042      	b.n	800bd2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7f5 fdf9 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2224      	movs	r2, #36	; 0x24
 800bcc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 0201 	bic.w	r2, r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f82c 	bl	800bd34 <UART_SetConfig>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d101      	bne.n	800bce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e022      	b.n	800bd2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fe7e 	bl	800c9f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 ff05 	bl	800cb34 <UART_CheckIdleState>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd34:	b5b0      	push	{r4, r5, r7, lr}
 800bd36:	b08e      	sub	sp, #56	; 0x38
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4bbf      	ldr	r3, [pc, #764]	; (800c060 <UART_SetConfig+0x32c>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	6812      	ldr	r2, [r2, #0]
 800bd68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68da      	ldr	r2, [r3, #12]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4ab5      	ldr	r2, [pc, #724]	; (800c064 <UART_SetConfig+0x330>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d004      	beq.n	800bd9e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a1b      	ldr	r3, [r3, #32]
 800bd98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	4bb0      	ldr	r3, [pc, #704]	; (800c068 <UART_SetConfig+0x334>)
 800bda6:	4013      	ands	r3, r2
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	f023 010f 	bic.w	r1, r3, #15
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	430a      	orrs	r2, r1
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4aa7      	ldr	r2, [pc, #668]	; (800c06c <UART_SetConfig+0x338>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d176      	bne.n	800bec0 <UART_SetConfig+0x18c>
 800bdd2:	4ba7      	ldr	r3, [pc, #668]	; (800c070 <UART_SetConfig+0x33c>)
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdda:	2b28      	cmp	r3, #40	; 0x28
 800bddc:	d86c      	bhi.n	800beb8 <UART_SetConfig+0x184>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <UART_SetConfig+0xb0>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800be89 	.word	0x0800be89
 800bde8:	0800beb9 	.word	0x0800beb9
 800bdec:	0800beb9 	.word	0x0800beb9
 800bdf0:	0800beb9 	.word	0x0800beb9
 800bdf4:	0800beb9 	.word	0x0800beb9
 800bdf8:	0800beb9 	.word	0x0800beb9
 800bdfc:	0800beb9 	.word	0x0800beb9
 800be00:	0800beb9 	.word	0x0800beb9
 800be04:	0800be91 	.word	0x0800be91
 800be08:	0800beb9 	.word	0x0800beb9
 800be0c:	0800beb9 	.word	0x0800beb9
 800be10:	0800beb9 	.word	0x0800beb9
 800be14:	0800beb9 	.word	0x0800beb9
 800be18:	0800beb9 	.word	0x0800beb9
 800be1c:	0800beb9 	.word	0x0800beb9
 800be20:	0800beb9 	.word	0x0800beb9
 800be24:	0800be99 	.word	0x0800be99
 800be28:	0800beb9 	.word	0x0800beb9
 800be2c:	0800beb9 	.word	0x0800beb9
 800be30:	0800beb9 	.word	0x0800beb9
 800be34:	0800beb9 	.word	0x0800beb9
 800be38:	0800beb9 	.word	0x0800beb9
 800be3c:	0800beb9 	.word	0x0800beb9
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800bea1 	.word	0x0800bea1
 800be48:	0800beb9 	.word	0x0800beb9
 800be4c:	0800beb9 	.word	0x0800beb9
 800be50:	0800beb9 	.word	0x0800beb9
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800beb9 	.word	0x0800beb9
 800be5c:	0800beb9 	.word	0x0800beb9
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800bea9 	.word	0x0800bea9
 800be68:	0800beb9 	.word	0x0800beb9
 800be6c:	0800beb9 	.word	0x0800beb9
 800be70:	0800beb9 	.word	0x0800beb9
 800be74:	0800beb9 	.word	0x0800beb9
 800be78:	0800beb9 	.word	0x0800beb9
 800be7c:	0800beb9 	.word	0x0800beb9
 800be80:	0800beb9 	.word	0x0800beb9
 800be84:	0800beb1 	.word	0x0800beb1
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8e:	e326      	b.n	800c4de <UART_SetConfig+0x7aa>
 800be90:	2304      	movs	r3, #4
 800be92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be96:	e322      	b.n	800c4de <UART_SetConfig+0x7aa>
 800be98:	2308      	movs	r3, #8
 800be9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9e:	e31e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bea0:	2310      	movs	r3, #16
 800bea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea6:	e31a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bea8:	2320      	movs	r3, #32
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e316      	b.n	800c4de <UART_SetConfig+0x7aa>
 800beb0:	2340      	movs	r3, #64	; 0x40
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e312      	b.n	800c4de <UART_SetConfig+0x7aa>
 800beb8:	2380      	movs	r3, #128	; 0x80
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e30e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a6b      	ldr	r2, [pc, #428]	; (800c074 <UART_SetConfig+0x340>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d130      	bne.n	800bf2c <UART_SetConfig+0x1f8>
 800beca:	4b69      	ldr	r3, [pc, #420]	; (800c070 <UART_SetConfig+0x33c>)
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b05      	cmp	r3, #5
 800bed4:	d826      	bhi.n	800bf24 <UART_SetConfig+0x1f0>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <UART_SetConfig+0x1a8>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bef5 	.word	0x0800bef5
 800bee0:	0800befd 	.word	0x0800befd
 800bee4:	0800bf05 	.word	0x0800bf05
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	2300      	movs	r3, #0
 800bef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800befa:	e2f0      	b.n	800c4de <UART_SetConfig+0x7aa>
 800befc:	2304      	movs	r3, #4
 800befe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf02:	e2ec      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf04:	2308      	movs	r3, #8
 800bf06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf0a:	e2e8      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf0c:	2310      	movs	r3, #16
 800bf0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf12:	e2e4      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf14:	2320      	movs	r3, #32
 800bf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1a:	e2e0      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf22:	e2dc      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf2a:	e2d8      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a51      	ldr	r2, [pc, #324]	; (800c078 <UART_SetConfig+0x344>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d130      	bne.n	800bf98 <UART_SetConfig+0x264>
 800bf36:	4b4e      	ldr	r3, [pc, #312]	; (800c070 <UART_SetConfig+0x33c>)
 800bf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3a:	f003 0307 	and.w	r3, r3, #7
 800bf3e:	2b05      	cmp	r3, #5
 800bf40:	d826      	bhi.n	800bf90 <UART_SetConfig+0x25c>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <UART_SetConfig+0x214>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf61 	.word	0x0800bf61
 800bf4c:	0800bf69 	.word	0x0800bf69
 800bf50:	0800bf71 	.word	0x0800bf71
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf66:	e2ba      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf68:	2304      	movs	r3, #4
 800bf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf6e:	e2b6      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf70:	2308      	movs	r3, #8
 800bf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf76:	e2b2      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf78:	2310      	movs	r3, #16
 800bf7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf7e:	e2ae      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf80:	2320      	movs	r3, #32
 800bf82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf86:	e2aa      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf8e:	e2a6      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf96:	e2a2      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a37      	ldr	r2, [pc, #220]	; (800c07c <UART_SetConfig+0x348>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d130      	bne.n	800c004 <UART_SetConfig+0x2d0>
 800bfa2:	4b33      	ldr	r3, [pc, #204]	; (800c070 <UART_SetConfig+0x33c>)
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d826      	bhi.n	800bffc <UART_SetConfig+0x2c8>
 800bfae:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <UART_SetConfig+0x280>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800bfcd 	.word	0x0800bfcd
 800bfb8:	0800bfd5 	.word	0x0800bfd5
 800bfbc:	0800bfdd 	.word	0x0800bfdd
 800bfc0:	0800bfe5 	.word	0x0800bfe5
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bff5 	.word	0x0800bff5
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd2:	e284      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfda:	e280      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bfdc:	2308      	movs	r3, #8
 800bfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe2:	e27c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bfe4:	2310      	movs	r3, #16
 800bfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfea:	e278      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bfec:	2320      	movs	r3, #32
 800bfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bff2:	e274      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bffa:	e270      	b.n	800c4de <UART_SetConfig+0x7aa>
 800bffc:	2380      	movs	r3, #128	; 0x80
 800bffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c002:	e26c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a1d      	ldr	r2, [pc, #116]	; (800c080 <UART_SetConfig+0x34c>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d142      	bne.n	800c094 <UART_SetConfig+0x360>
 800c00e:	4b18      	ldr	r3, [pc, #96]	; (800c070 <UART_SetConfig+0x33c>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b05      	cmp	r3, #5
 800c018:	d838      	bhi.n	800c08c <UART_SetConfig+0x358>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <UART_SetConfig+0x2ec>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c041 	.word	0x0800c041
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c051 	.word	0x0800c051
 800c030:	0800c059 	.word	0x0800c059
 800c034:	0800c085 	.word	0x0800c085
 800c038:	2300      	movs	r3, #0
 800c03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03e:	e24e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c040:	2304      	movs	r3, #4
 800c042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c046:	e24a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c048:	2308      	movs	r3, #8
 800c04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04e:	e246      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c050:	2310      	movs	r3, #16
 800c052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c056:	e242      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c058:	2320      	movs	r3, #32
 800c05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05e:	e23e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c060:	cfff69f3 	.word	0xcfff69f3
 800c064:	58000c00 	.word	0x58000c00
 800c068:	11fff4ff 	.word	0x11fff4ff
 800c06c:	40011000 	.word	0x40011000
 800c070:	58024400 	.word	0x58024400
 800c074:	40004400 	.word	0x40004400
 800c078:	40004800 	.word	0x40004800
 800c07c:	40004c00 	.word	0x40004c00
 800c080:	40005000 	.word	0x40005000
 800c084:	2340      	movs	r3, #64	; 0x40
 800c086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c08a:	e228      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c08c:	2380      	movs	r3, #128	; 0x80
 800c08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c092:	e224      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4ab1      	ldr	r2, [pc, #708]	; (800c360 <UART_SetConfig+0x62c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d176      	bne.n	800c18c <UART_SetConfig+0x458>
 800c09e:	4bb1      	ldr	r3, [pc, #708]	; (800c364 <UART_SetConfig+0x630>)
 800c0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0a6:	2b28      	cmp	r3, #40	; 0x28
 800c0a8:	d86c      	bhi.n	800c184 <UART_SetConfig+0x450>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <UART_SetConfig+0x37c>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c185 	.word	0x0800c185
 800c0b8:	0800c185 	.word	0x0800c185
 800c0bc:	0800c185 	.word	0x0800c185
 800c0c0:	0800c185 	.word	0x0800c185
 800c0c4:	0800c185 	.word	0x0800c185
 800c0c8:	0800c185 	.word	0x0800c185
 800c0cc:	0800c185 	.word	0x0800c185
 800c0d0:	0800c15d 	.word	0x0800c15d
 800c0d4:	0800c185 	.word	0x0800c185
 800c0d8:	0800c185 	.word	0x0800c185
 800c0dc:	0800c185 	.word	0x0800c185
 800c0e0:	0800c185 	.word	0x0800c185
 800c0e4:	0800c185 	.word	0x0800c185
 800c0e8:	0800c185 	.word	0x0800c185
 800c0ec:	0800c185 	.word	0x0800c185
 800c0f0:	0800c165 	.word	0x0800c165
 800c0f4:	0800c185 	.word	0x0800c185
 800c0f8:	0800c185 	.word	0x0800c185
 800c0fc:	0800c185 	.word	0x0800c185
 800c100:	0800c185 	.word	0x0800c185
 800c104:	0800c185 	.word	0x0800c185
 800c108:	0800c185 	.word	0x0800c185
 800c10c:	0800c185 	.word	0x0800c185
 800c110:	0800c16d 	.word	0x0800c16d
 800c114:	0800c185 	.word	0x0800c185
 800c118:	0800c185 	.word	0x0800c185
 800c11c:	0800c185 	.word	0x0800c185
 800c120:	0800c185 	.word	0x0800c185
 800c124:	0800c185 	.word	0x0800c185
 800c128:	0800c185 	.word	0x0800c185
 800c12c:	0800c185 	.word	0x0800c185
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c185 	.word	0x0800c185
 800c138:	0800c185 	.word	0x0800c185
 800c13c:	0800c185 	.word	0x0800c185
 800c140:	0800c185 	.word	0x0800c185
 800c144:	0800c185 	.word	0x0800c185
 800c148:	0800c185 	.word	0x0800c185
 800c14c:	0800c185 	.word	0x0800c185
 800c150:	0800c17d 	.word	0x0800c17d
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15a:	e1c0      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c15c:	2304      	movs	r3, #4
 800c15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c162:	e1bc      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c164:	2308      	movs	r3, #8
 800c166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16a:	e1b8      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c16c:	2310      	movs	r3, #16
 800c16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c172:	e1b4      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c174:	2320      	movs	r3, #32
 800c176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17a:	e1b0      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c17c:	2340      	movs	r3, #64	; 0x40
 800c17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c182:	e1ac      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c184:	2380      	movs	r3, #128	; 0x80
 800c186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18a:	e1a8      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a75      	ldr	r2, [pc, #468]	; (800c368 <UART_SetConfig+0x634>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d130      	bne.n	800c1f8 <UART_SetConfig+0x4c4>
 800c196:	4b73      	ldr	r3, [pc, #460]	; (800c364 <UART_SetConfig+0x630>)
 800c198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19a:	f003 0307 	and.w	r3, r3, #7
 800c19e:	2b05      	cmp	r3, #5
 800c1a0:	d826      	bhi.n	800c1f0 <UART_SetConfig+0x4bc>
 800c1a2:	a201      	add	r2, pc, #4	; (adr r2, 800c1a8 <UART_SetConfig+0x474>)
 800c1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a8:	0800c1c1 	.word	0x0800c1c1
 800c1ac:	0800c1c9 	.word	0x0800c1c9
 800c1b0:	0800c1d1 	.word	0x0800c1d1
 800c1b4:	0800c1d9 	.word	0x0800c1d9
 800c1b8:	0800c1e1 	.word	0x0800c1e1
 800c1bc:	0800c1e9 	.word	0x0800c1e9
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1c6:	e18a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ce:	e186      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1d6:	e182      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1d8:	2310      	movs	r3, #16
 800c1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1de:	e17e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1e0:	2320      	movs	r3, #32
 800c1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e6:	e17a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1e8:	2340      	movs	r3, #64	; 0x40
 800c1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ee:	e176      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1f0:	2380      	movs	r3, #128	; 0x80
 800c1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f6:	e172      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a5b      	ldr	r2, [pc, #364]	; (800c36c <UART_SetConfig+0x638>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d130      	bne.n	800c264 <UART_SetConfig+0x530>
 800c202:	4b58      	ldr	r3, [pc, #352]	; (800c364 <UART_SetConfig+0x630>)
 800c204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d826      	bhi.n	800c25c <UART_SetConfig+0x528>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <UART_SetConfig+0x4e0>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c22d 	.word	0x0800c22d
 800c218:	0800c235 	.word	0x0800c235
 800c21c:	0800c23d 	.word	0x0800c23d
 800c220:	0800c245 	.word	0x0800c245
 800c224:	0800c24d 	.word	0x0800c24d
 800c228:	0800c255 	.word	0x0800c255
 800c22c:	2300      	movs	r3, #0
 800c22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c232:	e154      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c234:	2304      	movs	r3, #4
 800c236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c23a:	e150      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c242:	e14c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24a:	e148      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c24c:	2320      	movs	r3, #32
 800c24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c252:	e144      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25a:	e140      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c25c:	2380      	movs	r3, #128	; 0x80
 800c25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c262:	e13c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a41      	ldr	r2, [pc, #260]	; (800c370 <UART_SetConfig+0x63c>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	f040 8082 	bne.w	800c374 <UART_SetConfig+0x640>
 800c270:	4b3c      	ldr	r3, [pc, #240]	; (800c364 <UART_SetConfig+0x630>)
 800c272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c278:	2b28      	cmp	r3, #40	; 0x28
 800c27a:	d86d      	bhi.n	800c358 <UART_SetConfig+0x624>
 800c27c:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <UART_SetConfig+0x550>)
 800c27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c282:	bf00      	nop
 800c284:	0800c329 	.word	0x0800c329
 800c288:	0800c359 	.word	0x0800c359
 800c28c:	0800c359 	.word	0x0800c359
 800c290:	0800c359 	.word	0x0800c359
 800c294:	0800c359 	.word	0x0800c359
 800c298:	0800c359 	.word	0x0800c359
 800c29c:	0800c359 	.word	0x0800c359
 800c2a0:	0800c359 	.word	0x0800c359
 800c2a4:	0800c331 	.word	0x0800c331
 800c2a8:	0800c359 	.word	0x0800c359
 800c2ac:	0800c359 	.word	0x0800c359
 800c2b0:	0800c359 	.word	0x0800c359
 800c2b4:	0800c359 	.word	0x0800c359
 800c2b8:	0800c359 	.word	0x0800c359
 800c2bc:	0800c359 	.word	0x0800c359
 800c2c0:	0800c359 	.word	0x0800c359
 800c2c4:	0800c339 	.word	0x0800c339
 800c2c8:	0800c359 	.word	0x0800c359
 800c2cc:	0800c359 	.word	0x0800c359
 800c2d0:	0800c359 	.word	0x0800c359
 800c2d4:	0800c359 	.word	0x0800c359
 800c2d8:	0800c359 	.word	0x0800c359
 800c2dc:	0800c359 	.word	0x0800c359
 800c2e0:	0800c359 	.word	0x0800c359
 800c2e4:	0800c341 	.word	0x0800c341
 800c2e8:	0800c359 	.word	0x0800c359
 800c2ec:	0800c359 	.word	0x0800c359
 800c2f0:	0800c359 	.word	0x0800c359
 800c2f4:	0800c359 	.word	0x0800c359
 800c2f8:	0800c359 	.word	0x0800c359
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c359 	.word	0x0800c359
 800c304:	0800c349 	.word	0x0800c349
 800c308:	0800c359 	.word	0x0800c359
 800c30c:	0800c359 	.word	0x0800c359
 800c310:	0800c359 	.word	0x0800c359
 800c314:	0800c359 	.word	0x0800c359
 800c318:	0800c359 	.word	0x0800c359
 800c31c:	0800c359 	.word	0x0800c359
 800c320:	0800c359 	.word	0x0800c359
 800c324:	0800c351 	.word	0x0800c351
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e0d6      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c330:	2304      	movs	r3, #4
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e0d2      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c338:	2308      	movs	r3, #8
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	e0ce      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c340:	2310      	movs	r3, #16
 800c342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c346:	e0ca      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c348:	2320      	movs	r3, #32
 800c34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34e:	e0c6      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c350:	2340      	movs	r3, #64	; 0x40
 800c352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c356:	e0c2      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c358:	2380      	movs	r3, #128	; 0x80
 800c35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c35e:	e0be      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c360:	40011400 	.word	0x40011400
 800c364:	58024400 	.word	0x58024400
 800c368:	40007800 	.word	0x40007800
 800c36c:	40007c00 	.word	0x40007c00
 800c370:	40011800 	.word	0x40011800
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4aad      	ldr	r2, [pc, #692]	; (800c630 <UART_SetConfig+0x8fc>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d176      	bne.n	800c46c <UART_SetConfig+0x738>
 800c37e:	4bad      	ldr	r3, [pc, #692]	; (800c634 <UART_SetConfig+0x900>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c386:	2b28      	cmp	r3, #40	; 0x28
 800c388:	d86c      	bhi.n	800c464 <UART_SetConfig+0x730>
 800c38a:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x65c>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c465 	.word	0x0800c465
 800c398:	0800c465 	.word	0x0800c465
 800c39c:	0800c465 	.word	0x0800c465
 800c3a0:	0800c465 	.word	0x0800c465
 800c3a4:	0800c465 	.word	0x0800c465
 800c3a8:	0800c465 	.word	0x0800c465
 800c3ac:	0800c465 	.word	0x0800c465
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c465 	.word	0x0800c465
 800c3b8:	0800c465 	.word	0x0800c465
 800c3bc:	0800c465 	.word	0x0800c465
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c465 	.word	0x0800c465
 800c3c8:	0800c465 	.word	0x0800c465
 800c3cc:	0800c465 	.word	0x0800c465
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c465 	.word	0x0800c465
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c465 	.word	0x0800c465
 800c404:	0800c465 	.word	0x0800c465
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c455 	.word	0x0800c455
 800c414:	0800c465 	.word	0x0800c465
 800c418:	0800c465 	.word	0x0800c465
 800c41c:	0800c465 	.word	0x0800c465
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c465 	.word	0x0800c465
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c43a:	e050      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e04c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e048      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e044      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e040      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e03c      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e038      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a71      	ldr	r2, [pc, #452]	; (800c638 <UART_SetConfig+0x904>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x7a4>
 800c476:	4b6f      	ldr	r3, [pc, #444]	; (800c634 <UART_SetConfig+0x900>)
 800c478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x79c>
 800c482:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0x754>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4a6:	e01a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ae:	e016      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b6:	e012      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4be:	e00e      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c6:	e00a      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ce:	e006      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d6:	e002      	b.n	800c4de <UART_SetConfig+0x7aa>
 800c4d8:	2380      	movs	r3, #128	; 0x80
 800c4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a55      	ldr	r2, [pc, #340]	; (800c638 <UART_SetConfig+0x904>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	f040 80f0 	bne.w	800c6ca <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4ee:	2b20      	cmp	r3, #32
 800c4f0:	dc46      	bgt.n	800c580 <UART_SetConfig+0x84c>
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	db75      	blt.n	800c5e2 <UART_SetConfig+0x8ae>
 800c4f6:	3b02      	subs	r3, #2
 800c4f8:	2b1e      	cmp	r3, #30
 800c4fa:	d872      	bhi.n	800c5e2 <UART_SetConfig+0x8ae>
 800c4fc:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <UART_SetConfig+0x7d0>)
 800c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c502:	bf00      	nop
 800c504:	0800c587 	.word	0x0800c587
 800c508:	0800c5e3 	.word	0x0800c5e3
 800c50c:	0800c58f 	.word	0x0800c58f
 800c510:	0800c5e3 	.word	0x0800c5e3
 800c514:	0800c5e3 	.word	0x0800c5e3
 800c518:	0800c5e3 	.word	0x0800c5e3
 800c51c:	0800c59f 	.word	0x0800c59f
 800c520:	0800c5e3 	.word	0x0800c5e3
 800c524:	0800c5e3 	.word	0x0800c5e3
 800c528:	0800c5e3 	.word	0x0800c5e3
 800c52c:	0800c5e3 	.word	0x0800c5e3
 800c530:	0800c5e3 	.word	0x0800c5e3
 800c534:	0800c5e3 	.word	0x0800c5e3
 800c538:	0800c5e3 	.word	0x0800c5e3
 800c53c:	0800c5af 	.word	0x0800c5af
 800c540:	0800c5e3 	.word	0x0800c5e3
 800c544:	0800c5e3 	.word	0x0800c5e3
 800c548:	0800c5e3 	.word	0x0800c5e3
 800c54c:	0800c5e3 	.word	0x0800c5e3
 800c550:	0800c5e3 	.word	0x0800c5e3
 800c554:	0800c5e3 	.word	0x0800c5e3
 800c558:	0800c5e3 	.word	0x0800c5e3
 800c55c:	0800c5e3 	.word	0x0800c5e3
 800c560:	0800c5e3 	.word	0x0800c5e3
 800c564:	0800c5e3 	.word	0x0800c5e3
 800c568:	0800c5e3 	.word	0x0800c5e3
 800c56c:	0800c5e3 	.word	0x0800c5e3
 800c570:	0800c5e3 	.word	0x0800c5e3
 800c574:	0800c5e3 	.word	0x0800c5e3
 800c578:	0800c5e3 	.word	0x0800c5e3
 800c57c:	0800c5d5 	.word	0x0800c5d5
 800c580:	2b40      	cmp	r3, #64	; 0x40
 800c582:	d02a      	beq.n	800c5da <UART_SetConfig+0x8a6>
 800c584:	e02d      	b.n	800c5e2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c586:	f7fc f8a1 	bl	80086cc <HAL_RCCEx_GetD3PCLK1Freq>
 800c58a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c58c:	e02f      	b.n	800c5ee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58e:	f107 0314 	add.w	r3, r7, #20
 800c592:	4618      	mov	r0, r3
 800c594:	f7fc f8b0 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c59c:	e027      	b.n	800c5ee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59e:	f107 0308 	add.w	r3, r7, #8
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fc f9fc 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5ac:	e01f      	b.n	800c5ee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5ae:	4b21      	ldr	r3, [pc, #132]	; (800c634 <UART_SetConfig+0x900>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0320 	and.w	r3, r3, #32
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d009      	beq.n	800c5ce <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5ba:	4b1e      	ldr	r3, [pc, #120]	; (800c634 <UART_SetConfig+0x900>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	08db      	lsrs	r3, r3, #3
 800c5c0:	f003 0303 	and.w	r3, r3, #3
 800c5c4:	4a1d      	ldr	r2, [pc, #116]	; (800c63c <UART_SetConfig+0x908>)
 800c5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5cc:	e00f      	b.n	800c5ee <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c5ce:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <UART_SetConfig+0x908>)
 800c5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5d2:	e00c      	b.n	800c5ee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5d4:	4b1a      	ldr	r3, [pc, #104]	; (800c640 <UART_SetConfig+0x90c>)
 800c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5d8:	e009      	b.n	800c5ee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5e0:	e005      	b.n	800c5ee <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c5ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 81e6 	beq.w	800c9c2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	4a12      	ldr	r2, [pc, #72]	; (800c644 <UART_SetConfig+0x910>)
 800c5fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c600:	461a      	mov	r2, r3
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	fbb3 f3f2 	udiv	r3, r3, r2
 800c608:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	6a3a      	ldr	r2, [r7, #32]
 800c616:	429a      	cmp	r2, r3
 800c618:	d305      	bcc.n	800c626 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c620:	6a3a      	ldr	r2, [r7, #32]
 800c622:	429a      	cmp	r2, r3
 800c624:	d910      	bls.n	800c648 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c62c:	e1c9      	b.n	800c9c2 <UART_SetConfig+0xc8e>
 800c62e:	bf00      	nop
 800c630:	40011c00 	.word	0x40011c00
 800c634:	58024400 	.word	0x58024400
 800c638:	58000c00 	.word	0x58000c00
 800c63c:	03d09000 	.word	0x03d09000
 800c640:	003d0900 	.word	0x003d0900
 800c644:	08015384 	.word	0x08015384
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	4618      	mov	r0, r3
 800c64c:	f04f 0100 	mov.w	r1, #0
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	4ac1      	ldr	r2, [pc, #772]	; (800c95c <UART_SetConfig+0xc28>)
 800c656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	f04f 0300 	mov.w	r3, #0
 800c660:	f7f3 feae 	bl	80003c0 <__aeabi_uldivmod>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	4610      	mov	r0, r2
 800c66a:	4619      	mov	r1, r3
 800c66c:	f04f 0200 	mov.w	r2, #0
 800c670:	f04f 0300 	mov.w	r3, #0
 800c674:	020b      	lsls	r3, r1, #8
 800c676:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c67a:	0202      	lsls	r2, r0, #8
 800c67c:	6879      	ldr	r1, [r7, #4]
 800c67e:	6849      	ldr	r1, [r1, #4]
 800c680:	0849      	lsrs	r1, r1, #1
 800c682:	4608      	mov	r0, r1
 800c684:	f04f 0100 	mov.w	r1, #0
 800c688:	1814      	adds	r4, r2, r0
 800c68a:	eb43 0501 	adc.w	r5, r3, r1
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	461a      	mov	r2, r3
 800c694:	f04f 0300 	mov.w	r3, #0
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 fe90 	bl	80003c0 <__aeabi_uldivmod>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6ae:	d308      	bcc.n	800c6c2 <UART_SetConfig+0x98e>
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6b6:	d204      	bcs.n	800c6c2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6be:	60da      	str	r2, [r3, #12]
 800c6c0:	e17f      	b.n	800c9c2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c6c8:	e17b      	b.n	800c9c2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6d2:	f040 80bd 	bne.w	800c850 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c6d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6da:	2b20      	cmp	r3, #32
 800c6dc:	dc48      	bgt.n	800c770 <UART_SetConfig+0xa3c>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	db7b      	blt.n	800c7da <UART_SetConfig+0xaa6>
 800c6e2:	2b20      	cmp	r3, #32
 800c6e4:	d879      	bhi.n	800c7da <UART_SetConfig+0xaa6>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <UART_SetConfig+0x9b8>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c777 	.word	0x0800c777
 800c6f0:	0800c77f 	.word	0x0800c77f
 800c6f4:	0800c7db 	.word	0x0800c7db
 800c6f8:	0800c7db 	.word	0x0800c7db
 800c6fc:	0800c787 	.word	0x0800c787
 800c700:	0800c7db 	.word	0x0800c7db
 800c704:	0800c7db 	.word	0x0800c7db
 800c708:	0800c7db 	.word	0x0800c7db
 800c70c:	0800c797 	.word	0x0800c797
 800c710:	0800c7db 	.word	0x0800c7db
 800c714:	0800c7db 	.word	0x0800c7db
 800c718:	0800c7db 	.word	0x0800c7db
 800c71c:	0800c7db 	.word	0x0800c7db
 800c720:	0800c7db 	.word	0x0800c7db
 800c724:	0800c7db 	.word	0x0800c7db
 800c728:	0800c7db 	.word	0x0800c7db
 800c72c:	0800c7a7 	.word	0x0800c7a7
 800c730:	0800c7db 	.word	0x0800c7db
 800c734:	0800c7db 	.word	0x0800c7db
 800c738:	0800c7db 	.word	0x0800c7db
 800c73c:	0800c7db 	.word	0x0800c7db
 800c740:	0800c7db 	.word	0x0800c7db
 800c744:	0800c7db 	.word	0x0800c7db
 800c748:	0800c7db 	.word	0x0800c7db
 800c74c:	0800c7db 	.word	0x0800c7db
 800c750:	0800c7db 	.word	0x0800c7db
 800c754:	0800c7db 	.word	0x0800c7db
 800c758:	0800c7db 	.word	0x0800c7db
 800c75c:	0800c7db 	.word	0x0800c7db
 800c760:	0800c7db 	.word	0x0800c7db
 800c764:	0800c7db 	.word	0x0800c7db
 800c768:	0800c7db 	.word	0x0800c7db
 800c76c:	0800c7cd 	.word	0x0800c7cd
 800c770:	2b40      	cmp	r3, #64	; 0x40
 800c772:	d02e      	beq.n	800c7d2 <UART_SetConfig+0xa9e>
 800c774:	e031      	b.n	800c7da <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c776:	f7fa fc1d 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 800c77a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c77c:	e033      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c77e:	f7fa fc2f 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 800c782:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c784:	e02f      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c786:	f107 0314 	add.w	r3, r7, #20
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fb ffb4 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c794:	e027      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c796:	f107 0308 	add.w	r3, r7, #8
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fc f900 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7a4:	e01f      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7a6:	4b6e      	ldr	r3, [pc, #440]	; (800c960 <UART_SetConfig+0xc2c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7b2:	4b6b      	ldr	r3, [pc, #428]	; (800c960 <UART_SetConfig+0xc2c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	08db      	lsrs	r3, r3, #3
 800c7b8:	f003 0303 	and.w	r3, r3, #3
 800c7bc:	4a69      	ldr	r2, [pc, #420]	; (800c964 <UART_SetConfig+0xc30>)
 800c7be:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7c4:	e00f      	b.n	800c7e6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c7c6:	4b67      	ldr	r3, [pc, #412]	; (800c964 <UART_SetConfig+0xc30>)
 800c7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7ca:	e00c      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7cc:	4b66      	ldr	r3, [pc, #408]	; (800c968 <UART_SetConfig+0xc34>)
 800c7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7d0:	e009      	b.n	800c7e6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7d8:	e005      	b.n	800c7e6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c7e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 80ea 	beq.w	800c9c2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	4a5a      	ldr	r2, [pc, #360]	; (800c95c <UART_SetConfig+0xc28>)
 800c7f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c800:	005a      	lsls	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	085b      	lsrs	r3, r3, #1
 800c808:	441a      	add	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c812:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	2b0f      	cmp	r3, #15
 800c818:	d916      	bls.n	800c848 <UART_SetConfig+0xb14>
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c820:	d212      	bcs.n	800c848 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	b29b      	uxth	r3, r3
 800c826:	f023 030f 	bic.w	r3, r3, #15
 800c82a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	085b      	lsrs	r3, r3, #1
 800c830:	b29b      	uxth	r3, r3
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	b29a      	uxth	r2, r3
 800c838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c83a:	4313      	orrs	r3, r2
 800c83c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c844:	60da      	str	r2, [r3, #12]
 800c846:	e0bc      	b.n	800c9c2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c84e:	e0b8      	b.n	800c9c2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c854:	2b20      	cmp	r3, #32
 800c856:	dc4b      	bgt.n	800c8f0 <UART_SetConfig+0xbbc>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f2c0 8087 	blt.w	800c96c <UART_SetConfig+0xc38>
 800c85e:	2b20      	cmp	r3, #32
 800c860:	f200 8084 	bhi.w	800c96c <UART_SetConfig+0xc38>
 800c864:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <UART_SetConfig+0xb38>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c8f7 	.word	0x0800c8f7
 800c870:	0800c8ff 	.word	0x0800c8ff
 800c874:	0800c96d 	.word	0x0800c96d
 800c878:	0800c96d 	.word	0x0800c96d
 800c87c:	0800c907 	.word	0x0800c907
 800c880:	0800c96d 	.word	0x0800c96d
 800c884:	0800c96d 	.word	0x0800c96d
 800c888:	0800c96d 	.word	0x0800c96d
 800c88c:	0800c917 	.word	0x0800c917
 800c890:	0800c96d 	.word	0x0800c96d
 800c894:	0800c96d 	.word	0x0800c96d
 800c898:	0800c96d 	.word	0x0800c96d
 800c89c:	0800c96d 	.word	0x0800c96d
 800c8a0:	0800c96d 	.word	0x0800c96d
 800c8a4:	0800c96d 	.word	0x0800c96d
 800c8a8:	0800c96d 	.word	0x0800c96d
 800c8ac:	0800c927 	.word	0x0800c927
 800c8b0:	0800c96d 	.word	0x0800c96d
 800c8b4:	0800c96d 	.word	0x0800c96d
 800c8b8:	0800c96d 	.word	0x0800c96d
 800c8bc:	0800c96d 	.word	0x0800c96d
 800c8c0:	0800c96d 	.word	0x0800c96d
 800c8c4:	0800c96d 	.word	0x0800c96d
 800c8c8:	0800c96d 	.word	0x0800c96d
 800c8cc:	0800c96d 	.word	0x0800c96d
 800c8d0:	0800c96d 	.word	0x0800c96d
 800c8d4:	0800c96d 	.word	0x0800c96d
 800c8d8:	0800c96d 	.word	0x0800c96d
 800c8dc:	0800c96d 	.word	0x0800c96d
 800c8e0:	0800c96d 	.word	0x0800c96d
 800c8e4:	0800c96d 	.word	0x0800c96d
 800c8e8:	0800c96d 	.word	0x0800c96d
 800c8ec:	0800c94d 	.word	0x0800c94d
 800c8f0:	2b40      	cmp	r3, #64	; 0x40
 800c8f2:	d02e      	beq.n	800c952 <UART_SetConfig+0xc1e>
 800c8f4:	e03a      	b.n	800c96c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8f6:	f7fa fb5d 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 800c8fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8fc:	e03c      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8fe:	f7fa fb6f 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 800c902:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c904:	e038      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c906:	f107 0314 	add.w	r3, r7, #20
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fb fef4 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c914:	e030      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c916:	f107 0308 	add.w	r3, r7, #8
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fc f840 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c924:	e028      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c926:	4b0e      	ldr	r3, [pc, #56]	; (800c960 <UART_SetConfig+0xc2c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c932:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <UART_SetConfig+0xc2c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	08db      	lsrs	r3, r3, #3
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	4a09      	ldr	r2, [pc, #36]	; (800c964 <UART_SetConfig+0xc30>)
 800c93e:	fa22 f303 	lsr.w	r3, r2, r3
 800c942:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c944:	e018      	b.n	800c978 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <UART_SetConfig+0xc30>)
 800c948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c94a:	e015      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <UART_SetConfig+0xc34>)
 800c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c950:	e012      	b.n	800c978 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c958:	e00e      	b.n	800c978 <UART_SetConfig+0xc44>
 800c95a:	bf00      	nop
 800c95c:	08015384 	.word	0x08015384
 800c960:	58024400 	.word	0x58024400
 800c964:	03d09000 	.word	0x03d09000
 800c968:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c96c:	2300      	movs	r3, #0
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c976:	bf00      	nop
    }

    if (pclk != 0U)
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d021      	beq.n	800c9c2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	4a1a      	ldr	r2, [pc, #104]	; (800c9ec <UART_SetConfig+0xcb8>)
 800c984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c988:	461a      	mov	r2, r3
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	085b      	lsrs	r3, r3, #1
 800c996:	441a      	add	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	2b0f      	cmp	r3, #15
 800c9a6:	d909      	bls.n	800c9bc <UART_SetConfig+0xc88>
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ae:	d205      	bcs.n	800c9bc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60da      	str	r2, [r3, #12]
 800c9ba:	e002      	b.n	800c9c2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c9de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3738      	adds	r7, #56	; 0x38
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	08015384 	.word	0x08015384

0800c9f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fc:	f003 0301 	and.w	r3, r3, #1
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00a      	beq.n	800ca1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca40:	f003 0304 	and.w	r3, r3, #4
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00a      	beq.n	800ca5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	f003 0308 	and.w	r3, r3, #8
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00a      	beq.n	800caa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	f003 0320 	and.w	r3, r3, #32
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d01a      	beq.n	800cb06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caee:	d10a      	bne.n	800cb06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00a      	beq.n	800cb28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	605a      	str	r2, [r3, #4]
  }
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb44:	f7f6 fc50 	bl	80033e8 <HAL_GetTick>
 800cb48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0308 	and.w	r3, r3, #8
 800cb54:	2b08      	cmp	r3, #8
 800cb56:	d10e      	bne.n	800cb76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f82f 	bl	800cbca <UART_WaitOnFlagUntilTimeout>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e025      	b.n	800cbc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d10e      	bne.n	800cba2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f819 	bl	800cbca <UART_WaitOnFlagUntilTimeout>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e00f      	b.n	800cbc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2220      	movs	r2, #32
 800cba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2220      	movs	r2, #32
 800cbae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b09c      	sub	sp, #112	; 0x70
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	60f8      	str	r0, [r7, #12]
 800cbd2:	60b9      	str	r1, [r7, #8]
 800cbd4:	603b      	str	r3, [r7, #0]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbda:	e0a9      	b.n	800cd30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe2:	f000 80a5 	beq.w	800cd30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbe6:	f7f6 fbff 	bl	80033e8 <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d302      	bcc.n	800cbfc <UART_WaitOnFlagUntilTimeout+0x32>
 800cbf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d140      	bne.n	800cc7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc10:	667b      	str	r3, [r7, #100]	; 0x64
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc22:	e841 2300 	strex	r3, r2, [r1]
 800cc26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e6      	bne.n	800cbfc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3308      	adds	r3, #8
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	f023 0301 	bic.w	r3, r3, #1
 800cc44:	663b      	str	r3, [r7, #96]	; 0x60
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc4e:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e5      	bne.n	800cc2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2220      	movs	r2, #32
 800cc66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2220      	movs	r2, #32
 800cc6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e069      	b.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d051      	beq.n	800cd30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc9a:	d149      	bne.n	800cd30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cca4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccae:	e853 3f00 	ldrex	r3, [r3]
 800ccb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ccba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ccca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cccc:	e841 2300 	strex	r3, r2, [r1]
 800ccd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e6      	bne.n	800cca6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3308      	adds	r3, #8
 800ccde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	e853 3f00 	ldrex	r3, [r3]
 800cce6:	613b      	str	r3, [r7, #16]
   return(result);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f023 0301 	bic.w	r3, r3, #1
 800ccee:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccf8:	623a      	str	r2, [r7, #32]
 800ccfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfc:	69f9      	ldr	r1, [r7, #28]
 800ccfe:	6a3a      	ldr	r2, [r7, #32]
 800cd00:	e841 2300 	strex	r3, r2, [r1]
 800cd04:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1e5      	bne.n	800ccd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2220      	movs	r2, #32
 800cd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e010      	b.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	69da      	ldr	r2, [r3, #28]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	bf0c      	ite	eq
 800cd40:	2301      	moveq	r3, #1
 800cd42:	2300      	movne	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	461a      	mov	r2, r3
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	f43f af46 	beq.w	800cbdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3770      	adds	r7, #112	; 0x70
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d101      	bne.n	800cd70 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e027      	b.n	800cdc0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2224      	movs	r2, #36	; 0x24
 800cd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 0201 	bic.w	r2, r2, #1
 800cd96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e02d      	b.n	800ce40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2224      	movs	r2, #36	; 0x24
 800cdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f022 0201 	bic.w	r2, r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f84f 	bl	800cec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2220      	movs	r2, #32
 800ce32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e02d      	b.n	800cebc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2224      	movs	r2, #36	; 0x24
 800ce6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f022 0201 	bic.w	r2, r2, #1
 800ce86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f811 	bl	800cec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2220      	movs	r2, #32
 800ceae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d108      	bne.n	800cee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cee4:	e031      	b.n	800cf4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cee6:	2310      	movs	r3, #16
 800cee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ceea:	2310      	movs	r3, #16
 800ceec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	0e5b      	lsrs	r3, r3, #25
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0307 	and.w	r3, r3, #7
 800cefc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	0f5b      	lsrs	r3, r3, #29
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	f003 0307 	and.w	r3, r3, #7
 800cf0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf0e:	7bbb      	ldrb	r3, [r7, #14]
 800cf10:	7b3a      	ldrb	r2, [r7, #12]
 800cf12:	4911      	ldr	r1, [pc, #68]	; (800cf58 <UARTEx_SetNbDataToProcess+0x94>)
 800cf14:	5c8a      	ldrb	r2, [r1, r2]
 800cf16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf1a:	7b3a      	ldrb	r2, [r7, #12]
 800cf1c:	490f      	ldr	r1, [pc, #60]	; (800cf5c <UARTEx_SetNbDataToProcess+0x98>)
 800cf1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf20:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	7b7a      	ldrb	r2, [r7, #13]
 800cf30:	4909      	ldr	r1, [pc, #36]	; (800cf58 <UARTEx_SetNbDataToProcess+0x94>)
 800cf32:	5c8a      	ldrb	r2, [r1, r2]
 800cf34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf38:	7b7a      	ldrb	r2, [r7, #13]
 800cf3a:	4908      	ldr	r1, [pc, #32]	; (800cf5c <UARTEx_SetNbDataToProcess+0x98>)
 800cf3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf4a:	bf00      	nop
 800cf4c:	3714      	adds	r7, #20
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	0801539c 	.word	0x0801539c
 800cf5c:	080153a4 	.word	0x080153a4

0800cf60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cf60:	b084      	sub	sp, #16
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	f107 001c 	add.w	r0, r7, #28
 800cf6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cf76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cf78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cf7a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800cf7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800cf82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800cf86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <SDMMC_Init+0x50>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	b004      	add	sp, #16
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	ffc02c00 	.word	0xffc02c00

0800cfb4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b083      	sub	sp, #12
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f043 0203 	orr.w	r2, r3, #3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0303 	and.w	r3, r3, #3
}
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
	...

0800d030 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d04e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d054:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d05a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	4313      	orrs	r3, r2
 800d060:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	4b06      	ldr	r3, [pc, #24]	; (800d080 <SDMMC_SendCommand+0x50>)
 800d068:	4013      	ands	r3, r2
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	431a      	orrs	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3714      	adds	r7, #20
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	fffee0c0 	.word	0xfffee0c0

0800d084 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	b2db      	uxtb	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d09e:	b480      	push	{r7}
 800d0a0:	b085      	sub	sp, #20
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3314      	adds	r3, #20
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d0ea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d0f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d0f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	431a      	orrs	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d10e:	2300      	movs	r3, #0

}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b088      	sub	sp, #32
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d12a:	2310      	movs	r3, #16
 800d12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d12e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d13c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d13e:	f107 0308 	add.w	r3, r7, #8
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ff73 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d14a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d14e:	2110      	movs	r1, #16
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fa5f 	bl	800d614 <SDMMC_GetCmdResp1>
 800d156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d158:	69fb      	ldr	r3, [r7, #28]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3720      	adds	r7, #32
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b088      	sub	sp, #32
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d170:	2311      	movs	r3, #17
 800d172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d174:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d17a:	2300      	movs	r3, #0
 800d17c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d17e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d184:	f107 0308 	add.w	r3, r7, #8
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff ff50 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d190:	f241 3288 	movw	r2, #5000	; 0x1388
 800d194:	2111      	movs	r1, #17
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fa3c 	bl	800d614 <SDMMC_GetCmdResp1>
 800d19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d19e:	69fb      	ldr	r3, [r7, #28]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d1b6:	2312      	movs	r3, #18
 800d1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ca:	f107 0308 	add.w	r3, r7, #8
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ff2d 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d1d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1da:	2112      	movs	r1, #18
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fa19 	bl	800d614 <SDMMC_GetCmdResp1>
 800d1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b088      	sub	sp, #32
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d1fc:	2318      	movs	r3, #24
 800d1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d200:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d206:	2300      	movs	r3, #0
 800d208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d20a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d20e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff ff0a 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d220:	2118      	movs	r1, #24
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f9f6 	bl	800d614 <SDMMC_GetCmdResp1>
 800d228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d22a:	69fb      	ldr	r3, [r7, #28]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3720      	adds	r7, #32
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b088      	sub	sp, #32
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d242:	2319      	movs	r3, #25
 800d244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d24c:	2300      	movs	r3, #0
 800d24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d256:	f107 0308 	add.w	r3, r7, #8
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff fee7 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d262:	f241 3288 	movw	r2, #5000	; 0x1388
 800d266:	2119      	movs	r1, #25
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f9d3 	bl	800d614 <SDMMC_GetCmdResp1>
 800d26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d270:	69fb      	ldr	r3, [r7, #28]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d284:	2300      	movs	r3, #0
 800d286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d288:	230c      	movs	r3, #12
 800d28a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d292:	2300      	movs	r3, #0
 800d294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d29a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2b4:	f107 0308 	add.w	r3, r7, #8
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff feb8 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d2c0:	4a0b      	ldr	r2, [pc, #44]	; (800d2f0 <SDMMC_CmdStopTransfer+0x74>)
 800d2c2:	210c      	movs	r1, #12
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f9a5 	bl	800d614 <SDMMC_GetCmdResp1>
 800d2ca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2de:	d101      	bne.n	800d2e4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d2e4:	69fb      	ldr	r3, [r7, #28]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	05f5e100 	.word	0x05f5e100

0800d2f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d302:	2307      	movs	r3, #7
 800d304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d316:	f107 0308 	add.w	r3, r7, #8
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff fe87 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d322:	f241 3288 	movw	r2, #5000	; 0x1388
 800d326:	2107      	movs	r1, #7
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f973 	bl	800d614 <SDMMC_GetCmdResp1>
 800d32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d330:	69fb      	ldr	r3, [r7, #28]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b088      	sub	sp, #32
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d342:	2300      	movs	r3, #0
 800d344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d346:	2300      	movs	r3, #0
 800d348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d34e:	2300      	movs	r3, #0
 800d350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d358:	f107 0308 	add.w	r3, r7, #8
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff fe66 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fb97 	bl	800da98 <SDMMC_GetCmdError>
 800d36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36c:	69fb      	ldr	r3, [r7, #28]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b088      	sub	sp, #32
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d37e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d384:	2308      	movs	r3, #8
 800d386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38e:	2300      	movs	r3, #0
 800d390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d398:	f107 0308 	add.w	r3, r7, #8
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fe46 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fb29 	bl	800d9fc <SDMMC_GetCmdResp7>
 800d3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b088      	sub	sp, #32
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d3c4:	2337      	movs	r3, #55	; 0x37
 800d3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d8:	f107 0308 	add.w	r3, r7, #8
 800d3dc:	4619      	mov	r1, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff fe26 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e8:	2137      	movs	r1, #55	; 0x37
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f912 	bl	800d614 <SDMMC_GetCmdResp1>
 800d3f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3720      	adds	r7, #32
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b088      	sub	sp, #32
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d40a:	2329      	movs	r3, #41	; 0x29
 800d40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d40e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d414:	2300      	movs	r3, #0
 800d416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d41e:	f107 0308 	add.w	r3, r7, #8
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff fe03 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fa2e 	bl	800d88c <SDMMC_GetCmdResp3>
 800d430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d432:	69fb      	ldr	r3, [r7, #28]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d44a:	2306      	movs	r3, #6
 800d44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d44e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d454:	2300      	movs	r3, #0
 800d456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d45c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d45e:	f107 0308 	add.w	r3, r7, #8
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fde3 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d46e:	2106      	movs	r1, #6
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f8cf 	bl	800d614 <SDMMC_GetCmdResp1>
 800d476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d478:	69fb      	ldr	r3, [r7, #28]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3720      	adds	r7, #32
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b088      	sub	sp, #32
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d48e:	2333      	movs	r3, #51	; 0x33
 800d490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d492:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d498:	2300      	movs	r3, #0
 800d49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4a2:	f107 0308 	add.w	r3, r7, #8
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff fdc1 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4b2:	2133      	movs	r1, #51	; 0x33
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f8ad 	bl	800d614 <SDMMC_GetCmdResp1>
 800d4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4bc:	69fb      	ldr	r3, [r7, #28]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b088      	sub	sp, #32
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d4d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fd9f 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f980 	bl	800d7f8 <SDMMC_GetCmdResp2>
 800d4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4fa:	69fb      	ldr	r3, [r7, #28]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3720      	adds	r7, #32
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d512:	2309      	movs	r3, #9
 800d514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d526:	f107 0308 	add.w	r3, r7, #8
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fd7f 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f960 	bl	800d7f8 <SDMMC_GetCmdResp2>
 800d538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d53a:	69fb      	ldr	r3, [r7, #28]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b088      	sub	sp, #32
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d552:	2303      	movs	r3, #3
 800d554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d566:	f107 0308 	add.w	r3, r7, #8
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fd5f 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	2103      	movs	r1, #3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f9c8 	bl	800d90c <SDMMC_GetCmdResp6>
 800d57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d57e:	69fb      	ldr	r3, [r7, #28]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d596:	230d      	movs	r3, #13
 800d598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d59a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5aa:	f107 0308 	add.w	r3, r7, #8
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff fd3d 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d5b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ba:	210d      	movs	r1, #13
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f829 	bl	800d614 <SDMMC_GetCmdResp1>
 800d5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3720      	adds	r7, #32
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d5da:	230d      	movs	r3, #13
 800d5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5ee:	f107 0308 	add.w	r3, r7, #8
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff fd1b 	bl	800d030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5fe:	210d      	movs	r1, #13
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f807 	bl	800d614 <SDMMC_GetCmdResp1>
 800d606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d608:	69fb      	ldr	r3, [r7, #28]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	460b      	mov	r3, r1
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d622:	4b70      	ldr	r3, [pc, #448]	; (800d7e4 <SDMMC_GetCmdResp1+0x1d0>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a70      	ldr	r2, [pc, #448]	; (800d7e8 <SDMMC_GetCmdResp1+0x1d4>)
 800d628:	fba2 2303 	umull	r2, r3, r2, r3
 800d62c:	0a5a      	lsrs	r2, r3, #9
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	fb02 f303 	mul.w	r3, r2, r3
 800d634:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	1e5a      	subs	r2, r3, #1
 800d63a:	61fa      	str	r2, [r7, #28]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d102      	bne.n	800d646 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d644:	e0c9      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	4b67      	ldr	r3, [pc, #412]	; (800d7ec <SDMMC_GetCmdResp1+0x1d8>)
 800d650:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0ef      	beq.n	800d636 <SDMMC_GetCmdResp1+0x22>
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1ea      	bne.n	800d636 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d664:	f003 0304 	and.w	r3, r3, #4
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d004      	beq.n	800d676 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2204      	movs	r2, #4
 800d670:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d672:	2304      	movs	r3, #4
 800d674:	e0b1      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d004      	beq.n	800d68c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d688:	2301      	movs	r3, #1
 800d68a:	e0a6      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	4a58      	ldr	r2, [pc, #352]	; (800d7f0 <SDMMC_GetCmdResp1+0x1dc>)
 800d690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fcf6 	bl	800d084 <SDMMC_GetCommandResponse>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	7afb      	ldrb	r3, [r7, #11]
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d001      	beq.n	800d6a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e099      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f7ff fcf8 	bl	800d09e <SDMMC_GetResponse>
 800d6ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	4b50      	ldr	r3, [pc, #320]	; (800d7f4 <SDMMC_GetCmdResp1+0x1e0>)
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e08d      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	da02      	bge.n	800d6ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d6c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6c8:	e087      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d6d4:	2340      	movs	r3, #64	; 0x40
 800d6d6:	e080      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d6e2:	2380      	movs	r3, #128	; 0x80
 800d6e4:	e079      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6f4:	e071      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d700:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d704:	e069      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d714:	e061      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d724:	e059      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d734:	e051      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d744:	e049      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d754:	e041      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d764:	e039      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d774:	e031      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d780:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d784:	e029      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d794:	e021      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d7a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d7a4:	e019      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d7b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d7b4:	e011      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d7c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d7c4:	e009      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f003 0308 	and.w	r3, r3, #8
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d7d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d7d4:	e001      	b.n	800d7da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d7d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	2400802c 	.word	0x2400802c
 800d7e8:	10624dd3 	.word	0x10624dd3
 800d7ec:	00200045 	.word	0x00200045
 800d7f0:	002000c5 	.word	0x002000c5
 800d7f4:	fdffe008 	.word	0xfdffe008

0800d7f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d800:	4b1f      	ldr	r3, [pc, #124]	; (800d880 <SDMMC_GetCmdResp2+0x88>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a1f      	ldr	r2, [pc, #124]	; (800d884 <SDMMC_GetCmdResp2+0x8c>)
 800d806:	fba2 2303 	umull	r2, r3, r2, r3
 800d80a:	0a5b      	lsrs	r3, r3, #9
 800d80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d810:	fb02 f303 	mul.w	r3, r2, r3
 800d814:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	1e5a      	subs	r2, r3, #1
 800d81a:	60fa      	str	r2, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d824:	e026      	b.n	800d874 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0ef      	beq.n	800d816 <SDMMC_GetCmdResp2+0x1e>
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1ea      	bne.n	800d816 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	f003 0304 	and.w	r3, r3, #4
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d004      	beq.n	800d856 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2204      	movs	r2, #4
 800d850:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d852:	2304      	movs	r3, #4
 800d854:	e00e      	b.n	800d874 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d004      	beq.n	800d86c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d868:	2301      	movs	r3, #1
 800d86a:	e003      	b.n	800d874 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a06      	ldr	r2, [pc, #24]	; (800d888 <SDMMC_GetCmdResp2+0x90>)
 800d870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	2400802c 	.word	0x2400802c
 800d884:	10624dd3 	.word	0x10624dd3
 800d888:	002000c5 	.word	0x002000c5

0800d88c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d894:	4b1a      	ldr	r3, [pc, #104]	; (800d900 <SDMMC_GetCmdResp3+0x74>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a1a      	ldr	r2, [pc, #104]	; (800d904 <SDMMC_GetCmdResp3+0x78>)
 800d89a:	fba2 2303 	umull	r2, r3, r2, r3
 800d89e:	0a5b      	lsrs	r3, r3, #9
 800d8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a4:	fb02 f303 	mul.w	r3, r2, r3
 800d8a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	1e5a      	subs	r2, r3, #1
 800d8ae:	60fa      	str	r2, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d102      	bne.n	800d8ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8b8:	e01b      	b.n	800d8f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0ef      	beq.n	800d8aa <SDMMC_GetCmdResp3+0x1e>
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1ea      	bne.n	800d8aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d004      	beq.n	800d8ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8e6:	2304      	movs	r3, #4
 800d8e8:	e003      	b.n	800d8f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a06      	ldr	r2, [pc, #24]	; (800d908 <SDMMC_GetCmdResp3+0x7c>)
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	2400802c 	.word	0x2400802c
 800d904:	10624dd3 	.word	0x10624dd3
 800d908:	002000c5 	.word	0x002000c5

0800d90c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b088      	sub	sp, #32
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	460b      	mov	r3, r1
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d91a:	4b35      	ldr	r3, [pc, #212]	; (800d9f0 <SDMMC_GetCmdResp6+0xe4>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a35      	ldr	r2, [pc, #212]	; (800d9f4 <SDMMC_GetCmdResp6+0xe8>)
 800d920:	fba2 2303 	umull	r2, r3, r2, r3
 800d924:	0a5b      	lsrs	r3, r3, #9
 800d926:	f241 3288 	movw	r2, #5000	; 0x1388
 800d92a:	fb02 f303 	mul.w	r3, r2, r3
 800d92e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	1e5a      	subs	r2, r3, #1
 800d934:	61fa      	str	r2, [r7, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d102      	bne.n	800d940 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d93a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d93e:	e052      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d944:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0ef      	beq.n	800d930 <SDMMC_GetCmdResp6+0x24>
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1ea      	bne.n	800d930 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95e:	f003 0304 	and.w	r3, r3, #4
 800d962:	2b00      	cmp	r3, #0
 800d964:	d004      	beq.n	800d970 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2204      	movs	r2, #4
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d96c:	2304      	movs	r3, #4
 800d96e:	e03a      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d004      	beq.n	800d986 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2201      	movs	r2, #1
 800d980:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d982:	2301      	movs	r3, #1
 800d984:	e02f      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff fb7c 	bl	800d084 <SDMMC_GetCommandResponse>
 800d98c:	4603      	mov	r3, r0
 800d98e:	461a      	mov	r2, r3
 800d990:	7afb      	ldrb	r3, [r7, #11]
 800d992:	4293      	cmp	r3, r2
 800d994:	d001      	beq.n	800d99a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d996:	2301      	movs	r3, #1
 800d998:	e025      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	4a16      	ldr	r2, [pc, #88]	; (800d9f8 <SDMMC_GetCmdResp6+0xec>)
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff fb7b 	bl	800d09e <SDMMC_GetResponse>
 800d9a8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e011      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d9d0:	e009      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9e0:	e001      	b.n	800d9e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d9e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3720      	adds	r7, #32
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	2400802c 	.word	0x2400802c
 800d9f4:	10624dd3 	.word	0x10624dd3
 800d9f8:	002000c5 	.word	0x002000c5

0800d9fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da04:	4b22      	ldr	r3, [pc, #136]	; (800da90 <SDMMC_GetCmdResp7+0x94>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a22      	ldr	r2, [pc, #136]	; (800da94 <SDMMC_GetCmdResp7+0x98>)
 800da0a:	fba2 2303 	umull	r2, r3, r2, r3
 800da0e:	0a5b      	lsrs	r3, r3, #9
 800da10:	f241 3288 	movw	r2, #5000	; 0x1388
 800da14:	fb02 f303 	mul.w	r3, r2, r3
 800da18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	1e5a      	subs	r2, r3, #1
 800da1e:	60fa      	str	r2, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da28:	e02c      	b.n	800da84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0ef      	beq.n	800da1a <SDMMC_GetCmdResp7+0x1e>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1ea      	bne.n	800da1a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d004      	beq.n	800da5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2204      	movs	r2, #4
 800da54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da56:	2304      	movs	r3, #4
 800da58:	e014      	b.n	800da84 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	2b00      	cmp	r3, #0
 800da64:	d004      	beq.n	800da70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da6c:	2301      	movs	r3, #1
 800da6e:	e009      	b.n	800da84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2240      	movs	r2, #64	; 0x40
 800da80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da82:	2300      	movs	r3, #0

}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	2400802c 	.word	0x2400802c
 800da94:	10624dd3 	.word	0x10624dd3

0800da98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800daa0:	4b11      	ldr	r3, [pc, #68]	; (800dae8 <SDMMC_GetCmdError+0x50>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a11      	ldr	r2, [pc, #68]	; (800daec <SDMMC_GetCmdError+0x54>)
 800daa6:	fba2 2303 	umull	r2, r3, r2, r3
 800daaa:	0a5b      	lsrs	r3, r3, #9
 800daac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab0:	fb02 f303 	mul.w	r3, r2, r3
 800dab4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	1e5a      	subs	r2, r3, #1
 800daba:	60fa      	str	r2, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dac4:	e009      	b.n	800dada <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0f1      	beq.n	800dab6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a06      	ldr	r2, [pc, #24]	; (800daf0 <SDMMC_GetCmdError+0x58>)
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	2400802c 	.word	0x2400802c
 800daec:	10624dd3 	.word	0x10624dd3
 800daf0:	002000c5 	.word	0x002000c5

0800daf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800daf8:	4904      	ldr	r1, [pc, #16]	; (800db0c <MX_FATFS_Init+0x18>)
 800dafa:	4805      	ldr	r0, [pc, #20]	; (800db10 <MX_FATFS_Init+0x1c>)
 800dafc:	f003 f8ea 	bl	8010cd4 <FATFS_LinkDriver>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	4b03      	ldr	r3, [pc, #12]	; (800db14 <MX_FATFS_Init+0x20>)
 800db06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db08:	bf00      	nop
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	24027674 	.word	0x24027674
 800db10:	080153ac 	.word	0x080153ac
 800db14:	24027670 	.word	0x24027670

0800db18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800db18:	b480      	push	{r7}
 800db1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800db1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800db1e:	4618      	mov	r0, r3
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800db32:	f000 f885 	bl	800dc40 <BSP_SD_IsDetected>
 800db36:	4603      	mov	r3, r0
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d001      	beq.n	800db40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800db3c:	2302      	movs	r3, #2
 800db3e:	e012      	b.n	800db66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800db40:	480b      	ldr	r0, [pc, #44]	; (800db70 <BSP_SD_Init+0x48>)
 800db42:	f7fb fb37 	bl	80091b4 <HAL_SD_Init>
 800db46:	4603      	mov	r3, r0
 800db48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db4a:	79fb      	ldrb	r3, [r7, #7]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800db50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db54:	4806      	ldr	r0, [pc, #24]	; (800db70 <BSP_SD_Init+0x48>)
 800db56:	f7fc f9e5 	bl	8009f24 <HAL_SD_ConfigWideBusOperation>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db64:	79fb      	ldrb	r3, [r7, #7]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	240271c0 	.word	0x240271c0

0800db74 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68ba      	ldr	r2, [r7, #8]
 800db88:	68f9      	ldr	r1, [r7, #12]
 800db8a:	4806      	ldr	r0, [pc, #24]	; (800dba4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800db8c:	f7fb fc2c 	bl	80093e8 <HAL_SD_ReadBlocks_DMA>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	240271c0 	.word	0x240271c0

0800dba8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	68f9      	ldr	r1, [r7, #12]
 800dbbe:	4806      	ldr	r0, [pc, #24]	; (800dbd8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dbc0:	f7fb fcba 	bl	8009538 <HAL_SD_WriteBlocks_DMA>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	240271c0 	.word	0x240271c0

0800dbdc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbe0:	4805      	ldr	r0, [pc, #20]	; (800dbf8 <BSP_SD_GetCardState+0x1c>)
 800dbe2:	f7fc fab1 	bl	800a148 <HAL_SD_GetCardState>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	bf14      	ite	ne
 800dbec:	2301      	movne	r3, #1
 800dbee:	2300      	moveq	r3, #0
 800dbf0:	b2db      	uxtb	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	240271c0 	.word	0x240271c0

0800dbfc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc04:	6879      	ldr	r1, [r7, #4]
 800dc06:	4803      	ldr	r0, [pc, #12]	; (800dc14 <BSP_SD_GetCardInfo+0x18>)
 800dc08:	f7fc f960 	bl	8009ecc <HAL_SD_GetCardInfo>
}
 800dc0c:	bf00      	nop
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	240271c0 	.word	0x240271c0

0800dc18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dc20:	f000 f9ac 	bl	800df7c <BSP_SD_WriteCpltCallback>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dc34:	f000 f9b4 	bl	800dfa0 <BSP_SD_ReadCpltCallback>
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dc46:	2301      	movs	r3, #1
 800dc48:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc4a:	f000 f80b 	bl	800dc64 <BSP_PlatformIsDetected>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc54:	2300      	movs	r3, #0
 800dc56:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	b2db      	uxtb	r3, r3
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dc6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dc72:	4806      	ldr	r0, [pc, #24]	; (800dc8c <BSP_PlatformIsDetected+0x28>)
 800dc74:	f7f7 ff5a 	bl	8005b2c <HAL_GPIO_ReadPin>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dc82:	79fb      	ldrb	r3, [r7, #7]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	58020800 	.word	0x58020800

0800dc90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800dc98:	f003 f922 	bl	8010ee0 <osKernelGetTickCount>
 800dc9c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800dc9e:	e006      	b.n	800dcae <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dca0:	f7ff ff9c 	bl	800dbdc <BSP_SD_GetCardState>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d101      	bne.n	800dcae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e009      	b.n	800dcc2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800dcae:	f003 f917 	bl	8010ee0 <osKernelGetTickCount>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d8f0      	bhi.n	800dca0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dcbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dcd6:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <SD_CheckStatus+0x38>)
 800dcd8:	2201      	movs	r2, #1
 800dcda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dcdc:	f7ff ff7e 	bl	800dbdc <BSP_SD_GetCardState>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d107      	bne.n	800dcf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dce6:	4b07      	ldr	r3, [pc, #28]	; (800dd04 <SD_CheckStatus+0x38>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f023 0301 	bic.w	r3, r3, #1
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	4b04      	ldr	r3, [pc, #16]	; (800dd04 <SD_CheckStatus+0x38>)
 800dcf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dcf6:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <SD_CheckStatus+0x38>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b2db      	uxtb	r3, r3
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	24008039 	.word	0x24008039

0800dd08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dd12:	4b1c      	ldr	r3, [pc, #112]	; (800dd84 <SD_initialize+0x7c>)
 800dd14:	2201      	movs	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800dd18:	f003 f89a 	bl	8010e50 <osKernelGetState>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d129      	bne.n	800dd76 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dd22:	f7ff ff01 	bl	800db28 <BSP_SD_Init>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d107      	bne.n	800dd3c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff ffcc 	bl	800dccc <SD_CheckStatus>
 800dd34:	4603      	mov	r3, r0
 800dd36:	461a      	mov	r2, r3
 800dd38:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <SD_initialize+0x7c>)
 800dd3a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dd3c:	4b11      	ldr	r3, [pc, #68]	; (800dd84 <SD_initialize+0x7c>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d017      	beq.n	800dd76 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800dd46:	4b10      	ldr	r3, [pc, #64]	; (800dd88 <SD_initialize+0x80>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d107      	bne.n	800dd5e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2102      	movs	r1, #2
 800dd52:	200a      	movs	r0, #10
 800dd54:	f003 faca 	bl	80112ec <osMessageQueueNew>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	4a0b      	ldr	r2, [pc, #44]	; (800dd88 <SD_initialize+0x80>)
 800dd5c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800dd5e:	4b0a      	ldr	r3, [pc, #40]	; (800dd88 <SD_initialize+0x80>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d107      	bne.n	800dd76 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800dd66:	4b07      	ldr	r3, [pc, #28]	; (800dd84 <SD_initialize+0x7c>)
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f043 0301 	orr.w	r3, r3, #1
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	4b04      	ldr	r3, [pc, #16]	; (800dd84 <SD_initialize+0x7c>)
 800dd74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dd76:	4b03      	ldr	r3, [pc, #12]	; (800dd84 <SD_initialize+0x7c>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b2db      	uxtb	r3, r3
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	24008039 	.word	0x24008039
 800dd88:	240081d0 	.word	0x240081d0

0800dd8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7ff ff97 	bl	800dccc <SD_CheckStatus>
 800dd9e:	4603      	mov	r3, r0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	607a      	str	r2, [r7, #4]
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ddbc:	f247 5030 	movw	r0, #30000	; 0x7530
 800ddc0:	f7ff ff66 	bl	800dc90 <SD_CheckStatusWithTimeout>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	da01      	bge.n	800ddce <SD_read+0x26>
  {
    return res;
 800ddca:	7ffb      	ldrb	r3, [r7, #31]
 800ddcc:	e02f      	b.n	800de2e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	68b8      	ldr	r0, [r7, #8]
 800ddd4:	f7ff fece 	bl	800db74 <BSP_SD_ReadBlocks_DMA>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800dddc:	7fbb      	ldrb	r3, [r7, #30]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d124      	bne.n	800de2c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dde2:	4b15      	ldr	r3, [pc, #84]	; (800de38 <SD_read+0x90>)
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f107 0112 	add.w	r1, r7, #18
 800ddea:	f247 5330 	movw	r3, #30000	; 0x7530
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f003 fb50 	bl	8011494 <osMessageQueueGet>
 800ddf4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d117      	bne.n	800de2c <SD_read+0x84>
 800ddfc:	8a7b      	ldrh	r3, [r7, #18]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d114      	bne.n	800de2c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800de02:	f003 f86d 	bl	8010ee0 <osKernelGetTickCount>
 800de06:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800de08:	e007      	b.n	800de1a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de0a:	f7ff fee7 	bl	800dbdc <BSP_SD_GetCardState>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <SD_read+0x72>
              {
                res = RES_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800de18:	e008      	b.n	800de2c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800de1a:	f003 f861 	bl	8010ee0 <osKernelGetTickCount>
 800de1e:	4602      	mov	r2, r0
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	f247 522f 	movw	r2, #29999	; 0x752f
 800de28:	4293      	cmp	r3, r2
 800de2a:	d9ee      	bls.n	800de0a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800de2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	240081d0 	.word	0x240081d0

0800de3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de50:	f247 5030 	movw	r0, #30000	; 0x7530
 800de54:	f7ff ff1c 	bl	800dc90 <SD_CheckStatusWithTimeout>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da01      	bge.n	800de62 <SD_write+0x26>
  {
    return res;
 800de5e:	7ffb      	ldrb	r3, [r7, #31]
 800de60:	e02d      	b.n	800debe <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	68b8      	ldr	r0, [r7, #8]
 800de68:	f7ff fe9e 	bl	800dba8 <BSP_SD_WriteBlocks_DMA>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d124      	bne.n	800debc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <SD_write+0x8c>)
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	f107 0112 	add.w	r1, r7, #18
 800de7a:	f247 5330 	movw	r3, #30000	; 0x7530
 800de7e:	2200      	movs	r2, #0
 800de80:	f003 fb08 	bl	8011494 <osMessageQueueGet>
 800de84:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d117      	bne.n	800debc <SD_write+0x80>
 800de8c:	8a7b      	ldrh	r3, [r7, #18]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d114      	bne.n	800debc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800de92:	f003 f825 	bl	8010ee0 <osKernelGetTickCount>
 800de96:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800de98:	e007      	b.n	800deaa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de9a:	f7ff fe9f 	bl	800dbdc <BSP_SD_GetCardState>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <SD_write+0x6e>
          {
            res = RES_OK;
 800dea4:	2300      	movs	r3, #0
 800dea6:	77fb      	strb	r3, [r7, #31]
            break;
 800dea8:	e008      	b.n	800debc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800deaa:	f003 f819 	bl	8010ee0 <osKernelGetTickCount>
 800deae:	4602      	mov	r2, r0
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	f247 522f 	movw	r2, #29999	; 0x752f
 800deb8:	4293      	cmp	r3, r2
 800deba:	d9ee      	bls.n	800de9a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800debc:	7ffb      	ldrb	r3, [r7, #31]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3720      	adds	r7, #32
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	240081d0 	.word	0x240081d0

0800decc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08c      	sub	sp, #48	; 0x30
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	603a      	str	r2, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
 800ded8:	460b      	mov	r3, r1
 800deda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dee2:	4b25      	ldr	r3, [pc, #148]	; (800df78 <SD_ioctl+0xac>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 0301 	and.w	r3, r3, #1
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <SD_ioctl+0x28>
 800def0:	2303      	movs	r3, #3
 800def2:	e03c      	b.n	800df6e <SD_ioctl+0xa2>

  switch (cmd)
 800def4:	79bb      	ldrb	r3, [r7, #6]
 800def6:	2b03      	cmp	r3, #3
 800def8:	d834      	bhi.n	800df64 <SD_ioctl+0x98>
 800defa:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <SD_ioctl+0x34>)
 800defc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df00:	0800df11 	.word	0x0800df11
 800df04:	0800df19 	.word	0x0800df19
 800df08:	0800df31 	.word	0x0800df31
 800df0c:	0800df4b 	.word	0x0800df4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df10:	2300      	movs	r3, #0
 800df12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df16:	e028      	b.n	800df6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800df18:	f107 0308 	add.w	r3, r7, #8
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7ff fe6d 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df22:	6a3a      	ldr	r2, [r7, #32]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df2e:	e01c      	b.n	800df6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df30:	f107 0308 	add.w	r3, r7, #8
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff fe61 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df48:	e00f      	b.n	800df6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df4a:	f107 0308 	add.w	r3, r7, #8
 800df4e:	4618      	mov	r0, r3
 800df50:	f7ff fe54 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	0a5a      	lsrs	r2, r3, #9
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df62:	e002      	b.n	800df6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df64:	2304      	movs	r3, #4
 800df66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3730      	adds	r7, #48	; 0x30
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	24008039 	.word	0x24008039

0800df7c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800df82:	2302      	movs	r3, #2
 800df84:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <BSP_SD_WriteCpltCallback+0x20>)
 800df88:	6818      	ldr	r0, [r3, #0]
 800df8a:	1db9      	adds	r1, r7, #6
 800df8c:	2300      	movs	r3, #0
 800df8e:	2200      	movs	r2, #0
 800df90:	f003 fa20 	bl	80113d4 <osMessageQueuePut>
#endif
}
 800df94:	bf00      	nop
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	240081d0 	.word	0x240081d0

0800dfa0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800dfaa:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <BSP_SD_ReadCpltCallback+0x20>)
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	1db9      	adds	r1, r7, #6
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f003 fa0e 	bl	80113d4 <osMessageQueuePut>
#endif
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	240081d0 	.word	0x240081d0

0800dfc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	4a08      	ldr	r2, [pc, #32]	; (800dff4 <disk_status+0x30>)
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	79fa      	ldrb	r2, [r7, #7]
 800dfdc:	4905      	ldr	r1, [pc, #20]	; (800dff4 <disk_status+0x30>)
 800dfde:	440a      	add	r2, r1
 800dfe0:	7a12      	ldrb	r2, [r2, #8]
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	4798      	blx	r3
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	240081fc 	.word	0x240081fc

0800dff8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	4a0d      	ldr	r2, [pc, #52]	; (800e040 <disk_initialize+0x48>)
 800e00a:	5cd3      	ldrb	r3, [r2, r3]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d111      	bne.n	800e034 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	4a0b      	ldr	r2, [pc, #44]	; (800e040 <disk_initialize+0x48>)
 800e014:	2101      	movs	r1, #1
 800e016:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	4a09      	ldr	r2, [pc, #36]	; (800e040 <disk_initialize+0x48>)
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	79fa      	ldrb	r2, [r7, #7]
 800e026:	4906      	ldr	r1, [pc, #24]	; (800e040 <disk_initialize+0x48>)
 800e028:	440a      	add	r2, r1
 800e02a:	7a12      	ldrb	r2, [r2, #8]
 800e02c:	4610      	mov	r0, r2
 800e02e:	4798      	blx	r3
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e034:	7bfb      	ldrb	r3, [r7, #15]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	240081fc 	.word	0x240081fc

0800e044 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e044:	b590      	push	{r4, r7, lr}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60b9      	str	r1, [r7, #8]
 800e04c:	607a      	str	r2, [r7, #4]
 800e04e:	603b      	str	r3, [r7, #0]
 800e050:	4603      	mov	r3, r0
 800e052:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e054:	7bfb      	ldrb	r3, [r7, #15]
 800e056:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <disk_read+0x3c>)
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4413      	add	r3, r2
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	689c      	ldr	r4, [r3, #8]
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	4a07      	ldr	r2, [pc, #28]	; (800e080 <disk_read+0x3c>)
 800e064:	4413      	add	r3, r2
 800e066:	7a18      	ldrb	r0, [r3, #8]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	68b9      	ldr	r1, [r7, #8]
 800e06e:	47a0      	blx	r4
 800e070:	4603      	mov	r3, r0
 800e072:	75fb      	strb	r3, [r7, #23]
  return res;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
}
 800e076:	4618      	mov	r0, r3
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd90      	pop	{r4, r7, pc}
 800e07e:	bf00      	nop
 800e080:	240081fc 	.word	0x240081fc

0800e084 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e084:	b590      	push	{r4, r7, lr}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	4a0a      	ldr	r2, [pc, #40]	; (800e0c0 <disk_write+0x3c>)
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	68dc      	ldr	r4, [r3, #12]
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
 800e0a2:	4a07      	ldr	r2, [pc, #28]	; (800e0c0 <disk_write+0x3c>)
 800e0a4:	4413      	add	r3, r2
 800e0a6:	7a18      	ldrb	r0, [r3, #8]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	68b9      	ldr	r1, [r7, #8]
 800e0ae:	47a0      	blx	r4
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	371c      	adds	r7, #28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd90      	pop	{r4, r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	240081fc 	.word	0x240081fc

0800e0c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	603a      	str	r2, [r7, #0]
 800e0ce:	71fb      	strb	r3, [r7, #7]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e0d4:	79fb      	ldrb	r3, [r7, #7]
 800e0d6:	4a09      	ldr	r2, [pc, #36]	; (800e0fc <disk_ioctl+0x38>)
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	79fa      	ldrb	r2, [r7, #7]
 800e0e2:	4906      	ldr	r1, [pc, #24]	; (800e0fc <disk_ioctl+0x38>)
 800e0e4:	440a      	add	r2, r1
 800e0e6:	7a10      	ldrb	r0, [r2, #8]
 800e0e8:	79b9      	ldrb	r1, [r7, #6]
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	4798      	blx	r3
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	240081fc 	.word	0x240081fc

0800e100 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3301      	adds	r3, #1
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e110:	89fb      	ldrh	r3, [r7, #14]
 800e112:	021b      	lsls	r3, r3, #8
 800e114:	b21a      	sxth	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	4313      	orrs	r3, r2
 800e11e:	b21b      	sxth	r3, r3
 800e120:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e122:	89fb      	ldrh	r3, [r7, #14]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3303      	adds	r3, #3
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	3202      	adds	r2, #2
 800e148:	7812      	ldrb	r2, [r2, #0]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	021b      	lsls	r3, r3, #8
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	3201      	adds	r2, #1
 800e156:	7812      	ldrb	r2, [r2, #0]
 800e158:	4313      	orrs	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	021b      	lsls	r3, r3, #8
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7812      	ldrb	r2, [r2, #0]
 800e164:	4313      	orrs	r3, r2
 800e166:	60fb      	str	r3, [r7, #12]
	return rv;
 800e168:	68fb      	ldr	r3, [r7, #12]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3714      	adds	r7, #20
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr

0800e176 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e176:	b480      	push	{r7}
 800e178:	b083      	sub	sp, #12
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	460b      	mov	r3, r1
 800e180:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	887a      	ldrh	r2, [r7, #2]
 800e18a:	b2d2      	uxtb	r2, r2
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	887b      	ldrh	r3, [r7, #2]
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	607a      	str	r2, [r7, #4]
 800e19a:	887a      	ldrh	r2, [r7, #2]
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	b2d2      	uxtb	r2, r2
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	0a1b      	lsrs	r3, r3, #8
 800e1c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	607a      	str	r2, [r7, #4]
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	0a1b      	lsrs	r3, r3, #8
 800e1d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	1c5a      	adds	r2, r3, #1
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	683a      	ldr	r2, [r7, #0]
 800e1e2:	b2d2      	uxtb	r2, r2
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	0a1b      	lsrs	r3, r3, #8
 800e1ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	b2d2      	uxtb	r2, r2
 800e1f6:	701a      	strb	r2, [r3, #0]
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e204:	b480      	push	{r7}
 800e206:	b087      	sub	sp, #28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00d      	beq.n	800e23a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	1c53      	adds	r3, r2, #1
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	1c59      	adds	r1, r3, #1
 800e228:	6179      	str	r1, [r7, #20]
 800e22a:	7812      	ldrb	r2, [r2, #0]
 800e22c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3b01      	subs	r3, #1
 800e232:	607b      	str	r3, [r7, #4]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1f1      	bne.n	800e21e <mem_cpy+0x1a>
	}
}
 800e23a:	bf00      	nop
 800e23c:	371c      	adds	r7, #28
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e246:	b480      	push	{r7}
 800e248:	b087      	sub	sp, #28
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	60b9      	str	r1, [r7, #8]
 800e250:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	617a      	str	r2, [r7, #20]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	b2d2      	uxtb	r2, r2
 800e260:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	3b01      	subs	r3, #1
 800e266:	607b      	str	r3, [r7, #4]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1f3      	bne.n	800e256 <mem_set+0x10>
}
 800e26e:	bf00      	nop
 800e270:	bf00      	nop
 800e272:	371c      	adds	r7, #28
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e27c:	b480      	push	{r7}
 800e27e:	b089      	sub	sp, #36	; 0x24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	61fb      	str	r3, [r7, #28]
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e290:	2300      	movs	r3, #0
 800e292:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	61fa      	str	r2, [r7, #28]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	4619      	mov	r1, r3
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	1c5a      	adds	r2, r3, #1
 800e2a2:	61ba      	str	r2, [r7, #24]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	1acb      	subs	r3, r1, r3
 800e2a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	607b      	str	r3, [r7, #4]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d002      	beq.n	800e2bc <mem_cmp+0x40>
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0eb      	beq.n	800e294 <mem_cmp+0x18>

	return r;
 800e2bc:	697b      	ldr	r3, [r7, #20]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3724      	adds	r7, #36	; 0x24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e2d4:	e002      	b.n	800e2dc <chk_chr+0x12>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	607b      	str	r3, [r7, #4]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <chk_chr+0x26>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d1f2      	bne.n	800e2d6 <chk_chr+0xc>
	return *str;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d009      	beq.n	800e322 <lock_fs+0x22>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	4618      	mov	r0, r3
 800e314:	f002 fd14 	bl	8010d40 <ff_req_grant>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <lock_fs+0x22>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <lock_fs+0x24>
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	460b      	mov	r3, r1
 800e336:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00d      	beq.n	800e35a <unlock_fs+0x2e>
 800e33e:	78fb      	ldrb	r3, [r7, #3]
 800e340:	2b0c      	cmp	r3, #12
 800e342:	d00a      	beq.n	800e35a <unlock_fs+0x2e>
 800e344:	78fb      	ldrb	r3, [r7, #3]
 800e346:	2b0b      	cmp	r3, #11
 800e348:	d007      	beq.n	800e35a <unlock_fs+0x2e>
 800e34a:	78fb      	ldrb	r3, [r7, #3]
 800e34c:	2b0f      	cmp	r3, #15
 800e34e:	d004      	beq.n	800e35a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	4618      	mov	r0, r3
 800e356:	f002 fd08 	bl	8010d6a <ff_rel_grant>
	}
}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e36e:	2300      	movs	r3, #0
 800e370:	60bb      	str	r3, [r7, #8]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	60fb      	str	r3, [r7, #12]
 800e376:	e029      	b.n	800e3cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e378:	4a27      	ldr	r2, [pc, #156]	; (800e418 <chk_lock+0xb4>)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	011b      	lsls	r3, r3, #4
 800e37e:	4413      	add	r3, r2
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d01d      	beq.n	800e3c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e386:	4a24      	ldr	r2, [pc, #144]	; (800e418 <chk_lock+0xb4>)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	011b      	lsls	r3, r3, #4
 800e38c:	4413      	add	r3, r2
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d116      	bne.n	800e3c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e398:	4a1f      	ldr	r2, [pc, #124]	; (800e418 <chk_lock+0xb4>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	4413      	add	r3, r2
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d10c      	bne.n	800e3c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3ac:	4a1a      	ldr	r2, [pc, #104]	; (800e418 <chk_lock+0xb4>)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	011b      	lsls	r3, r3, #4
 800e3b2:	4413      	add	r3, r2
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d102      	bne.n	800e3c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3c0:	e007      	b.n	800e3d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d9d2      	bls.n	800e378 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d109      	bne.n	800e3ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <chk_lock+0x80>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2b02      	cmp	r3, #2
 800e3e2:	d101      	bne.n	800e3e8 <chk_lock+0x84>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e010      	b.n	800e40a <chk_lock+0xa6>
 800e3e8:	2312      	movs	r3, #18
 800e3ea:	e00e      	b.n	800e40a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d108      	bne.n	800e404 <chk_lock+0xa0>
 800e3f2:	4a09      	ldr	r2, [pc, #36]	; (800e418 <chk_lock+0xb4>)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	4413      	add	r3, r2
 800e3fa:	330c      	adds	r3, #12
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e402:	d101      	bne.n	800e408 <chk_lock+0xa4>
 800e404:	2310      	movs	r3, #16
 800e406:	e000      	b.n	800e40a <chk_lock+0xa6>
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	240081dc 	.word	0x240081dc

0800e41c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e422:	2300      	movs	r3, #0
 800e424:	607b      	str	r3, [r7, #4]
 800e426:	e002      	b.n	800e42e <enq_lock+0x12>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	3301      	adds	r3, #1
 800e42c:	607b      	str	r3, [r7, #4]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d806      	bhi.n	800e442 <enq_lock+0x26>
 800e434:	4a09      	ldr	r2, [pc, #36]	; (800e45c <enq_lock+0x40>)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	4413      	add	r3, r2
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1f2      	bne.n	800e428 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b02      	cmp	r3, #2
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	240081dc 	.word	0x240081dc

0800e460 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e46a:	2300      	movs	r3, #0
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	e01f      	b.n	800e4b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e470:	4a41      	ldr	r2, [pc, #260]	; (800e578 <inc_lock+0x118>)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	011b      	lsls	r3, r3, #4
 800e476:	4413      	add	r3, r2
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d113      	bne.n	800e4aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e482:	4a3d      	ldr	r2, [pc, #244]	; (800e578 <inc_lock+0x118>)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	011b      	lsls	r3, r3, #4
 800e488:	4413      	add	r3, r2
 800e48a:	3304      	adds	r3, #4
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e492:	429a      	cmp	r2, r3
 800e494:	d109      	bne.n	800e4aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e496:	4a38      	ldr	r2, [pc, #224]	; (800e578 <inc_lock+0x118>)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	011b      	lsls	r3, r3, #4
 800e49c:	4413      	add	r3, r2
 800e49e:	3308      	adds	r3, #8
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d006      	beq.n	800e4b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	60fb      	str	r3, [r7, #12]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d9dc      	bls.n	800e470 <inc_lock+0x10>
 800e4b6:	e000      	b.n	800e4ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e4b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d132      	bne.n	800e526 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	e002      	b.n	800e4cc <inc_lock+0x6c>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d806      	bhi.n	800e4e0 <inc_lock+0x80>
 800e4d2:	4a29      	ldr	r2, [pc, #164]	; (800e578 <inc_lock+0x118>)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	011b      	lsls	r3, r3, #4
 800e4d8:	4413      	add	r3, r2
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1f2      	bne.n	800e4c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d101      	bne.n	800e4ea <inc_lock+0x8a>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e040      	b.n	800e56c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	4922      	ldr	r1, [pc, #136]	; (800e578 <inc_lock+0x118>)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	440b      	add	r3, r1
 800e4f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	491e      	ldr	r1, [pc, #120]	; (800e578 <inc_lock+0x118>)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	011b      	lsls	r3, r3, #4
 800e502:	440b      	add	r3, r1
 800e504:	3304      	adds	r3, #4
 800e506:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	695a      	ldr	r2, [r3, #20]
 800e50c:	491a      	ldr	r1, [pc, #104]	; (800e578 <inc_lock+0x118>)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	011b      	lsls	r3, r3, #4
 800e512:	440b      	add	r3, r1
 800e514:	3308      	adds	r3, #8
 800e516:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e518:	4a17      	ldr	r2, [pc, #92]	; (800e578 <inc_lock+0x118>)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	4413      	add	r3, r2
 800e520:	330c      	adds	r3, #12
 800e522:	2200      	movs	r2, #0
 800e524:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d009      	beq.n	800e540 <inc_lock+0xe0>
 800e52c:	4a12      	ldr	r2, [pc, #72]	; (800e578 <inc_lock+0x118>)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	011b      	lsls	r3, r3, #4
 800e532:	4413      	add	r3, r2
 800e534:	330c      	adds	r3, #12
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <inc_lock+0xe0>
 800e53c:	2300      	movs	r3, #0
 800e53e:	e015      	b.n	800e56c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d108      	bne.n	800e558 <inc_lock+0xf8>
 800e546:	4a0c      	ldr	r2, [pc, #48]	; (800e578 <inc_lock+0x118>)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	011b      	lsls	r3, r3, #4
 800e54c:	4413      	add	r3, r2
 800e54e:	330c      	adds	r3, #12
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	b29a      	uxth	r2, r3
 800e556:	e001      	b.n	800e55c <inc_lock+0xfc>
 800e558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e55c:	4906      	ldr	r1, [pc, #24]	; (800e578 <inc_lock+0x118>)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	011b      	lsls	r3, r3, #4
 800e562:	440b      	add	r3, r1
 800e564:	330c      	adds	r3, #12
 800e566:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3301      	adds	r3, #1
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	240081dc 	.word	0x240081dc

0800e57c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3b01      	subs	r3, #1
 800e588:	607b      	str	r3, [r7, #4]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d825      	bhi.n	800e5dc <dec_lock+0x60>
		n = Files[i].ctr;
 800e590:	4a17      	ldr	r2, [pc, #92]	; (800e5f0 <dec_lock+0x74>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	011b      	lsls	r3, r3, #4
 800e596:	4413      	add	r3, r2
 800e598:	330c      	adds	r3, #12
 800e59a:	881b      	ldrh	r3, [r3, #0]
 800e59c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e59e:	89fb      	ldrh	r3, [r7, #14]
 800e5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5a4:	d101      	bne.n	800e5aa <dec_lock+0x2e>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e5aa:	89fb      	ldrh	r3, [r7, #14]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <dec_lock+0x3a>
 800e5b0:	89fb      	ldrh	r3, [r7, #14]
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e5b6:	4a0e      	ldr	r2, [pc, #56]	; (800e5f0 <dec_lock+0x74>)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	011b      	lsls	r3, r3, #4
 800e5bc:	4413      	add	r3, r2
 800e5be:	330c      	adds	r3, #12
 800e5c0:	89fa      	ldrh	r2, [r7, #14]
 800e5c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e5c4:	89fb      	ldrh	r3, [r7, #14]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d105      	bne.n	800e5d6 <dec_lock+0x5a>
 800e5ca:	4a09      	ldr	r2, [pc, #36]	; (800e5f0 <dec_lock+0x74>)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	011b      	lsls	r3, r3, #4
 800e5d0:	4413      	add	r3, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	737b      	strb	r3, [r7, #13]
 800e5da:	e001      	b.n	800e5e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e5dc:	2302      	movs	r3, #2
 800e5de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e5e0:	7b7b      	ldrb	r3, [r7, #13]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3714      	adds	r7, #20
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	240081dc 	.word	0x240081dc

0800e5f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]
 800e600:	e010      	b.n	800e624 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e602:	4a0d      	ldr	r2, [pc, #52]	; (800e638 <clear_lock+0x44>)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	011b      	lsls	r3, r3, #4
 800e608:	4413      	add	r3, r2
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d105      	bne.n	800e61e <clear_lock+0x2a>
 800e612:	4a09      	ldr	r2, [pc, #36]	; (800e638 <clear_lock+0x44>)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	011b      	lsls	r3, r3, #4
 800e618:	4413      	add	r3, r2
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3301      	adds	r3, #1
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d9eb      	bls.n	800e602 <clear_lock+0xe>
	}
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	3714      	adds	r7, #20
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	240081dc 	.word	0x240081dc

0800e63c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b086      	sub	sp, #24
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	78db      	ldrb	r3, [r3, #3]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d034      	beq.n	800e6ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e654:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	7858      	ldrb	r0, [r3, #1]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e660:	2301      	movs	r3, #1
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	f7ff fd0e 	bl	800e084 <disk_write>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e66e:	2301      	movs	r3, #1
 800e670:	73fb      	strb	r3, [r7, #15]
 800e672:	e022      	b.n	800e6ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	1ad2      	subs	r2, r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	429a      	cmp	r2, r3
 800e688:	d217      	bcs.n	800e6ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	789b      	ldrb	r3, [r3, #2]
 800e68e:	613b      	str	r3, [r7, #16]
 800e690:	e010      	b.n	800e6b4 <sync_window+0x78>
					wsect += fs->fsize;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	69db      	ldr	r3, [r3, #28]
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	4413      	add	r3, r2
 800e69a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7858      	ldrb	r0, [r3, #1]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	f7ff fceb 	bl	800e084 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	613b      	str	r3, [r7, #16]
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d8eb      	bhi.n	800e692 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d01b      	beq.n	800e714 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff ffad 	bl	800e63c <sync_window>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d113      	bne.n	800e714 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7858      	ldrb	r0, [r3, #1]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	683a      	ldr	r2, [r7, #0]
 800e6fa:	f7ff fca3 	bl	800e044 <disk_read>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d004      	beq.n	800e70e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e714:	7bfb      	ldrb	r3, [r7, #15]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ff87 	bl	800e63c <sync_window>
 800e72e:	4603      	mov	r3, r0
 800e730:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e732:	7bfb      	ldrb	r3, [r7, #15]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d158      	bne.n	800e7ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d148      	bne.n	800e7d2 <sync_fs+0xb2>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	791b      	ldrb	r3, [r3, #4]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d144      	bne.n	800e7d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3334      	adds	r3, #52	; 0x34
 800e74c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e750:	2100      	movs	r1, #0
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fd77 	bl	800e246 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3334      	adds	r3, #52	; 0x34
 800e75c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e760:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e764:	4618      	mov	r0, r3
 800e766:	f7ff fd06 	bl	800e176 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3334      	adds	r3, #52	; 0x34
 800e76e:	4921      	ldr	r1, [pc, #132]	; (800e7f4 <sync_fs+0xd4>)
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff fd1b 	bl	800e1ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	3334      	adds	r3, #52	; 0x34
 800e77a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e77e:	491e      	ldr	r1, [pc, #120]	; (800e7f8 <sync_fs+0xd8>)
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff fd13 	bl	800e1ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3334      	adds	r3, #52	; 0x34
 800e78a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	695b      	ldr	r3, [r3, #20]
 800e792:	4619      	mov	r1, r3
 800e794:	4610      	mov	r0, r2
 800e796:	f7ff fd09 	bl	800e1ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	3334      	adds	r3, #52	; 0x34
 800e79e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f7ff fcff 	bl	800e1ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	7858      	ldrb	r0, [r3, #1]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	f7ff fc5c 	bl	800e084 <disk_write>
			fs->fsi_flag = 0;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	785b      	ldrb	r3, [r3, #1]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7ff fc72 	bl	800e0c4 <disk_ioctl>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <sync_fs+0xca>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	41615252 	.word	0x41615252
 800e7f8:	61417272 	.word	0x61417272

0800e7fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	3b02      	subs	r3, #2
 800e80a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	3b02      	subs	r3, #2
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	429a      	cmp	r2, r3
 800e816:	d301      	bcc.n	800e81c <clust2sect+0x20>
 800e818:	2300      	movs	r3, #0
 800e81a:	e008      	b.n	800e82e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	895b      	ldrh	r3, [r3, #10]
 800e820:	461a      	mov	r2, r3
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	fb03 f202 	mul.w	r2, r3, r2
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	4413      	add	r3, r2
}
 800e82e:	4618      	mov	r0, r3
 800e830:	370c      	adds	r7, #12
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b086      	sub	sp, #24
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
 800e842:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d904      	bls.n	800e85a <get_fat+0x20>
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	699b      	ldr	r3, [r3, #24]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	429a      	cmp	r2, r3
 800e858:	d302      	bcc.n	800e860 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e85a:	2301      	movs	r3, #1
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e08f      	b.n	800e980 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e860:	f04f 33ff 	mov.w	r3, #4294967295
 800e864:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d062      	beq.n	800e934 <get_fat+0xfa>
 800e86e:	2b03      	cmp	r3, #3
 800e870:	dc7c      	bgt.n	800e96c <get_fat+0x132>
 800e872:	2b01      	cmp	r3, #1
 800e874:	d002      	beq.n	800e87c <get_fat+0x42>
 800e876:	2b02      	cmp	r3, #2
 800e878:	d042      	beq.n	800e900 <get_fat+0xc6>
 800e87a:	e077      	b.n	800e96c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	085b      	lsrs	r3, r3, #1
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	4413      	add	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	0a5b      	lsrs	r3, r3, #9
 800e892:	4413      	add	r3, r2
 800e894:	4619      	mov	r1, r3
 800e896:	6938      	ldr	r0, [r7, #16]
 800e898:	f7ff ff14 	bl	800e6c4 <move_window>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d167      	bne.n	800e972 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	1c5a      	adds	r2, r3, #1
 800e8a6:	60fa      	str	r2, [r7, #12]
 800e8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	0a5b      	lsrs	r3, r3, #9
 800e8be:	4413      	add	r3, r2
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6938      	ldr	r0, [r7, #16]
 800e8c4:	f7ff fefe 	bl	800e6c4 <move_window>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d153      	bne.n	800e976 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	461a      	mov	r2, r3
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	f003 0301 	and.w	r3, r3, #1
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <get_fat+0xbc>
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	091b      	lsrs	r3, r3, #4
 800e8f4:	e002      	b.n	800e8fc <get_fat+0xc2>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8fc:	617b      	str	r3, [r7, #20]
			break;
 800e8fe:	e03f      	b.n	800e980 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	0a1b      	lsrs	r3, r3, #8
 800e908:	4413      	add	r3, r2
 800e90a:	4619      	mov	r1, r3
 800e90c:	6938      	ldr	r0, [r7, #16]
 800e90e:	f7ff fed9 	bl	800e6c4 <move_window>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d130      	bne.n	800e97a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e926:	4413      	add	r3, r2
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff fbe9 	bl	800e100 <ld_word>
 800e92e:	4603      	mov	r3, r0
 800e930:	617b      	str	r3, [r7, #20]
			break;
 800e932:	e025      	b.n	800e980 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	09db      	lsrs	r3, r3, #7
 800e93c:	4413      	add	r3, r2
 800e93e:	4619      	mov	r1, r3
 800e940:	6938      	ldr	r0, [r7, #16]
 800e942:	f7ff febf 	bl	800e6c4 <move_window>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d118      	bne.n	800e97e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e95a:	4413      	add	r3, r2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7ff fbe7 	bl	800e130 <ld_dword>
 800e962:	4603      	mov	r3, r0
 800e964:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e968:	617b      	str	r3, [r7, #20]
			break;
 800e96a:	e009      	b.n	800e980 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e96c:	2301      	movs	r3, #1
 800e96e:	617b      	str	r3, [r7, #20]
 800e970:	e006      	b.n	800e980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e972:	bf00      	nop
 800e974:	e004      	b.n	800e980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e976:	bf00      	nop
 800e978:	e002      	b.n	800e980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e97a:	bf00      	nop
 800e97c:	e000      	b.n	800e980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e97e:	bf00      	nop
		}
	}

	return val;
 800e980:	697b      	ldr	r3, [r7, #20]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e98a:	b590      	push	{r4, r7, lr}
 800e98c:	b089      	sub	sp, #36	; 0x24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e996:	2302      	movs	r3, #2
 800e998:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	f240 80d2 	bls.w	800eb46 <put_fat+0x1bc>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	f080 80cc 	bcs.w	800eb46 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b03      	cmp	r3, #3
 800e9b4:	f000 8096 	beq.w	800eae4 <put_fat+0x15a>
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	f300 80cd 	bgt.w	800eb58 <put_fat+0x1ce>
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d002      	beq.n	800e9c8 <put_fat+0x3e>
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d06e      	beq.n	800eaa4 <put_fat+0x11a>
 800e9c6:	e0c7      	b.n	800eb58 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	61bb      	str	r3, [r7, #24]
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	085b      	lsrs	r3, r3, #1
 800e9d0:	69ba      	ldr	r2, [r7, #24]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	0a5b      	lsrs	r3, r3, #9
 800e9de:	4413      	add	r3, r2
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f7ff fe6e 	bl	800e6c4 <move_window>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9ec:	7ffb      	ldrb	r3, [r7, #31]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f040 80ab 	bne.w	800eb4a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	1c59      	adds	r1, r3, #1
 800e9fe:	61b9      	str	r1, [r7, #24]
 800ea00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea04:	4413      	add	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00d      	beq.n	800ea2e <put_fat+0xa4>
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	b25b      	sxtb	r3, r3
 800ea18:	f003 030f 	and.w	r3, r3, #15
 800ea1c:	b25a      	sxtb	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	011b      	lsls	r3, r3, #4
 800ea24:	b25b      	sxtb	r3, r3
 800ea26:	4313      	orrs	r3, r2
 800ea28:	b25b      	sxtb	r3, r3
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	e001      	b.n	800ea32 <put_fat+0xa8>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	697a      	ldr	r2, [r7, #20]
 800ea34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	0a5b      	lsrs	r3, r3, #9
 800ea44:	4413      	add	r3, r2
 800ea46:	4619      	mov	r1, r3
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f7ff fe3b 	bl	800e6c4 <move_window>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea52:	7ffb      	ldrb	r3, [r7, #31]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d17a      	bne.n	800eb4e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea64:	4413      	add	r3, r2
 800ea66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	f003 0301 	and.w	r3, r3, #1
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <put_fat+0xf0>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	091b      	lsrs	r3, r3, #4
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	e00e      	b.n	800ea98 <put_fat+0x10e>
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	b25b      	sxtb	r3, r3
 800ea80:	f023 030f 	bic.w	r3, r3, #15
 800ea84:	b25a      	sxtb	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	0a1b      	lsrs	r3, r3, #8
 800ea8a:	b25b      	sxtb	r3, r3
 800ea8c:	f003 030f 	and.w	r3, r3, #15
 800ea90:	b25b      	sxtb	r3, r3
 800ea92:	4313      	orrs	r3, r2
 800ea94:	b25b      	sxtb	r3, r3
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	70da      	strb	r2, [r3, #3]
			break;
 800eaa2:	e059      	b.n	800eb58 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	0a1b      	lsrs	r3, r3, #8
 800eaac:	4413      	add	r3, r2
 800eaae:	4619      	mov	r1, r3
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f7ff fe07 	bl	800e6c4 <move_window>
 800eab6:	4603      	mov	r3, r0
 800eab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eaba:	7ffb      	ldrb	r3, [r7, #31]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d148      	bne.n	800eb52 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eace:	4413      	add	r3, r2
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	b292      	uxth	r2, r2
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fb4d 	bl	800e176 <st_word>
			fs->wflag = 1;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	70da      	strb	r2, [r3, #3]
			break;
 800eae2:	e039      	b.n	800eb58 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	09db      	lsrs	r3, r3, #7
 800eaec:	4413      	add	r3, r2
 800eaee:	4619      	mov	r1, r3
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f7ff fde7 	bl	800e6c4 <move_window>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eafa:	7ffb      	ldrb	r3, [r7, #31]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d12a      	bne.n	800eb56 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb14:	4413      	add	r3, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff fb0a 	bl	800e130 <ld_dword>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eb22:	4323      	orrs	r3, r4
 800eb24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb34:	4413      	add	r3, r2
 800eb36:	6879      	ldr	r1, [r7, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fb37 	bl	800e1ac <st_dword>
			fs->wflag = 1;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2201      	movs	r2, #1
 800eb42:	70da      	strb	r2, [r3, #3]
			break;
 800eb44:	e008      	b.n	800eb58 <put_fat+0x1ce>
		}
	}
 800eb46:	bf00      	nop
 800eb48:	e006      	b.n	800eb58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb4a:	bf00      	nop
 800eb4c:	e004      	b.n	800eb58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb4e:	bf00      	nop
 800eb50:	e002      	b.n	800eb58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb52:	bf00      	nop
 800eb54:	e000      	b.n	800eb58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb56:	bf00      	nop
	return res;
 800eb58:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3724      	adds	r7, #36	; 0x24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd90      	pop	{r4, r7, pc}

0800eb62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b088      	sub	sp, #32
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d904      	bls.n	800eb88 <remove_chain+0x26>
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d301      	bcc.n	800eb8c <remove_chain+0x2a>
 800eb88:	2302      	movs	r3, #2
 800eb8a:	e04b      	b.n	800ec24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00c      	beq.n	800ebac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eb92:	f04f 32ff 	mov.w	r2, #4294967295
 800eb96:	6879      	ldr	r1, [r7, #4]
 800eb98:	69b8      	ldr	r0, [r7, #24]
 800eb9a:	f7ff fef6 	bl	800e98a <put_fat>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eba2:	7ffb      	ldrb	r3, [r7, #31]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <remove_chain+0x4a>
 800eba8:	7ffb      	ldrb	r3, [r7, #31]
 800ebaa:	e03b      	b.n	800ec24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ebac:	68b9      	ldr	r1, [r7, #8]
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7ff fe43 	bl	800e83a <get_fat>
 800ebb4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d031      	beq.n	800ec20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d101      	bne.n	800ebc6 <remove_chain+0x64>
 800ebc2:	2302      	movs	r3, #2
 800ebc4:	e02e      	b.n	800ec24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebcc:	d101      	bne.n	800ebd2 <remove_chain+0x70>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e028      	b.n	800ec24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	69b8      	ldr	r0, [r7, #24]
 800ebd8:	f7ff fed7 	bl	800e98a <put_fat>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ebe0:	7ffb      	ldrb	r3, [r7, #31]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <remove_chain+0x88>
 800ebe6:	7ffb      	ldrb	r3, [r7, #31]
 800ebe8:	e01c      	b.n	800ec24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	695a      	ldr	r2, [r3, #20]
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	3b02      	subs	r3, #2
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d20b      	bcs.n	800ec10 <remove_chain+0xae>
			fs->free_clst++;
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	695b      	ldr	r3, [r3, #20]
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	791b      	ldrb	r3, [r3, #4]
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d3c6      	bcc.n	800ebac <remove_chain+0x4a>
 800ec1e:	e000      	b.n	800ec22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ec20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3720      	adds	r7, #32
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b088      	sub	sp, #32
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10d      	bne.n	800ec5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d004      	beq.n	800ec58 <create_chain+0x2c>
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	699b      	ldr	r3, [r3, #24]
 800ec52:	69ba      	ldr	r2, [r7, #24]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d31b      	bcc.n	800ec90 <create_chain+0x64>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	61bb      	str	r3, [r7, #24]
 800ec5c:	e018      	b.n	800ec90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff fdea 	bl	800e83a <get_fat>
 800ec66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d801      	bhi.n	800ec72 <create_chain+0x46>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e070      	b.n	800ed54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec78:	d101      	bne.n	800ec7e <create_chain+0x52>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	e06a      	b.n	800ed54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d201      	bcs.n	800ec8c <create_chain+0x60>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	e063      	b.n	800ed54 <create_chain+0x128>
		scl = clst;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	3301      	adds	r3, #1
 800ec98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	69fa      	ldr	r2, [r7, #28]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d307      	bcc.n	800ecb4 <create_chain+0x88>
				ncl = 2;
 800eca4:	2302      	movs	r3, #2
 800eca6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d901      	bls.n	800ecb4 <create_chain+0x88>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e04f      	b.n	800ed54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ecb4:	69f9      	ldr	r1, [r7, #28]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff fdbf 	bl	800e83a <get_fat>
 800ecbc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00e      	beq.n	800ece2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d003      	beq.n	800ecd2 <create_chain+0xa6>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd0:	d101      	bne.n	800ecd6 <create_chain+0xaa>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	e03e      	b.n	800ed54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ecd6:	69fa      	ldr	r2, [r7, #28]
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d1da      	bne.n	800ec94 <create_chain+0x68>
 800ecde:	2300      	movs	r3, #0
 800ece0:	e038      	b.n	800ed54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ece2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295
 800ece8:	69f9      	ldr	r1, [r7, #28]
 800ecea:	6938      	ldr	r0, [r7, #16]
 800ecec:	f7ff fe4d 	bl	800e98a <put_fat>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ecf4:	7dfb      	ldrb	r3, [r7, #23]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d109      	bne.n	800ed0e <create_chain+0xe2>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d006      	beq.n	800ed0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6938      	ldr	r0, [r7, #16]
 800ed06:	f7ff fe40 	bl	800e98a <put_fat>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d116      	bne.n	800ed42 <create_chain+0x116>
		fs->last_clst = ncl;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	69fa      	ldr	r2, [r7, #28]
 800ed18:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	695a      	ldr	r2, [r3, #20]
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	3b02      	subs	r3, #2
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d804      	bhi.n	800ed32 <create_chain+0x106>
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	695b      	ldr	r3, [r3, #20]
 800ed2c:	1e5a      	subs	r2, r3, #1
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	791b      	ldrb	r3, [r3, #4]
 800ed36:	f043 0301 	orr.w	r3, r3, #1
 800ed3a:	b2da      	uxtb	r2, r3
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	711a      	strb	r2, [r3, #4]
 800ed40:	e007      	b.n	800ed52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d102      	bne.n	800ed4e <create_chain+0x122>
 800ed48:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4c:	e000      	b.n	800ed50 <create_chain+0x124>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ed52:	69fb      	ldr	r3, [r7, #28]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3720      	adds	r7, #32
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed70:	3304      	adds	r3, #4
 800ed72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	0a5b      	lsrs	r3, r3, #9
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	8952      	ldrh	r2, [r2, #10]
 800ed7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	1d1a      	adds	r2, r3, #4
 800ed86:	613a      	str	r2, [r7, #16]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <clmt_clust+0x3a>
 800ed92:	2300      	movs	r3, #0
 800ed94:	e010      	b.n	800edb8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d307      	bcc.n	800edae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	617b      	str	r3, [r7, #20]
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	3304      	adds	r3, #4
 800edaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edac:	e7e9      	b.n	800ed82 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800edae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	4413      	add	r3, r2
}
 800edb8:	4618      	mov	r0, r3
 800edba:	371c      	adds	r7, #28
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edda:	d204      	bcs.n	800ede6 <dir_sdi+0x22>
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	f003 031f 	and.w	r3, r3, #31
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <dir_sdi+0x26>
		return FR_INT_ERR;
 800ede6:	2302      	movs	r3, #2
 800ede8:	e063      	b.n	800eeb2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <dir_sdi+0x46>
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d902      	bls.n	800ee0a <dir_sdi+0x46>
		clst = fs->dirbase;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10c      	bne.n	800ee2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	095b      	lsrs	r3, r3, #5
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	8912      	ldrh	r2, [r2, #8]
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d301      	bcc.n	800ee20 <dir_sdi+0x5c>
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	e048      	b.n	800eeb2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	61da      	str	r2, [r3, #28]
 800ee28:	e029      	b.n	800ee7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	895b      	ldrh	r3, [r3, #10]
 800ee2e:	025b      	lsls	r3, r3, #9
 800ee30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee32:	e019      	b.n	800ee68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6979      	ldr	r1, [r7, #20]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7ff fcfe 	bl	800e83a <get_fat>
 800ee3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee46:	d101      	bne.n	800ee4c <dir_sdi+0x88>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e032      	b.n	800eeb2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d904      	bls.n	800ee5c <dir_sdi+0x98>
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d301      	bcc.n	800ee60 <dir_sdi+0x9c>
 800ee5c:	2302      	movs	r3, #2
 800ee5e:	e028      	b.n	800eeb2 <dir_sdi+0xee>
			ofs -= csz;
 800ee60:	683a      	ldr	r2, [r7, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee68:	683a      	ldr	r2, [r7, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d2e1      	bcs.n	800ee34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ee70:	6979      	ldr	r1, [r7, #20]
 800ee72:	6938      	ldr	r0, [r7, #16]
 800ee74:	f7ff fcc2 	bl	800e7fc <clust2sect>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d101      	bne.n	800ee90 <dir_sdi+0xcc>
 800ee8c:	2302      	movs	r3, #2
 800ee8e:	e010      	b.n	800eeb2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	69da      	ldr	r2, [r3, #28]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	0a5b      	lsrs	r3, r3, #9
 800ee98:	441a      	add	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeaa:	441a      	add	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b086      	sub	sp, #24
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	3320      	adds	r3, #32
 800eed0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	69db      	ldr	r3, [r3, #28]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <dir_next+0x28>
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eee0:	d301      	bcc.n	800eee6 <dir_next+0x2c>
 800eee2:	2304      	movs	r3, #4
 800eee4:	e0aa      	b.n	800f03c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	f040 8098 	bne.w	800f022 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	1c5a      	adds	r2, r3, #1
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	699b      	ldr	r3, [r3, #24]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10b      	bne.n	800ef1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	095b      	lsrs	r3, r3, #5
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	8912      	ldrh	r2, [r2, #8]
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	f0c0 8088 	bcc.w	800f022 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	61da      	str	r2, [r3, #28]
 800ef18:	2304      	movs	r3, #4
 800ef1a:	e08f      	b.n	800f03c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	0a5b      	lsrs	r3, r3, #9
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	8952      	ldrh	r2, [r2, #10]
 800ef24:	3a01      	subs	r2, #1
 800ef26:	4013      	ands	r3, r2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d17a      	bne.n	800f022 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	4619      	mov	r1, r3
 800ef34:	4610      	mov	r0, r2
 800ef36:	f7ff fc80 	bl	800e83a <get_fat>
 800ef3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d801      	bhi.n	800ef46 <dir_next+0x8c>
 800ef42:	2302      	movs	r3, #2
 800ef44:	e07a      	b.n	800f03c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4c:	d101      	bne.n	800ef52 <dir_next+0x98>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e074      	b.n	800f03c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d358      	bcc.n	800f00e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d104      	bne.n	800ef6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	61da      	str	r2, [r3, #28]
 800ef68:	2304      	movs	r3, #4
 800ef6a:	e067      	b.n	800f03c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7ff fe59 	bl	800ec2c <create_chain>
 800ef7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <dir_next+0xcc>
 800ef82:	2307      	movs	r3, #7
 800ef84:	e05a      	b.n	800f03c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d101      	bne.n	800ef90 <dir_next+0xd6>
 800ef8c:	2302      	movs	r3, #2
 800ef8e:	e055      	b.n	800f03c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef96:	d101      	bne.n	800ef9c <dir_next+0xe2>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e04f      	b.n	800f03c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f7ff fb4d 	bl	800e63c <sync_window>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d001      	beq.n	800efac <dir_next+0xf2>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e047      	b.n	800f03c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	3334      	adds	r3, #52	; 0x34
 800efb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efb4:	2100      	movs	r1, #0
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff f945 	bl	800e246 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800efbc:	2300      	movs	r3, #0
 800efbe:	613b      	str	r3, [r7, #16]
 800efc0:	6979      	ldr	r1, [r7, #20]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f7ff fc1a 	bl	800e7fc <clust2sect>
 800efc8:	4602      	mov	r2, r0
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	631a      	str	r2, [r3, #48]	; 0x30
 800efce:	e012      	b.n	800eff6 <dir_next+0x13c>
						fs->wflag = 1;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f7ff fb30 	bl	800e63c <sync_window>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d001      	beq.n	800efe6 <dir_next+0x12c>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e02a      	b.n	800f03c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	3301      	adds	r3, #1
 800efea:	613b      	str	r3, [r7, #16]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	631a      	str	r2, [r3, #48]	; 0x30
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	895b      	ldrh	r3, [r3, #10]
 800effa:	461a      	mov	r2, r3
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	4293      	cmp	r3, r2
 800f000:	d3e6      	bcc.n	800efd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	1ad2      	subs	r2, r2, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f014:	6979      	ldr	r1, [r7, #20]
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f7ff fbf0 	bl	800e7fc <clust2sect>
 800f01c:	4602      	mov	r2, r0
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f034:	441a      	add	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f054:	2100      	movs	r1, #0
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff feb4 	bl	800edc4 <dir_sdi>
 800f05c:	4603      	mov	r3, r0
 800f05e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f060:	7dfb      	ldrb	r3, [r7, #23]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d12b      	bne.n	800f0be <dir_alloc+0x7a>
		n = 0;
 800f066:	2300      	movs	r3, #0
 800f068:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	4619      	mov	r1, r3
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7ff fb27 	bl	800e6c4 <move_window>
 800f076:	4603      	mov	r3, r0
 800f078:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d11d      	bne.n	800f0bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a1b      	ldr	r3, [r3, #32]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	2be5      	cmp	r3, #229	; 0xe5
 800f088:	d004      	beq.n	800f094 <dir_alloc+0x50>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a1b      	ldr	r3, [r3, #32]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d107      	bne.n	800f0a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3301      	adds	r3, #1
 800f098:	613b      	str	r3, [r7, #16]
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d102      	bne.n	800f0a8 <dir_alloc+0x64>
 800f0a2:	e00c      	b.n	800f0be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff ff05 	bl	800eeba <dir_next>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d0d7      	beq.n	800f06a <dir_alloc+0x26>
 800f0ba:	e000      	b.n	800f0be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f0bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	2b04      	cmp	r3, #4
 800f0c2:	d101      	bne.n	800f0c8 <dir_alloc+0x84>
 800f0c4:	2307      	movs	r3, #7
 800f0c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	331a      	adds	r3, #26
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff f80d 	bl	800e100 <ld_word>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d109      	bne.n	800f106 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	3314      	adds	r3, #20
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff f802 	bl	800e100 <ld_word>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	041b      	lsls	r3, r3, #16
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f106:	68fb      	ldr	r3, [r7, #12]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	331a      	adds	r3, #26
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	b292      	uxth	r2, r2
 800f124:	4611      	mov	r1, r2
 800f126:	4618      	mov	r0, r3
 800f128:	f7ff f825 	bl	800e176 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b03      	cmp	r3, #3
 800f132:	d109      	bne.n	800f148 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	f103 0214 	add.w	r2, r3, #20
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	0c1b      	lsrs	r3, r3, #16
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4619      	mov	r1, r3
 800f142:	4610      	mov	r0, r2
 800f144:	f7ff f817 	bl	800e176 <st_word>
	}
}
 800f148:	bf00      	nop
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b086      	sub	sp, #24
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f15e:	2100      	movs	r1, #0
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7ff fe2f 	bl	800edc4 <dir_sdi>
 800f166:	4603      	mov	r3, r0
 800f168:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <dir_find+0x24>
 800f170:	7dfb      	ldrb	r3, [r7, #23]
 800f172:	e03e      	b.n	800f1f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	69db      	ldr	r3, [r3, #28]
 800f178:	4619      	mov	r1, r3
 800f17a:	6938      	ldr	r0, [r7, #16]
 800f17c:	f7ff faa2 	bl	800e6c4 <move_window>
 800f180:	4603      	mov	r3, r0
 800f182:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f184:	7dfb      	ldrb	r3, [r7, #23]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d12f      	bne.n	800f1ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f192:	7bfb      	ldrb	r3, [r7, #15]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d102      	bne.n	800f19e <dir_find+0x4e>
 800f198:	2304      	movs	r3, #4
 800f19a:	75fb      	strb	r3, [r7, #23]
 800f19c:	e028      	b.n	800f1f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	330b      	adds	r3, #11
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6a1b      	ldr	r3, [r3, #32]
 800f1b4:	330b      	adds	r3, #11
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f003 0308 	and.w	r3, r3, #8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10a      	bne.n	800f1d6 <dir_find+0x86>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a18      	ldr	r0, [r3, #32]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	3324      	adds	r3, #36	; 0x24
 800f1c8:	220b      	movs	r2, #11
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	f7ff f856 	bl	800e27c <mem_cmp>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00b      	beq.n	800f1ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7ff fe6e 	bl	800eeba <dir_next>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d0c5      	beq.n	800f174 <dir_find+0x24>
 800f1e8:	e002      	b.n	800f1f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f1ea:	bf00      	nop
 800f1ec:	e000      	b.n	800f1f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f1ee:	bf00      	nop

	return res;
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b084      	sub	sp, #16
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f208:	2101      	movs	r1, #1
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff ff1a 	bl	800f044 <dir_alloc>
 800f210:	4603      	mov	r3, r0
 800f212:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d11c      	bne.n	800f254 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	4619      	mov	r1, r3
 800f220:	68b8      	ldr	r0, [r7, #8]
 800f222:	f7ff fa4f 	bl	800e6c4 <move_window>
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d111      	bne.n	800f254 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	2220      	movs	r2, #32
 800f236:	2100      	movs	r1, #0
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff f804 	bl	800e246 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a18      	ldr	r0, [r3, #32]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3324      	adds	r3, #36	; 0x24
 800f246:	220b      	movs	r2, #11
 800f248:	4619      	mov	r1, r3
 800f24a:	f7fe ffdb 	bl	800e204 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2201      	movs	r2, #1
 800f252:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	60fb      	str	r3, [r7, #12]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	3324      	adds	r3, #36	; 0x24
 800f274:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f276:	220b      	movs	r2, #11
 800f278:	2120      	movs	r1, #32
 800f27a:	68b8      	ldr	r0, [r7, #8]
 800f27c:	f7fe ffe3 	bl	800e246 <mem_set>
	si = i = 0; ni = 8;
 800f280:	2300      	movs	r3, #0
 800f282:	613b      	str	r3, [r7, #16]
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	61fb      	str	r3, [r7, #28]
 800f288:	2308      	movs	r3, #8
 800f28a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	61fa      	str	r2, [r7, #28]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	4413      	add	r3, r2
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f29a:	7efb      	ldrb	r3, [r7, #27]
 800f29c:	2b20      	cmp	r3, #32
 800f29e:	d94e      	bls.n	800f33e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f2a0:	7efb      	ldrb	r3, [r7, #27]
 800f2a2:	2b2f      	cmp	r3, #47	; 0x2f
 800f2a4:	d006      	beq.n	800f2b4 <create_name+0x54>
 800f2a6:	7efb      	ldrb	r3, [r7, #27]
 800f2a8:	2b5c      	cmp	r3, #92	; 0x5c
 800f2aa:	d110      	bne.n	800f2ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f2ac:	e002      	b.n	800f2b4 <create_name+0x54>
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	61fb      	str	r3, [r7, #28]
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f2be:	d0f6      	beq.n	800f2ae <create_name+0x4e>
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f2ca:	d0f0      	beq.n	800f2ae <create_name+0x4e>
			break;
 800f2cc:	e038      	b.n	800f340 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f2ce:	7efb      	ldrb	r3, [r7, #27]
 800f2d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2d2:	d003      	beq.n	800f2dc <create_name+0x7c>
 800f2d4:	693a      	ldr	r2, [r7, #16]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d30c      	bcc.n	800f2f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	2b0b      	cmp	r3, #11
 800f2e0:	d002      	beq.n	800f2e8 <create_name+0x88>
 800f2e2:	7efb      	ldrb	r3, [r7, #27]
 800f2e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2e6:	d001      	beq.n	800f2ec <create_name+0x8c>
 800f2e8:	2306      	movs	r3, #6
 800f2ea:	e044      	b.n	800f376 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f2ec:	2308      	movs	r3, #8
 800f2ee:	613b      	str	r3, [r7, #16]
 800f2f0:	230b      	movs	r3, #11
 800f2f2:	617b      	str	r3, [r7, #20]
			continue;
 800f2f4:	e022      	b.n	800f33c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f2f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	da04      	bge.n	800f308 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f2fe:	7efb      	ldrb	r3, [r7, #27]
 800f300:	3b80      	subs	r3, #128	; 0x80
 800f302:	4a1f      	ldr	r2, [pc, #124]	; (800f380 <create_name+0x120>)
 800f304:	5cd3      	ldrb	r3, [r2, r3]
 800f306:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f308:	7efb      	ldrb	r3, [r7, #27]
 800f30a:	4619      	mov	r1, r3
 800f30c:	481d      	ldr	r0, [pc, #116]	; (800f384 <create_name+0x124>)
 800f30e:	f7fe ffdc 	bl	800e2ca <chk_chr>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <create_name+0xbc>
 800f318:	2306      	movs	r3, #6
 800f31a:	e02c      	b.n	800f376 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f31c:	7efb      	ldrb	r3, [r7, #27]
 800f31e:	2b60      	cmp	r3, #96	; 0x60
 800f320:	d905      	bls.n	800f32e <create_name+0xce>
 800f322:	7efb      	ldrb	r3, [r7, #27]
 800f324:	2b7a      	cmp	r3, #122	; 0x7a
 800f326:	d802      	bhi.n	800f32e <create_name+0xce>
 800f328:	7efb      	ldrb	r3, [r7, #27]
 800f32a:	3b20      	subs	r3, #32
 800f32c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	1c5a      	adds	r2, r3, #1
 800f332:	613a      	str	r2, [r7, #16]
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	4413      	add	r3, r2
 800f338:	7efa      	ldrb	r2, [r7, #27]
 800f33a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f33c:	e7a6      	b.n	800f28c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f33e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	441a      	add	r2, r3
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d101      	bne.n	800f354 <create_name+0xf4>
 800f350:	2306      	movs	r3, #6
 800f352:	e010      	b.n	800f376 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2be5      	cmp	r3, #229	; 0xe5
 800f35a:	d102      	bne.n	800f362 <create_name+0x102>
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2205      	movs	r2, #5
 800f360:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f362:	7efb      	ldrb	r3, [r7, #27]
 800f364:	2b20      	cmp	r3, #32
 800f366:	d801      	bhi.n	800f36c <create_name+0x10c>
 800f368:	2204      	movs	r2, #4
 800f36a:	e000      	b.n	800f36e <create_name+0x10e>
 800f36c:	2200      	movs	r2, #0
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	330b      	adds	r3, #11
 800f372:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f374:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	080153c0 	.word	0x080153c0
 800f384:	080152c8 	.word	0x080152c8

0800f388 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f39c:	e002      	b.n	800f3a4 <follow_path+0x1c>
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f3aa:	d0f8      	beq.n	800f39e <follow_path+0x16>
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f3b2:	d0f4      	beq.n	800f39e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	2b1f      	cmp	r3, #31
 800f3c0:	d80a      	bhi.n	800f3d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2280      	movs	r2, #128	; 0x80
 800f3c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f3ca:	2100      	movs	r1, #0
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff fcf9 	bl	800edc4 <dir_sdi>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	75fb      	strb	r3, [r7, #23]
 800f3d6:	e043      	b.n	800f460 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3d8:	463b      	mov	r3, r7
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff ff3f 	bl	800f260 <create_name>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d134      	bne.n	800f456 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7ff feaf 	bl	800f150 <dir_find>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00a      	beq.n	800f41a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f404:	7dfb      	ldrb	r3, [r7, #23]
 800f406:	2b04      	cmp	r3, #4
 800f408:	d127      	bne.n	800f45a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f40a:	7afb      	ldrb	r3, [r7, #11]
 800f40c:	f003 0304 	and.w	r3, r3, #4
 800f410:	2b00      	cmp	r3, #0
 800f412:	d122      	bne.n	800f45a <follow_path+0xd2>
 800f414:	2305      	movs	r3, #5
 800f416:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f418:	e01f      	b.n	800f45a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f41a:	7afb      	ldrb	r3, [r7, #11]
 800f41c:	f003 0304 	and.w	r3, r3, #4
 800f420:	2b00      	cmp	r3, #0
 800f422:	d11c      	bne.n	800f45e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	799b      	ldrb	r3, [r3, #6]
 800f428:	f003 0310 	and.w	r3, r3, #16
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d102      	bne.n	800f436 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f430:	2305      	movs	r3, #5
 800f432:	75fb      	strb	r3, [r7, #23]
 800f434:	e014      	b.n	800f460 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	695b      	ldr	r3, [r3, #20]
 800f440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f444:	4413      	add	r3, r2
 800f446:	4619      	mov	r1, r3
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fe42 	bl	800f0d2 <ld_clust>
 800f44e:	4602      	mov	r2, r0
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f454:	e7c0      	b.n	800f3d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f456:	bf00      	nop
 800f458:	e002      	b.n	800f460 <follow_path+0xd8>
				break;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f45e:	bf00      	nop
			}
		}
	}

	return res;
 800f460:	7dfb      	ldrb	r3, [r7, #23]
}
 800f462:	4618      	mov	r0, r3
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f46a:	b480      	push	{r7}
 800f46c:	b087      	sub	sp, #28
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f472:	f04f 33ff 	mov.w	r3, #4294967295
 800f476:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d031      	beq.n	800f4e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	617b      	str	r3, [r7, #20]
 800f486:	e002      	b.n	800f48e <get_ldnumber+0x24>
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	3301      	adds	r3, #1
 800f48c:	617b      	str	r3, [r7, #20]
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	2b20      	cmp	r3, #32
 800f494:	d903      	bls.n	800f49e <get_ldnumber+0x34>
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	2b3a      	cmp	r3, #58	; 0x3a
 800f49c:	d1f4      	bne.n	800f488 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b3a      	cmp	r3, #58	; 0x3a
 800f4a4:	d11c      	bne.n	800f4e0 <get_ldnumber+0x76>
			tp = *path;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	60fa      	str	r2, [r7, #12]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	3b30      	subs	r3, #48	; 0x30
 800f4b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	2b09      	cmp	r3, #9
 800f4bc:	d80e      	bhi.n	800f4dc <get_ldnumber+0x72>
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d10a      	bne.n	800f4dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d107      	bne.n	800f4dc <get_ldnumber+0x72>
					vol = (int)i;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	617b      	str	r3, [r7, #20]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	697a      	ldr	r2, [r7, #20]
 800f4da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	e002      	b.n	800f4e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f4e4:	693b      	ldr	r3, [r7, #16]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	371c      	adds	r7, #28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
	...

0800f4f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	70da      	strb	r2, [r3, #3]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f04f 32ff 	mov.w	r2, #4294967295
 800f50a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f50c:	6839      	ldr	r1, [r7, #0]
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff f8d8 	bl	800e6c4 <move_window>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <check_fs+0x2a>
 800f51a:	2304      	movs	r3, #4
 800f51c:	e038      	b.n	800f590 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	3334      	adds	r3, #52	; 0x34
 800f522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe fdea 	bl	800e100 <ld_word>
 800f52c:	4603      	mov	r3, r0
 800f52e:	461a      	mov	r2, r3
 800f530:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f534:	429a      	cmp	r2, r3
 800f536:	d001      	beq.n	800f53c <check_fs+0x48>
 800f538:	2303      	movs	r3, #3
 800f53a:	e029      	b.n	800f590 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f542:	2be9      	cmp	r3, #233	; 0xe9
 800f544:	d009      	beq.n	800f55a <check_fs+0x66>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f54c:	2beb      	cmp	r3, #235	; 0xeb
 800f54e:	d11e      	bne.n	800f58e <check_fs+0x9a>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f556:	2b90      	cmp	r3, #144	; 0x90
 800f558:	d119      	bne.n	800f58e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3334      	adds	r3, #52	; 0x34
 800f55e:	3336      	adds	r3, #54	; 0x36
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe fde5 	bl	800e130 <ld_dword>
 800f566:	4603      	mov	r3, r0
 800f568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f56c:	4a0a      	ldr	r2, [pc, #40]	; (800f598 <check_fs+0xa4>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d101      	bne.n	800f576 <check_fs+0x82>
 800f572:	2300      	movs	r3, #0
 800f574:	e00c      	b.n	800f590 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3334      	adds	r3, #52	; 0x34
 800f57a:	3352      	adds	r3, #82	; 0x52
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fe fdd7 	bl	800e130 <ld_dword>
 800f582:	4603      	mov	r3, r0
 800f584:	4a05      	ldr	r2, [pc, #20]	; (800f59c <check_fs+0xa8>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d101      	bne.n	800f58e <check_fs+0x9a>
 800f58a:	2300      	movs	r3, #0
 800f58c:	e000      	b.n	800f590 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f58e:	2302      	movs	r3, #2
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	00544146 	.word	0x00544146
 800f59c:	33544146 	.word	0x33544146

0800f5a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b096      	sub	sp, #88	; 0x58
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7ff ff58 	bl	800f46a <get_ldnumber>
 800f5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	da01      	bge.n	800f5c6 <find_volume+0x26>
 800f5c2:	230b      	movs	r3, #11
 800f5c4:	e236      	b.n	800fa34 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f5c6:	4aac      	ldr	r2, [pc, #688]	; (800f878 <find_volume+0x2d8>)
 800f5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d101      	bne.n	800f5da <find_volume+0x3a>
 800f5d6:	230c      	movs	r3, #12
 800f5d8:	e22c      	b.n	800fa34 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800f5da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5dc:	f7fe fe90 	bl	800e300 <lock_fs>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d101      	bne.n	800f5ea <find_volume+0x4a>
 800f5e6:	230f      	movs	r3, #15
 800f5e8:	e224      	b.n	800fa34 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f5f0:	79fb      	ldrb	r3, [r7, #7]
 800f5f2:	f023 0301 	bic.w	r3, r3, #1
 800f5f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d01a      	beq.n	800f636 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	785b      	ldrb	r3, [r3, #1]
 800f604:	4618      	mov	r0, r3
 800f606:	f7fe fcdd 	bl	800dfc4 <disk_status>
 800f60a:	4603      	mov	r3, r0
 800f60c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f614:	f003 0301 	and.w	r3, r3, #1
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10c      	bne.n	800f636 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f61c:	79fb      	ldrb	r3, [r7, #7]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d007      	beq.n	800f632 <find_volume+0x92>
 800f622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f626:	f003 0304 	and.w	r3, r3, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d001      	beq.n	800f632 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f62e:	230a      	movs	r3, #10
 800f630:	e200      	b.n	800fa34 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800f632:	2300      	movs	r3, #0
 800f634:	e1fe      	b.n	800fa34 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f638:	2200      	movs	r2, #0
 800f63a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe fcd5 	bl	800dff8 <disk_initialize>
 800f64e:	4603      	mov	r3, r0
 800f650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f658:	f003 0301 	and.w	r3, r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f660:	2303      	movs	r3, #3
 800f662:	e1e7      	b.n	800fa34 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d007      	beq.n	800f67a <find_volume+0xda>
 800f66a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f66e:	f003 0304 	and.w	r3, r3, #4
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f676:	230a      	movs	r3, #10
 800f678:	e1dc      	b.n	800fa34 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f67e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f682:	f7ff ff37 	bl	800f4f4 <check_fs>
 800f686:	4603      	mov	r3, r0
 800f688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f68c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f690:	2b02      	cmp	r3, #2
 800f692:	d14b      	bne.n	800f72c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f694:	2300      	movs	r3, #0
 800f696:	643b      	str	r3, [r7, #64]	; 0x40
 800f698:	e01f      	b.n	800f6da <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f6a8:	4413      	add	r3, r2
 800f6aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d006      	beq.n	800f6c4 <find_volume+0x124>
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe fd38 	bl	800e130 <ld_dword>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	e000      	b.n	800f6c6 <find_volume+0x126>
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f6ce:	440b      	add	r3, r1
 800f6d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	643b      	str	r3, [r7, #64]	; 0x40
 800f6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d9dc      	bls.n	800f69a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d002      	beq.n	800f6f0 <find_volume+0x150>
 800f6ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f6f8:	4413      	add	r3, r2
 800f6fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f6fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f702:	2b00      	cmp	r3, #0
 800f704:	d005      	beq.n	800f712 <find_volume+0x172>
 800f706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f70a:	f7ff fef3 	bl	800f4f4 <check_fs>
 800f70e:	4603      	mov	r3, r0
 800f710:	e000      	b.n	800f714 <find_volume+0x174>
 800f712:	2303      	movs	r3, #3
 800f714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d905      	bls.n	800f72c <find_volume+0x18c>
 800f720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f722:	3301      	adds	r3, #1
 800f724:	643b      	str	r3, [r7, #64]	; 0x40
 800f726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f728:	2b03      	cmp	r3, #3
 800f72a:	d9e1      	bls.n	800f6f0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f72c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f730:	2b04      	cmp	r3, #4
 800f732:	d101      	bne.n	800f738 <find_volume+0x198>
 800f734:	2301      	movs	r3, #1
 800f736:	e17d      	b.n	800fa34 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d901      	bls.n	800f744 <find_volume+0x1a4>
 800f740:	230d      	movs	r3, #13
 800f742:	e177      	b.n	800fa34 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f746:	3334      	adds	r3, #52	; 0x34
 800f748:	330b      	adds	r3, #11
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fe fcd8 	bl	800e100 <ld_word>
 800f750:	4603      	mov	r3, r0
 800f752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f756:	d001      	beq.n	800f75c <find_volume+0x1bc>
 800f758:	230d      	movs	r3, #13
 800f75a:	e16b      	b.n	800fa34 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75e:	3334      	adds	r3, #52	; 0x34
 800f760:	3316      	adds	r3, #22
 800f762:	4618      	mov	r0, r3
 800f764:	f7fe fccc 	bl	800e100 <ld_word>
 800f768:	4603      	mov	r3, r0
 800f76a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d106      	bne.n	800f780 <find_volume+0x1e0>
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	3334      	adds	r3, #52	; 0x34
 800f776:	3324      	adds	r3, #36	; 0x24
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe fcd9 	bl	800e130 <ld_dword>
 800f77e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f784:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f788:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f792:	789b      	ldrb	r3, [r3, #2]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d005      	beq.n	800f7a4 <find_volume+0x204>
 800f798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79a:	789b      	ldrb	r3, [r3, #2]
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	d001      	beq.n	800f7a4 <find_volume+0x204>
 800f7a0:	230d      	movs	r3, #13
 800f7a2:	e147      	b.n	800fa34 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a6:	789b      	ldrb	r3, [r3, #2]
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ac:	fb02 f303 	mul.w	r3, r2, r3
 800f7b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	895b      	ldrh	r3, [r3, #10]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d008      	beq.n	800f7d8 <find_volume+0x238>
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	895b      	ldrh	r3, [r3, #10]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	895b      	ldrh	r3, [r3, #10]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	4013      	ands	r3, r2
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d001      	beq.n	800f7dc <find_volume+0x23c>
 800f7d8:	230d      	movs	r3, #13
 800f7da:	e12b      	b.n	800fa34 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	3334      	adds	r3, #52	; 0x34
 800f7e0:	3311      	adds	r3, #17
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fe fc8c 	bl	800e100 <ld_word>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	891b      	ldrh	r3, [r3, #8]
 800f7f4:	f003 030f 	and.w	r3, r3, #15
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <find_volume+0x262>
 800f7fe:	230d      	movs	r3, #13
 800f800:	e118      	b.n	800fa34 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	3334      	adds	r3, #52	; 0x34
 800f806:	3313      	adds	r3, #19
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe fc79 	bl	800e100 <ld_word>
 800f80e:	4603      	mov	r3, r0
 800f810:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f814:	2b00      	cmp	r3, #0
 800f816:	d106      	bne.n	800f826 <find_volume+0x286>
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	3334      	adds	r3, #52	; 0x34
 800f81c:	3320      	adds	r3, #32
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe fc86 	bl	800e130 <ld_dword>
 800f824:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	3334      	adds	r3, #52	; 0x34
 800f82a:	330e      	adds	r3, #14
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fe fc67 	bl	800e100 <ld_word>
 800f832:	4603      	mov	r3, r0
 800f834:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <find_volume+0x2a0>
 800f83c:	230d      	movs	r3, #13
 800f83e:	e0f9      	b.n	800fa34 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f844:	4413      	add	r3, r2
 800f846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f848:	8912      	ldrh	r2, [r2, #8]
 800f84a:	0912      	lsrs	r2, r2, #4
 800f84c:	b292      	uxth	r2, r2
 800f84e:	4413      	add	r3, r2
 800f850:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	429a      	cmp	r2, r3
 800f858:	d201      	bcs.n	800f85e <find_volume+0x2be>
 800f85a:	230d      	movs	r3, #13
 800f85c:	e0ea      	b.n	800fa34 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f866:	8952      	ldrh	r2, [r2, #10]
 800f868:	fbb3 f3f2 	udiv	r3, r3, r2
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	2b00      	cmp	r3, #0
 800f872:	d103      	bne.n	800f87c <find_volume+0x2dc>
 800f874:	230d      	movs	r3, #13
 800f876:	e0dd      	b.n	800fa34 <find_volume+0x494>
 800f878:	240081d4 	.word	0x240081d4
		fmt = FS_FAT32;
 800f87c:	2303      	movs	r3, #3
 800f87e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f888:	4293      	cmp	r3, r2
 800f88a:	d802      	bhi.n	800f892 <find_volume+0x2f2>
 800f88c:	2302      	movs	r3, #2
 800f88e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f898:	4293      	cmp	r3, r2
 800f89a:	d802      	bhi.n	800f8a2 <find_volume+0x302>
 800f89c:	2301      	movs	r3, #1
 800f89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a4:	1c9a      	adds	r2, r3, #2
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8ae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f8b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8b4:	441a      	add	r2, r3
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f8ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	441a      	add	r2, r3
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f8c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8c8:	2b03      	cmp	r3, #3
 800f8ca:	d11e      	bne.n	800f90a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	3334      	adds	r3, #52	; 0x34
 800f8d0:	332a      	adds	r3, #42	; 0x2a
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fc14 	bl	800e100 <ld_word>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <find_volume+0x342>
 800f8de:	230d      	movs	r3, #13
 800f8e0:	e0a8      	b.n	800fa34 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	891b      	ldrh	r3, [r3, #8]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <find_volume+0x34e>
 800f8ea:	230d      	movs	r3, #13
 800f8ec:	e0a2      	b.n	800fa34 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f0:	3334      	adds	r3, #52	; 0x34
 800f8f2:	332c      	adds	r3, #44	; 0x2c
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7fe fc1b 	bl	800e130 <ld_dword>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	647b      	str	r3, [r7, #68]	; 0x44
 800f908:	e01f      	b.n	800f94a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90c:	891b      	ldrh	r3, [r3, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <find_volume+0x376>
 800f912:	230d      	movs	r3, #13
 800f914:	e08e      	b.n	800fa34 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f91c:	441a      	add	r2, r3
 800f91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f920:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f926:	2b02      	cmp	r3, #2
 800f928:	d103      	bne.n	800f932 <find_volume+0x392>
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	699b      	ldr	r3, [r3, #24]
 800f92e:	005b      	lsls	r3, r3, #1
 800f930:	e00a      	b.n	800f948 <find_volume+0x3a8>
 800f932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f934:	699a      	ldr	r2, [r3, #24]
 800f936:	4613      	mov	r3, r2
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	085a      	lsrs	r2, r3, #1
 800f93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f948:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	69da      	ldr	r2, [r3, #28]
 800f94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f950:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f954:	0a5b      	lsrs	r3, r3, #9
 800f956:	429a      	cmp	r2, r3
 800f958:	d201      	bcs.n	800f95e <find_volume+0x3be>
 800f95a:	230d      	movs	r3, #13
 800f95c:	e06a      	b.n	800fa34 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f960:	f04f 32ff 	mov.w	r2, #4294967295
 800f964:	615a      	str	r2, [r3, #20]
 800f966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f968:	695a      	ldr	r2, [r3, #20]
 800f96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	2280      	movs	r2, #128	; 0x80
 800f972:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f978:	2b03      	cmp	r3, #3
 800f97a:	d149      	bne.n	800fa10 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97e:	3334      	adds	r3, #52	; 0x34
 800f980:	3330      	adds	r3, #48	; 0x30
 800f982:	4618      	mov	r0, r3
 800f984:	f7fe fbbc 	bl	800e100 <ld_word>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d140      	bne.n	800fa10 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f990:	3301      	adds	r3, #1
 800f992:	4619      	mov	r1, r3
 800f994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f996:	f7fe fe95 	bl	800e6c4 <move_window>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d137      	bne.n	800fa10 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a8:	3334      	adds	r3, #52	; 0x34
 800f9aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe fba6 	bl	800e100 <ld_word>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d127      	bne.n	800fa10 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	3334      	adds	r3, #52	; 0x34
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fe fbb3 	bl	800e130 <ld_dword>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	4a1b      	ldr	r2, [pc, #108]	; (800fa3c <find_volume+0x49c>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d11e      	bne.n	800fa10 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d4:	3334      	adds	r3, #52	; 0x34
 800f9d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe fba8 	bl	800e130 <ld_dword>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	4a17      	ldr	r2, [pc, #92]	; (800fa40 <find_volume+0x4a0>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d113      	bne.n	800fa10 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	3334      	adds	r3, #52	; 0x34
 800f9ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fe fb9d 	bl	800e130 <ld_dword>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fe:	3334      	adds	r3, #52	; 0x34
 800fa00:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe fb93 	bl	800e130 <ld_dword>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fa16:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa18:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <find_volume+0x4a4>)
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	4b08      	ldr	r3, [pc, #32]	; (800fa44 <find_volume+0x4a4>)
 800fa22:	801a      	strh	r2, [r3, #0]
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <find_volume+0x4a4>)
 800fa26:	881a      	ldrh	r2, [r3, #0]
 800fa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa2e:	f7fe fde1 	bl	800e5f4 <clear_lock>
#endif
	return FR_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3758      	adds	r7, #88	; 0x58
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	41615252 	.word	0x41615252
 800fa40:	61417272 	.word	0x61417272
 800fa44:	240081d8 	.word	0x240081d8

0800fa48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fa52:	2309      	movs	r3, #9
 800fa54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d02e      	beq.n	800faba <validate+0x72>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d02a      	beq.n	800faba <validate+0x72>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d025      	beq.n	800faba <validate+0x72>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	889a      	ldrh	r2, [r3, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	88db      	ldrh	r3, [r3, #6]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d11e      	bne.n	800faba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fe fc3d 	bl	800e300 <lock_fs>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d014      	beq.n	800fab6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	785b      	ldrb	r3, [r3, #1]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fa96 	bl	800dfc4 <disk_status>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d102      	bne.n	800faa8 <validate+0x60>
				res = FR_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
 800faa6:	e008      	b.n	800faba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2100      	movs	r1, #0
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fc3c 	bl	800e32c <unlock_fs>
 800fab4:	e001      	b.n	800faba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fab6:	230f      	movs	r3, #15
 800fab8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800faba:	7bfb      	ldrb	r3, [r7, #15]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d102      	bne.n	800fac6 <validate+0x7e>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	e000      	b.n	800fac8 <validate+0x80>
 800fac6:	2300      	movs	r3, #0
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	6013      	str	r3, [r2, #0]
	return res;
 800facc:	7bfb      	ldrb	r3, [r7, #15]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	4613      	mov	r3, r2
 800fae4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800faea:	f107 0310 	add.w	r3, r7, #16
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff fcbb 	bl	800f46a <get_ldnumber>
 800faf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	da01      	bge.n	800fb00 <f_mount+0x28>
 800fafc:	230b      	movs	r3, #11
 800fafe:	e048      	b.n	800fb92 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb00:	4a26      	ldr	r2, [pc, #152]	; (800fb9c <f_mount+0xc4>)
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00f      	beq.n	800fb30 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb10:	69b8      	ldr	r0, [r7, #24]
 800fb12:	f7fe fd6f 	bl	800e5f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f001 f904 	bl	8010d28 <ff_del_syncobj>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <f_mount+0x52>
 800fb26:	2302      	movs	r3, #2
 800fb28:	e033      	b.n	800fb92 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00f      	beq.n	800fb56 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	330c      	adds	r3, #12
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f001 f8d3 	bl	8010cf2 <ff_cre_syncobj>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d101      	bne.n	800fb56 <f_mount+0x7e>
 800fb52:	2302      	movs	r3, #2
 800fb54:	e01d      	b.n	800fb92 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	4910      	ldr	r1, [pc, #64]	; (800fb9c <f_mount+0xc4>)
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d002      	beq.n	800fb6c <f_mount+0x94>
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d001      	beq.n	800fb70 <f_mount+0x98>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	e010      	b.n	800fb92 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fb70:	f107 010c 	add.w	r1, r7, #12
 800fb74:	f107 0308 	add.w	r3, r7, #8
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7ff fd10 	bl	800f5a0 <find_volume>
 800fb80:	4603      	mov	r3, r0
 800fb82:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	7dfa      	ldrb	r2, [r7, #23]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe fbce 	bl	800e32c <unlock_fs>
 800fb90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3720      	adds	r7, #32
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	240081d4 	.word	0x240081d4

0800fba0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b098      	sub	sp, #96	; 0x60
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <f_open+0x18>
 800fbb4:	2309      	movs	r3, #9
 800fbb6:	e1b4      	b.n	800ff22 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fbc0:	79fa      	ldrb	r2, [r7, #7]
 800fbc2:	f107 0110 	add.w	r1, r7, #16
 800fbc6:	f107 0308 	add.w	r3, r7, #8
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff fce8 	bl	800f5a0 <find_volume>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fbd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f040 8191 	bne.w	800ff02 <f_open+0x362>
		dj.obj.fs = fs;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	f107 0314 	add.w	r3, r7, #20
 800fbea:	4611      	mov	r1, r2
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7ff fbcb 	bl	800f388 <follow_path>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d11a      	bne.n	800fc36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc04:	b25b      	sxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	da03      	bge.n	800fc12 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc0a:	2306      	movs	r3, #6
 800fc0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc10:	e011      	b.n	800fc36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc12:	79fb      	ldrb	r3, [r7, #7]
 800fc14:	f023 0301 	bic.w	r3, r3, #1
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	bf14      	ite	ne
 800fc1c:	2301      	movne	r3, #1
 800fc1e:	2300      	moveq	r3, #0
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	461a      	mov	r2, r3
 800fc24:	f107 0314 	add.w	r3, r7, #20
 800fc28:	4611      	mov	r1, r2
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fe fb9a 	bl	800e364 <chk_lock>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	f003 031c 	and.w	r3, r3, #28
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d07f      	beq.n	800fd40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fc40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d017      	beq.n	800fc78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc4c:	2b04      	cmp	r3, #4
 800fc4e:	d10e      	bne.n	800fc6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fc50:	f7fe fbe4 	bl	800e41c <enq_lock>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d006      	beq.n	800fc68 <f_open+0xc8>
 800fc5a:	f107 0314 	add.w	r3, r7, #20
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff facb 	bl	800f1fa <dir_register>
 800fc64:	4603      	mov	r3, r0
 800fc66:	e000      	b.n	800fc6a <f_open+0xca>
 800fc68:	2312      	movs	r3, #18
 800fc6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	f043 0308 	orr.w	r3, r3, #8
 800fc74:	71fb      	strb	r3, [r7, #7]
 800fc76:	e010      	b.n	800fc9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fc78:	7ebb      	ldrb	r3, [r7, #26]
 800fc7a:	f003 0311 	and.w	r3, r3, #17
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d003      	beq.n	800fc8a <f_open+0xea>
					res = FR_DENIED;
 800fc82:	2307      	movs	r3, #7
 800fc84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc88:	e007      	b.n	800fc9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <f_open+0xfa>
 800fc94:	2308      	movs	r3, #8
 800fc96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d168      	bne.n	800fd74 <f_open+0x1d4>
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	f003 0308 	and.w	r3, r3, #8
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d063      	beq.n	800fd74 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fcac:	f7fd ff34 	bl	800db18 <get_fattime>
 800fcb0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb4:	330e      	adds	r3, #14
 800fcb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fe fa77 	bl	800e1ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc0:	3316      	adds	r3, #22
 800fcc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fe fa71 	bl	800e1ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fccc:	330b      	adds	r3, #11
 800fcce:	2220      	movs	r2, #32
 800fcd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff f9fa 	bl	800f0d2 <ld_clust>
 800fcde:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fce4:	2200      	movs	r2, #0
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff fa12 	bl	800f110 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcee:	331c      	adds	r3, #28
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fe fa5a 	bl	800e1ac <st_dword>
					fs->wflag = 1;
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d037      	beq.n	800fd74 <f_open+0x1d4>
						dw = fs->winsect;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd08:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fd0a:	f107 0314 	add.w	r3, r7, #20
 800fd0e:	2200      	movs	r2, #0
 800fd10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe ff25 	bl	800eb62 <remove_chain>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fd1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d126      	bne.n	800fd74 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fe fcca 	bl	800e6c4 <move_window>
 800fd30:	4603      	mov	r3, r0
 800fd32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd3a:	3a01      	subs	r2, #1
 800fd3c:	611a      	str	r2, [r3, #16]
 800fd3e:	e019      	b.n	800fd74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d115      	bne.n	800fd74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd48:	7ebb      	ldrb	r3, [r7, #26]
 800fd4a:	f003 0310 	and.w	r3, r3, #16
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d003      	beq.n	800fd5a <f_open+0x1ba>
					res = FR_NO_FILE;
 800fd52:	2304      	movs	r3, #4
 800fd54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fd58:	e00c      	b.n	800fd74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	f003 0302 	and.w	r3, r3, #2
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d007      	beq.n	800fd74 <f_open+0x1d4>
 800fd64:	7ebb      	ldrb	r3, [r7, #26]
 800fd66:	f003 0301 	and.w	r3, r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <f_open+0x1d4>
						res = FR_DENIED;
 800fd6e:	2307      	movs	r3, #7
 800fd70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d128      	bne.n	800fdce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	f003 0308 	and.w	r3, r3, #8
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fd86:	79fb      	ldrb	r3, [r7, #7]
 800fd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	f023 0301 	bic.w	r3, r3, #1
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	bf14      	ite	ne
 800fda6:	2301      	movne	r3, #1
 800fda8:	2300      	moveq	r3, #0
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	461a      	mov	r2, r3
 800fdae:	f107 0314 	add.w	r3, r7, #20
 800fdb2:	4611      	mov	r1, r2
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe fb53 	bl	800e460 <inc_lock>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d102      	bne.n	800fdce <f_open+0x22e>
 800fdc8:	2302      	movs	r3, #2
 800fdca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fdce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f040 8095 	bne.w	800ff02 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff f977 	bl	800f0d2 <ld_clust>
 800fde4:	4602      	mov	r2, r0
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdec:	331c      	adds	r3, #28
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe f99e 	bl	800e130 <ld_dword>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	88da      	ldrh	r2, [r3, #6]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	79fa      	ldrb	r2, [r7, #7]
 800fe12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2200      	movs	r2, #0
 800fe24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	3330      	adds	r3, #48	; 0x30
 800fe2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe2e:	2100      	movs	r1, #0
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe fa08 	bl	800e246 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d060      	beq.n	800ff02 <f_open+0x362>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d05c      	beq.n	800ff02 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	68da      	ldr	r2, [r3, #12]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	895b      	ldrh	r3, [r3, #10]
 800fe54:	025b      	lsls	r3, r3, #9
 800fe56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	657b      	str	r3, [r7, #84]	; 0x54
 800fe64:	e016      	b.n	800fe94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe fce5 	bl	800e83a <get_fat>
 800fe70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fe72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d802      	bhi.n	800fe7e <f_open+0x2de>
 800fe78:	2302      	movs	r3, #2
 800fe7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe84:	d102      	bne.n	800fe8c <f_open+0x2ec>
 800fe86:	2301      	movs	r3, #1
 800fe88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	657b      	str	r3, [r7, #84]	; 0x54
 800fe94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d103      	bne.n	800fea4 <f_open+0x304>
 800fe9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d8e0      	bhi.n	800fe66 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fea8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800feaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d127      	bne.n	800ff02 <f_open+0x362>
 800feb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d022      	beq.n	800ff02 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fc9b 	bl	800e7fc <clust2sect>
 800fec6:	6478      	str	r0, [r7, #68]	; 0x44
 800fec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d103      	bne.n	800fed6 <f_open+0x336>
						res = FR_INT_ERR;
 800fece:	2302      	movs	r3, #2
 800fed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fed4:	e015      	b.n	800ff02 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fed8:	0a5a      	lsrs	r2, r3, #9
 800feda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fedc:	441a      	add	r2, r3
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	7858      	ldrb	r0, [r3, #1]
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	6a1a      	ldr	r2, [r3, #32]
 800fef0:	2301      	movs	r3, #1
 800fef2:	f7fe f8a7 	bl	800e044 <disk_read>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <f_open+0x362>
 800fefc:	2301      	movs	r3, #1
 800fefe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ff02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d002      	beq.n	800ff10 <f_open+0x370>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ff16:	4611      	mov	r1, r2
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fe fa07 	bl	800e32c <unlock_fs>
 800ff1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3760      	adds	r7, #96	; 0x60
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b08c      	sub	sp, #48	; 0x30
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	60f8      	str	r0, [r7, #12]
 800ff32:	60b9      	str	r1, [r7, #8]
 800ff34:	607a      	str	r2, [r7, #4]
 800ff36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f107 0210 	add.w	r2, r7, #16
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7ff fd7c 	bl	800fa48 <validate>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ff56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d107      	bne.n	800ff6e <f_write+0x44>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	7d5b      	ldrb	r3, [r3, #21]
 800ff62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ff66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d009      	beq.n	800ff82 <f_write+0x58>
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe f9d8 	bl	800e32c <unlock_fs>
 800ff7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff80:	e173      	b.n	801026a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	7d1b      	ldrb	r3, [r3, #20]
 800ff86:	f003 0302 	and.w	r3, r3, #2
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <f_write+0x72>
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2107      	movs	r1, #7
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fe f9ca 	bl	800e32c <unlock_fs>
 800ff98:	2307      	movs	r3, #7
 800ff9a:	e166      	b.n	801026a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	699a      	ldr	r2, [r3, #24]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	441a      	add	r2, r3
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	699b      	ldr	r3, [r3, #24]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	f080 814b 	bcs.w	8010244 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	43db      	mvns	r3, r3
 800ffb4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ffb6:	e145      	b.n	8010244 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	699b      	ldr	r3, [r3, #24]
 800ffbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f040 8101 	bne.w	80101c8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	699b      	ldr	r3, [r3, #24]
 800ffca:	0a5b      	lsrs	r3, r3, #9
 800ffcc:	693a      	ldr	r2, [r7, #16]
 800ffce:	8952      	ldrh	r2, [r2, #10]
 800ffd0:	3a01      	subs	r2, #1
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d14d      	bne.n	8010078 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	699b      	ldr	r3, [r3, #24]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10c      	bne.n	800fffe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d11a      	bne.n	8010026 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2100      	movs	r1, #0
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe fe19 	bl	800ec2c <create_chain>
 800fffa:	62b8      	str	r0, [r7, #40]	; 0x28
 800fffc:	e013      	b.n	8010026 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010002:	2b00      	cmp	r3, #0
 8010004:	d007      	beq.n	8010016 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	699b      	ldr	r3, [r3, #24]
 801000a:	4619      	mov	r1, r3
 801000c:	68f8      	ldr	r0, [r7, #12]
 801000e:	f7fe fea5 	bl	800ed5c <clmt_clust>
 8010012:	62b8      	str	r0, [r7, #40]	; 0x28
 8010014:	e007      	b.n	8010026 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	4619      	mov	r1, r3
 801001e:	4610      	mov	r0, r2
 8010020:	f7fe fe04 	bl	800ec2c <create_chain>
 8010024:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 8110 	beq.w	801024e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010030:	2b01      	cmp	r3, #1
 8010032:	d109      	bne.n	8010048 <f_write+0x11e>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2202      	movs	r2, #2
 8010038:	755a      	strb	r2, [r3, #21]
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	2102      	movs	r1, #2
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe f974 	bl	800e32c <unlock_fs>
 8010044:	2302      	movs	r3, #2
 8010046:	e110      	b.n	801026a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d109      	bne.n	8010064 <f_write+0x13a>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2201      	movs	r2, #1
 8010054:	755a      	strb	r2, [r3, #21]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2101      	movs	r1, #1
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe f966 	bl	800e32c <unlock_fs>
 8010060:	2301      	movs	r3, #1
 8010062:	e102      	b.n	801026a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010068:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d102      	bne.n	8010078 <f_write+0x14e>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010076:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	7d1b      	ldrb	r3, [r3, #20]
 801007c:	b25b      	sxtb	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	da1d      	bge.n	80100be <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	7858      	ldrb	r0, [r3, #1]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6a1a      	ldr	r2, [r3, #32]
 8010090:	2301      	movs	r3, #1
 8010092:	f7fd fff7 	bl	800e084 <disk_write>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d009      	beq.n	80100b0 <f_write+0x186>
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2201      	movs	r2, #1
 80100a0:	755a      	strb	r2, [r3, #21]
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	2101      	movs	r1, #1
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe f940 	bl	800e32c <unlock_fs>
 80100ac:	2301      	movs	r3, #1
 80100ae:	e0dc      	b.n	801026a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	7d1b      	ldrb	r3, [r3, #20]
 80100b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80100be:	693a      	ldr	r2, [r7, #16]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	69db      	ldr	r3, [r3, #28]
 80100c4:	4619      	mov	r1, r3
 80100c6:	4610      	mov	r0, r2
 80100c8:	f7fe fb98 	bl	800e7fc <clust2sect>
 80100cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <f_write+0x1be>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2202      	movs	r2, #2
 80100d8:	755a      	strb	r2, [r3, #21]
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	2102      	movs	r1, #2
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe f924 	bl	800e32c <unlock_fs>
 80100e4:	2302      	movs	r3, #2
 80100e6:	e0c0      	b.n	801026a <f_write+0x340>
			sect += csect;
 80100e8:	697a      	ldr	r2, [r7, #20]
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	4413      	add	r3, r2
 80100ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	0a5b      	lsrs	r3, r3, #9
 80100f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d041      	beq.n	8010180 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	6a3b      	ldr	r3, [r7, #32]
 8010100:	4413      	add	r3, r2
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	8952      	ldrh	r2, [r2, #10]
 8010106:	4293      	cmp	r3, r2
 8010108:	d905      	bls.n	8010116 <f_write+0x1ec>
					cc = fs->csize - csect;
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	895b      	ldrh	r3, [r3, #10]
 801010e:	461a      	mov	r2, r3
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	7858      	ldrb	r0, [r3, #1]
 801011a:	6a3b      	ldr	r3, [r7, #32]
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	69f9      	ldr	r1, [r7, #28]
 8010120:	f7fd ffb0 	bl	800e084 <disk_write>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d009      	beq.n	801013e <f_write+0x214>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2201      	movs	r2, #1
 801012e:	755a      	strb	r2, [r3, #21]
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	2101      	movs	r1, #1
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe f8f9 	bl	800e32c <unlock_fs>
 801013a:	2301      	movs	r3, #1
 801013c:	e095      	b.n	801026a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	6a1a      	ldr	r2, [r3, #32]
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	6a3a      	ldr	r2, [r7, #32]
 8010148:	429a      	cmp	r2, r3
 801014a:	d915      	bls.n	8010178 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6a1a      	ldr	r2, [r3, #32]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	025b      	lsls	r3, r3, #9
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	4413      	add	r3, r2
 8010160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010164:	4619      	mov	r1, r3
 8010166:	f7fe f84d 	bl	800e204 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	7d1b      	ldrb	r3, [r3, #20]
 801016e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010172:	b2da      	uxtb	r2, r3
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	025b      	lsls	r3, r3, #9
 801017c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801017e:	e044      	b.n	801020a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a1b      	ldr	r3, [r3, #32]
 8010184:	697a      	ldr	r2, [r7, #20]
 8010186:	429a      	cmp	r2, r3
 8010188:	d01b      	beq.n	80101c2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	699a      	ldr	r2, [r3, #24]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010192:	429a      	cmp	r2, r3
 8010194:	d215      	bcs.n	80101c2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	7858      	ldrb	r0, [r3, #1]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101a0:	2301      	movs	r3, #1
 80101a2:	697a      	ldr	r2, [r7, #20]
 80101a4:	f7fd ff4e 	bl	800e044 <disk_read>
 80101a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d009      	beq.n	80101c2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2201      	movs	r2, #1
 80101b2:	755a      	strb	r2, [r3, #21]
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	2101      	movs	r1, #1
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fe f8b7 	bl	800e32c <unlock_fs>
 80101be:	2301      	movs	r3, #1
 80101c0:	e053      	b.n	801026a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	697a      	ldr	r2, [r7, #20]
 80101c6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80101d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80101d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d901      	bls.n	80101e2 <f_write+0x2b8>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101f0:	4413      	add	r3, r2
 80101f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101f4:	69f9      	ldr	r1, [r7, #28]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe f804 	bl	800e204 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	7d1b      	ldrb	r3, [r3, #20]
 8010200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010204:	b2da      	uxtb	r2, r3
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801020a:	69fa      	ldr	r2, [r7, #28]
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	4413      	add	r3, r2
 8010210:	61fb      	str	r3, [r7, #28]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	699a      	ldr	r2, [r3, #24]
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	441a      	add	r2, r3
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	619a      	str	r2, [r3, #24]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	68da      	ldr	r2, [r3, #12]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	429a      	cmp	r2, r3
 8010228:	bf38      	it	cc
 801022a:	461a      	movcc	r2, r3
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	60da      	str	r2, [r3, #12]
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010236:	441a      	add	r2, r3
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	601a      	str	r2, [r3, #0]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f47f aeb6 	bne.w	800ffb8 <f_write+0x8e>
 801024c:	e000      	b.n	8010250 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801024e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	7d1b      	ldrb	r3, [r3, #20]
 8010254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010258:	b2da      	uxtb	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2100      	movs	r1, #0
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe f862 	bl	800e32c <unlock_fs>
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3730      	adds	r7, #48	; 0x30
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b086      	sub	sp, #24
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f107 0208 	add.w	r2, r7, #8
 8010280:	4611      	mov	r1, r2
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fbe0 	bl	800fa48 <validate>
 8010288:	4603      	mov	r3, r0
 801028a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d16d      	bne.n	801036e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	7d1b      	ldrb	r3, [r3, #20]
 8010296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801029a:	2b00      	cmp	r3, #0
 801029c:	d067      	beq.n	801036e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7d1b      	ldrb	r3, [r3, #20]
 80102a2:	b25b      	sxtb	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	da1a      	bge.n	80102de <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	7858      	ldrb	r0, [r3, #1]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6a1a      	ldr	r2, [r3, #32]
 80102b6:	2301      	movs	r3, #1
 80102b8:	f7fd fee4 	bl	800e084 <disk_write>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d006      	beq.n	80102d0 <f_sync+0x5e>
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	2101      	movs	r1, #1
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe f830 	bl	800e32c <unlock_fs>
 80102cc:	2301      	movs	r3, #1
 80102ce:	e055      	b.n	801037c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7d1b      	ldrb	r3, [r3, #20]
 80102d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80102de:	f7fd fc1b 	bl	800db18 <get_fattime>
 80102e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ea:	4619      	mov	r1, r3
 80102ec:	4610      	mov	r0, r2
 80102ee:	f7fe f9e9 	bl	800e6c4 <move_window>
 80102f2:	4603      	mov	r3, r0
 80102f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80102f6:	7dfb      	ldrb	r3, [r7, #23]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d138      	bne.n	801036e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010300:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	330b      	adds	r3, #11
 8010306:	781a      	ldrb	r2, [r3, #0]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	330b      	adds	r3, #11
 801030c:	f042 0220 	orr.w	r2, r2, #32
 8010310:	b2d2      	uxtb	r2, r2
 8010312:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	461a      	mov	r2, r3
 801031e:	68f9      	ldr	r1, [r7, #12]
 8010320:	f7fe fef6 	bl	800f110 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f103 021c 	add.w	r2, r3, #28
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	4619      	mov	r1, r3
 8010330:	4610      	mov	r0, r2
 8010332:	f7fd ff3b 	bl	800e1ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3316      	adds	r3, #22
 801033a:	6939      	ldr	r1, [r7, #16]
 801033c:	4618      	mov	r0, r3
 801033e:	f7fd ff35 	bl	800e1ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	3312      	adds	r3, #18
 8010346:	2100      	movs	r1, #0
 8010348:	4618      	mov	r0, r3
 801034a:	f7fd ff14 	bl	800e176 <st_word>
					fs->wflag = 1;
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	2201      	movs	r2, #1
 8010352:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	4618      	mov	r0, r3
 8010358:	f7fe f9e2 	bl	800e720 <sync_fs>
 801035c:	4603      	mov	r3, r0
 801035e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	7d1b      	ldrb	r3, [r3, #20]
 8010364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010368:	b2da      	uxtb	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	7dfa      	ldrb	r2, [r7, #23]
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f7fd ffd9 	bl	800e32c <unlock_fs>
 801037a:	7dfb      	ldrb	r3, [r7, #23]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3718      	adds	r7, #24
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ff70 	bl	8010272 <f_sync>
 8010392:	4603      	mov	r3, r0
 8010394:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010396:	7bfb      	ldrb	r3, [r7, #15]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d11d      	bne.n	80103d8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f107 0208 	add.w	r2, r7, #8
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff fb4f 	bl	800fa48 <validate>
 80103aa:	4603      	mov	r3, r0
 80103ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d111      	bne.n	80103d8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fe f8df 	bl	800e57c <dec_lock>
 80103be:	4603      	mov	r3, r0
 80103c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d102      	bne.n	80103ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	2100      	movs	r1, #0
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fd ffaa 	bl	800e32c <unlock_fs>
#endif
		}
	}
	return res;
 80103d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
	...

080103e4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80103e4:	b590      	push	{r4, r7, lr}
 80103e6:	b09d      	sub	sp, #116	; 0x74
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	607a      	str	r2, [r7, #4]
 80103ee:	603b      	str	r3, [r7, #0]
 80103f0:	460b      	mov	r3, r1
 80103f2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80103f4:	2301      	movs	r3, #1
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80103f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103fc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80103fe:	f107 030c 	add.w	r3, r7, #12
 8010402:	4618      	mov	r0, r3
 8010404:	f7ff f831 	bl	800f46a <get_ldnumber>
 8010408:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801040a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040c:	2b00      	cmp	r3, #0
 801040e:	da02      	bge.n	8010416 <f_mkfs+0x32>
 8010410:	230b      	movs	r3, #11
 8010412:	f000 bc0d 	b.w	8010c30 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010416:	4a94      	ldr	r2, [pc, #592]	; (8010668 <f_mkfs+0x284>)
 8010418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801041a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d005      	beq.n	801042e <f_mkfs+0x4a>
 8010422:	4a91      	ldr	r2, [pc, #580]	; (8010668 <f_mkfs+0x284>)
 8010424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801042a:	2200      	movs	r2, #0
 801042c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801042e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010430:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010434:	2300      	movs	r3, #0
 8010436:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801043a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801043e:	4618      	mov	r0, r3
 8010440:	f7fd fdda 	bl	800dff8 <disk_initialize>
 8010444:	4603      	mov	r3, r0
 8010446:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801044a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <f_mkfs+0x76>
 8010456:	2303      	movs	r3, #3
 8010458:	e3ea      	b.n	8010c30 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801045a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801045e:	f003 0304 	and.w	r3, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	d001      	beq.n	801046a <f_mkfs+0x86>
 8010466:	230a      	movs	r3, #10
 8010468:	e3e2      	b.n	8010c30 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801046a:	f107 0214 	add.w	r2, r7, #20
 801046e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010472:	2103      	movs	r1, #3
 8010474:	4618      	mov	r0, r3
 8010476:	f7fd fe25 	bl	800e0c4 <disk_ioctl>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10c      	bne.n	801049a <f_mkfs+0xb6>
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d009      	beq.n	801049a <f_mkfs+0xb6>
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801048c:	d805      	bhi.n	801049a <f_mkfs+0xb6>
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	1e5a      	subs	r2, r3, #1
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	4013      	ands	r3, r2
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <f_mkfs+0xba>
 801049a:	2301      	movs	r3, #1
 801049c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801049e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104a2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d003      	beq.n	80104b2 <f_mkfs+0xce>
 80104aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d309      	bcc.n	80104c6 <f_mkfs+0xe2>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104b8:	d805      	bhi.n	80104c6 <f_mkfs+0xe2>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	1e5a      	subs	r2, r3, #1
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4013      	ands	r3, r2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <f_mkfs+0xe6>
 80104c6:	2313      	movs	r3, #19
 80104c8:	e3b2      	b.n	8010c30 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80104ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80104d2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80104d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80104de:	fbb2 f3f3 	udiv	r3, r2, r3
 80104e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80104e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80104e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e8:	fb02 f303 	mul.w	r3, r2, r3
 80104ec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d101      	bne.n	80104f8 <f_mkfs+0x114>
 80104f4:	230e      	movs	r3, #14
 80104f6:	e39b      	b.n	8010c30 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80104f8:	f107 0210 	add.w	r2, r7, #16
 80104fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010500:	2101      	movs	r1, #1
 8010502:	4618      	mov	r0, r3
 8010504:	f7fd fdde 	bl	800e0c4 <disk_ioctl>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <f_mkfs+0x12e>
 801050e:	2301      	movs	r3, #1
 8010510:	e38e      	b.n	8010c30 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8010512:	7afb      	ldrb	r3, [r7, #11]
 8010514:	f003 0308 	and.w	r3, r3, #8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <f_mkfs+0x13c>
 801051c:	2300      	movs	r3, #0
 801051e:	e000      	b.n	8010522 <f_mkfs+0x13e>
 8010520:	233f      	movs	r3, #63	; 0x3f
 8010522:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010528:	429a      	cmp	r2, r3
 801052a:	d901      	bls.n	8010530 <f_mkfs+0x14c>
 801052c:	230e      	movs	r3, #14
 801052e:	e37f      	b.n	8010c30 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	2b7f      	cmp	r3, #127	; 0x7f
 801053c:	d801      	bhi.n	8010542 <f_mkfs+0x15e>
 801053e:	230e      	movs	r3, #14
 8010540:	e376      	b.n	8010c30 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b80      	cmp	r3, #128	; 0x80
 8010546:	d901      	bls.n	801054c <f_mkfs+0x168>
 8010548:	2313      	movs	r3, #19
 801054a:	e371      	b.n	8010c30 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801054c:	7afb      	ldrb	r3, [r7, #11]
 801054e:	f003 0302 	and.w	r3, r3, #2
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00d      	beq.n	8010572 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010556:	7afb      	ldrb	r3, [r7, #11]
 8010558:	f003 0307 	and.w	r3, r3, #7
 801055c:	2b02      	cmp	r3, #2
 801055e:	d004      	beq.n	801056a <f_mkfs+0x186>
 8010560:	7afb      	ldrb	r3, [r7, #11]
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	2b00      	cmp	r3, #0
 8010568:	d103      	bne.n	8010572 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801056a:	2303      	movs	r3, #3
 801056c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010570:	e009      	b.n	8010586 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010572:	7afb      	ldrb	r3, [r7, #11]
 8010574:	f003 0301 	and.w	r3, r3, #1
 8010578:	2b00      	cmp	r3, #0
 801057a:	d101      	bne.n	8010580 <f_mkfs+0x19c>
 801057c:	2313      	movs	r3, #19
 801057e:	e357      	b.n	8010c30 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010580:	2302      	movs	r3, #2
 8010582:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801058a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801058e:	2b03      	cmp	r3, #3
 8010590:	d13c      	bne.n	801060c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010594:	2b00      	cmp	r3, #0
 8010596:	d11b      	bne.n	80105d0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	0c5b      	lsrs	r3, r3, #17
 801059c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801059e:	2300      	movs	r3, #0
 80105a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80105a2:	2301      	movs	r3, #1
 80105a4:	653b      	str	r3, [r7, #80]	; 0x50
 80105a6:	e005      	b.n	80105b4 <f_mkfs+0x1d0>
 80105a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105aa:	3301      	adds	r3, #1
 80105ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80105ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105b0:	005b      	lsls	r3, r3, #1
 80105b2:	653b      	str	r3, [r7, #80]	; 0x50
 80105b4:	4a2d      	ldr	r2, [pc, #180]	; (801066c <f_mkfs+0x288>)
 80105b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d007      	beq.n	80105d0 <f_mkfs+0x1ec>
 80105c0:	4a2a      	ldr	r2, [pc, #168]	; (801066c <f_mkfs+0x288>)
 80105c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d2eb      	bcs.n	80105a8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80105d0:	693a      	ldr	r2, [r7, #16]
 80105d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80105d8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	3302      	adds	r3, #2
 80105de:	009a      	lsls	r2, r3, #2
 80105e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105e2:	4413      	add	r3, r2
 80105e4:	1e5a      	subs	r2, r3, #1
 80105e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ec:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80105ee:	2320      	movs	r3, #32
 80105f0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80105f2:	2300      	movs	r3, #0
 80105f4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d903      	bls.n	8010608 <f_mkfs+0x224>
 8010600:	6a3b      	ldr	r3, [r7, #32]
 8010602:	4a1b      	ldr	r2, [pc, #108]	; (8010670 <f_mkfs+0x28c>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d952      	bls.n	80106ae <f_mkfs+0x2ca>
 8010608:	230e      	movs	r3, #14
 801060a:	e311      	b.n	8010c30 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 801060c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801060e:	2b00      	cmp	r3, #0
 8010610:	d11b      	bne.n	801064a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	0b1b      	lsrs	r3, r3, #12
 8010616:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010618:	2300      	movs	r3, #0
 801061a:	64bb      	str	r3, [r7, #72]	; 0x48
 801061c:	2301      	movs	r3, #1
 801061e:	653b      	str	r3, [r7, #80]	; 0x50
 8010620:	e005      	b.n	801062e <f_mkfs+0x24a>
 8010622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010624:	3301      	adds	r3, #1
 8010626:	64bb      	str	r3, [r7, #72]	; 0x48
 8010628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062a:	005b      	lsls	r3, r3, #1
 801062c:	653b      	str	r3, [r7, #80]	; 0x50
 801062e:	4a11      	ldr	r2, [pc, #68]	; (8010674 <f_mkfs+0x290>)
 8010630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d007      	beq.n	801064a <f_mkfs+0x266>
 801063a:	4a0e      	ldr	r2, [pc, #56]	; (8010674 <f_mkfs+0x290>)
 801063c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801063e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010642:	461a      	mov	r2, r3
 8010644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010646:	4293      	cmp	r3, r2
 8010648:	d2eb      	bcs.n	8010622 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010652:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	f640 72f5 	movw	r2, #4085	; 0xff5
 801065a:	4293      	cmp	r3, r2
 801065c:	d90c      	bls.n	8010678 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	3302      	adds	r3, #2
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010666:	e012      	b.n	801068e <f_mkfs+0x2aa>
 8010668:	240081d4 	.word	0x240081d4
 801066c:	08015440 	.word	0x08015440
 8010670:	0ffffff5 	.word	0x0ffffff5
 8010674:	08015450 	.word	0x08015450
				} else {
					fmt = FS_FAT12;
 8010678:	2301      	movs	r3, #1
 801067a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801067e:	6a3a      	ldr	r2, [r7, #32]
 8010680:	4613      	mov	r3, r2
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	4413      	add	r3, r2
 8010686:	3301      	adds	r3, #1
 8010688:	085b      	lsrs	r3, r3, #1
 801068a:	3303      	adds	r3, #3
 801068c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801068e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010692:	4413      	add	r3, r2
 8010694:	1e5a      	subs	r2, r3, #1
 8010696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010698:	fbb2 f3f3 	udiv	r3, r2, r3
 801069c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801069e:	2301      	movs	r3, #1
 80106a0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80106a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a4:	015a      	lsls	r2, r3, #5
 80106a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80106ac:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80106ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106b2:	4413      	add	r3, r2
 80106b4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80106b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ba:	fb02 f203 	mul.w	r2, r2, r3
 80106be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106c0:	4413      	add	r3, r2
 80106c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106c4:	4413      	add	r3, r2
 80106c6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	4413      	add	r3, r2
 80106ce:	1e5a      	subs	r2, r3, #1
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	425b      	negs	r3, r3
 80106d4:	401a      	ands	r2, r3
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80106dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d108      	bne.n	80106f6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80106e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106e8:	4413      	add	r3, r2
 80106ea:	657b      	str	r3, [r7, #84]	; 0x54
 80106ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106f0:	4413      	add	r3, r2
 80106f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80106f4:	e006      	b.n	8010704 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80106f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80106fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010700:	4413      	add	r3, r2
 8010702:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8010704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010706:	011a      	lsls	r2, r3, #4
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	441a      	add	r2, r3
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	1ad2      	subs	r2, r2, r3
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	429a      	cmp	r2, r3
 8010714:	d901      	bls.n	801071a <f_mkfs+0x336>
 8010716:	230e      	movs	r3, #14
 8010718:	e28a      	b.n	8010c30 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801071e:	1ad2      	subs	r2, r2, r3
 8010720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010724:	fb01 f303 	mul.w	r3, r1, r3
 8010728:	1ad2      	subs	r2, r2, r3
 801072a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801072c:	1ad2      	subs	r2, r2, r3
 801072e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010730:	fbb2 f3f3 	udiv	r3, r2, r3
 8010734:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8010736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801073a:	2b03      	cmp	r3, #3
 801073c:	d10f      	bne.n	801075e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010744:	4293      	cmp	r3, r2
 8010746:	d80a      	bhi.n	801075e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d105      	bne.n	801075a <f_mkfs+0x376>
 801074e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010750:	085b      	lsrs	r3, r3, #1
 8010752:	607b      	str	r3, [r7, #4]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d144      	bne.n	80107e4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801075a:	230e      	movs	r3, #14
 801075c:	e268      	b.n	8010c30 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801075e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010762:	2b02      	cmp	r3, #2
 8010764:	d133      	bne.n	80107ce <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801076c:	4293      	cmp	r3, r2
 801076e:	d91e      	bls.n	80107ae <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d107      	bne.n	8010786 <f_mkfs+0x3a2>
 8010776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	2b40      	cmp	r3, #64	; 0x40
 801077c:	d803      	bhi.n	8010786 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801077e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	607b      	str	r3, [r7, #4]
 8010784:	e033      	b.n	80107ee <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8010786:	7afb      	ldrb	r3, [r7, #11]
 8010788:	f003 0302 	and.w	r3, r3, #2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d003      	beq.n	8010798 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8010790:	2303      	movs	r3, #3
 8010792:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010796:	e02a      	b.n	80107ee <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d105      	bne.n	80107aa <f_mkfs+0x3c6>
 801079e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a0:	005b      	lsls	r3, r3, #1
 80107a2:	607b      	str	r3, [r7, #4]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b80      	cmp	r3, #128	; 0x80
 80107a8:	d91e      	bls.n	80107e8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80107aa:	230e      	movs	r3, #14
 80107ac:	e240      	b.n	8010c30 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80107ae:	6a3b      	ldr	r3, [r7, #32]
 80107b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d80a      	bhi.n	80107ce <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d105      	bne.n	80107ca <f_mkfs+0x3e6>
 80107be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	607b      	str	r3, [r7, #4]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b80      	cmp	r3, #128	; 0x80
 80107c8:	d910      	bls.n	80107ec <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80107ca:	230e      	movs	r3, #14
 80107cc:	e230      	b.n	8010c30 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80107ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d10c      	bne.n	80107f0 <f_mkfs+0x40c>
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107dc:	4293      	cmp	r3, r2
 80107de:	d907      	bls.n	80107f0 <f_mkfs+0x40c>
 80107e0:	230e      	movs	r3, #14
 80107e2:	e225      	b.n	8010c30 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80107e4:	bf00      	nop
 80107e6:	e6ce      	b.n	8010586 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80107e8:	bf00      	nop
 80107ea:	e6cc      	b.n	8010586 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80107ec:	bf00      	nop
			pau = au;
 80107ee:	e6ca      	b.n	8010586 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80107f0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80107f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107f4:	461a      	mov	r2, r3
 80107f6:	2100      	movs	r1, #0
 80107f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107fa:	f7fd fd24 	bl	800e246 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80107fe:	220b      	movs	r2, #11
 8010800:	49bc      	ldr	r1, [pc, #752]	; (8010af4 <f_mkfs+0x710>)
 8010802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010804:	f7fd fcfe 	bl	800e204 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	330b      	adds	r3, #11
 801080c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801080e:	4611      	mov	r1, r2
 8010810:	4618      	mov	r0, r3
 8010812:	f7fd fcb0 	bl	800e176 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	330d      	adds	r3, #13
 801081a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801081c:	b2d2      	uxtb	r2, r2
 801081e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	330e      	adds	r3, #14
 8010824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010826:	b292      	uxth	r2, r2
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7fd fca3 	bl	800e176 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	3310      	adds	r3, #16
 8010834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010836:	b2d2      	uxtb	r2, r2
 8010838:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	f103 0211 	add.w	r2, r3, #17
 8010840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010844:	2b03      	cmp	r3, #3
 8010846:	d002      	beq.n	801084e <f_mkfs+0x46a>
 8010848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801084a:	b29b      	uxth	r3, r3
 801084c:	e000      	b.n	8010850 <f_mkfs+0x46c>
 801084e:	2300      	movs	r3, #0
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7fd fc8f 	bl	800e176 <st_word>
		if (sz_vol < 0x10000) {
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801085e:	d208      	bcs.n	8010872 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	3313      	adds	r3, #19
 8010864:	693a      	ldr	r2, [r7, #16]
 8010866:	b292      	uxth	r2, r2
 8010868:	4611      	mov	r1, r2
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd fc83 	bl	800e176 <st_word>
 8010870:	e006      	b.n	8010880 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8010872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010874:	3320      	adds	r3, #32
 8010876:	693a      	ldr	r2, [r7, #16]
 8010878:	4611      	mov	r1, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f7fd fc96 	bl	800e1ac <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	3315      	adds	r3, #21
 8010884:	22f8      	movs	r2, #248	; 0xf8
 8010886:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	3318      	adds	r3, #24
 801088c:	213f      	movs	r1, #63	; 0x3f
 801088e:	4618      	mov	r0, r3
 8010890:	f7fd fc71 	bl	800e176 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010896:	331a      	adds	r3, #26
 8010898:	21ff      	movs	r1, #255	; 0xff
 801089a:	4618      	mov	r0, r3
 801089c:	f7fd fc6b 	bl	800e176 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80108a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a2:	331c      	adds	r3, #28
 80108a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fd fc80 	bl	800e1ac <st_dword>
		if (fmt == FS_FAT32) {
 80108ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d131      	bne.n	8010918 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80108ba:	f7fd f92d 	bl	800db18 <get_fattime>
 80108be:	4603      	mov	r3, r0
 80108c0:	4619      	mov	r1, r3
 80108c2:	4620      	mov	r0, r4
 80108c4:	f7fd fc72 	bl	800e1ac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	3324      	adds	r3, #36	; 0x24
 80108cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fd fc6c 	bl	800e1ac <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	332c      	adds	r3, #44	; 0x2c
 80108d8:	2102      	movs	r1, #2
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fd fc66 	bl	800e1ac <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80108e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e2:	3330      	adds	r3, #48	; 0x30
 80108e4:	2101      	movs	r1, #1
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fd fc45 	bl	800e176 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80108ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ee:	3332      	adds	r3, #50	; 0x32
 80108f0:	2106      	movs	r1, #6
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fd fc3f 	bl	800e176 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80108f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fa:	3340      	adds	r3, #64	; 0x40
 80108fc:	2280      	movs	r2, #128	; 0x80
 80108fe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8010900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010902:	3342      	adds	r3, #66	; 0x42
 8010904:	2229      	movs	r2, #41	; 0x29
 8010906:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090a:	3347      	adds	r3, #71	; 0x47
 801090c:	2213      	movs	r2, #19
 801090e:	497a      	ldr	r1, [pc, #488]	; (8010af8 <f_mkfs+0x714>)
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd fc77 	bl	800e204 <mem_cpy>
 8010916:	e020      	b.n	801095a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 801091e:	f7fd f8fb 	bl	800db18 <get_fattime>
 8010922:	4603      	mov	r3, r0
 8010924:	4619      	mov	r1, r3
 8010926:	4620      	mov	r0, r4
 8010928:	f7fd fc40 	bl	800e1ac <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 801092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092e:	3316      	adds	r3, #22
 8010930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010932:	b292      	uxth	r2, r2
 8010934:	4611      	mov	r1, r2
 8010936:	4618      	mov	r0, r3
 8010938:	f7fd fc1d 	bl	800e176 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	3324      	adds	r3, #36	; 0x24
 8010940:	2280      	movs	r2, #128	; 0x80
 8010942:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8010944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010946:	3326      	adds	r3, #38	; 0x26
 8010948:	2229      	movs	r2, #41	; 0x29
 801094a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 801094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094e:	332b      	adds	r3, #43	; 0x2b
 8010950:	2213      	movs	r2, #19
 8010952:	496a      	ldr	r1, [pc, #424]	; (8010afc <f_mkfs+0x718>)
 8010954:	4618      	mov	r0, r3
 8010956:	f7fd fc55 	bl	800e204 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010960:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010964:	4618      	mov	r0, r3
 8010966:	f7fd fc06 	bl	800e176 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801096a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801096e:	2301      	movs	r3, #1
 8010970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010974:	f7fd fb86 	bl	800e084 <disk_write>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <f_mkfs+0x59e>
 801097e:	2301      	movs	r3, #1
 8010980:	e156      	b.n	8010c30 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8010982:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010986:	2b03      	cmp	r3, #3
 8010988:	d140      	bne.n	8010a0c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	1d9a      	adds	r2, r3, #6
 801098e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010992:	2301      	movs	r3, #1
 8010994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010996:	f7fd fb75 	bl	800e084 <disk_write>
			mem_set(buf, 0, ss);
 801099a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801099c:	461a      	mov	r2, r3
 801099e:	2100      	movs	r1, #0
 80109a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109a2:	f7fd fc50 	bl	800e246 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80109a6:	4956      	ldr	r1, [pc, #344]	; (8010b00 <f_mkfs+0x71c>)
 80109a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109aa:	f7fd fbff 	bl	800e1ac <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80109b4:	4953      	ldr	r1, [pc, #332]	; (8010b04 <f_mkfs+0x720>)
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fd fbf8 	bl	800e1ac <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80109bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	3b01      	subs	r3, #1
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fd fbef 	bl	800e1ac <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80109ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80109d4:	2102      	movs	r1, #2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fd fbe8 	bl	800e1ac <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80109dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80109e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fd fbc5 	bl	800e176 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	1dda      	adds	r2, r3, #7
 80109f0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80109f4:	2301      	movs	r3, #1
 80109f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109f8:	f7fd fb44 	bl	800e084 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	1c5a      	adds	r2, r3, #1
 8010a00:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010a04:	2301      	movs	r3, #1
 8010a06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a08:	f7fd fb3c 	bl	800e084 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a0e:	2100      	movs	r1, #0
 8010a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a12:	f7fd fc18 	bl	800e246 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a18:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a1e:	e04b      	b.n	8010ab8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a24:	2b03      	cmp	r3, #3
 8010a26:	d113      	bne.n	8010a50 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010a28:	f06f 0107 	mvn.w	r1, #7
 8010a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a2e:	f7fd fbbd 	bl	800e1ac <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	3304      	adds	r3, #4
 8010a36:	f04f 31ff 	mov.w	r1, #4294967295
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fd fbb6 	bl	800e1ac <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a42:	3308      	adds	r3, #8
 8010a44:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd fbaf 	bl	800e1ac <st_dword>
 8010a4e:	e00b      	b.n	8010a68 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010a50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d101      	bne.n	8010a5c <f_mkfs+0x678>
 8010a58:	4b2b      	ldr	r3, [pc, #172]	; (8010b08 <f_mkfs+0x724>)
 8010a5a:	e001      	b.n	8010a60 <f_mkfs+0x67c>
 8010a5c:	f06f 0307 	mvn.w	r3, #7
 8010a60:	4619      	mov	r1, r3
 8010a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a64:	f7fd fba2 	bl	800e1ac <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a6a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a70:	4293      	cmp	r3, r2
 8010a72:	bf28      	it	cs
 8010a74:	4613      	movcs	r3, r2
 8010a76:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010a78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a82:	f7fd faff 	bl	800e084 <disk_write>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <f_mkfs+0x6ac>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e0cf      	b.n	8010c30 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8010a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010a92:	461a      	mov	r2, r3
 8010a94:	2100      	movs	r1, #0
 8010a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a98:	f7fd fbd5 	bl	800e246 <mem_set>
				sect += n; nsect -= n;
 8010a9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010aa0:	4413      	add	r3, r2
 8010aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8010aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8010aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1dc      	bne.n	8010a6c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d3af      	bcc.n	8010a20 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8010ac0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ac4:	2b03      	cmp	r3, #3
 8010ac6:	d101      	bne.n	8010acc <f_mkfs+0x6e8>
 8010ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aca:	e000      	b.n	8010ace <f_mkfs+0x6ea>
 8010acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ace:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010ad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	bf28      	it	cs
 8010ad8:	4613      	movcs	r3, r2
 8010ada:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010adc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ae6:	f7fd facd 	bl	800e084 <disk_write>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00d      	beq.n	8010b0c <f_mkfs+0x728>
 8010af0:	2301      	movs	r3, #1
 8010af2:	e09d      	b.n	8010c30 <f_mkfs+0x84c>
 8010af4:	080152d8 	.word	0x080152d8
 8010af8:	080152e4 	.word	0x080152e4
 8010afc:	080152f8 	.word	0x080152f8
 8010b00:	41615252 	.word	0x41615252
 8010b04:	61417272 	.word	0x61417272
 8010b08:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8010b0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b10:	4413      	add	r3, r2
 8010b12:	667b      	str	r3, [r7, #100]	; 0x64
 8010b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b18:	1ad3      	subs	r3, r2, r3
 8010b1a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1d6      	bne.n	8010ad0 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8010b22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b26:	2b03      	cmp	r3, #3
 8010b28:	d103      	bne.n	8010b32 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010b2a:	230c      	movs	r3, #12
 8010b2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010b30:	e010      	b.n	8010b54 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b38:	d303      	bcc.n	8010b42 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010b3a:	2306      	movs	r3, #6
 8010b3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010b40:	e008      	b.n	8010b54 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8010b42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d101      	bne.n	8010b4e <f_mkfs+0x76a>
 8010b4a:	2304      	movs	r3, #4
 8010b4c:	e000      	b.n	8010b50 <f_mkfs+0x76c>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010b54:	7afb      	ldrb	r3, [r7, #11]
 8010b56:	f003 0308 	and.w	r3, r3, #8
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d15b      	bne.n	8010c16 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010b5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010b60:	461a      	mov	r2, r3
 8010b62:	2100      	movs	r1, #0
 8010b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b66:	f7fd fb6e 	bl	800e246 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fd fafe 	bl	800e176 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010b80:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	2200      	movs	r2, #0
 8010b86:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	3302      	adds	r3, #2
 8010b94:	2201      	movs	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	3303      	adds	r3, #3
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010ba8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	441a      	add	r2, r3
 8010bb0:	4b21      	ldr	r3, [pc, #132]	; (8010c38 <f_mkfs+0x854>)
 8010bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	0852      	lsrs	r2, r2, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	0b5b      	lsrs	r3, r3, #13
 8010bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	3305      	adds	r3, #5
 8010bc4:	22fe      	movs	r2, #254	; 0xfe
 8010bc6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bca:	089b      	lsrs	r3, r3, #2
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	3306      	adds	r3, #6
 8010bd2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010bd6:	b2d2      	uxtb	r2, r2
 8010bd8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	3307      	adds	r3, #7
 8010bde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010be0:	b2d2      	uxtb	r2, r2
 8010be2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	3308      	adds	r3, #8
 8010be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fd fade 	bl	800e1ac <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	330c      	adds	r3, #12
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fd fad7 	bl	800e1ac <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010bfe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010c02:	2301      	movs	r3, #1
 8010c04:	2200      	movs	r2, #0
 8010c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c08:	f7fd fa3c 	bl	800e084 <disk_write>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <f_mkfs+0x832>
 8010c12:	2301      	movs	r3, #1
 8010c14:	e00c      	b.n	8010c30 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010c16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fa50 	bl	800e0c4 <disk_ioctl>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d001      	beq.n	8010c2e <f_mkfs+0x84a>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e000      	b.n	8010c30 <f_mkfs+0x84c>

	return FR_OK;
 8010c2e:	2300      	movs	r3, #0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3774      	adds	r7, #116	; 0x74
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd90      	pop	{r4, r7, pc}
 8010c38:	0515565b 	.word	0x0515565b

08010c3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b087      	sub	sp, #28
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	4613      	mov	r3, r2
 8010c48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c52:	4b1f      	ldr	r3, [pc, #124]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c54:	7a5b      	ldrb	r3, [r3, #9]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d131      	bne.n	8010cc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c5c:	4b1c      	ldr	r3, [pc, #112]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c5e:	7a5b      	ldrb	r3, [r3, #9]
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	461a      	mov	r2, r3
 8010c64:	4b1a      	ldr	r3, [pc, #104]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c66:	2100      	movs	r1, #0
 8010c68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c6a:	4b19      	ldr	r3, [pc, #100]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c6c:	7a5b      	ldrb	r3, [r3, #9]
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	4a17      	ldr	r2, [pc, #92]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c7a:	4b15      	ldr	r3, [pc, #84]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c7c:	7a5b      	ldrb	r3, [r3, #9]
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	461a      	mov	r2, r3
 8010c82:	4b13      	ldr	r3, [pc, #76]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c84:	4413      	add	r3, r2
 8010c86:	79fa      	ldrb	r2, [r7, #7]
 8010c88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010c8a:	4b11      	ldr	r3, [pc, #68]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c8c:	7a5b      	ldrb	r3, [r3, #9]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	1c5a      	adds	r2, r3, #1
 8010c92:	b2d1      	uxtb	r1, r2
 8010c94:	4a0e      	ldr	r2, [pc, #56]	; (8010cd0 <FATFS_LinkDriverEx+0x94>)
 8010c96:	7251      	strb	r1, [r2, #9]
 8010c98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c9a:	7dbb      	ldrb	r3, [r7, #22]
 8010c9c:	3330      	adds	r3, #48	; 0x30
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	223a      	movs	r2, #58	; 0x3a
 8010caa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	3302      	adds	r3, #2
 8010cb0:	222f      	movs	r2, #47	; 0x2f
 8010cb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	3303      	adds	r3, #3
 8010cb8:	2200      	movs	r2, #0
 8010cba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	240081fc 	.word	0x240081fc

08010cd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010cde:	2200      	movs	r2, #0
 8010ce0:	6839      	ldr	r1, [r7, #0]
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff ffaa 	bl	8010c3c <FATFS_LinkDriverEx>
 8010ce8:	4603      	mov	r3, r0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b084      	sub	sp, #16
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	6039      	str	r1, [r7, #0]
 8010cfc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010cfe:	2200      	movs	r2, #0
 8010d00:	2101      	movs	r1, #1
 8010d02:	2001      	movs	r0, #1
 8010d04:	f000 f9ae 	bl	8011064 <osSemaphoreNew>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	bf14      	ite	ne
 8010d16:	2301      	movne	r3, #1
 8010d18:	2300      	moveq	r3, #0
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	60fb      	str	r3, [r7, #12]

    return ret;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fab7 	bl	80112a4 <osSemaphoreDelete>
#endif
    return 1;
 8010d36:	2301      	movs	r3, #1
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fa11 	bl	8011178 <osSemaphoreAcquire>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d101      	bne.n	8010d60 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010d60:	68fb      	ldr	r3, [r7, #12]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b082      	sub	sp, #8
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 fa52 	bl	801121c <osSemaphoreRelease>
#endif
}
 8010d78:	bf00      	nop
 8010d7a:	3708      	adds	r7, #8
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <__NVIC_SetPriority>:
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	4603      	mov	r3, r0
 8010d88:	6039      	str	r1, [r7, #0]
 8010d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	db0a      	blt.n	8010daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	490c      	ldr	r1, [pc, #48]	; (8010dcc <__NVIC_SetPriority+0x4c>)
 8010d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d9e:	0112      	lsls	r2, r2, #4
 8010da0:	b2d2      	uxtb	r2, r2
 8010da2:	440b      	add	r3, r1
 8010da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010da8:	e00a      	b.n	8010dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	4908      	ldr	r1, [pc, #32]	; (8010dd0 <__NVIC_SetPriority+0x50>)
 8010db0:	88fb      	ldrh	r3, [r7, #6]
 8010db2:	f003 030f 	and.w	r3, r3, #15
 8010db6:	3b04      	subs	r3, #4
 8010db8:	0112      	lsls	r2, r2, #4
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	440b      	add	r3, r1
 8010dbe:	761a      	strb	r2, [r3, #24]
}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr
 8010dcc:	e000e100 	.word	0xe000e100
 8010dd0:	e000ed00 	.word	0xe000ed00

08010dd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010dd8:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <SysTick_Handler+0x1c>)
 8010dda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010ddc:	f002 fc0e 	bl	80135fc <xTaskGetSchedulerState>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d001      	beq.n	8010dea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010de6:	f003 faf7 	bl	80143d8 <xPortSysTickHandler>
  }
}
 8010dea:	bf00      	nop
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	e000e010 	.word	0xe000e010

08010df4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010df8:	2100      	movs	r1, #0
 8010dfa:	f06f 0004 	mvn.w	r0, #4
 8010dfe:	f7ff ffbf 	bl	8010d80 <__NVIC_SetPriority>
#endif
}
 8010e02:	bf00      	nop
 8010e04:	bd80      	pop	{r7, pc}
	...

08010e08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e0e:	f3ef 8305 	mrs	r3, IPSR
 8010e12:	603b      	str	r3, [r7, #0]
  return(result);
 8010e14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d003      	beq.n	8010e22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010e1a:	f06f 0305 	mvn.w	r3, #5
 8010e1e:	607b      	str	r3, [r7, #4]
 8010e20:	e00c      	b.n	8010e3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010e22:	4b0a      	ldr	r3, [pc, #40]	; (8010e4c <osKernelInitialize+0x44>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d105      	bne.n	8010e36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010e2a:	4b08      	ldr	r3, [pc, #32]	; (8010e4c <osKernelInitialize+0x44>)
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	607b      	str	r3, [r7, #4]
 8010e34:	e002      	b.n	8010e3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010e36:	f04f 33ff 	mov.w	r3, #4294967295
 8010e3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010e3c:	687b      	ldr	r3, [r7, #4]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	24008208 	.word	0x24008208

08010e50 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010e56:	f002 fbd1 	bl	80135fc <xTaskGetSchedulerState>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d004      	beq.n	8010e6a <osKernelGetState+0x1a>
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	d105      	bne.n	8010e70 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8010e64:	2302      	movs	r3, #2
 8010e66:	607b      	str	r3, [r7, #4]
      break;
 8010e68:	e00c      	b.n	8010e84 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	607b      	str	r3, [r7, #4]
      break;
 8010e6e:	e009      	b.n	8010e84 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <osKernelGetState+0x40>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d102      	bne.n	8010e7e <osKernelGetState+0x2e>
        state = osKernelReady;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8010e7c:	e001      	b.n	8010e82 <osKernelGetState+0x32>
        state = osKernelInactive;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	607b      	str	r3, [r7, #4]
      break;
 8010e82:	bf00      	nop
  }

  return (state);
 8010e84:	687b      	ldr	r3, [r7, #4]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	24008208 	.word	0x24008208

08010e94 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e9a:	f3ef 8305 	mrs	r3, IPSR
 8010e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8010ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d003      	beq.n	8010eae <osKernelStart+0x1a>
    stat = osErrorISR;
 8010ea6:	f06f 0305 	mvn.w	r3, #5
 8010eaa:	607b      	str	r3, [r7, #4]
 8010eac:	e010      	b.n	8010ed0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010eae:	4b0b      	ldr	r3, [pc, #44]	; (8010edc <osKernelStart+0x48>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d109      	bne.n	8010eca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010eb6:	f7ff ff9d 	bl	8010df4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010eba:	4b08      	ldr	r3, [pc, #32]	; (8010edc <osKernelStart+0x48>)
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010ec0:	f001 ff2e 	bl	8012d20 <vTaskStartScheduler>
      stat = osOK;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	607b      	str	r3, [r7, #4]
 8010ec8:	e002      	b.n	8010ed0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010eca:	f04f 33ff 	mov.w	r3, #4294967295
 8010ece:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010ed0:	687b      	ldr	r3, [r7, #4]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	24008208 	.word	0x24008208

08010ee0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ee6:	f3ef 8305 	mrs	r3, IPSR
 8010eea:	603b      	str	r3, [r7, #0]
  return(result);
 8010eec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d003      	beq.n	8010efa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8010ef2:	f002 f841 	bl	8012f78 <xTaskGetTickCountFromISR>
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	e002      	b.n	8010f00 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8010efa:	f002 f82d 	bl	8012f58 <xTaskGetTickCount>
 8010efe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8010f00:	687b      	ldr	r3, [r7, #4]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b08e      	sub	sp, #56	; 0x38
 8010f0e:	af04      	add	r7, sp, #16
 8010f10:	60f8      	str	r0, [r7, #12]
 8010f12:	60b9      	str	r1, [r7, #8]
 8010f14:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f1a:	f3ef 8305 	mrs	r3, IPSR
 8010f1e:	617b      	str	r3, [r7, #20]
  return(result);
 8010f20:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d17e      	bne.n	8011024 <osThreadNew+0x11a>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d07b      	beq.n	8011024 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010f2c:	2380      	movs	r3, #128	; 0x80
 8010f2e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010f30:	2318      	movs	r3, #24
 8010f32:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010f34:	2300      	movs	r3, #0
 8010f36:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010f38:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d045      	beq.n	8010fd0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <osThreadNew+0x48>
        name = attr->name;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	699b      	ldr	r3, [r3, #24]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d002      	beq.n	8010f60 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	699b      	ldr	r3, [r3, #24]
 8010f5e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d008      	beq.n	8010f78 <osThreadNew+0x6e>
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	2b38      	cmp	r3, #56	; 0x38
 8010f6a:	d805      	bhi.n	8010f78 <osThreadNew+0x6e>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <osThreadNew+0x72>
        return (NULL);
 8010f78:	2300      	movs	r3, #0
 8010f7a:	e054      	b.n	8011026 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	695b      	ldr	r3, [r3, #20]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d003      	beq.n	8010f8c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	695b      	ldr	r3, [r3, #20]
 8010f88:	089b      	lsrs	r3, r3, #2
 8010f8a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d00e      	beq.n	8010fb2 <osThreadNew+0xa8>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	2bbb      	cmp	r3, #187	; 0xbb
 8010f9a:	d90a      	bls.n	8010fb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d006      	beq.n	8010fb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	695b      	ldr	r3, [r3, #20]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <osThreadNew+0xa8>
        mem = 1;
 8010fac:	2301      	movs	r3, #1
 8010fae:	61bb      	str	r3, [r7, #24]
 8010fb0:	e010      	b.n	8010fd4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10c      	bne.n	8010fd4 <osThreadNew+0xca>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d108      	bne.n	8010fd4 <osThreadNew+0xca>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d104      	bne.n	8010fd4 <osThreadNew+0xca>
          mem = 0;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	61bb      	str	r3, [r7, #24]
 8010fce:	e001      	b.n	8010fd4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d110      	bne.n	8010ffc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010fe2:	9202      	str	r2, [sp, #8]
 8010fe4:	9301      	str	r3, [sp, #4]
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	9300      	str	r3, [sp, #0]
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	6a3a      	ldr	r2, [r7, #32]
 8010fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ff0:	68f8      	ldr	r0, [r7, #12]
 8010ff2:	f001 fba3 	bl	801273c <xTaskCreateStatic>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	613b      	str	r3, [r7, #16]
 8010ffa:	e013      	b.n	8011024 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d110      	bne.n	8011024 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011002:	6a3b      	ldr	r3, [r7, #32]
 8011004:	b29a      	uxth	r2, r3
 8011006:	f107 0310 	add.w	r3, r7, #16
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f001 fbee 	bl	80127f6 <xTaskCreate>
 801101a:	4603      	mov	r3, r0
 801101c:	2b01      	cmp	r3, #1
 801101e:	d001      	beq.n	8011024 <osThreadNew+0x11a>
            hTask = NULL;
 8011020:	2300      	movs	r3, #0
 8011022:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011024:	693b      	ldr	r3, [r7, #16]
}
 8011026:	4618      	mov	r0, r3
 8011028:	3728      	adds	r7, #40	; 0x28
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}

0801102e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801102e:	b580      	push	{r7, lr}
 8011030:	b084      	sub	sp, #16
 8011032:	af00      	add	r7, sp, #0
 8011034:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011036:	f3ef 8305 	mrs	r3, IPSR
 801103a:	60bb      	str	r3, [r7, #8]
  return(result);
 801103c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801103e:	2b00      	cmp	r3, #0
 8011040:	d003      	beq.n	801104a <osDelay+0x1c>
    stat = osErrorISR;
 8011042:	f06f 0305 	mvn.w	r3, #5
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	e007      	b.n	801105a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801104a:	2300      	movs	r3, #0
 801104c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <osDelay+0x2c>
      vTaskDelay(ticks);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f001 fd29 	bl	8012aac <vTaskDelay>
    }
  }

  return (stat);
 801105a:	68fb      	ldr	r3, [r7, #12]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011064:	b580      	push	{r7, lr}
 8011066:	b08a      	sub	sp, #40	; 0x28
 8011068:	af02      	add	r7, sp, #8
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011070:	2300      	movs	r3, #0
 8011072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011074:	f3ef 8305 	mrs	r3, IPSR
 8011078:	613b      	str	r3, [r7, #16]
  return(result);
 801107a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801107c:	2b00      	cmp	r3, #0
 801107e:	d175      	bne.n	801116c <osSemaphoreNew+0x108>
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d072      	beq.n	801116c <osSemaphoreNew+0x108>
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	429a      	cmp	r2, r3
 801108c:	d86e      	bhi.n	801116c <osSemaphoreNew+0x108>
    mem = -1;
 801108e:	f04f 33ff 	mov.w	r3, #4294967295
 8011092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d015      	beq.n	80110c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d006      	beq.n	80110b0 <osSemaphoreNew+0x4c>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	68db      	ldr	r3, [r3, #12]
 80110a6:	2b4f      	cmp	r3, #79	; 0x4f
 80110a8:	d902      	bls.n	80110b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80110aa:	2301      	movs	r3, #1
 80110ac:	61bb      	str	r3, [r7, #24]
 80110ae:	e00c      	b.n	80110ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d108      	bne.n	80110ca <osSemaphoreNew+0x66>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d104      	bne.n	80110ca <osSemaphoreNew+0x66>
          mem = 0;
 80110c0:	2300      	movs	r3, #0
 80110c2:	61bb      	str	r3, [r7, #24]
 80110c4:	e001      	b.n	80110ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80110c6:	2300      	movs	r3, #0
 80110c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d0:	d04c      	beq.n	801116c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d128      	bne.n	801112a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d10a      	bne.n	80110f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	2203      	movs	r2, #3
 80110e4:	9200      	str	r2, [sp, #0]
 80110e6:	2200      	movs	r2, #0
 80110e8:	2100      	movs	r1, #0
 80110ea:	2001      	movs	r0, #1
 80110ec:	f000 fb80 	bl	80117f0 <xQueueGenericCreateStatic>
 80110f0:	61f8      	str	r0, [r7, #28]
 80110f2:	e005      	b.n	8011100 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80110f4:	2203      	movs	r2, #3
 80110f6:	2100      	movs	r1, #0
 80110f8:	2001      	movs	r0, #1
 80110fa:	f000 fbf1 	bl	80118e0 <xQueueGenericCreate>
 80110fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d022      	beq.n	801114c <osSemaphoreNew+0xe8>
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d01f      	beq.n	801114c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801110c:	2300      	movs	r3, #0
 801110e:	2200      	movs	r2, #0
 8011110:	2100      	movs	r1, #0
 8011112:	69f8      	ldr	r0, [r7, #28]
 8011114:	f000 fcac 	bl	8011a70 <xQueueGenericSend>
 8011118:	4603      	mov	r3, r0
 801111a:	2b01      	cmp	r3, #1
 801111c:	d016      	beq.n	801114c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801111e:	69f8      	ldr	r0, [r7, #28]
 8011120:	f001 f938 	bl	8012394 <vQueueDelete>
            hSemaphore = NULL;
 8011124:	2300      	movs	r3, #0
 8011126:	61fb      	str	r3, [r7, #28]
 8011128:	e010      	b.n	801114c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d108      	bne.n	8011142 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	461a      	mov	r2, r3
 8011136:	68b9      	ldr	r1, [r7, #8]
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f000 fc2e 	bl	801199a <xQueueCreateCountingSemaphoreStatic>
 801113e:	61f8      	str	r0, [r7, #28]
 8011140:	e004      	b.n	801114c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011142:	68b9      	ldr	r1, [r7, #8]
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 fc5f 	bl	8011a08 <xQueueCreateCountingSemaphore>
 801114a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00c      	beq.n	801116c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d003      	beq.n	8011160 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	e001      	b.n	8011164 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011160:	2300      	movs	r3, #0
 8011162:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011164:	6979      	ldr	r1, [r7, #20]
 8011166:	69f8      	ldr	r0, [r7, #28]
 8011168:	f001 fa60 	bl	801262c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801116c:	69fb      	ldr	r3, [r7, #28]
}
 801116e:	4618      	mov	r0, r3
 8011170:	3720      	adds	r7, #32
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
	...

08011178 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d103      	bne.n	8011198 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011190:	f06f 0303 	mvn.w	r3, #3
 8011194:	617b      	str	r3, [r7, #20]
 8011196:	e039      	b.n	801120c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011198:	f3ef 8305 	mrs	r3, IPSR
 801119c:	60fb      	str	r3, [r7, #12]
  return(result);
 801119e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d022      	beq.n	80111ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d003      	beq.n	80111b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80111aa:	f06f 0303 	mvn.w	r3, #3
 80111ae:	617b      	str	r3, [r7, #20]
 80111b0:	e02c      	b.n	801120c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80111b2:	2300      	movs	r3, #0
 80111b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80111b6:	f107 0308 	add.w	r3, r7, #8
 80111ba:	461a      	mov	r2, r3
 80111bc:	2100      	movs	r1, #0
 80111be:	6938      	ldr	r0, [r7, #16]
 80111c0:	f001 f868 	bl	8012294 <xQueueReceiveFromISR>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d003      	beq.n	80111d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80111ca:	f06f 0302 	mvn.w	r3, #2
 80111ce:	617b      	str	r3, [r7, #20]
 80111d0:	e01c      	b.n	801120c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d019      	beq.n	801120c <osSemaphoreAcquire+0x94>
 80111d8:	4b0f      	ldr	r3, [pc, #60]	; (8011218 <osSemaphoreAcquire+0xa0>)
 80111da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	f3bf 8f6f 	isb	sy
 80111e8:	e010      	b.n	801120c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6938      	ldr	r0, [r7, #16]
 80111ee:	f000 ff45 	bl	801207c <xQueueSemaphoreTake>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d009      	beq.n	801120c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d003      	beq.n	8011206 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80111fe:	f06f 0301 	mvn.w	r3, #1
 8011202:	617b      	str	r3, [r7, #20]
 8011204:	e002      	b.n	801120c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011206:	f06f 0302 	mvn.w	r3, #2
 801120a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801120c:	697b      	ldr	r3, [r7, #20]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	e000ed04 	.word	0xe000ed04

0801121c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d103      	bne.n	801123a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011232:	f06f 0303 	mvn.w	r3, #3
 8011236:	617b      	str	r3, [r7, #20]
 8011238:	e02c      	b.n	8011294 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801123a:	f3ef 8305 	mrs	r3, IPSR
 801123e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011240:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011242:	2b00      	cmp	r3, #0
 8011244:	d01a      	beq.n	801127c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011246:	2300      	movs	r3, #0
 8011248:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801124a:	f107 0308 	add.w	r3, r7, #8
 801124e:	4619      	mov	r1, r3
 8011250:	6938      	ldr	r0, [r7, #16]
 8011252:	f000 fda6 	bl	8011da2 <xQueueGiveFromISR>
 8011256:	4603      	mov	r3, r0
 8011258:	2b01      	cmp	r3, #1
 801125a:	d003      	beq.n	8011264 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801125c:	f06f 0302 	mvn.w	r3, #2
 8011260:	617b      	str	r3, [r7, #20]
 8011262:	e017      	b.n	8011294 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d014      	beq.n	8011294 <osSemaphoreRelease+0x78>
 801126a:	4b0d      	ldr	r3, [pc, #52]	; (80112a0 <osSemaphoreRelease+0x84>)
 801126c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011270:	601a      	str	r2, [r3, #0]
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	e00b      	b.n	8011294 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801127c:	2300      	movs	r3, #0
 801127e:	2200      	movs	r2, #0
 8011280:	2100      	movs	r1, #0
 8011282:	6938      	ldr	r0, [r7, #16]
 8011284:	f000 fbf4 	bl	8011a70 <xQueueGenericSend>
 8011288:	4603      	mov	r3, r0
 801128a:	2b01      	cmp	r3, #1
 801128c:	d002      	beq.n	8011294 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801128e:	f06f 0302 	mvn.w	r3, #2
 8011292:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011294:	697b      	ldr	r3, [r7, #20]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3718      	adds	r7, #24
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	e000ed04 	.word	0xe000ed04

080112a4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b086      	sub	sp, #24
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112b0:	f3ef 8305 	mrs	r3, IPSR
 80112b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80112b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d003      	beq.n	80112c4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80112bc:	f06f 0305 	mvn.w	r3, #5
 80112c0:	617b      	str	r3, [r7, #20]
 80112c2:	e00e      	b.n	80112e2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d103      	bne.n	80112d2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80112ca:	f06f 0303 	mvn.w	r3, #3
 80112ce:	617b      	str	r3, [r7, #20]
 80112d0:	e007      	b.n	80112e2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80112d2:	6938      	ldr	r0, [r7, #16]
 80112d4:	f001 f9d4 	bl	8012680 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80112d8:	2300      	movs	r3, #0
 80112da:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80112dc:	6938      	ldr	r0, [r7, #16]
 80112de:	f001 f859 	bl	8012394 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80112e2:	697b      	ldr	r3, [r7, #20]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3718      	adds	r7, #24
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b08a      	sub	sp, #40	; 0x28
 80112f0:	af02      	add	r7, sp, #8
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80112f8:	2300      	movs	r3, #0
 80112fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112fc:	f3ef 8305 	mrs	r3, IPSR
 8011300:	613b      	str	r3, [r7, #16]
  return(result);
 8011302:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011304:	2b00      	cmp	r3, #0
 8011306:	d15f      	bne.n	80113c8 <osMessageQueueNew+0xdc>
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d05c      	beq.n	80113c8 <osMessageQueueNew+0xdc>
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d059      	beq.n	80113c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8011314:	f04f 33ff 	mov.w	r3, #4294967295
 8011318:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d029      	beq.n	8011374 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d012      	beq.n	801134e <osMessageQueueNew+0x62>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	2b4f      	cmp	r3, #79	; 0x4f
 801132e:	d90e      	bls.n	801134e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011334:	2b00      	cmp	r3, #0
 8011336:	d00a      	beq.n	801134e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	695a      	ldr	r2, [r3, #20]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	68b9      	ldr	r1, [r7, #8]
 8011340:	fb01 f303 	mul.w	r3, r1, r3
 8011344:	429a      	cmp	r2, r3
 8011346:	d302      	bcc.n	801134e <osMessageQueueNew+0x62>
        mem = 1;
 8011348:	2301      	movs	r3, #1
 801134a:	61bb      	str	r3, [r7, #24]
 801134c:	e014      	b.n	8011378 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d110      	bne.n	8011378 <osMessageQueueNew+0x8c>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10c      	bne.n	8011378 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	d108      	bne.n	8011378 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d104      	bne.n	8011378 <osMessageQueueNew+0x8c>
          mem = 0;
 801136e:	2300      	movs	r3, #0
 8011370:	61bb      	str	r3, [r7, #24]
 8011372:	e001      	b.n	8011378 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011374:	2300      	movs	r3, #0
 8011376:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d10b      	bne.n	8011396 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	691a      	ldr	r2, [r3, #16]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	2100      	movs	r1, #0
 8011388:	9100      	str	r1, [sp, #0]
 801138a:	68b9      	ldr	r1, [r7, #8]
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f000 fa2f 	bl	80117f0 <xQueueGenericCreateStatic>
 8011392:	61f8      	str	r0, [r7, #28]
 8011394:	e008      	b.n	80113a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d105      	bne.n	80113a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801139c:	2200      	movs	r2, #0
 801139e:	68b9      	ldr	r1, [r7, #8]
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f000 fa9d 	bl	80118e0 <xQueueGenericCreate>
 80113a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00c      	beq.n	80113c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d003      	beq.n	80113bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	617b      	str	r3, [r7, #20]
 80113ba:	e001      	b.n	80113c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80113c0:	6979      	ldr	r1, [r7, #20]
 80113c2:	69f8      	ldr	r0, [r7, #28]
 80113c4:	f001 f932 	bl	801262c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80113c8:	69fb      	ldr	r3, [r7, #28]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3720      	adds	r7, #32
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
	...

080113d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b088      	sub	sp, #32
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	603b      	str	r3, [r7, #0]
 80113e0:	4613      	mov	r3, r2
 80113e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113ec:	f3ef 8305 	mrs	r3, IPSR
 80113f0:	617b      	str	r3, [r7, #20]
  return(result);
 80113f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d028      	beq.n	801144a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d005      	beq.n	801140a <osMessageQueuePut+0x36>
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d002      	beq.n	801140a <osMessageQueuePut+0x36>
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801140a:	f06f 0303 	mvn.w	r3, #3
 801140e:	61fb      	str	r3, [r7, #28]
 8011410:	e038      	b.n	8011484 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011412:	2300      	movs	r3, #0
 8011414:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011416:	f107 0210 	add.w	r2, r7, #16
 801141a:	2300      	movs	r3, #0
 801141c:	68b9      	ldr	r1, [r7, #8]
 801141e:	69b8      	ldr	r0, [r7, #24]
 8011420:	f000 fc24 	bl	8011c6c <xQueueGenericSendFromISR>
 8011424:	4603      	mov	r3, r0
 8011426:	2b01      	cmp	r3, #1
 8011428:	d003      	beq.n	8011432 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801142a:	f06f 0302 	mvn.w	r3, #2
 801142e:	61fb      	str	r3, [r7, #28]
 8011430:	e028      	b.n	8011484 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d025      	beq.n	8011484 <osMessageQueuePut+0xb0>
 8011438:	4b15      	ldr	r3, [pc, #84]	; (8011490 <osMessageQueuePut+0xbc>)
 801143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801143e:	601a      	str	r2, [r3, #0]
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	e01c      	b.n	8011484 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d002      	beq.n	8011456 <osMessageQueuePut+0x82>
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d103      	bne.n	801145e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011456:	f06f 0303 	mvn.w	r3, #3
 801145a:	61fb      	str	r3, [r7, #28]
 801145c:	e012      	b.n	8011484 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801145e:	2300      	movs	r3, #0
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	68b9      	ldr	r1, [r7, #8]
 8011464:	69b8      	ldr	r0, [r7, #24]
 8011466:	f000 fb03 	bl	8011a70 <xQueueGenericSend>
 801146a:	4603      	mov	r3, r0
 801146c:	2b01      	cmp	r3, #1
 801146e:	d009      	beq.n	8011484 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d003      	beq.n	801147e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011476:	f06f 0301 	mvn.w	r3, #1
 801147a:	61fb      	str	r3, [r7, #28]
 801147c:	e002      	b.n	8011484 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801147e:	f06f 0302 	mvn.w	r3, #2
 8011482:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011484:	69fb      	ldr	r3, [r7, #28]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3720      	adds	r7, #32
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	e000ed04 	.word	0xe000ed04

08011494 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
 80114a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80114a6:	2300      	movs	r3, #0
 80114a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114aa:	f3ef 8305 	mrs	r3, IPSR
 80114ae:	617b      	str	r3, [r7, #20]
  return(result);
 80114b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d028      	beq.n	8011508 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d005      	beq.n	80114c8 <osMessageQueueGet+0x34>
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <osMessageQueueGet+0x34>
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d003      	beq.n	80114d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80114c8:	f06f 0303 	mvn.w	r3, #3
 80114cc:	61fb      	str	r3, [r7, #28]
 80114ce:	e037      	b.n	8011540 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80114d0:	2300      	movs	r3, #0
 80114d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80114d4:	f107 0310 	add.w	r3, r7, #16
 80114d8:	461a      	mov	r2, r3
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	69b8      	ldr	r0, [r7, #24]
 80114de:	f000 fed9 	bl	8012294 <xQueueReceiveFromISR>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d003      	beq.n	80114f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80114e8:	f06f 0302 	mvn.w	r3, #2
 80114ec:	61fb      	str	r3, [r7, #28]
 80114ee:	e027      	b.n	8011540 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d024      	beq.n	8011540 <osMessageQueueGet+0xac>
 80114f6:	4b15      	ldr	r3, [pc, #84]	; (801154c <osMessageQueueGet+0xb8>)
 80114f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	f3bf 8f6f 	isb	sy
 8011506:	e01b      	b.n	8011540 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d002      	beq.n	8011514 <osMessageQueueGet+0x80>
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d103      	bne.n	801151c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011514:	f06f 0303 	mvn.w	r3, #3
 8011518:	61fb      	str	r3, [r7, #28]
 801151a:	e011      	b.n	8011540 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	68b9      	ldr	r1, [r7, #8]
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f000 fccb 	bl	8011ebc <xQueueReceive>
 8011526:	4603      	mov	r3, r0
 8011528:	2b01      	cmp	r3, #1
 801152a:	d009      	beq.n	8011540 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011532:	f06f 0301 	mvn.w	r3, #1
 8011536:	61fb      	str	r3, [r7, #28]
 8011538:	e002      	b.n	8011540 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801153a:	f06f 0302 	mvn.w	r3, #2
 801153e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011540:	69fb      	ldr	r3, [r7, #28]
}
 8011542:	4618      	mov	r0, r3
 8011544:	3720      	adds	r7, #32
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	e000ed04 	.word	0xe000ed04

08011550 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011550:	b480      	push	{r7}
 8011552:	b085      	sub	sp, #20
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	4a07      	ldr	r2, [pc, #28]	; (801157c <vApplicationGetIdleTaskMemory+0x2c>)
 8011560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	4a06      	ldr	r2, [pc, #24]	; (8011580 <vApplicationGetIdleTaskMemory+0x30>)
 8011566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2280      	movs	r2, #128	; 0x80
 801156c:	601a      	str	r2, [r3, #0]
}
 801156e:	bf00      	nop
 8011570:	3714      	adds	r7, #20
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	2400820c 	.word	0x2400820c
 8011580:	240082c8 	.word	0x240082c8

08011584 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	4a07      	ldr	r2, [pc, #28]	; (80115b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8011594:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	4a06      	ldr	r2, [pc, #24]	; (80115b4 <vApplicationGetTimerTaskMemory+0x30>)
 801159a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115a2:	601a      	str	r2, [r3, #0]
}
 80115a4:	bf00      	nop
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	240084c8 	.word	0x240084c8
 80115b4:	24008584 	.word	0x24008584

080115b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f103 0208 	add.w	r2, r3, #8
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f04f 32ff 	mov.w	r2, #4294967295
 80115d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f103 0208 	add.w	r2, r3, #8
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f103 0208 	add.w	r2, r3, #8
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011606:	bf00      	nop
 8011608:	370c      	adds	r7, #12
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr

08011612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011612:	b480      	push	{r7}
 8011614:	b085      	sub	sp, #20
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	689a      	ldr	r2, [r3, #8]
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	683a      	ldr	r2, [r7, #0]
 8011636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	1c5a      	adds	r2, r3, #1
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	601a      	str	r2, [r3, #0]
}
 801164e:	bf00      	nop
 8011650:	3714      	adds	r7, #20
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr

0801165a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801165a:	b480      	push	{r7}
 801165c:	b085      	sub	sp, #20
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
 8011662:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011670:	d103      	bne.n	801167a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e00c      	b.n	8011694 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	3308      	adds	r3, #8
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	e002      	b.n	8011688 <vListInsert+0x2e>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	68ba      	ldr	r2, [r7, #8]
 8011690:	429a      	cmp	r2, r3
 8011692:	d2f6      	bcs.n	8011682 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	685a      	ldr	r2, [r3, #4]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	683a      	ldr	r2, [r7, #0]
 80116a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	68fa      	ldr	r2, [r7, #12]
 80116a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	601a      	str	r2, [r3, #0]
}
 80116c0:	bf00      	nop
 80116c2:	3714      	adds	r7, #20
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr

080116cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	6892      	ldr	r2, [r2, #8]
 80116e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	6852      	ldr	r2, [r2, #4]
 80116ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d103      	bne.n	8011700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	689a      	ldr	r2, [r3, #8]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	1e5a      	subs	r2, r3, #1
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
}
 8011714:	4618      	mov	r0, r3
 8011716:	3714      	adds	r7, #20
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10a      	bne.n	801174a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011746:	bf00      	nop
 8011748:	e7fe      	b.n	8011748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801174a:	f002 fdb3 	bl	80142b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011756:	68f9      	ldr	r1, [r7, #12]
 8011758:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801175a:	fb01 f303 	mul.w	r3, r1, r3
 801175e:	441a      	add	r2, r3
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2200      	movs	r2, #0
 8011768:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801177a:	3b01      	subs	r3, #1
 801177c:	68f9      	ldr	r1, [r7, #12]
 801177e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011780:	fb01 f303 	mul.w	r3, r1, r3
 8011784:	441a      	add	r2, r3
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	22ff      	movs	r2, #255	; 0xff
 801178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	22ff      	movs	r2, #255	; 0xff
 8011796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d114      	bne.n	80117ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d01a      	beq.n	80117de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	3310      	adds	r3, #16
 80117ac:	4618      	mov	r0, r3
 80117ae:	f001 fd63 	bl	8013278 <xTaskRemoveFromEventList>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d012      	beq.n	80117de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80117b8:	4b0c      	ldr	r3, [pc, #48]	; (80117ec <xQueueGenericReset+0xcc>)
 80117ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	f3bf 8f4f 	dsb	sy
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	e009      	b.n	80117de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	3310      	adds	r3, #16
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7ff fef2 	bl	80115b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3324      	adds	r3, #36	; 0x24
 80117d8:	4618      	mov	r0, r3
 80117da:	f7ff feed 	bl	80115b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80117de:	f002 fd99 	bl	8014314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80117e2:	2301      	movs	r3, #1
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	e000ed04 	.word	0xe000ed04

080117f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b08e      	sub	sp, #56	; 0x38
 80117f4:	af02      	add	r7, sp, #8
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d10a      	bne.n	801181a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011808:	f383 8811 	msr	BASEPRI, r3
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011816:	bf00      	nop
 8011818:	e7fe      	b.n	8011818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <xQueueGenericCreateStatic+0x52>
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <xQueueGenericCreateStatic+0x56>
 8011842:	2301      	movs	r3, #1
 8011844:	e000      	b.n	8011848 <xQueueGenericCreateStatic+0x58>
 8011846:	2300      	movs	r3, #0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d10a      	bne.n	8011862 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011850:	f383 8811 	msr	BASEPRI, r3
 8011854:	f3bf 8f6f 	isb	sy
 8011858:	f3bf 8f4f 	dsb	sy
 801185c:	623b      	str	r3, [r7, #32]
}
 801185e:	bf00      	nop
 8011860:	e7fe      	b.n	8011860 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <xQueueGenericCreateStatic+0x7e>
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <xQueueGenericCreateStatic+0x82>
 801186e:	2301      	movs	r3, #1
 8011870:	e000      	b.n	8011874 <xQueueGenericCreateStatic+0x84>
 8011872:	2300      	movs	r3, #0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d10a      	bne.n	801188e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187c:	f383 8811 	msr	BASEPRI, r3
 8011880:	f3bf 8f6f 	isb	sy
 8011884:	f3bf 8f4f 	dsb	sy
 8011888:	61fb      	str	r3, [r7, #28]
}
 801188a:	bf00      	nop
 801188c:	e7fe      	b.n	801188c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801188e:	2350      	movs	r3, #80	; 0x50
 8011890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	2b50      	cmp	r3, #80	; 0x50
 8011896:	d00a      	beq.n	80118ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189c:	f383 8811 	msr	BASEPRI, r3
 80118a0:	f3bf 8f6f 	isb	sy
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	61bb      	str	r3, [r7, #24]
}
 80118aa:	bf00      	nop
 80118ac:	e7fe      	b.n	80118ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80118ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00d      	beq.n	80118d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80118ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118bc:	2201      	movs	r2, #1
 80118be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	9300      	str	r3, [sp, #0]
 80118ca:	4613      	mov	r3, r2
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	68b9      	ldr	r1, [r7, #8]
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f000 f83f 	bl	8011954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80118d8:	4618      	mov	r0, r3
 80118da:	3730      	adds	r7, #48	; 0x30
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b08a      	sub	sp, #40	; 0x28
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	4613      	mov	r3, r2
 80118ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10a      	bne.n	801190a <xQueueGenericCreate+0x2a>
	__asm volatile
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	613b      	str	r3, [r7, #16]
}
 8011906:	bf00      	nop
 8011908:	e7fe      	b.n	8011908 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	fb02 f303 	mul.w	r3, r2, r3
 8011912:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	3350      	adds	r3, #80	; 0x50
 8011918:	4618      	mov	r0, r3
 801191a:	f002 fded 	bl	80144f8 <pvPortMalloc>
 801191e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011920:	69bb      	ldr	r3, [r7, #24]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d011      	beq.n	801194a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	3350      	adds	r3, #80	; 0x50
 801192e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	2200      	movs	r2, #0
 8011934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011938:	79fa      	ldrb	r2, [r7, #7]
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	9300      	str	r3, [sp, #0]
 801193e:	4613      	mov	r3, r2
 8011940:	697a      	ldr	r2, [r7, #20]
 8011942:	68b9      	ldr	r1, [r7, #8]
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f000 f805 	bl	8011954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801194a:	69bb      	ldr	r3, [r7, #24]
	}
 801194c:	4618      	mov	r0, r3
 801194e:	3720      	adds	r7, #32
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
 8011960:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d103      	bne.n	8011970 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	69ba      	ldr	r2, [r7, #24]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	e002      	b.n	8011976 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011982:	2101      	movs	r1, #1
 8011984:	69b8      	ldr	r0, [r7, #24]
 8011986:	f7ff fecb 	bl	8011720 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	78fa      	ldrb	r2, [r7, #3]
 801198e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011992:	bf00      	nop
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801199a:	b580      	push	{r7, lr}
 801199c:	b08a      	sub	sp, #40	; 0x28
 801199e:	af02      	add	r7, sp, #8
 80119a0:	60f8      	str	r0, [r7, #12]
 80119a2:	60b9      	str	r1, [r7, #8]
 80119a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10a      	bne.n	80119c2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80119ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	61bb      	str	r3, [r7, #24]
}
 80119be:	bf00      	nop
 80119c0:	e7fe      	b.n	80119c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80119c2:	68ba      	ldr	r2, [r7, #8]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d90a      	bls.n	80119e0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80119ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ce:	f383 8811 	msr	BASEPRI, r3
 80119d2:	f3bf 8f6f 	isb	sy
 80119d6:	f3bf 8f4f 	dsb	sy
 80119da:	617b      	str	r3, [r7, #20]
}
 80119dc:	bf00      	nop
 80119de:	e7fe      	b.n	80119de <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80119e0:	2302      	movs	r3, #2
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	2100      	movs	r1, #0
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f7ff ff00 	bl	80117f0 <xQueueGenericCreateStatic>
 80119f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d002      	beq.n	80119fe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80119fe:	69fb      	ldr	r3, [r7, #28]
	}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3720      	adds	r7, #32
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b086      	sub	sp, #24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10a      	bne.n	8011a2e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8011a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1c:	f383 8811 	msr	BASEPRI, r3
 8011a20:	f3bf 8f6f 	isb	sy
 8011a24:	f3bf 8f4f 	dsb	sy
 8011a28:	613b      	str	r3, [r7, #16]
}
 8011a2a:	bf00      	nop
 8011a2c:	e7fe      	b.n	8011a2c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a2e:	683a      	ldr	r2, [r7, #0]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d90a      	bls.n	8011a4c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8011a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	60fb      	str	r3, [r7, #12]
}
 8011a48:	bf00      	nop
 8011a4a:	e7fe      	b.n	8011a4a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011a4c:	2202      	movs	r2, #2
 8011a4e:	2100      	movs	r1, #0
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7ff ff45 	bl	80118e0 <xQueueGenericCreate>
 8011a56:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d002      	beq.n	8011a64 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011a64:	697b      	ldr	r3, [r7, #20]
	}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3718      	adds	r7, #24
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
	...

08011a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b08e      	sub	sp, #56	; 0x38
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d10a      	bne.n	8011aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8011a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a90:	f383 8811 	msr	BASEPRI, r3
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	f3bf 8f4f 	dsb	sy
 8011a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a9e:	bf00      	nop
 8011aa0:	e7fe      	b.n	8011aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <xQueueGenericSend+0x40>
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <xQueueGenericSend+0x44>
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	e000      	b.n	8011ab6 <xQueueGenericSend+0x46>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d10a      	bne.n	8011ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8011aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011acc:	bf00      	nop
 8011ace:	e7fe      	b.n	8011ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b02      	cmp	r3, #2
 8011ad4:	d103      	bne.n	8011ade <xQueueGenericSend+0x6e>
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d101      	bne.n	8011ae2 <xQueueGenericSend+0x72>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e000      	b.n	8011ae4 <xQueueGenericSend+0x74>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10a      	bne.n	8011afe <xQueueGenericSend+0x8e>
	__asm volatile
 8011ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aec:	f383 8811 	msr	BASEPRI, r3
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	623b      	str	r3, [r7, #32]
}
 8011afa:	bf00      	nop
 8011afc:	e7fe      	b.n	8011afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011afe:	f001 fd7d 	bl	80135fc <xTaskGetSchedulerState>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d102      	bne.n	8011b0e <xQueueGenericSend+0x9e>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d101      	bne.n	8011b12 <xQueueGenericSend+0xa2>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	e000      	b.n	8011b14 <xQueueGenericSend+0xa4>
 8011b12:	2300      	movs	r3, #0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10a      	bne.n	8011b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8011b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	61fb      	str	r3, [r7, #28]
}
 8011b2a:	bf00      	nop
 8011b2c:	e7fe      	b.n	8011b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b2e:	f002 fbc1 	bl	80142b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d302      	bcc.n	8011b44 <xQueueGenericSend+0xd4>
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d129      	bne.n	8011b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b44:	683a      	ldr	r2, [r7, #0]
 8011b46:	68b9      	ldr	r1, [r7, #8]
 8011b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b4a:	f000 fc5e 	bl	801240a <prvCopyDataToQueue>
 8011b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d010      	beq.n	8011b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5a:	3324      	adds	r3, #36	; 0x24
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f001 fb8b 	bl	8013278 <xTaskRemoveFromEventList>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d013      	beq.n	8011b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b68:	4b3f      	ldr	r3, [pc, #252]	; (8011c68 <xQueueGenericSend+0x1f8>)
 8011b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b6e:	601a      	str	r2, [r3, #0]
 8011b70:	f3bf 8f4f 	dsb	sy
 8011b74:	f3bf 8f6f 	isb	sy
 8011b78:	e00a      	b.n	8011b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d007      	beq.n	8011b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b80:	4b39      	ldr	r3, [pc, #228]	; (8011c68 <xQueueGenericSend+0x1f8>)
 8011b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b86:	601a      	str	r2, [r3, #0]
 8011b88:	f3bf 8f4f 	dsb	sy
 8011b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b90:	f002 fbc0 	bl	8014314 <vPortExitCritical>
				return pdPASS;
 8011b94:	2301      	movs	r3, #1
 8011b96:	e063      	b.n	8011c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d103      	bne.n	8011ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b9e:	f002 fbb9 	bl	8014314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	e05c      	b.n	8011c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d106      	bne.n	8011bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011bac:	f107 0314 	add.w	r3, r7, #20
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f001 fbc5 	bl	8013340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011bba:	f002 fbab 	bl	8014314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011bbe:	f001 f91f 	bl	8012e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011bc2:	f002 fb77 	bl	80142b4 <vPortEnterCritical>
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bcc:	b25b      	sxtb	r3, r3
 8011bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd2:	d103      	bne.n	8011bdc <xQueueGenericSend+0x16c>
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011be2:	b25b      	sxtb	r3, r3
 8011be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be8:	d103      	bne.n	8011bf2 <xQueueGenericSend+0x182>
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	2200      	movs	r2, #0
 8011bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bf2:	f002 fb8f 	bl	8014314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bf6:	1d3a      	adds	r2, r7, #4
 8011bf8:	f107 0314 	add.w	r3, r7, #20
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f001 fbb4 	bl	801336c <xTaskCheckForTimeOut>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d124      	bne.n	8011c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c0c:	f000 fcf5 	bl	80125fa <prvIsQueueFull>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d018      	beq.n	8011c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c18:	3310      	adds	r3, #16
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f001 fada 	bl	80131d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c26:	f000 fc80 	bl	801252a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c2a:	f001 f8f7 	bl	8012e1c <xTaskResumeAll>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f47f af7c 	bne.w	8011b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011c36:	4b0c      	ldr	r3, [pc, #48]	; (8011c68 <xQueueGenericSend+0x1f8>)
 8011c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c3c:	601a      	str	r2, [r3, #0]
 8011c3e:	f3bf 8f4f 	dsb	sy
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	e772      	b.n	8011b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c4a:	f000 fc6e 	bl	801252a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c4e:	f001 f8e5 	bl	8012e1c <xTaskResumeAll>
 8011c52:	e76c      	b.n	8011b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c56:	f000 fc68 	bl	801252a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c5a:	f001 f8df 	bl	8012e1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3738      	adds	r7, #56	; 0x38
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	e000ed04 	.word	0xe000ed04

08011c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b090      	sub	sp, #64	; 0x40
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
 8011c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10a      	bne.n	8011c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c88:	f383 8811 	msr	BASEPRI, r3
 8011c8c:	f3bf 8f6f 	isb	sy
 8011c90:	f3bf 8f4f 	dsb	sy
 8011c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011c96:	bf00      	nop
 8011c98:	e7fe      	b.n	8011c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d103      	bne.n	8011ca8 <xQueueGenericSendFromISR+0x3c>
 8011ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d101      	bne.n	8011cac <xQueueGenericSendFromISR+0x40>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e000      	b.n	8011cae <xQueueGenericSendFromISR+0x42>
 8011cac:	2300      	movs	r3, #0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d10a      	bne.n	8011cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb6:	f383 8811 	msr	BASEPRI, r3
 8011cba:	f3bf 8f6f 	isb	sy
 8011cbe:	f3bf 8f4f 	dsb	sy
 8011cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cc4:	bf00      	nop
 8011cc6:	e7fe      	b.n	8011cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d103      	bne.n	8011cd6 <xQueueGenericSendFromISR+0x6a>
 8011cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d101      	bne.n	8011cda <xQueueGenericSendFromISR+0x6e>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	e000      	b.n	8011cdc <xQueueGenericSendFromISR+0x70>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10a      	bne.n	8011cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce4:	f383 8811 	msr	BASEPRI, r3
 8011ce8:	f3bf 8f6f 	isb	sy
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	623b      	str	r3, [r7, #32]
}
 8011cf2:	bf00      	nop
 8011cf4:	e7fe      	b.n	8011cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cf6:	f002 fbbf 	bl	8014478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8011cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d02:	f383 8811 	msr	BASEPRI, r3
 8011d06:	f3bf 8f6f 	isb	sy
 8011d0a:	f3bf 8f4f 	dsb	sy
 8011d0e:	61fa      	str	r2, [r7, #28]
 8011d10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d302      	bcc.n	8011d28 <xQueueGenericSendFromISR+0xbc>
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d12f      	bne.n	8011d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d38:	683a      	ldr	r2, [r7, #0]
 8011d3a:	68b9      	ldr	r1, [r7, #8]
 8011d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d3e:	f000 fb64 	bl	801240a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4a:	d112      	bne.n	8011d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d016      	beq.n	8011d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	3324      	adds	r3, #36	; 0x24
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f001 fa8d 	bl	8013278 <xTaskRemoveFromEventList>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00e      	beq.n	8011d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00b      	beq.n	8011d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	601a      	str	r2, [r3, #0]
 8011d70:	e007      	b.n	8011d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011d76:	3301      	adds	r3, #1
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	b25a      	sxtb	r2, r3
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d82:	2301      	movs	r3, #1
 8011d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011d86:	e001      	b.n	8011d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3740      	adds	r7, #64	; 0x40
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b08e      	sub	sp, #56	; 0x38
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
 8011daa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d10a      	bne.n	8011dcc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	623b      	str	r3, [r7, #32]
}
 8011dc8:	bf00      	nop
 8011dca:	e7fe      	b.n	8011dca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00a      	beq.n	8011dea <xQueueGiveFromISR+0x48>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	61fb      	str	r3, [r7, #28]
}
 8011de6:	bf00      	nop
 8011de8:	e7fe      	b.n	8011de8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d103      	bne.n	8011dfa <xQueueGiveFromISR+0x58>
 8011df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d101      	bne.n	8011dfe <xQueueGiveFromISR+0x5c>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e000      	b.n	8011e00 <xQueueGiveFromISR+0x5e>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10a      	bne.n	8011e1a <xQueueGiveFromISR+0x78>
	__asm volatile
 8011e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e08:	f383 8811 	msr	BASEPRI, r3
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	61bb      	str	r3, [r7, #24]
}
 8011e16:	bf00      	nop
 8011e18:	e7fe      	b.n	8011e18 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e1a:	f002 fb2d 	bl	8014478 <vPortValidateInterruptPriority>
	__asm volatile
 8011e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8011e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	617a      	str	r2, [r7, #20]
 8011e34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011e36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d22b      	bcs.n	8011ea2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e56:	1c5a      	adds	r2, r3, #1
 8011e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e64:	d112      	bne.n	8011e8c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d016      	beq.n	8011e9c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e70:	3324      	adds	r3, #36	; 0x24
 8011e72:	4618      	mov	r0, r3
 8011e74:	f001 fa00 	bl	8013278 <xTaskRemoveFromEventList>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00e      	beq.n	8011e9c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00b      	beq.n	8011e9c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	2201      	movs	r2, #1
 8011e88:	601a      	str	r2, [r3, #0]
 8011e8a:	e007      	b.n	8011e9c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e90:	3301      	adds	r3, #1
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	b25a      	sxtb	r2, r3
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8011ea0:	e001      	b.n	8011ea6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f383 8811 	msr	BASEPRI, r3
}
 8011eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3738      	adds	r7, #56	; 0x38
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b08c      	sub	sp, #48	; 0x30
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10a      	bne.n	8011eec <xQueueReceive+0x30>
	__asm volatile
 8011ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eda:	f383 8811 	msr	BASEPRI, r3
 8011ede:	f3bf 8f6f 	isb	sy
 8011ee2:	f3bf 8f4f 	dsb	sy
 8011ee6:	623b      	str	r3, [r7, #32]
}
 8011ee8:	bf00      	nop
 8011eea:	e7fe      	b.n	8011eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d103      	bne.n	8011efa <xQueueReceive+0x3e>
 8011ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d101      	bne.n	8011efe <xQueueReceive+0x42>
 8011efa:	2301      	movs	r3, #1
 8011efc:	e000      	b.n	8011f00 <xQueueReceive+0x44>
 8011efe:	2300      	movs	r3, #0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10a      	bne.n	8011f1a <xQueueReceive+0x5e>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	61fb      	str	r3, [r7, #28]
}
 8011f16:	bf00      	nop
 8011f18:	e7fe      	b.n	8011f18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f1a:	f001 fb6f 	bl	80135fc <xTaskGetSchedulerState>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <xQueueReceive+0x6e>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d101      	bne.n	8011f2e <xQueueReceive+0x72>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e000      	b.n	8011f30 <xQueueReceive+0x74>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d10a      	bne.n	8011f4a <xQueueReceive+0x8e>
	__asm volatile
 8011f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f38:	f383 8811 	msr	BASEPRI, r3
 8011f3c:	f3bf 8f6f 	isb	sy
 8011f40:	f3bf 8f4f 	dsb	sy
 8011f44:	61bb      	str	r3, [r7, #24]
}
 8011f46:	bf00      	nop
 8011f48:	e7fe      	b.n	8011f48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f4a:	f002 f9b3 	bl	80142b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d01f      	beq.n	8011f9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f5a:	68b9      	ldr	r1, [r7, #8]
 8011f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f5e:	f000 fabe 	bl	80124de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	1e5a      	subs	r2, r3, #1
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6c:	691b      	ldr	r3, [r3, #16]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00f      	beq.n	8011f92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	3310      	adds	r3, #16
 8011f76:	4618      	mov	r0, r3
 8011f78:	f001 f97e 	bl	8013278 <xTaskRemoveFromEventList>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d007      	beq.n	8011f92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f82:	4b3d      	ldr	r3, [pc, #244]	; (8012078 <xQueueReceive+0x1bc>)
 8011f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f88:	601a      	str	r2, [r3, #0]
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f92:	f002 f9bf 	bl	8014314 <vPortExitCritical>
				return pdPASS;
 8011f96:	2301      	movs	r3, #1
 8011f98:	e069      	b.n	801206e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d103      	bne.n	8011fa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011fa0:	f002 f9b8 	bl	8014314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	e062      	b.n	801206e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d106      	bne.n	8011fbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011fae:	f107 0310 	add.w	r3, r7, #16
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f001 f9c4 	bl	8013340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fbc:	f002 f9aa 	bl	8014314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011fc0:	f000 ff1e 	bl	8012e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fc4:	f002 f976 	bl	80142b4 <vPortEnterCritical>
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fce:	b25b      	sxtb	r3, r3
 8011fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd4:	d103      	bne.n	8011fde <xQueueReceive+0x122>
 8011fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fe4:	b25b      	sxtb	r3, r3
 8011fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fea:	d103      	bne.n	8011ff4 <xQueueReceive+0x138>
 8011fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ff4:	f002 f98e 	bl	8014314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ff8:	1d3a      	adds	r2, r7, #4
 8011ffa:	f107 0310 	add.w	r3, r7, #16
 8011ffe:	4611      	mov	r1, r2
 8012000:	4618      	mov	r0, r3
 8012002:	f001 f9b3 	bl	801336c <xTaskCheckForTimeOut>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d123      	bne.n	8012054 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801200c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801200e:	f000 fade 	bl	80125ce <prvIsQueueEmpty>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d017      	beq.n	8012048 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201a:	3324      	adds	r3, #36	; 0x24
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	4611      	mov	r1, r2
 8012020:	4618      	mov	r0, r3
 8012022:	f001 f8d9 	bl	80131d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012028:	f000 fa7f 	bl	801252a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801202c:	f000 fef6 	bl	8012e1c <xTaskResumeAll>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d189      	bne.n	8011f4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012036:	4b10      	ldr	r3, [pc, #64]	; (8012078 <xQueueReceive+0x1bc>)
 8012038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801203c:	601a      	str	r2, [r3, #0]
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	e780      	b.n	8011f4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801204a:	f000 fa6e 	bl	801252a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801204e:	f000 fee5 	bl	8012e1c <xTaskResumeAll>
 8012052:	e77a      	b.n	8011f4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012056:	f000 fa68 	bl	801252a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801205a:	f000 fedf 	bl	8012e1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801205e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012060:	f000 fab5 	bl	80125ce <prvIsQueueEmpty>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	f43f af6f 	beq.w	8011f4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801206c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801206e:	4618      	mov	r0, r3
 8012070:	3730      	adds	r7, #48	; 0x30
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	e000ed04 	.word	0xe000ed04

0801207c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b08e      	sub	sp, #56	; 0x38
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012086:	2300      	movs	r3, #0
 8012088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801208e:	2300      	movs	r3, #0
 8012090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10a      	bne.n	80120ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	623b      	str	r3, [r7, #32]
}
 80120aa:	bf00      	nop
 80120ac:	e7fe      	b.n	80120ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80120ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00a      	beq.n	80120cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80120b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ba:	f383 8811 	msr	BASEPRI, r3
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	f3bf 8f4f 	dsb	sy
 80120c6:	61fb      	str	r3, [r7, #28]
}
 80120c8:	bf00      	nop
 80120ca:	e7fe      	b.n	80120ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80120cc:	f001 fa96 	bl	80135fc <xTaskGetSchedulerState>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d102      	bne.n	80120dc <xQueueSemaphoreTake+0x60>
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d101      	bne.n	80120e0 <xQueueSemaphoreTake+0x64>
 80120dc:	2301      	movs	r3, #1
 80120de:	e000      	b.n	80120e2 <xQueueSemaphoreTake+0x66>
 80120e0:	2300      	movs	r3, #0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d10a      	bne.n	80120fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80120e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ea:	f383 8811 	msr	BASEPRI, r3
 80120ee:	f3bf 8f6f 	isb	sy
 80120f2:	f3bf 8f4f 	dsb	sy
 80120f6:	61bb      	str	r3, [r7, #24]
}
 80120f8:	bf00      	nop
 80120fa:	e7fe      	b.n	80120fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80120fc:	f002 f8da 	bl	80142b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012108:	2b00      	cmp	r3, #0
 801210a:	d024      	beq.n	8012156 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210e:	1e5a      	subs	r2, r3, #1
 8012110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d104      	bne.n	8012126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801211c:	f001 fbe4 	bl	80138e8 <pvTaskIncrementMutexHeldCount>
 8012120:	4602      	mov	r2, r0
 8012122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	691b      	ldr	r3, [r3, #16]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00f      	beq.n	801214e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012130:	3310      	adds	r3, #16
 8012132:	4618      	mov	r0, r3
 8012134:	f001 f8a0 	bl	8013278 <xTaskRemoveFromEventList>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d007      	beq.n	801214e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801213e:	4b54      	ldr	r3, [pc, #336]	; (8012290 <xQueueSemaphoreTake+0x214>)
 8012140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801214e:	f002 f8e1 	bl	8014314 <vPortExitCritical>
				return pdPASS;
 8012152:	2301      	movs	r3, #1
 8012154:	e097      	b.n	8012286 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d111      	bne.n	8012180 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215e:	2b00      	cmp	r3, #0
 8012160:	d00a      	beq.n	8012178 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012166:	f383 8811 	msr	BASEPRI, r3
 801216a:	f3bf 8f6f 	isb	sy
 801216e:	f3bf 8f4f 	dsb	sy
 8012172:	617b      	str	r3, [r7, #20]
}
 8012174:	bf00      	nop
 8012176:	e7fe      	b.n	8012176 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012178:	f002 f8cc 	bl	8014314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801217c:	2300      	movs	r3, #0
 801217e:	e082      	b.n	8012286 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012186:	f107 030c 	add.w	r3, r7, #12
 801218a:	4618      	mov	r0, r3
 801218c:	f001 f8d8 	bl	8013340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012190:	2301      	movs	r3, #1
 8012192:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012194:	f002 f8be 	bl	8014314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012198:	f000 fe32 	bl	8012e00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801219c:	f002 f88a 	bl	80142b4 <vPortEnterCritical>
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121a6:	b25b      	sxtb	r3, r3
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ac:	d103      	bne.n	80121b6 <xQueueSemaphoreTake+0x13a>
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b0:	2200      	movs	r2, #0
 80121b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80121b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80121bc:	b25b      	sxtb	r3, r3
 80121be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121c2:	d103      	bne.n	80121cc <xQueueSemaphoreTake+0x150>
 80121c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80121cc:	f002 f8a2 	bl	8014314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80121d0:	463a      	mov	r2, r7
 80121d2:	f107 030c 	add.w	r3, r7, #12
 80121d6:	4611      	mov	r1, r2
 80121d8:	4618      	mov	r0, r3
 80121da:	f001 f8c7 	bl	801336c <xTaskCheckForTimeOut>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d132      	bne.n	801224a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121e6:	f000 f9f2 	bl	80125ce <prvIsQueueEmpty>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d026      	beq.n	801223e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80121f8:	f002 f85c 	bl	80142b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	4618      	mov	r0, r3
 8012202:	f001 fa19 	bl	8013638 <xTaskPriorityInherit>
 8012206:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012208:	f002 f884 	bl	8014314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220e:	3324      	adds	r3, #36	; 0x24
 8012210:	683a      	ldr	r2, [r7, #0]
 8012212:	4611      	mov	r1, r2
 8012214:	4618      	mov	r0, r3
 8012216:	f000 ffdf 	bl	80131d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801221a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801221c:	f000 f985 	bl	801252a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012220:	f000 fdfc 	bl	8012e1c <xTaskResumeAll>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	f47f af68 	bne.w	80120fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801222c:	4b18      	ldr	r3, [pc, #96]	; (8012290 <xQueueSemaphoreTake+0x214>)
 801222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012232:	601a      	str	r2, [r3, #0]
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	f3bf 8f6f 	isb	sy
 801223c:	e75e      	b.n	80120fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801223e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012240:	f000 f973 	bl	801252a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012244:	f000 fdea 	bl	8012e1c <xTaskResumeAll>
 8012248:	e758      	b.n	80120fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801224a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801224c:	f000 f96d 	bl	801252a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012250:	f000 fde4 	bl	8012e1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012256:	f000 f9ba 	bl	80125ce <prvIsQueueEmpty>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	f43f af4d 	beq.w	80120fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	2b00      	cmp	r3, #0
 8012266:	d00d      	beq.n	8012284 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012268:	f002 f824 	bl	80142b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801226c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801226e:	f000 f8b4 	bl	80123da <prvGetDisinheritPriorityAfterTimeout>
 8012272:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801227a:	4618      	mov	r0, r3
 801227c:	f001 fab2 	bl	80137e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012280:	f002 f848 	bl	8014314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012286:	4618      	mov	r0, r3
 8012288:	3738      	adds	r7, #56	; 0x38
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	e000ed04 	.word	0xe000ed04

08012294 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08e      	sub	sp, #56	; 0x38
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d10a      	bne.n	80122c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80122aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ae:	f383 8811 	msr	BASEPRI, r3
 80122b2:	f3bf 8f6f 	isb	sy
 80122b6:	f3bf 8f4f 	dsb	sy
 80122ba:	623b      	str	r3, [r7, #32]
}
 80122bc:	bf00      	nop
 80122be:	e7fe      	b.n	80122be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d103      	bne.n	80122ce <xQueueReceiveFromISR+0x3a>
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d101      	bne.n	80122d2 <xQueueReceiveFromISR+0x3e>
 80122ce:	2301      	movs	r3, #1
 80122d0:	e000      	b.n	80122d4 <xQueueReceiveFromISR+0x40>
 80122d2:	2300      	movs	r3, #0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d10a      	bne.n	80122ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80122d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122dc:	f383 8811 	msr	BASEPRI, r3
 80122e0:	f3bf 8f6f 	isb	sy
 80122e4:	f3bf 8f4f 	dsb	sy
 80122e8:	61fb      	str	r3, [r7, #28]
}
 80122ea:	bf00      	nop
 80122ec:	e7fe      	b.n	80122ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122ee:	f002 f8c3 	bl	8014478 <vPortValidateInterruptPriority>
	__asm volatile
 80122f2:	f3ef 8211 	mrs	r2, BASEPRI
 80122f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	61ba      	str	r2, [r7, #24]
 8012308:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801230a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801230c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012312:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012316:	2b00      	cmp	r3, #0
 8012318:	d02f      	beq.n	801237a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012328:	f000 f8d9 	bl	80124de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232e:	1e5a      	subs	r2, r3, #1
 8012330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012332:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801233c:	d112      	bne.n	8012364 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012340:	691b      	ldr	r3, [r3, #16]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d016      	beq.n	8012374 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012348:	3310      	adds	r3, #16
 801234a:	4618      	mov	r0, r3
 801234c:	f000 ff94 	bl	8013278 <xTaskRemoveFromEventList>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00e      	beq.n	8012374 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00b      	beq.n	8012374 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	601a      	str	r2, [r3, #0]
 8012362:	e007      	b.n	8012374 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012368:	3301      	adds	r3, #1
 801236a:	b2db      	uxtb	r3, r3
 801236c:	b25a      	sxtb	r2, r3
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012374:	2301      	movs	r3, #1
 8012376:	637b      	str	r3, [r7, #52]	; 0x34
 8012378:	e001      	b.n	801237e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801237a:	2300      	movs	r3, #0
 801237c:	637b      	str	r3, [r7, #52]	; 0x34
 801237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012380:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	f383 8811 	msr	BASEPRI, r3
}
 8012388:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801238c:	4618      	mov	r0, r3
 801238e:	3738      	adds	r7, #56	; 0x38
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10a      	bne.n	80123bc <vQueueDelete+0x28>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123aa:	f383 8811 	msr	BASEPRI, r3
 80123ae:	f3bf 8f6f 	isb	sy
 80123b2:	f3bf 8f4f 	dsb	sy
 80123b6:	60bb      	str	r3, [r7, #8]
}
 80123b8:	bf00      	nop
 80123ba:	e7fe      	b.n	80123ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f95f 	bl	8012680 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d102      	bne.n	80123d2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f002 f95f 	bl	8014690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80123d2:	bf00      	nop
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80123da:	b480      	push	{r7}
 80123dc:	b085      	sub	sp, #20
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d006      	beq.n	80123f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80123f4:	60fb      	str	r3, [r7, #12]
 80123f6:	e001      	b.n	80123fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80123f8:	2300      	movs	r3, #0
 80123fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80123fc:	68fb      	ldr	r3, [r7, #12]
	}
 80123fe:	4618      	mov	r0, r3
 8012400:	3714      	adds	r7, #20
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr

0801240a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b086      	sub	sp, #24
 801240e:	af00      	add	r7, sp, #0
 8012410:	60f8      	str	r0, [r7, #12]
 8012412:	60b9      	str	r1, [r7, #8]
 8012414:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012416:	2300      	movs	r3, #0
 8012418:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801241e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012424:	2b00      	cmp	r3, #0
 8012426:	d10d      	bne.n	8012444 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d14d      	bne.n	80124cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	4618      	mov	r0, r3
 8012436:	f001 f967 	bl	8013708 <xTaskPriorityDisinherit>
 801243a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2200      	movs	r2, #0
 8012440:	609a      	str	r2, [r3, #8]
 8012442:	e043      	b.n	80124cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d119      	bne.n	801247e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	6858      	ldr	r0, [r3, #4]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012452:	461a      	mov	r2, r3
 8012454:	68b9      	ldr	r1, [r7, #8]
 8012456:	f002 fa65 	bl	8014924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	685a      	ldr	r2, [r3, #4]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012462:	441a      	add	r2, r3
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	429a      	cmp	r2, r3
 8012472:	d32b      	bcc.n	80124cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	605a      	str	r2, [r3, #4]
 801247c:	e026      	b.n	80124cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	68d8      	ldr	r0, [r3, #12]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012486:	461a      	mov	r2, r3
 8012488:	68b9      	ldr	r1, [r7, #8]
 801248a:	f002 fa4b 	bl	8014924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	68da      	ldr	r2, [r3, #12]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012496:	425b      	negs	r3, r3
 8012498:	441a      	add	r2, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	68da      	ldr	r2, [r3, #12]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d207      	bcs.n	80124ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	689a      	ldr	r2, [r3, #8]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124b2:	425b      	negs	r3, r3
 80124b4:	441a      	add	r2, r3
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b02      	cmp	r3, #2
 80124be:	d105      	bne.n	80124cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d002      	beq.n	80124cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	3b01      	subs	r3, #1
 80124ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	1c5a      	adds	r2, r3, #1
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80124d4:	697b      	ldr	r3, [r7, #20]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3718      	adds	r7, #24
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d018      	beq.n	8012522 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	68da      	ldr	r2, [r3, #12]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124f8:	441a      	add	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	68da      	ldr	r2, [r3, #12]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	689b      	ldr	r3, [r3, #8]
 8012506:	429a      	cmp	r2, r3
 8012508:	d303      	bcc.n	8012512 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	68d9      	ldr	r1, [r3, #12]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801251a:	461a      	mov	r2, r3
 801251c:	6838      	ldr	r0, [r7, #0]
 801251e:	f002 fa01 	bl	8014924 <memcpy>
	}
}
 8012522:	bf00      	nop
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b084      	sub	sp, #16
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012532:	f001 febf 	bl	80142b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801253c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801253e:	e011      	b.n	8012564 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012544:	2b00      	cmp	r3, #0
 8012546:	d012      	beq.n	801256e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	3324      	adds	r3, #36	; 0x24
 801254c:	4618      	mov	r0, r3
 801254e:	f000 fe93 	bl	8013278 <xTaskRemoveFromEventList>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012558:	f000 ff6a 	bl	8013430 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	3b01      	subs	r3, #1
 8012560:	b2db      	uxtb	r3, r3
 8012562:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012568:	2b00      	cmp	r3, #0
 801256a:	dce9      	bgt.n	8012540 <prvUnlockQueue+0x16>
 801256c:	e000      	b.n	8012570 <prvUnlockQueue+0x46>
					break;
 801256e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	22ff      	movs	r2, #255	; 0xff
 8012574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012578:	f001 fecc 	bl	8014314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801257c:	f001 fe9a 	bl	80142b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012586:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012588:	e011      	b.n	80125ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d012      	beq.n	80125b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	3310      	adds	r3, #16
 8012596:	4618      	mov	r0, r3
 8012598:	f000 fe6e 	bl	8013278 <xTaskRemoveFromEventList>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80125a2:	f000 ff45 	bl	8013430 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80125a6:	7bbb      	ldrb	r3, [r7, #14]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	dce9      	bgt.n	801258a <prvUnlockQueue+0x60>
 80125b6:	e000      	b.n	80125ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80125b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	22ff      	movs	r2, #255	; 0xff
 80125be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80125c2:	f001 fea7 	bl	8014314 <vPortExitCritical>
}
 80125c6:	bf00      	nop
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b084      	sub	sp, #16
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125d6:	f001 fe6d 	bl	80142b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d102      	bne.n	80125e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80125e2:	2301      	movs	r3, #1
 80125e4:	60fb      	str	r3, [r7, #12]
 80125e6:	e001      	b.n	80125ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80125e8:	2300      	movs	r3, #0
 80125ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125ec:	f001 fe92 	bl	8014314 <vPortExitCritical>

	return xReturn;
 80125f0:	68fb      	ldr	r3, [r7, #12]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b084      	sub	sp, #16
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012602:	f001 fe57 	bl	80142b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801260e:	429a      	cmp	r2, r3
 8012610:	d102      	bne.n	8012618 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012612:	2301      	movs	r3, #1
 8012614:	60fb      	str	r3, [r7, #12]
 8012616:	e001      	b.n	801261c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012618:	2300      	movs	r3, #0
 801261a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801261c:	f001 fe7a 	bl	8014314 <vPortExitCritical>

	return xReturn;
 8012620:	68fb      	ldr	r3, [r7, #12]
}
 8012622:	4618      	mov	r0, r3
 8012624:	3710      	adds	r7, #16
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
	...

0801262c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801262c:	b480      	push	{r7}
 801262e:	b085      	sub	sp, #20
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012636:	2300      	movs	r3, #0
 8012638:	60fb      	str	r3, [r7, #12]
 801263a:	e014      	b.n	8012666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801263c:	4a0f      	ldr	r2, [pc, #60]	; (801267c <vQueueAddToRegistry+0x50>)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10b      	bne.n	8012660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012648:	490c      	ldr	r1, [pc, #48]	; (801267c <vQueueAddToRegistry+0x50>)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	683a      	ldr	r2, [r7, #0]
 801264e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012652:	4a0a      	ldr	r2, [pc, #40]	; (801267c <vQueueAddToRegistry+0x50>)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	4413      	add	r3, r2
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801265e:	e006      	b.n	801266e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	3301      	adds	r3, #1
 8012664:	60fb      	str	r3, [r7, #12]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2b07      	cmp	r3, #7
 801266a:	d9e7      	bls.n	801263c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801266c:	bf00      	nop
 801266e:	bf00      	nop
 8012670:	3714      	adds	r7, #20
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	24027adc 	.word	0x24027adc

08012680 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	e016      	b.n	80126bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801268e:	4a10      	ldr	r2, [pc, #64]	; (80126d0 <vQueueUnregisterQueue+0x50>)
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	00db      	lsls	r3, r3, #3
 8012694:	4413      	add	r3, r2
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	429a      	cmp	r2, r3
 801269c:	d10b      	bne.n	80126b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801269e:	4a0c      	ldr	r2, [pc, #48]	; (80126d0 <vQueueUnregisterQueue+0x50>)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2100      	movs	r1, #0
 80126a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80126a8:	4a09      	ldr	r2, [pc, #36]	; (80126d0 <vQueueUnregisterQueue+0x50>)
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	00db      	lsls	r3, r3, #3
 80126ae:	4413      	add	r3, r2
 80126b0:	2200      	movs	r2, #0
 80126b2:	605a      	str	r2, [r3, #4]
				break;
 80126b4:	e006      	b.n	80126c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	60fb      	str	r3, [r7, #12]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2b07      	cmp	r3, #7
 80126c0:	d9e5      	bls.n	801268e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80126c2:	bf00      	nop
 80126c4:	bf00      	nop
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	24027adc 	.word	0x24027adc

080126d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80126e4:	f001 fde6 	bl	80142b4 <vPortEnterCritical>
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126ee:	b25b      	sxtb	r3, r3
 80126f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126f4:	d103      	bne.n	80126fe <vQueueWaitForMessageRestricted+0x2a>
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012704:	b25b      	sxtb	r3, r3
 8012706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801270a:	d103      	bne.n	8012714 <vQueueWaitForMessageRestricted+0x40>
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2200      	movs	r2, #0
 8012710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012714:	f001 fdfe 	bl	8014314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801271c:	2b00      	cmp	r3, #0
 801271e:	d106      	bne.n	801272e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	3324      	adds	r3, #36	; 0x24
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	4618      	mov	r0, r3
 801272a:	f000 fd79 	bl	8013220 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801272e:	6978      	ldr	r0, [r7, #20]
 8012730:	f7ff fefb 	bl	801252a <prvUnlockQueue>
	}
 8012734:	bf00      	nop
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801273c:	b580      	push	{r7, lr}
 801273e:	b08e      	sub	sp, #56	; 0x38
 8012740:	af04      	add	r7, sp, #16
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801274c:	2b00      	cmp	r3, #0
 801274e:	d10a      	bne.n	8012766 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	623b      	str	r3, [r7, #32]
}
 8012762:	bf00      	nop
 8012764:	e7fe      	b.n	8012764 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012768:	2b00      	cmp	r3, #0
 801276a:	d10a      	bne.n	8012782 <xTaskCreateStatic+0x46>
	__asm volatile
 801276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012770:	f383 8811 	msr	BASEPRI, r3
 8012774:	f3bf 8f6f 	isb	sy
 8012778:	f3bf 8f4f 	dsb	sy
 801277c:	61fb      	str	r3, [r7, #28]
}
 801277e:	bf00      	nop
 8012780:	e7fe      	b.n	8012780 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012782:	23bc      	movs	r3, #188	; 0xbc
 8012784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	2bbc      	cmp	r3, #188	; 0xbc
 801278a:	d00a      	beq.n	80127a2 <xTaskCreateStatic+0x66>
	__asm volatile
 801278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012790:	f383 8811 	msr	BASEPRI, r3
 8012794:	f3bf 8f6f 	isb	sy
 8012798:	f3bf 8f4f 	dsb	sy
 801279c:	61bb      	str	r3, [r7, #24]
}
 801279e:	bf00      	nop
 80127a0:	e7fe      	b.n	80127a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80127a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80127a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d01e      	beq.n	80127e8 <xTaskCreateStatic+0xac>
 80127aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d01b      	beq.n	80127e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80127b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	2202      	movs	r2, #2
 80127be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80127c2:	2300      	movs	r3, #0
 80127c4:	9303      	str	r3, [sp, #12]
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	9302      	str	r3, [sp, #8]
 80127ca:	f107 0314 	add.w	r3, r7, #20
 80127ce:	9301      	str	r3, [sp, #4]
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	68b9      	ldr	r1, [r7, #8]
 80127da:	68f8      	ldr	r0, [r7, #12]
 80127dc:	f000 f850 	bl	8012880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80127e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127e2:	f000 f8f3 	bl	80129cc <prvAddNewTaskToReadyList>
 80127e6:	e001      	b.n	80127ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80127e8:	2300      	movs	r3, #0
 80127ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80127ec:	697b      	ldr	r3, [r7, #20]
	}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3728      	adds	r7, #40	; 0x28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}

080127f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80127f6:	b580      	push	{r7, lr}
 80127f8:	b08c      	sub	sp, #48	; 0x30
 80127fa:	af04      	add	r7, sp, #16
 80127fc:	60f8      	str	r0, [r7, #12]
 80127fe:	60b9      	str	r1, [r7, #8]
 8012800:	603b      	str	r3, [r7, #0]
 8012802:	4613      	mov	r3, r2
 8012804:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012806:	88fb      	ldrh	r3, [r7, #6]
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4618      	mov	r0, r3
 801280c:	f001 fe74 	bl	80144f8 <pvPortMalloc>
 8012810:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00e      	beq.n	8012836 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012818:	20bc      	movs	r0, #188	; 0xbc
 801281a:	f001 fe6d 	bl	80144f8 <pvPortMalloc>
 801281e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d003      	beq.n	801282e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	697a      	ldr	r2, [r7, #20]
 801282a:	631a      	str	r2, [r3, #48]	; 0x30
 801282c:	e005      	b.n	801283a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801282e:	6978      	ldr	r0, [r7, #20]
 8012830:	f001 ff2e 	bl	8014690 <vPortFree>
 8012834:	e001      	b.n	801283a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012836:	2300      	movs	r3, #0
 8012838:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d017      	beq.n	8012870 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	2200      	movs	r2, #0
 8012844:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012848:	88fa      	ldrh	r2, [r7, #6]
 801284a:	2300      	movs	r3, #0
 801284c:	9303      	str	r3, [sp, #12]
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	9302      	str	r3, [sp, #8]
 8012852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	68b9      	ldr	r1, [r7, #8]
 801285e:	68f8      	ldr	r0, [r7, #12]
 8012860:	f000 f80e 	bl	8012880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012864:	69f8      	ldr	r0, [r7, #28]
 8012866:	f000 f8b1 	bl	80129cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801286a:	2301      	movs	r3, #1
 801286c:	61bb      	str	r3, [r7, #24]
 801286e:	e002      	b.n	8012876 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012870:	f04f 33ff 	mov.w	r3, #4294967295
 8012874:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012876:	69bb      	ldr	r3, [r7, #24]
	}
 8012878:	4618      	mov	r0, r3
 801287a:	3720      	adds	r7, #32
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b088      	sub	sp, #32
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
 801288c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	461a      	mov	r2, r3
 8012898:	21a5      	movs	r1, #165	; 0xa5
 801289a:	f002 f851 	bl	8014940 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128a2:	6879      	ldr	r1, [r7, #4]
 80128a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80128a8:	440b      	add	r3, r1
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4413      	add	r3, r2
 80128ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	f023 0307 	bic.w	r3, r3, #7
 80128b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	f003 0307 	and.w	r3, r3, #7
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00a      	beq.n	80128d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80128c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c6:	f383 8811 	msr	BASEPRI, r3
 80128ca:	f3bf 8f6f 	isb	sy
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	617b      	str	r3, [r7, #20]
}
 80128d4:	bf00      	nop
 80128d6:	e7fe      	b.n	80128d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d01f      	beq.n	801291e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80128de:	2300      	movs	r3, #0
 80128e0:	61fb      	str	r3, [r7, #28]
 80128e2:	e012      	b.n	801290a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	4413      	add	r3, r2
 80128ea:	7819      	ldrb	r1, [r3, #0]
 80128ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	4413      	add	r3, r2
 80128f2:	3334      	adds	r3, #52	; 0x34
 80128f4:	460a      	mov	r2, r1
 80128f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	4413      	add	r3, r2
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d006      	beq.n	8012912 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	3301      	adds	r3, #1
 8012908:	61fb      	str	r3, [r7, #28]
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	2b0f      	cmp	r3, #15
 801290e:	d9e9      	bls.n	80128e4 <prvInitialiseNewTask+0x64>
 8012910:	e000      	b.n	8012914 <prvInitialiseNewTask+0x94>
			{
				break;
 8012912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801291c:	e003      	b.n	8012926 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	2200      	movs	r2, #0
 8012922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012928:	2b37      	cmp	r3, #55	; 0x37
 801292a:	d901      	bls.n	8012930 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801292c:	2337      	movs	r3, #55	; 0x37
 801292e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801293a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293e:	2200      	movs	r2, #0
 8012940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	3304      	adds	r3, #4
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe fe56 	bl	80115f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294e:	3318      	adds	r3, #24
 8012950:	4618      	mov	r0, r3
 8012952:	f7fe fe51 	bl	80115f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801295a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801296a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296e:	2200      	movs	r2, #0
 8012970:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	2200      	movs	r2, #0
 8012978:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297e:	3354      	adds	r3, #84	; 0x54
 8012980:	2260      	movs	r2, #96	; 0x60
 8012982:	2100      	movs	r1, #0
 8012984:	4618      	mov	r0, r3
 8012986:	f001 ffdb 	bl	8014940 <memset>
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	4a0c      	ldr	r2, [pc, #48]	; (80129c0 <prvInitialiseNewTask+0x140>)
 801298e:	659a      	str	r2, [r3, #88]	; 0x58
 8012990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012992:	4a0c      	ldr	r2, [pc, #48]	; (80129c4 <prvInitialiseNewTask+0x144>)
 8012994:	65da      	str	r2, [r3, #92]	; 0x5c
 8012996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012998:	4a0b      	ldr	r2, [pc, #44]	; (80129c8 <prvInitialiseNewTask+0x148>)
 801299a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	68f9      	ldr	r1, [r7, #12]
 80129a0:	69b8      	ldr	r0, [r7, #24]
 80129a2:	f001 fb57 	bl	8014054 <pxPortInitialiseStack>
 80129a6:	4602      	mov	r2, r0
 80129a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d002      	beq.n	80129b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80129b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129b8:	bf00      	nop
 80129ba:	3720      	adds	r7, #32
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	08015480 	.word	0x08015480
 80129c4:	080154a0 	.word	0x080154a0
 80129c8:	08015460 	.word	0x08015460

080129cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80129d4:	f001 fc6e 	bl	80142b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80129d8:	4b2d      	ldr	r3, [pc, #180]	; (8012a90 <prvAddNewTaskToReadyList+0xc4>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	3301      	adds	r3, #1
 80129de:	4a2c      	ldr	r2, [pc, #176]	; (8012a90 <prvAddNewTaskToReadyList+0xc4>)
 80129e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80129e2:	4b2c      	ldr	r3, [pc, #176]	; (8012a94 <prvAddNewTaskToReadyList+0xc8>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d109      	bne.n	80129fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80129ea:	4a2a      	ldr	r2, [pc, #168]	; (8012a94 <prvAddNewTaskToReadyList+0xc8>)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80129f0:	4b27      	ldr	r3, [pc, #156]	; (8012a90 <prvAddNewTaskToReadyList+0xc4>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d110      	bne.n	8012a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80129f8:	f000 fd3e 	bl	8013478 <prvInitialiseTaskLists>
 80129fc:	e00d      	b.n	8012a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80129fe:	4b26      	ldr	r3, [pc, #152]	; (8012a98 <prvAddNewTaskToReadyList+0xcc>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d109      	bne.n	8012a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a06:	4b23      	ldr	r3, [pc, #140]	; (8012a94 <prvAddNewTaskToReadyList+0xc8>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d802      	bhi.n	8012a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a14:	4a1f      	ldr	r2, [pc, #124]	; (8012a94 <prvAddNewTaskToReadyList+0xc8>)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012a1a:	4b20      	ldr	r3, [pc, #128]	; (8012a9c <prvAddNewTaskToReadyList+0xd0>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	4a1e      	ldr	r2, [pc, #120]	; (8012a9c <prvAddNewTaskToReadyList+0xd0>)
 8012a22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012a24:	4b1d      	ldr	r3, [pc, #116]	; (8012a9c <prvAddNewTaskToReadyList+0xd0>)
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a30:	4b1b      	ldr	r3, [pc, #108]	; (8012aa0 <prvAddNewTaskToReadyList+0xd4>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d903      	bls.n	8012a40 <prvAddNewTaskToReadyList+0x74>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a3c:	4a18      	ldr	r2, [pc, #96]	; (8012aa0 <prvAddNewTaskToReadyList+0xd4>)
 8012a3e:	6013      	str	r3, [r2, #0]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a44:	4613      	mov	r3, r2
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	4413      	add	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4a15      	ldr	r2, [pc, #84]	; (8012aa4 <prvAddNewTaskToReadyList+0xd8>)
 8012a4e:	441a      	add	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3304      	adds	r3, #4
 8012a54:	4619      	mov	r1, r3
 8012a56:	4610      	mov	r0, r2
 8012a58:	f7fe fddb 	bl	8011612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012a5c:	f001 fc5a 	bl	8014314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012a60:	4b0d      	ldr	r3, [pc, #52]	; (8012a98 <prvAddNewTaskToReadyList+0xcc>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00e      	beq.n	8012a86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012a68:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <prvAddNewTaskToReadyList+0xc8>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d207      	bcs.n	8012a86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012a76:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <prvAddNewTaskToReadyList+0xdc>)
 8012a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a7c:	601a      	str	r2, [r3, #0]
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a86:	bf00      	nop
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	24008e58 	.word	0x24008e58
 8012a94:	24008984 	.word	0x24008984
 8012a98:	24008e64 	.word	0x24008e64
 8012a9c:	24008e74 	.word	0x24008e74
 8012aa0:	24008e60 	.word	0x24008e60
 8012aa4:	24008988 	.word	0x24008988
 8012aa8:	e000ed04 	.word	0xe000ed04

08012aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d017      	beq.n	8012aee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012abe:	4b13      	ldr	r3, [pc, #76]	; (8012b0c <vTaskDelay+0x60>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d00a      	beq.n	8012adc <vTaskDelay+0x30>
	__asm volatile
 8012ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	60bb      	str	r3, [r7, #8]
}
 8012ad8:	bf00      	nop
 8012ada:	e7fe      	b.n	8012ada <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012adc:	f000 f990 	bl	8012e00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 ff14 	bl	8013910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ae8:	f000 f998 	bl	8012e1c <xTaskResumeAll>
 8012aec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d107      	bne.n	8012b04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012af4:	4b06      	ldr	r3, [pc, #24]	; (8012b10 <vTaskDelay+0x64>)
 8012af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	24008e80 	.word	0x24008e80
 8012b10:	e000ed04 	.word	0xe000ed04

08012b14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012b1c:	f001 fbca 	bl	80142b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d102      	bne.n	8012b2c <vTaskSuspend+0x18>
 8012b26:	4b30      	ldr	r3, [pc, #192]	; (8012be8 <vTaskSuspend+0xd4>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	e000      	b.n	8012b2e <vTaskSuspend+0x1a>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3304      	adds	r3, #4
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe fdc9 	bl	80116cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d004      	beq.n	8012b4c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	3318      	adds	r3, #24
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fe fdc0 	bl	80116cc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	3304      	adds	r3, #4
 8012b50:	4619      	mov	r1, r3
 8012b52:	4826      	ldr	r0, [pc, #152]	; (8012bec <vTaskSuspend+0xd8>)
 8012b54:	f7fe fd5d 	bl	8011612 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d103      	bne.n	8012b6c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012b6c:	f001 fbd2 	bl	8014314 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012b70:	4b1f      	ldr	r3, [pc, #124]	; (8012bf0 <vTaskSuspend+0xdc>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d005      	beq.n	8012b84 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012b78:	f001 fb9c 	bl	80142b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012b7c:	f000 fd1e 	bl	80135bc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012b80:	f001 fbc8 	bl	8014314 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012b84:	4b18      	ldr	r3, [pc, #96]	; (8012be8 <vTaskSuspend+0xd4>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d127      	bne.n	8012bde <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8012b8e:	4b18      	ldr	r3, [pc, #96]	; (8012bf0 <vTaskSuspend+0xdc>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d017      	beq.n	8012bc6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012b96:	4b17      	ldr	r3, [pc, #92]	; (8012bf4 <vTaskSuspend+0xe0>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00a      	beq.n	8012bb4 <vTaskSuspend+0xa0>
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	60bb      	str	r3, [r7, #8]
}
 8012bb0:	bf00      	nop
 8012bb2:	e7fe      	b.n	8012bb2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012bb4:	4b10      	ldr	r3, [pc, #64]	; (8012bf8 <vTaskSuspend+0xe4>)
 8012bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bba:	601a      	str	r2, [r3, #0]
 8012bbc:	f3bf 8f4f 	dsb	sy
 8012bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012bc4:	e00b      	b.n	8012bde <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012bc6:	4b09      	ldr	r3, [pc, #36]	; (8012bec <vTaskSuspend+0xd8>)
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	4b0c      	ldr	r3, [pc, #48]	; (8012bfc <vTaskSuspend+0xe8>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d103      	bne.n	8012bda <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8012bd2:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <vTaskSuspend+0xd4>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	601a      	str	r2, [r3, #0]
	}
 8012bd8:	e001      	b.n	8012bde <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8012bda:	f000 fa99 	bl	8013110 <vTaskSwitchContext>
	}
 8012bde:	bf00      	nop
 8012be0:	3710      	adds	r7, #16
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	24008984 	.word	0x24008984
 8012bec:	24008e44 	.word	0x24008e44
 8012bf0:	24008e64 	.word	0x24008e64
 8012bf4:	24008e80 	.word	0x24008e80
 8012bf8:	e000ed04 	.word	0xe000ed04
 8012bfc:	24008e58 	.word	0x24008e58

08012c00 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012c00:	b480      	push	{r7}
 8012c02:	b087      	sub	sp, #28
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10a      	bne.n	8012c2c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1a:	f383 8811 	msr	BASEPRI, r3
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f3bf 8f4f 	dsb	sy
 8012c26:	60fb      	str	r3, [r7, #12]
}
 8012c28:	bf00      	nop
 8012c2a:	e7fe      	b.n	8012c2a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	695b      	ldr	r3, [r3, #20]
 8012c30:	4a0a      	ldr	r2, [pc, #40]	; (8012c5c <prvTaskIsTaskSuspended+0x5c>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d10a      	bne.n	8012c4c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c3a:	4a09      	ldr	r2, [pc, #36]	; (8012c60 <prvTaskIsTaskSuspended+0x60>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d005      	beq.n	8012c4c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c4c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012c4e:	4618      	mov	r0, r3
 8012c50:	371c      	adds	r7, #28
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop
 8012c5c:	24008e44 	.word	0x24008e44
 8012c60:	24008e18 	.word	0x24008e18

08012c64 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10a      	bne.n	8012c8c <vTaskResume+0x28>
	__asm volatile
 8012c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	60bb      	str	r3, [r7, #8]
}
 8012c88:	bf00      	nop
 8012c8a:	e7fe      	b.n	8012c8a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012c8c:	4b20      	ldr	r3, [pc, #128]	; (8012d10 <vTaskResume+0xac>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	68fa      	ldr	r2, [r7, #12]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d038      	beq.n	8012d08 <vTaskResume+0xa4>
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d035      	beq.n	8012d08 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8012c9c:	f001 fb0a 	bl	80142b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f7ff ffad 	bl	8012c00 <prvTaskIsTaskSuspended>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d02b      	beq.n	8012d04 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3304      	adds	r3, #4
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7fe fd0b 	bl	80116cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cba:	4b16      	ldr	r3, [pc, #88]	; (8012d14 <vTaskResume+0xb0>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d903      	bls.n	8012cca <vTaskResume+0x66>
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc6:	4a13      	ldr	r2, [pc, #76]	; (8012d14 <vTaskResume+0xb0>)
 8012cc8:	6013      	str	r3, [r2, #0]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cce:	4613      	mov	r3, r2
 8012cd0:	009b      	lsls	r3, r3, #2
 8012cd2:	4413      	add	r3, r2
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	4a10      	ldr	r2, [pc, #64]	; (8012d18 <vTaskResume+0xb4>)
 8012cd8:	441a      	add	r2, r3
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	3304      	adds	r3, #4
 8012cde:	4619      	mov	r1, r3
 8012ce0:	4610      	mov	r0, r2
 8012ce2:	f7fe fc96 	bl	8011612 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cea:	4b09      	ldr	r3, [pc, #36]	; (8012d10 <vTaskResume+0xac>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d307      	bcc.n	8012d04 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012cf4:	4b09      	ldr	r3, [pc, #36]	; (8012d1c <vTaskResume+0xb8>)
 8012cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cfa:	601a      	str	r2, [r3, #0]
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012d04:	f001 fb06 	bl	8014314 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d08:	bf00      	nop
 8012d0a:	3710      	adds	r7, #16
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	24008984 	.word	0x24008984
 8012d14:	24008e60 	.word	0x24008e60
 8012d18:	24008988 	.word	0x24008988
 8012d1c:	e000ed04 	.word	0xe000ed04

08012d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b08a      	sub	sp, #40	; 0x28
 8012d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012d26:	2300      	movs	r3, #0
 8012d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012d2e:	463a      	mov	r2, r7
 8012d30:	1d39      	adds	r1, r7, #4
 8012d32:	f107 0308 	add.w	r3, r7, #8
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7fe fc0a 	bl	8011550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	9202      	str	r2, [sp, #8]
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	2300      	movs	r3, #0
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	460a      	mov	r2, r1
 8012d4e:	4924      	ldr	r1, [pc, #144]	; (8012de0 <vTaskStartScheduler+0xc0>)
 8012d50:	4824      	ldr	r0, [pc, #144]	; (8012de4 <vTaskStartScheduler+0xc4>)
 8012d52:	f7ff fcf3 	bl	801273c <xTaskCreateStatic>
 8012d56:	4603      	mov	r3, r0
 8012d58:	4a23      	ldr	r2, [pc, #140]	; (8012de8 <vTaskStartScheduler+0xc8>)
 8012d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012d5c:	4b22      	ldr	r3, [pc, #136]	; (8012de8 <vTaskStartScheduler+0xc8>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012d64:	2301      	movs	r3, #1
 8012d66:	617b      	str	r3, [r7, #20]
 8012d68:	e001      	b.n	8012d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d102      	bne.n	8012d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012d74:	f000 fe20 	bl	80139b8 <xTimerCreateTimerTask>
 8012d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d11b      	bne.n	8012db8 <vTaskStartScheduler+0x98>
	__asm volatile
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	f383 8811 	msr	BASEPRI, r3
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	613b      	str	r3, [r7, #16]
}
 8012d92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012d94:	4b15      	ldr	r3, [pc, #84]	; (8012dec <vTaskStartScheduler+0xcc>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	3354      	adds	r3, #84	; 0x54
 8012d9a:	4a15      	ldr	r2, [pc, #84]	; (8012df0 <vTaskStartScheduler+0xd0>)
 8012d9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012d9e:	4b15      	ldr	r3, [pc, #84]	; (8012df4 <vTaskStartScheduler+0xd4>)
 8012da0:	f04f 32ff 	mov.w	r2, #4294967295
 8012da4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012da6:	4b14      	ldr	r3, [pc, #80]	; (8012df8 <vTaskStartScheduler+0xd8>)
 8012da8:	2201      	movs	r2, #1
 8012daa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012dac:	4b13      	ldr	r3, [pc, #76]	; (8012dfc <vTaskStartScheduler+0xdc>)
 8012dae:	2200      	movs	r2, #0
 8012db0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012db2:	f001 f9dd 	bl	8014170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012db6:	e00e      	b.n	8012dd6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dbe:	d10a      	bne.n	8012dd6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8012dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc4:	f383 8811 	msr	BASEPRI, r3
 8012dc8:	f3bf 8f6f 	isb	sy
 8012dcc:	f3bf 8f4f 	dsb	sy
 8012dd0:	60fb      	str	r3, [r7, #12]
}
 8012dd2:	bf00      	nop
 8012dd4:	e7fe      	b.n	8012dd4 <vTaskStartScheduler+0xb4>
}
 8012dd6:	bf00      	nop
 8012dd8:	3718      	adds	r7, #24
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	0801530c 	.word	0x0801530c
 8012de4:	08013449 	.word	0x08013449
 8012de8:	24008e7c 	.word	0x24008e7c
 8012dec:	24008984 	.word	0x24008984
 8012df0:	24008040 	.word	0x24008040
 8012df4:	24008e78 	.word	0x24008e78
 8012df8:	24008e64 	.word	0x24008e64
 8012dfc:	24008e5c 	.word	0x24008e5c

08012e00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012e00:	b480      	push	{r7}
 8012e02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012e04:	4b04      	ldr	r3, [pc, #16]	; (8012e18 <vTaskSuspendAll+0x18>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	4a03      	ldr	r2, [pc, #12]	; (8012e18 <vTaskSuspendAll+0x18>)
 8012e0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012e0e:	bf00      	nop
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	24008e80 	.word	0x24008e80

08012e1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012e26:	2300      	movs	r3, #0
 8012e28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012e2a:	4b42      	ldr	r3, [pc, #264]	; (8012f34 <xTaskResumeAll+0x118>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10a      	bne.n	8012e48 <xTaskResumeAll+0x2c>
	__asm volatile
 8012e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e36:	f383 8811 	msr	BASEPRI, r3
 8012e3a:	f3bf 8f6f 	isb	sy
 8012e3e:	f3bf 8f4f 	dsb	sy
 8012e42:	603b      	str	r3, [r7, #0]
}
 8012e44:	bf00      	nop
 8012e46:	e7fe      	b.n	8012e46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012e48:	f001 fa34 	bl	80142b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012e4c:	4b39      	ldr	r3, [pc, #228]	; (8012f34 <xTaskResumeAll+0x118>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	3b01      	subs	r3, #1
 8012e52:	4a38      	ldr	r2, [pc, #224]	; (8012f34 <xTaskResumeAll+0x118>)
 8012e54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e56:	4b37      	ldr	r3, [pc, #220]	; (8012f34 <xTaskResumeAll+0x118>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d162      	bne.n	8012f24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012e5e:	4b36      	ldr	r3, [pc, #216]	; (8012f38 <xTaskResumeAll+0x11c>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d05e      	beq.n	8012f24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e66:	e02f      	b.n	8012ec8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e68:	4b34      	ldr	r3, [pc, #208]	; (8012f3c <xTaskResumeAll+0x120>)
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	3318      	adds	r3, #24
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fe fc29 	bl	80116cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	3304      	adds	r3, #4
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fe fc24 	bl	80116cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e88:	4b2d      	ldr	r3, [pc, #180]	; (8012f40 <xTaskResumeAll+0x124>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d903      	bls.n	8012e98 <xTaskResumeAll+0x7c>
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e94:	4a2a      	ldr	r2, [pc, #168]	; (8012f40 <xTaskResumeAll+0x124>)
 8012e96:	6013      	str	r3, [r2, #0]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e9c:	4613      	mov	r3, r2
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4413      	add	r3, r2
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4a27      	ldr	r2, [pc, #156]	; (8012f44 <xTaskResumeAll+0x128>)
 8012ea6:	441a      	add	r2, r3
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	3304      	adds	r3, #4
 8012eac:	4619      	mov	r1, r3
 8012eae:	4610      	mov	r0, r2
 8012eb0:	f7fe fbaf 	bl	8011612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb8:	4b23      	ldr	r3, [pc, #140]	; (8012f48 <xTaskResumeAll+0x12c>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d302      	bcc.n	8012ec8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012ec2:	4b22      	ldr	r3, [pc, #136]	; (8012f4c <xTaskResumeAll+0x130>)
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ec8:	4b1c      	ldr	r3, [pc, #112]	; (8012f3c <xTaskResumeAll+0x120>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1cb      	bne.n	8012e68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012ed6:	f000 fb71 	bl	80135bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012eda:	4b1d      	ldr	r3, [pc, #116]	; (8012f50 <xTaskResumeAll+0x134>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d010      	beq.n	8012f08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012ee6:	f000 f859 	bl	8012f9c <xTaskIncrementTick>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d002      	beq.n	8012ef6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012ef0:	4b16      	ldr	r3, [pc, #88]	; (8012f4c <xTaskResumeAll+0x130>)
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1f1      	bne.n	8012ee6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012f02:	4b13      	ldr	r3, [pc, #76]	; (8012f50 <xTaskResumeAll+0x134>)
 8012f04:	2200      	movs	r2, #0
 8012f06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012f08:	4b10      	ldr	r3, [pc, #64]	; (8012f4c <xTaskResumeAll+0x130>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d009      	beq.n	8012f24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012f10:	2301      	movs	r3, #1
 8012f12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012f14:	4b0f      	ldr	r3, [pc, #60]	; (8012f54 <xTaskResumeAll+0x138>)
 8012f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012f24:	f001 f9f6 	bl	8014314 <vPortExitCritical>

	return xAlreadyYielded;
 8012f28:	68bb      	ldr	r3, [r7, #8]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3710      	adds	r7, #16
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	24008e80 	.word	0x24008e80
 8012f38:	24008e58 	.word	0x24008e58
 8012f3c:	24008e18 	.word	0x24008e18
 8012f40:	24008e60 	.word	0x24008e60
 8012f44:	24008988 	.word	0x24008988
 8012f48:	24008984 	.word	0x24008984
 8012f4c:	24008e6c 	.word	0x24008e6c
 8012f50:	24008e68 	.word	0x24008e68
 8012f54:	e000ed04 	.word	0xe000ed04

08012f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012f5e:	4b05      	ldr	r3, [pc, #20]	; (8012f74 <xTaskGetTickCount+0x1c>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012f64:	687b      	ldr	r3, [r7, #4]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	24008e5c 	.word	0x24008e5c

08012f78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f7e:	f001 fa7b 	bl	8014478 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012f82:	2300      	movs	r3, #0
 8012f84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012f86:	4b04      	ldr	r3, [pc, #16]	; (8012f98 <xTaskGetTickCountFromISR+0x20>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f8c:	683b      	ldr	r3, [r7, #0]
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	24008e5c 	.word	0x24008e5c

08012f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b086      	sub	sp, #24
 8012fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fa6:	4b4f      	ldr	r3, [pc, #316]	; (80130e4 <xTaskIncrementTick+0x148>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	f040 808f 	bne.w	80130ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012fb0:	4b4d      	ldr	r3, [pc, #308]	; (80130e8 <xTaskIncrementTick+0x14c>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012fb8:	4a4b      	ldr	r2, [pc, #300]	; (80130e8 <xTaskIncrementTick+0x14c>)
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d120      	bne.n	8013006 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012fc4:	4b49      	ldr	r3, [pc, #292]	; (80130ec <xTaskIncrementTick+0x150>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d00a      	beq.n	8012fe4 <xTaskIncrementTick+0x48>
	__asm volatile
 8012fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd2:	f383 8811 	msr	BASEPRI, r3
 8012fd6:	f3bf 8f6f 	isb	sy
 8012fda:	f3bf 8f4f 	dsb	sy
 8012fde:	603b      	str	r3, [r7, #0]
}
 8012fe0:	bf00      	nop
 8012fe2:	e7fe      	b.n	8012fe2 <xTaskIncrementTick+0x46>
 8012fe4:	4b41      	ldr	r3, [pc, #260]	; (80130ec <xTaskIncrementTick+0x150>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	60fb      	str	r3, [r7, #12]
 8012fea:	4b41      	ldr	r3, [pc, #260]	; (80130f0 <xTaskIncrementTick+0x154>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a3f      	ldr	r2, [pc, #252]	; (80130ec <xTaskIncrementTick+0x150>)
 8012ff0:	6013      	str	r3, [r2, #0]
 8012ff2:	4a3f      	ldr	r2, [pc, #252]	; (80130f0 <xTaskIncrementTick+0x154>)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	6013      	str	r3, [r2, #0]
 8012ff8:	4b3e      	ldr	r3, [pc, #248]	; (80130f4 <xTaskIncrementTick+0x158>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	4a3d      	ldr	r2, [pc, #244]	; (80130f4 <xTaskIncrementTick+0x158>)
 8013000:	6013      	str	r3, [r2, #0]
 8013002:	f000 fadb 	bl	80135bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013006:	4b3c      	ldr	r3, [pc, #240]	; (80130f8 <xTaskIncrementTick+0x15c>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	693a      	ldr	r2, [r7, #16]
 801300c:	429a      	cmp	r2, r3
 801300e:	d349      	bcc.n	80130a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013010:	4b36      	ldr	r3, [pc, #216]	; (80130ec <xTaskIncrementTick+0x150>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d104      	bne.n	8013024 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801301a:	4b37      	ldr	r3, [pc, #220]	; (80130f8 <xTaskIncrementTick+0x15c>)
 801301c:	f04f 32ff 	mov.w	r2, #4294967295
 8013020:	601a      	str	r2, [r3, #0]
					break;
 8013022:	e03f      	b.n	80130a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013024:	4b31      	ldr	r3, [pc, #196]	; (80130ec <xTaskIncrementTick+0x150>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	429a      	cmp	r2, r3
 801303a:	d203      	bcs.n	8013044 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801303c:	4a2e      	ldr	r2, [pc, #184]	; (80130f8 <xTaskIncrementTick+0x15c>)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013042:	e02f      	b.n	80130a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	3304      	adds	r3, #4
 8013048:	4618      	mov	r0, r3
 801304a:	f7fe fb3f 	bl	80116cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013052:	2b00      	cmp	r3, #0
 8013054:	d004      	beq.n	8013060 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	3318      	adds	r3, #24
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe fb36 	bl	80116cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013064:	4b25      	ldr	r3, [pc, #148]	; (80130fc <xTaskIncrementTick+0x160>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	429a      	cmp	r2, r3
 801306a:	d903      	bls.n	8013074 <xTaskIncrementTick+0xd8>
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013070:	4a22      	ldr	r2, [pc, #136]	; (80130fc <xTaskIncrementTick+0x160>)
 8013072:	6013      	str	r3, [r2, #0]
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013078:	4613      	mov	r3, r2
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4a1f      	ldr	r2, [pc, #124]	; (8013100 <xTaskIncrementTick+0x164>)
 8013082:	441a      	add	r2, r3
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	3304      	adds	r3, #4
 8013088:	4619      	mov	r1, r3
 801308a:	4610      	mov	r0, r2
 801308c:	f7fe fac1 	bl	8011612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013094:	4b1b      	ldr	r3, [pc, #108]	; (8013104 <xTaskIncrementTick+0x168>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801309a:	429a      	cmp	r2, r3
 801309c:	d3b8      	bcc.n	8013010 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801309e:	2301      	movs	r3, #1
 80130a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130a2:	e7b5      	b.n	8013010 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80130a4:	4b17      	ldr	r3, [pc, #92]	; (8013104 <xTaskIncrementTick+0x168>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130aa:	4915      	ldr	r1, [pc, #84]	; (8013100 <xTaskIncrementTick+0x164>)
 80130ac:	4613      	mov	r3, r2
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	4413      	add	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	440b      	add	r3, r1
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d901      	bls.n	80130c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80130bc:	2301      	movs	r3, #1
 80130be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80130c0:	4b11      	ldr	r3, [pc, #68]	; (8013108 <xTaskIncrementTick+0x16c>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d007      	beq.n	80130d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80130c8:	2301      	movs	r3, #1
 80130ca:	617b      	str	r3, [r7, #20]
 80130cc:	e004      	b.n	80130d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80130ce:	4b0f      	ldr	r3, [pc, #60]	; (801310c <xTaskIncrementTick+0x170>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	3301      	adds	r3, #1
 80130d4:	4a0d      	ldr	r2, [pc, #52]	; (801310c <xTaskIncrementTick+0x170>)
 80130d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80130d8:	697b      	ldr	r3, [r7, #20]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3718      	adds	r7, #24
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	24008e80 	.word	0x24008e80
 80130e8:	24008e5c 	.word	0x24008e5c
 80130ec:	24008e10 	.word	0x24008e10
 80130f0:	24008e14 	.word	0x24008e14
 80130f4:	24008e70 	.word	0x24008e70
 80130f8:	24008e78 	.word	0x24008e78
 80130fc:	24008e60 	.word	0x24008e60
 8013100:	24008988 	.word	0x24008988
 8013104:	24008984 	.word	0x24008984
 8013108:	24008e6c 	.word	0x24008e6c
 801310c:	24008e68 	.word	0x24008e68

08013110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013116:	4b2a      	ldr	r3, [pc, #168]	; (80131c0 <vTaskSwitchContext+0xb0>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d003      	beq.n	8013126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801311e:	4b29      	ldr	r3, [pc, #164]	; (80131c4 <vTaskSwitchContext+0xb4>)
 8013120:	2201      	movs	r2, #1
 8013122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013124:	e046      	b.n	80131b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013126:	4b27      	ldr	r3, [pc, #156]	; (80131c4 <vTaskSwitchContext+0xb4>)
 8013128:	2200      	movs	r2, #0
 801312a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801312c:	4b26      	ldr	r3, [pc, #152]	; (80131c8 <vTaskSwitchContext+0xb8>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	60fb      	str	r3, [r7, #12]
 8013132:	e010      	b.n	8013156 <vTaskSwitchContext+0x46>
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d10a      	bne.n	8013150 <vTaskSwitchContext+0x40>
	__asm volatile
 801313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313e:	f383 8811 	msr	BASEPRI, r3
 8013142:	f3bf 8f6f 	isb	sy
 8013146:	f3bf 8f4f 	dsb	sy
 801314a:	607b      	str	r3, [r7, #4]
}
 801314c:	bf00      	nop
 801314e:	e7fe      	b.n	801314e <vTaskSwitchContext+0x3e>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	3b01      	subs	r3, #1
 8013154:	60fb      	str	r3, [r7, #12]
 8013156:	491d      	ldr	r1, [pc, #116]	; (80131cc <vTaskSwitchContext+0xbc>)
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	4613      	mov	r3, r2
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	4413      	add	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	440b      	add	r3, r1
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d0e4      	beq.n	8013134 <vTaskSwitchContext+0x24>
 801316a:	68fa      	ldr	r2, [r7, #12]
 801316c:	4613      	mov	r3, r2
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	4413      	add	r3, r2
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	4a15      	ldr	r2, [pc, #84]	; (80131cc <vTaskSwitchContext+0xbc>)
 8013176:	4413      	add	r3, r2
 8013178:	60bb      	str	r3, [r7, #8]
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	605a      	str	r2, [r3, #4]
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	685a      	ldr	r2, [r3, #4]
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	3308      	adds	r3, #8
 801318c:	429a      	cmp	r2, r3
 801318e:	d104      	bne.n	801319a <vTaskSwitchContext+0x8a>
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	685a      	ldr	r2, [r3, #4]
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	605a      	str	r2, [r3, #4]
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	4a0b      	ldr	r2, [pc, #44]	; (80131d0 <vTaskSwitchContext+0xc0>)
 80131a2:	6013      	str	r3, [r2, #0]
 80131a4:	4a08      	ldr	r2, [pc, #32]	; (80131c8 <vTaskSwitchContext+0xb8>)
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80131aa:	4b09      	ldr	r3, [pc, #36]	; (80131d0 <vTaskSwitchContext+0xc0>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	3354      	adds	r3, #84	; 0x54
 80131b0:	4a08      	ldr	r2, [pc, #32]	; (80131d4 <vTaskSwitchContext+0xc4>)
 80131b2:	6013      	str	r3, [r2, #0]
}
 80131b4:	bf00      	nop
 80131b6:	3714      	adds	r7, #20
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr
 80131c0:	24008e80 	.word	0x24008e80
 80131c4:	24008e6c 	.word	0x24008e6c
 80131c8:	24008e60 	.word	0x24008e60
 80131cc:	24008988 	.word	0x24008988
 80131d0:	24008984 	.word	0x24008984
 80131d4:	24008040 	.word	0x24008040

080131d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d10a      	bne.n	80131fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80131e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ec:	f383 8811 	msr	BASEPRI, r3
 80131f0:	f3bf 8f6f 	isb	sy
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	60fb      	str	r3, [r7, #12]
}
 80131fa:	bf00      	nop
 80131fc:	e7fe      	b.n	80131fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80131fe:	4b07      	ldr	r3, [pc, #28]	; (801321c <vTaskPlaceOnEventList+0x44>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	3318      	adds	r3, #24
 8013204:	4619      	mov	r1, r3
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fe fa27 	bl	801165a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801320c:	2101      	movs	r1, #1
 801320e:	6838      	ldr	r0, [r7, #0]
 8013210:	f000 fb7e 	bl	8013910 <prvAddCurrentTaskToDelayedList>
}
 8013214:	bf00      	nop
 8013216:	3710      	adds	r7, #16
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	24008984 	.word	0x24008984

08013220 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013220:	b580      	push	{r7, lr}
 8013222:	b086      	sub	sp, #24
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d10a      	bne.n	8013248 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	617b      	str	r3, [r7, #20]
}
 8013244:	bf00      	nop
 8013246:	e7fe      	b.n	8013246 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <vTaskPlaceOnEventListRestricted+0x54>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3318      	adds	r3, #24
 801324e:	4619      	mov	r1, r3
 8013250:	68f8      	ldr	r0, [r7, #12]
 8013252:	f7fe f9de 	bl	8011612 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d002      	beq.n	8013262 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801325c:	f04f 33ff 	mov.w	r3, #4294967295
 8013260:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	68b8      	ldr	r0, [r7, #8]
 8013266:	f000 fb53 	bl	8013910 <prvAddCurrentTaskToDelayedList>
	}
 801326a:	bf00      	nop
 801326c:	3718      	adds	r7, #24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	24008984 	.word	0x24008984

08013278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d10a      	bne.n	80132a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013292:	f383 8811 	msr	BASEPRI, r3
 8013296:	f3bf 8f6f 	isb	sy
 801329a:	f3bf 8f4f 	dsb	sy
 801329e:	60fb      	str	r3, [r7, #12]
}
 80132a0:	bf00      	nop
 80132a2:	e7fe      	b.n	80132a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	3318      	adds	r3, #24
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fe fa0f 	bl	80116cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132ae:	4b1e      	ldr	r3, [pc, #120]	; (8013328 <xTaskRemoveFromEventList+0xb0>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d11d      	bne.n	80132f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	3304      	adds	r3, #4
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7fe fa06 	bl	80116cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c4:	4b19      	ldr	r3, [pc, #100]	; (801332c <xTaskRemoveFromEventList+0xb4>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d903      	bls.n	80132d4 <xTaskRemoveFromEventList+0x5c>
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132d0:	4a16      	ldr	r2, [pc, #88]	; (801332c <xTaskRemoveFromEventList+0xb4>)
 80132d2:	6013      	str	r3, [r2, #0]
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d8:	4613      	mov	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	4413      	add	r3, r2
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	4a13      	ldr	r2, [pc, #76]	; (8013330 <xTaskRemoveFromEventList+0xb8>)
 80132e2:	441a      	add	r2, r3
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	3304      	adds	r3, #4
 80132e8:	4619      	mov	r1, r3
 80132ea:	4610      	mov	r0, r2
 80132ec:	f7fe f991 	bl	8011612 <vListInsertEnd>
 80132f0:	e005      	b.n	80132fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	3318      	adds	r3, #24
 80132f6:	4619      	mov	r1, r3
 80132f8:	480e      	ldr	r0, [pc, #56]	; (8013334 <xTaskRemoveFromEventList+0xbc>)
 80132fa:	f7fe f98a 	bl	8011612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013302:	4b0d      	ldr	r3, [pc, #52]	; (8013338 <xTaskRemoveFromEventList+0xc0>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013308:	429a      	cmp	r2, r3
 801330a:	d905      	bls.n	8013318 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801330c:	2301      	movs	r3, #1
 801330e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013310:	4b0a      	ldr	r3, [pc, #40]	; (801333c <xTaskRemoveFromEventList+0xc4>)
 8013312:	2201      	movs	r2, #1
 8013314:	601a      	str	r2, [r3, #0]
 8013316:	e001      	b.n	801331c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013318:	2300      	movs	r3, #0
 801331a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801331c:	697b      	ldr	r3, [r7, #20]
}
 801331e:	4618      	mov	r0, r3
 8013320:	3718      	adds	r7, #24
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	24008e80 	.word	0x24008e80
 801332c:	24008e60 	.word	0x24008e60
 8013330:	24008988 	.word	0x24008988
 8013334:	24008e18 	.word	0x24008e18
 8013338:	24008984 	.word	0x24008984
 801333c:	24008e6c 	.word	0x24008e6c

08013340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013348:	4b06      	ldr	r3, [pc, #24]	; (8013364 <vTaskInternalSetTimeOutState+0x24>)
 801334a:	681a      	ldr	r2, [r3, #0]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013350:	4b05      	ldr	r3, [pc, #20]	; (8013368 <vTaskInternalSetTimeOutState+0x28>)
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	605a      	str	r2, [r3, #4]
}
 8013358:	bf00      	nop
 801335a:	370c      	adds	r7, #12
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr
 8013364:	24008e70 	.word	0x24008e70
 8013368:	24008e5c 	.word	0x24008e5c

0801336c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b088      	sub	sp, #32
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10a      	bne.n	8013392 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	613b      	str	r3, [r7, #16]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d10a      	bne.n	80133ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339c:	f383 8811 	msr	BASEPRI, r3
 80133a0:	f3bf 8f6f 	isb	sy
 80133a4:	f3bf 8f4f 	dsb	sy
 80133a8:	60fb      	str	r3, [r7, #12]
}
 80133aa:	bf00      	nop
 80133ac:	e7fe      	b.n	80133ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80133ae:	f000 ff81 	bl	80142b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80133b2:	4b1d      	ldr	r3, [pc, #116]	; (8013428 <xTaskCheckForTimeOut+0xbc>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	69ba      	ldr	r2, [r7, #24]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ca:	d102      	bne.n	80133d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80133cc:	2300      	movs	r3, #0
 80133ce:	61fb      	str	r3, [r7, #28]
 80133d0:	e023      	b.n	801341a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	4b15      	ldr	r3, [pc, #84]	; (801342c <xTaskCheckForTimeOut+0xc0>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d007      	beq.n	80133ee <xTaskCheckForTimeOut+0x82>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	69ba      	ldr	r2, [r7, #24]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d302      	bcc.n	80133ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80133e8:	2301      	movs	r3, #1
 80133ea:	61fb      	str	r3, [r7, #28]
 80133ec:	e015      	b.n	801341a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d20b      	bcs.n	8013410 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	1ad2      	subs	r2, r2, r3
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7ff ff9b 	bl	8013340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801340a:	2300      	movs	r3, #0
 801340c:	61fb      	str	r3, [r7, #28]
 801340e:	e004      	b.n	801341a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	2200      	movs	r2, #0
 8013414:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013416:	2301      	movs	r3, #1
 8013418:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801341a:	f000 ff7b 	bl	8014314 <vPortExitCritical>

	return xReturn;
 801341e:	69fb      	ldr	r3, [r7, #28]
}
 8013420:	4618      	mov	r0, r3
 8013422:	3720      	adds	r7, #32
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	24008e5c 	.word	0x24008e5c
 801342c:	24008e70 	.word	0x24008e70

08013430 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013430:	b480      	push	{r7}
 8013432:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013434:	4b03      	ldr	r3, [pc, #12]	; (8013444 <vTaskMissedYield+0x14>)
 8013436:	2201      	movs	r2, #1
 8013438:	601a      	str	r2, [r3, #0]
}
 801343a:	bf00      	nop
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr
 8013444:	24008e6c 	.word	0x24008e6c

08013448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013450:	f000 f852 	bl	80134f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013454:	4b06      	ldr	r3, [pc, #24]	; (8013470 <prvIdleTask+0x28>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2b01      	cmp	r3, #1
 801345a:	d9f9      	bls.n	8013450 <prvIdleTask+0x8>
			{
				taskYIELD();
 801345c:	4b05      	ldr	r3, [pc, #20]	; (8013474 <prvIdleTask+0x2c>)
 801345e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013462:	601a      	str	r2, [r3, #0]
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801346c:	e7f0      	b.n	8013450 <prvIdleTask+0x8>
 801346e:	bf00      	nop
 8013470:	24008988 	.word	0x24008988
 8013474:	e000ed04 	.word	0xe000ed04

08013478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801347e:	2300      	movs	r3, #0
 8013480:	607b      	str	r3, [r7, #4]
 8013482:	e00c      	b.n	801349e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4a12      	ldr	r2, [pc, #72]	; (80134d8 <prvInitialiseTaskLists+0x60>)
 8013490:	4413      	add	r3, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe f890 	bl	80115b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	3301      	adds	r3, #1
 801349c:	607b      	str	r3, [r7, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2b37      	cmp	r3, #55	; 0x37
 80134a2:	d9ef      	bls.n	8013484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80134a4:	480d      	ldr	r0, [pc, #52]	; (80134dc <prvInitialiseTaskLists+0x64>)
 80134a6:	f7fe f887 	bl	80115b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80134aa:	480d      	ldr	r0, [pc, #52]	; (80134e0 <prvInitialiseTaskLists+0x68>)
 80134ac:	f7fe f884 	bl	80115b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80134b0:	480c      	ldr	r0, [pc, #48]	; (80134e4 <prvInitialiseTaskLists+0x6c>)
 80134b2:	f7fe f881 	bl	80115b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80134b6:	480c      	ldr	r0, [pc, #48]	; (80134e8 <prvInitialiseTaskLists+0x70>)
 80134b8:	f7fe f87e 	bl	80115b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80134bc:	480b      	ldr	r0, [pc, #44]	; (80134ec <prvInitialiseTaskLists+0x74>)
 80134be:	f7fe f87b 	bl	80115b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80134c2:	4b0b      	ldr	r3, [pc, #44]	; (80134f0 <prvInitialiseTaskLists+0x78>)
 80134c4:	4a05      	ldr	r2, [pc, #20]	; (80134dc <prvInitialiseTaskLists+0x64>)
 80134c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80134c8:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <prvInitialiseTaskLists+0x7c>)
 80134ca:	4a05      	ldr	r2, [pc, #20]	; (80134e0 <prvInitialiseTaskLists+0x68>)
 80134cc:	601a      	str	r2, [r3, #0]
}
 80134ce:	bf00      	nop
 80134d0:	3708      	adds	r7, #8
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	24008988 	.word	0x24008988
 80134dc:	24008de8 	.word	0x24008de8
 80134e0:	24008dfc 	.word	0x24008dfc
 80134e4:	24008e18 	.word	0x24008e18
 80134e8:	24008e2c 	.word	0x24008e2c
 80134ec:	24008e44 	.word	0x24008e44
 80134f0:	24008e10 	.word	0x24008e10
 80134f4:	24008e14 	.word	0x24008e14

080134f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80134fe:	e019      	b.n	8013534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013500:	f000 fed8 	bl	80142b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013504:	4b10      	ldr	r3, [pc, #64]	; (8013548 <prvCheckTasksWaitingTermination+0x50>)
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3304      	adds	r3, #4
 8013510:	4618      	mov	r0, r3
 8013512:	f7fe f8db 	bl	80116cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013516:	4b0d      	ldr	r3, [pc, #52]	; (801354c <prvCheckTasksWaitingTermination+0x54>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	3b01      	subs	r3, #1
 801351c:	4a0b      	ldr	r2, [pc, #44]	; (801354c <prvCheckTasksWaitingTermination+0x54>)
 801351e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013520:	4b0b      	ldr	r3, [pc, #44]	; (8013550 <prvCheckTasksWaitingTermination+0x58>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	3b01      	subs	r3, #1
 8013526:	4a0a      	ldr	r2, [pc, #40]	; (8013550 <prvCheckTasksWaitingTermination+0x58>)
 8013528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801352a:	f000 fef3 	bl	8014314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f000 f810 	bl	8013554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013534:	4b06      	ldr	r3, [pc, #24]	; (8013550 <prvCheckTasksWaitingTermination+0x58>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1e1      	bne.n	8013500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801353c:	bf00      	nop
 801353e:	bf00      	nop
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	24008e2c 	.word	0x24008e2c
 801354c:	24008e58 	.word	0x24008e58
 8013550:	24008e40 	.word	0x24008e40

08013554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	3354      	adds	r3, #84	; 0x54
 8013560:	4618      	mov	r0, r3
 8013562:	f001 fa5d 	bl	8014a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801356c:	2b00      	cmp	r3, #0
 801356e:	d108      	bne.n	8013582 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013574:	4618      	mov	r0, r3
 8013576:	f001 f88b 	bl	8014690 <vPortFree>
				vPortFree( pxTCB );
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f001 f888 	bl	8014690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013580:	e018      	b.n	80135b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013588:	2b01      	cmp	r3, #1
 801358a:	d103      	bne.n	8013594 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f001 f87f 	bl	8014690 <vPortFree>
	}
 8013592:	e00f      	b.n	80135b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801359a:	2b02      	cmp	r3, #2
 801359c:	d00a      	beq.n	80135b4 <prvDeleteTCB+0x60>
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	60fb      	str	r3, [r7, #12]
}
 80135b0:	bf00      	nop
 80135b2:	e7fe      	b.n	80135b2 <prvDeleteTCB+0x5e>
	}
 80135b4:	bf00      	nop
 80135b6:	3710      	adds	r7, #16
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135c2:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <prvResetNextTaskUnblockTime+0x38>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d104      	bne.n	80135d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80135cc:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <prvResetNextTaskUnblockTime+0x3c>)
 80135ce:	f04f 32ff 	mov.w	r2, #4294967295
 80135d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80135d4:	e008      	b.n	80135e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135d6:	4b07      	ldr	r3, [pc, #28]	; (80135f4 <prvResetNextTaskUnblockTime+0x38>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	4a04      	ldr	r2, [pc, #16]	; (80135f8 <prvResetNextTaskUnblockTime+0x3c>)
 80135e6:	6013      	str	r3, [r2, #0]
}
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr
 80135f4:	24008e10 	.word	0x24008e10
 80135f8:	24008e78 	.word	0x24008e78

080135fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013602:	4b0b      	ldr	r3, [pc, #44]	; (8013630 <xTaskGetSchedulerState+0x34>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d102      	bne.n	8013610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801360a:	2301      	movs	r3, #1
 801360c:	607b      	str	r3, [r7, #4]
 801360e:	e008      	b.n	8013622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013610:	4b08      	ldr	r3, [pc, #32]	; (8013634 <xTaskGetSchedulerState+0x38>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013618:	2302      	movs	r3, #2
 801361a:	607b      	str	r3, [r7, #4]
 801361c:	e001      	b.n	8013622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801361e:	2300      	movs	r3, #0
 8013620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013622:	687b      	ldr	r3, [r7, #4]
	}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr
 8013630:	24008e64 	.word	0x24008e64
 8013634:	24008e80 	.word	0x24008e80

08013638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013644:	2300      	movs	r3, #0
 8013646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d051      	beq.n	80136f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013652:	4b2a      	ldr	r3, [pc, #168]	; (80136fc <xTaskPriorityInherit+0xc4>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013658:	429a      	cmp	r2, r3
 801365a:	d241      	bcs.n	80136e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	699b      	ldr	r3, [r3, #24]
 8013660:	2b00      	cmp	r3, #0
 8013662:	db06      	blt.n	8013672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013664:	4b25      	ldr	r3, [pc, #148]	; (80136fc <xTaskPriorityInherit+0xc4>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801366a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	6959      	ldr	r1, [r3, #20]
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801367a:	4613      	mov	r3, r2
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	4413      	add	r3, r2
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	4a1f      	ldr	r2, [pc, #124]	; (8013700 <xTaskPriorityInherit+0xc8>)
 8013684:	4413      	add	r3, r2
 8013686:	4299      	cmp	r1, r3
 8013688:	d122      	bne.n	80136d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	3304      	adds	r3, #4
 801368e:	4618      	mov	r0, r3
 8013690:	f7fe f81c 	bl	80116cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013694:	4b19      	ldr	r3, [pc, #100]	; (80136fc <xTaskPriorityInherit+0xc4>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136a2:	4b18      	ldr	r3, [pc, #96]	; (8013704 <xTaskPriorityInherit+0xcc>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d903      	bls.n	80136b2 <xTaskPriorityInherit+0x7a>
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ae:	4a15      	ldr	r2, [pc, #84]	; (8013704 <xTaskPriorityInherit+0xcc>)
 80136b0:	6013      	str	r3, [r2, #0]
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136b6:	4613      	mov	r3, r2
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	4413      	add	r3, r2
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	4a10      	ldr	r2, [pc, #64]	; (8013700 <xTaskPriorityInherit+0xc8>)
 80136c0:	441a      	add	r2, r3
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	3304      	adds	r3, #4
 80136c6:	4619      	mov	r1, r3
 80136c8:	4610      	mov	r0, r2
 80136ca:	f7fd ffa2 	bl	8011612 <vListInsertEnd>
 80136ce:	e004      	b.n	80136da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80136d0:	4b0a      	ldr	r3, [pc, #40]	; (80136fc <xTaskPriorityInherit+0xc4>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80136da:	2301      	movs	r3, #1
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	e008      	b.n	80136f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136e4:	4b05      	ldr	r3, [pc, #20]	; (80136fc <xTaskPriorityInherit+0xc4>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d201      	bcs.n	80136f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80136ee:	2301      	movs	r3, #1
 80136f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136f2:	68fb      	ldr	r3, [r7, #12]
	}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3710      	adds	r7, #16
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	24008984 	.word	0x24008984
 8013700:	24008988 	.word	0x24008988
 8013704:	24008e60 	.word	0x24008e60

08013708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013714:	2300      	movs	r3, #0
 8013716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d056      	beq.n	80137cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801371e:	4b2e      	ldr	r3, [pc, #184]	; (80137d8 <xTaskPriorityDisinherit+0xd0>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	693a      	ldr	r2, [r7, #16]
 8013724:	429a      	cmp	r2, r3
 8013726:	d00a      	beq.n	801373e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372c:	f383 8811 	msr	BASEPRI, r3
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	f3bf 8f4f 	dsb	sy
 8013738:	60fb      	str	r3, [r7, #12]
}
 801373a:	bf00      	nop
 801373c:	e7fe      	b.n	801373c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013742:	2b00      	cmp	r3, #0
 8013744:	d10a      	bne.n	801375c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374a:	f383 8811 	msr	BASEPRI, r3
 801374e:	f3bf 8f6f 	isb	sy
 8013752:	f3bf 8f4f 	dsb	sy
 8013756:	60bb      	str	r3, [r7, #8]
}
 8013758:	bf00      	nop
 801375a:	e7fe      	b.n	801375a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013760:	1e5a      	subs	r2, r3, #1
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801376e:	429a      	cmp	r2, r3
 8013770:	d02c      	beq.n	80137cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013776:	2b00      	cmp	r3, #0
 8013778:	d128      	bne.n	80137cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	3304      	adds	r3, #4
 801377e:	4618      	mov	r0, r3
 8013780:	f7fd ffa4 	bl	80116cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013790:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379c:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <xTaskPriorityDisinherit+0xd4>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d903      	bls.n	80137ac <xTaskPriorityDisinherit+0xa4>
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a8:	4a0c      	ldr	r2, [pc, #48]	; (80137dc <xTaskPriorityDisinherit+0xd4>)
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b0:	4613      	mov	r3, r2
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	4413      	add	r3, r2
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	4a09      	ldr	r2, [pc, #36]	; (80137e0 <xTaskPriorityDisinherit+0xd8>)
 80137ba:	441a      	add	r2, r3
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	3304      	adds	r3, #4
 80137c0:	4619      	mov	r1, r3
 80137c2:	4610      	mov	r0, r2
 80137c4:	f7fd ff25 	bl	8011612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80137c8:	2301      	movs	r3, #1
 80137ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80137cc:	697b      	ldr	r3, [r7, #20]
	}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3718      	adds	r7, #24
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	24008984 	.word	0x24008984
 80137dc:	24008e60 	.word	0x24008e60
 80137e0:	24008988 	.word	0x24008988

080137e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b088      	sub	sp, #32
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80137f2:	2301      	movs	r3, #1
 80137f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d06a      	beq.n	80138d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10a      	bne.n	801381a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013808:	f383 8811 	msr	BASEPRI, r3
 801380c:	f3bf 8f6f 	isb	sy
 8013810:	f3bf 8f4f 	dsb	sy
 8013814:	60fb      	str	r3, [r7, #12]
}
 8013816:	bf00      	nop
 8013818:	e7fe      	b.n	8013818 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801381e:	683a      	ldr	r2, [r7, #0]
 8013820:	429a      	cmp	r2, r3
 8013822:	d902      	bls.n	801382a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	61fb      	str	r3, [r7, #28]
 8013828:	e002      	b.n	8013830 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801382e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013834:	69fa      	ldr	r2, [r7, #28]
 8013836:	429a      	cmp	r2, r3
 8013838:	d04b      	beq.n	80138d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	429a      	cmp	r2, r3
 8013842:	d146      	bne.n	80138d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013844:	4b25      	ldr	r3, [pc, #148]	; (80138dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	69ba      	ldr	r2, [r7, #24]
 801384a:	429a      	cmp	r2, r3
 801384c:	d10a      	bne.n	8013864 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	60bb      	str	r3, [r7, #8]
}
 8013860:	bf00      	nop
 8013862:	e7fe      	b.n	8013862 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	69fa      	ldr	r2, [r7, #28]
 801386e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	2b00      	cmp	r3, #0
 8013876:	db04      	blt.n	8013882 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	6959      	ldr	r1, [r3, #20]
 8013886:	693a      	ldr	r2, [r7, #16]
 8013888:	4613      	mov	r3, r2
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	4413      	add	r3, r2
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	4a13      	ldr	r2, [pc, #76]	; (80138e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013892:	4413      	add	r3, r2
 8013894:	4299      	cmp	r1, r3
 8013896:	d11c      	bne.n	80138d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013898:	69bb      	ldr	r3, [r7, #24]
 801389a:	3304      	adds	r3, #4
 801389c:	4618      	mov	r0, r3
 801389e:	f7fd ff15 	bl	80116cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a6:	4b0f      	ldr	r3, [pc, #60]	; (80138e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d903      	bls.n	80138b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b2:	4a0c      	ldr	r2, [pc, #48]	; (80138e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ba:	4613      	mov	r3, r2
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	4413      	add	r3, r2
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	4a07      	ldr	r2, [pc, #28]	; (80138e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80138c4:	441a      	add	r2, r3
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	3304      	adds	r3, #4
 80138ca:	4619      	mov	r1, r3
 80138cc:	4610      	mov	r0, r2
 80138ce:	f7fd fea0 	bl	8011612 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80138d2:	bf00      	nop
 80138d4:	3720      	adds	r7, #32
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	24008984 	.word	0x24008984
 80138e0:	24008988 	.word	0x24008988
 80138e4:	24008e60 	.word	0x24008e60

080138e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80138e8:	b480      	push	{r7}
 80138ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80138ec:	4b07      	ldr	r3, [pc, #28]	; (801390c <pvTaskIncrementMutexHeldCount+0x24>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d004      	beq.n	80138fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80138f4:	4b05      	ldr	r3, [pc, #20]	; (801390c <pvTaskIncrementMutexHeldCount+0x24>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138fa:	3201      	adds	r2, #1
 80138fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80138fe:	4b03      	ldr	r3, [pc, #12]	; (801390c <pvTaskIncrementMutexHeldCount+0x24>)
 8013900:	681b      	ldr	r3, [r3, #0]
	}
 8013902:	4618      	mov	r0, r3
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr
 801390c:	24008984 	.word	0x24008984

08013910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801391a:	4b21      	ldr	r3, [pc, #132]	; (80139a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013920:	4b20      	ldr	r3, [pc, #128]	; (80139a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	3304      	adds	r3, #4
 8013926:	4618      	mov	r0, r3
 8013928:	f7fd fed0 	bl	80116cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013932:	d10a      	bne.n	801394a <prvAddCurrentTaskToDelayedList+0x3a>
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d007      	beq.n	801394a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801393a:	4b1a      	ldr	r3, [pc, #104]	; (80139a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	3304      	adds	r3, #4
 8013940:	4619      	mov	r1, r3
 8013942:	4819      	ldr	r0, [pc, #100]	; (80139a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8013944:	f7fd fe65 	bl	8011612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013948:	e026      	b.n	8013998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801394a:	68fa      	ldr	r2, [r7, #12]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4413      	add	r3, r2
 8013950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013952:	4b14      	ldr	r3, [pc, #80]	; (80139a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801395a:	68ba      	ldr	r2, [r7, #8]
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	429a      	cmp	r2, r3
 8013960:	d209      	bcs.n	8013976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013962:	4b12      	ldr	r3, [pc, #72]	; (80139ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	4b0f      	ldr	r3, [pc, #60]	; (80139a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	3304      	adds	r3, #4
 801396c:	4619      	mov	r1, r3
 801396e:	4610      	mov	r0, r2
 8013970:	f7fd fe73 	bl	801165a <vListInsert>
}
 8013974:	e010      	b.n	8013998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013976:	4b0e      	ldr	r3, [pc, #56]	; (80139b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	4b0a      	ldr	r3, [pc, #40]	; (80139a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	3304      	adds	r3, #4
 8013980:	4619      	mov	r1, r3
 8013982:	4610      	mov	r0, r2
 8013984:	f7fd fe69 	bl	801165a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013988:	4b0a      	ldr	r3, [pc, #40]	; (80139b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	429a      	cmp	r2, r3
 8013990:	d202      	bcs.n	8013998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013992:	4a08      	ldr	r2, [pc, #32]	; (80139b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	6013      	str	r3, [r2, #0]
}
 8013998:	bf00      	nop
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	24008e5c 	.word	0x24008e5c
 80139a4:	24008984 	.word	0x24008984
 80139a8:	24008e44 	.word	0x24008e44
 80139ac:	24008e14 	.word	0x24008e14
 80139b0:	24008e10 	.word	0x24008e10
 80139b4:	24008e78 	.word	0x24008e78

080139b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b08a      	sub	sp, #40	; 0x28
 80139bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80139be:	2300      	movs	r3, #0
 80139c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80139c2:	f000 fb07 	bl	8013fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80139c6:	4b1c      	ldr	r3, [pc, #112]	; (8013a38 <xTimerCreateTimerTask+0x80>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d021      	beq.n	8013a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80139ce:	2300      	movs	r3, #0
 80139d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80139d2:	2300      	movs	r3, #0
 80139d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80139d6:	1d3a      	adds	r2, r7, #4
 80139d8:	f107 0108 	add.w	r1, r7, #8
 80139dc:	f107 030c 	add.w	r3, r7, #12
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fd fdcf 	bl	8011584 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80139e6:	6879      	ldr	r1, [r7, #4]
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	9202      	str	r2, [sp, #8]
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	2302      	movs	r3, #2
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	2300      	movs	r3, #0
 80139f6:	460a      	mov	r2, r1
 80139f8:	4910      	ldr	r1, [pc, #64]	; (8013a3c <xTimerCreateTimerTask+0x84>)
 80139fa:	4811      	ldr	r0, [pc, #68]	; (8013a40 <xTimerCreateTimerTask+0x88>)
 80139fc:	f7fe fe9e 	bl	801273c <xTaskCreateStatic>
 8013a00:	4603      	mov	r3, r0
 8013a02:	4a10      	ldr	r2, [pc, #64]	; (8013a44 <xTimerCreateTimerTask+0x8c>)
 8013a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013a06:	4b0f      	ldr	r3, [pc, #60]	; (8013a44 <xTimerCreateTimerTask+0x8c>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d001      	beq.n	8013a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013a0e:	2301      	movs	r3, #1
 8013a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d10a      	bne.n	8013a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1c:	f383 8811 	msr	BASEPRI, r3
 8013a20:	f3bf 8f6f 	isb	sy
 8013a24:	f3bf 8f4f 	dsb	sy
 8013a28:	613b      	str	r3, [r7, #16]
}
 8013a2a:	bf00      	nop
 8013a2c:	e7fe      	b.n	8013a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013a2e:	697b      	ldr	r3, [r7, #20]
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3718      	adds	r7, #24
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}
 8013a38:	24008eb4 	.word	0x24008eb4
 8013a3c:	08015314 	.word	0x08015314
 8013a40:	08013b7d 	.word	0x08013b7d
 8013a44:	24008eb8 	.word	0x24008eb8

08013a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b08a      	sub	sp, #40	; 0x28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013a56:	2300      	movs	r3, #0
 8013a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d10a      	bne.n	8013a76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	f3bf 8f6f 	isb	sy
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	623b      	str	r3, [r7, #32]
}
 8013a72:	bf00      	nop
 8013a74:	e7fe      	b.n	8013a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013a76:	4b1a      	ldr	r3, [pc, #104]	; (8013ae0 <xTimerGenericCommand+0x98>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d02a      	beq.n	8013ad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	2b05      	cmp	r3, #5
 8013a8e:	dc18      	bgt.n	8013ac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013a90:	f7ff fdb4 	bl	80135fc <xTaskGetSchedulerState>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	d109      	bne.n	8013aae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013a9a:	4b11      	ldr	r3, [pc, #68]	; (8013ae0 <xTimerGenericCommand+0x98>)
 8013a9c:	6818      	ldr	r0, [r3, #0]
 8013a9e:	f107 0110 	add.w	r1, r7, #16
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013aa6:	f7fd ffe3 	bl	8011a70 <xQueueGenericSend>
 8013aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8013aac:	e012      	b.n	8013ad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013aae:	4b0c      	ldr	r3, [pc, #48]	; (8013ae0 <xTimerGenericCommand+0x98>)
 8013ab0:	6818      	ldr	r0, [r3, #0]
 8013ab2:	f107 0110 	add.w	r1, r7, #16
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f7fd ffd9 	bl	8011a70 <xQueueGenericSend>
 8013abe:	6278      	str	r0, [r7, #36]	; 0x24
 8013ac0:	e008      	b.n	8013ad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013ac2:	4b07      	ldr	r3, [pc, #28]	; (8013ae0 <xTimerGenericCommand+0x98>)
 8013ac4:	6818      	ldr	r0, [r3, #0]
 8013ac6:	f107 0110 	add.w	r1, r7, #16
 8013aca:	2300      	movs	r3, #0
 8013acc:	683a      	ldr	r2, [r7, #0]
 8013ace:	f7fe f8cd 	bl	8011c6c <xQueueGenericSendFromISR>
 8013ad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3728      	adds	r7, #40	; 0x28
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	24008eb4 	.word	0x24008eb4

08013ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af02      	add	r7, sp, #8
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aee:	4b22      	ldr	r3, [pc, #136]	; (8013b78 <prvProcessExpiredTimer+0x94>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	3304      	adds	r3, #4
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fd fde5 	bl	80116cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b08:	f003 0304 	and.w	r3, r3, #4
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d022      	beq.n	8013b56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	699a      	ldr	r2, [r3, #24]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	18d1      	adds	r1, r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	683a      	ldr	r2, [r7, #0]
 8013b1c:	6978      	ldr	r0, [r7, #20]
 8013b1e:	f000 f8d1 	bl	8013cc4 <prvInsertTimerInActiveList>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d01f      	beq.n	8013b68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b28:	2300      	movs	r3, #0
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	2100      	movs	r1, #0
 8013b32:	6978      	ldr	r0, [r7, #20]
 8013b34:	f7ff ff88 	bl	8013a48 <xTimerGenericCommand>
 8013b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d113      	bne.n	8013b68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b44:	f383 8811 	msr	BASEPRI, r3
 8013b48:	f3bf 8f6f 	isb	sy
 8013b4c:	f3bf 8f4f 	dsb	sy
 8013b50:	60fb      	str	r3, [r7, #12]
}
 8013b52:	bf00      	nop
 8013b54:	e7fe      	b.n	8013b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b5c:	f023 0301 	bic.w	r3, r3, #1
 8013b60:	b2da      	uxtb	r2, r3
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	6a1b      	ldr	r3, [r3, #32]
 8013b6c:	6978      	ldr	r0, [r7, #20]
 8013b6e:	4798      	blx	r3
}
 8013b70:	bf00      	nop
 8013b72:	3718      	adds	r7, #24
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	24008eac 	.word	0x24008eac

08013b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013b84:	f107 0308 	add.w	r3, r7, #8
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f000 f857 	bl	8013c3c <prvGetNextExpireTime>
 8013b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	4619      	mov	r1, r3
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f000 f803 	bl	8013ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013b9a:	f000 f8d5 	bl	8013d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013b9e:	e7f1      	b.n	8013b84 <prvTimerTask+0x8>

08013ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b084      	sub	sp, #16
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013baa:	f7ff f929 	bl	8012e00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bae:	f107 0308 	add.w	r3, r7, #8
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 f866 	bl	8013c84 <prvSampleTimeNow>
 8013bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d130      	bne.n	8013c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10a      	bne.n	8013bdc <prvProcessTimerOrBlockTask+0x3c>
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d806      	bhi.n	8013bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013bce:	f7ff f925 	bl	8012e1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013bd2:	68f9      	ldr	r1, [r7, #12]
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7ff ff85 	bl	8013ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013bda:	e024      	b.n	8013c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d008      	beq.n	8013bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013be2:	4b13      	ldr	r3, [pc, #76]	; (8013c30 <prvProcessTimerOrBlockTask+0x90>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d101      	bne.n	8013bf0 <prvProcessTimerOrBlockTask+0x50>
 8013bec:	2301      	movs	r3, #1
 8013bee:	e000      	b.n	8013bf2 <prvProcessTimerOrBlockTask+0x52>
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013bf4:	4b0f      	ldr	r3, [pc, #60]	; (8013c34 <prvProcessTimerOrBlockTask+0x94>)
 8013bf6:	6818      	ldr	r0, [r3, #0]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	1ad3      	subs	r3, r2, r3
 8013bfe:	683a      	ldr	r2, [r7, #0]
 8013c00:	4619      	mov	r1, r3
 8013c02:	f7fe fd67 	bl	80126d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013c06:	f7ff f909 	bl	8012e1c <xTaskResumeAll>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d10a      	bne.n	8013c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013c10:	4b09      	ldr	r3, [pc, #36]	; (8013c38 <prvProcessTimerOrBlockTask+0x98>)
 8013c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c16:	601a      	str	r2, [r3, #0]
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	f3bf 8f6f 	isb	sy
}
 8013c20:	e001      	b.n	8013c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013c22:	f7ff f8fb 	bl	8012e1c <xTaskResumeAll>
}
 8013c26:	bf00      	nop
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	24008eb0 	.word	0x24008eb0
 8013c34:	24008eb4 	.word	0x24008eb4
 8013c38:	e000ed04 	.word	0xe000ed04

08013c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013c44:	4b0e      	ldr	r3, [pc, #56]	; (8013c80 <prvGetNextExpireTime+0x44>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d101      	bne.n	8013c52 <prvGetNextExpireTime+0x16>
 8013c4e:	2201      	movs	r2, #1
 8013c50:	e000      	b.n	8013c54 <prvGetNextExpireTime+0x18>
 8013c52:	2200      	movs	r2, #0
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d105      	bne.n	8013c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c60:	4b07      	ldr	r3, [pc, #28]	; (8013c80 <prvGetNextExpireTime+0x44>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	60fb      	str	r3, [r7, #12]
 8013c6a:	e001      	b.n	8013c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013c70:	68fb      	ldr	r3, [r7, #12]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	24008eac 	.word	0x24008eac

08013c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013c8c:	f7ff f964 	bl	8012f58 <xTaskGetTickCount>
 8013c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013c92:	4b0b      	ldr	r3, [pc, #44]	; (8013cc0 <prvSampleTimeNow+0x3c>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d205      	bcs.n	8013ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013c9c:	f000 f936 	bl	8013f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	601a      	str	r2, [r3, #0]
 8013ca6:	e002      	b.n	8013cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013cae:	4a04      	ldr	r2, [pc, #16]	; (8013cc0 <prvSampleTimeNow+0x3c>)
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	24008ebc 	.word	0x24008ebc

08013cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013ce2:	68ba      	ldr	r2, [r7, #8]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d812      	bhi.n	8013d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	1ad2      	subs	r2, r2, r3
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	699b      	ldr	r3, [r3, #24]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d302      	bcc.n	8013cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	617b      	str	r3, [r7, #20]
 8013cfc:	e01b      	b.n	8013d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013cfe:	4b10      	ldr	r3, [pc, #64]	; (8013d40 <prvInsertTimerInActiveList+0x7c>)
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3304      	adds	r3, #4
 8013d06:	4619      	mov	r1, r3
 8013d08:	4610      	mov	r0, r2
 8013d0a:	f7fd fca6 	bl	801165a <vListInsert>
 8013d0e:	e012      	b.n	8013d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d206      	bcs.n	8013d26 <prvInsertTimerInActiveList+0x62>
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d302      	bcc.n	8013d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013d20:	2301      	movs	r3, #1
 8013d22:	617b      	str	r3, [r7, #20]
 8013d24:	e007      	b.n	8013d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d26:	4b07      	ldr	r3, [pc, #28]	; (8013d44 <prvInsertTimerInActiveList+0x80>)
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	3304      	adds	r3, #4
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4610      	mov	r0, r2
 8013d32:	f7fd fc92 	bl	801165a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013d36:	697b      	ldr	r3, [r7, #20]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3718      	adds	r7, #24
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	24008eb0 	.word	0x24008eb0
 8013d44:	24008eac 	.word	0x24008eac

08013d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b08e      	sub	sp, #56	; 0x38
 8013d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d4e:	e0ca      	b.n	8013ee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	da18      	bge.n	8013d88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013d56:	1d3b      	adds	r3, r7, #4
 8013d58:	3304      	adds	r3, #4
 8013d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d10a      	bne.n	8013d78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d66:	f383 8811 	msr	BASEPRI, r3
 8013d6a:	f3bf 8f6f 	isb	sy
 8013d6e:	f3bf 8f4f 	dsb	sy
 8013d72:	61fb      	str	r3, [r7, #28]
}
 8013d74:	bf00      	nop
 8013d76:	e7fe      	b.n	8013d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d7e:	6850      	ldr	r0, [r2, #4]
 8013d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d82:	6892      	ldr	r2, [r2, #8]
 8013d84:	4611      	mov	r1, r2
 8013d86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f2c0 80aa 	blt.w	8013ee4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d96:	695b      	ldr	r3, [r3, #20]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d004      	beq.n	8013da6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9e:	3304      	adds	r3, #4
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fd fc93 	bl	80116cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013da6:	463b      	mov	r3, r7
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff ff6b 	bl	8013c84 <prvSampleTimeNow>
 8013dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b09      	cmp	r3, #9
 8013db4:	f200 8097 	bhi.w	8013ee6 <prvProcessReceivedCommands+0x19e>
 8013db8:	a201      	add	r2, pc, #4	; (adr r2, 8013dc0 <prvProcessReceivedCommands+0x78>)
 8013dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dbe:	bf00      	nop
 8013dc0:	08013de9 	.word	0x08013de9
 8013dc4:	08013de9 	.word	0x08013de9
 8013dc8:	08013de9 	.word	0x08013de9
 8013dcc:	08013e5d 	.word	0x08013e5d
 8013dd0:	08013e71 	.word	0x08013e71
 8013dd4:	08013ebb 	.word	0x08013ebb
 8013dd8:	08013de9 	.word	0x08013de9
 8013ddc:	08013de9 	.word	0x08013de9
 8013de0:	08013e5d 	.word	0x08013e5d
 8013de4:	08013e71 	.word	0x08013e71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dee:	f043 0301 	orr.w	r3, r3, #1
 8013df2:	b2da      	uxtb	r2, r3
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013dfa:	68ba      	ldr	r2, [r7, #8]
 8013dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfe:	699b      	ldr	r3, [r3, #24]
 8013e00:	18d1      	adds	r1, r2, r3
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e08:	f7ff ff5c 	bl	8013cc4 <prvInsertTimerInActiveList>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d069      	beq.n	8013ee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e14:	6a1b      	ldr	r3, [r3, #32]
 8013e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e20:	f003 0304 	and.w	r3, r3, #4
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d05e      	beq.n	8013ee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013e28:	68ba      	ldr	r2, [r7, #8]
 8013e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2c:	699b      	ldr	r3, [r3, #24]
 8013e2e:	441a      	add	r2, r3
 8013e30:	2300      	movs	r3, #0
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	2300      	movs	r3, #0
 8013e36:	2100      	movs	r1, #0
 8013e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e3a:	f7ff fe05 	bl	8013a48 <xTimerGenericCommand>
 8013e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d14f      	bne.n	8013ee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	61bb      	str	r3, [r7, #24]
}
 8013e58:	bf00      	nop
 8013e5a:	e7fe      	b.n	8013e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e62:	f023 0301 	bic.w	r3, r3, #1
 8013e66:	b2da      	uxtb	r2, r3
 8013e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013e6e:	e03a      	b.n	8013ee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e76:	f043 0301 	orr.w	r3, r3, #1
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013e82:	68ba      	ldr	r2, [r7, #8]
 8013e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8a:	699b      	ldr	r3, [r3, #24]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d10a      	bne.n	8013ea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e94:	f383 8811 	msr	BASEPRI, r3
 8013e98:	f3bf 8f6f 	isb	sy
 8013e9c:	f3bf 8f4f 	dsb	sy
 8013ea0:	617b      	str	r3, [r7, #20]
}
 8013ea2:	bf00      	nop
 8013ea4:	e7fe      	b.n	8013ea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea8:	699a      	ldr	r2, [r3, #24]
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	18d1      	adds	r1, r2, r3
 8013eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eb4:	f7ff ff06 	bl	8013cc4 <prvInsertTimerInActiveList>
					break;
 8013eb8:	e015      	b.n	8013ee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d103      	bne.n	8013ed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eca:	f000 fbe1 	bl	8014690 <vPortFree>
 8013ece:	e00a      	b.n	8013ee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ed6:	f023 0301 	bic.w	r3, r3, #1
 8013eda:	b2da      	uxtb	r2, r3
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013ee2:	e000      	b.n	8013ee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013ee6:	4b08      	ldr	r3, [pc, #32]	; (8013f08 <prvProcessReceivedCommands+0x1c0>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	1d39      	adds	r1, r7, #4
 8013eec:	2200      	movs	r2, #0
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fd ffe4 	bl	8011ebc <xQueueReceive>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f47f af2a 	bne.w	8013d50 <prvProcessReceivedCommands+0x8>
	}
}
 8013efc:	bf00      	nop
 8013efe:	bf00      	nop
 8013f00:	3730      	adds	r7, #48	; 0x30
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	24008eb4 	.word	0x24008eb4

08013f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b088      	sub	sp, #32
 8013f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013f12:	e048      	b.n	8013fa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f14:	4b2d      	ldr	r3, [pc, #180]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	68db      	ldr	r3, [r3, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f1e:	4b2b      	ldr	r3, [pc, #172]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fd fbcd 	bl	80116cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	6a1b      	ldr	r3, [r3, #32]
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f40:	f003 0304 	and.w	r3, r3, #4
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d02e      	beq.n	8013fa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	699b      	ldr	r3, [r3, #24]
 8013f4c:	693a      	ldr	r2, [r7, #16]
 8013f4e:	4413      	add	r3, r2
 8013f50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013f52:	68ba      	ldr	r2, [r7, #8]
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d90e      	bls.n	8013f78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	68fa      	ldr	r2, [r7, #12]
 8013f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f66:	4b19      	ldr	r3, [pc, #100]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	3304      	adds	r3, #4
 8013f6e:	4619      	mov	r1, r3
 8013f70:	4610      	mov	r0, r2
 8013f72:	f7fd fb72 	bl	801165a <vListInsert>
 8013f76:	e016      	b.n	8013fa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013f78:	2300      	movs	r3, #0
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	693a      	ldr	r2, [r7, #16]
 8013f80:	2100      	movs	r1, #0
 8013f82:	68f8      	ldr	r0, [r7, #12]
 8013f84:	f7ff fd60 	bl	8013a48 <xTimerGenericCommand>
 8013f88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d10a      	bne.n	8013fa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f94:	f383 8811 	msr	BASEPRI, r3
 8013f98:	f3bf 8f6f 	isb	sy
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	603b      	str	r3, [r7, #0]
}
 8013fa2:	bf00      	nop
 8013fa4:	e7fe      	b.n	8013fa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013fa6:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d1b1      	bne.n	8013f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013fb0:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013fb6:	4b06      	ldr	r3, [pc, #24]	; (8013fd0 <prvSwitchTimerLists+0xc4>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4a04      	ldr	r2, [pc, #16]	; (8013fcc <prvSwitchTimerLists+0xc0>)
 8013fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013fbe:	4a04      	ldr	r2, [pc, #16]	; (8013fd0 <prvSwitchTimerLists+0xc4>)
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	6013      	str	r3, [r2, #0]
}
 8013fc4:	bf00      	nop
 8013fc6:	3718      	adds	r7, #24
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	24008eac 	.word	0x24008eac
 8013fd0:	24008eb0 	.word	0x24008eb0

08013fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b082      	sub	sp, #8
 8013fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013fda:	f000 f96b 	bl	80142b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013fde:	4b15      	ldr	r3, [pc, #84]	; (8014034 <prvCheckForValidListAndQueue+0x60>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d120      	bne.n	8014028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013fe6:	4814      	ldr	r0, [pc, #80]	; (8014038 <prvCheckForValidListAndQueue+0x64>)
 8013fe8:	f7fd fae6 	bl	80115b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013fec:	4813      	ldr	r0, [pc, #76]	; (801403c <prvCheckForValidListAndQueue+0x68>)
 8013fee:	f7fd fae3 	bl	80115b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013ff2:	4b13      	ldr	r3, [pc, #76]	; (8014040 <prvCheckForValidListAndQueue+0x6c>)
 8013ff4:	4a10      	ldr	r2, [pc, #64]	; (8014038 <prvCheckForValidListAndQueue+0x64>)
 8013ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013ff8:	4b12      	ldr	r3, [pc, #72]	; (8014044 <prvCheckForValidListAndQueue+0x70>)
 8013ffa:	4a10      	ldr	r2, [pc, #64]	; (801403c <prvCheckForValidListAndQueue+0x68>)
 8013ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013ffe:	2300      	movs	r3, #0
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	4b11      	ldr	r3, [pc, #68]	; (8014048 <prvCheckForValidListAndQueue+0x74>)
 8014004:	4a11      	ldr	r2, [pc, #68]	; (801404c <prvCheckForValidListAndQueue+0x78>)
 8014006:	2110      	movs	r1, #16
 8014008:	200a      	movs	r0, #10
 801400a:	f7fd fbf1 	bl	80117f0 <xQueueGenericCreateStatic>
 801400e:	4603      	mov	r3, r0
 8014010:	4a08      	ldr	r2, [pc, #32]	; (8014034 <prvCheckForValidListAndQueue+0x60>)
 8014012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014014:	4b07      	ldr	r3, [pc, #28]	; (8014034 <prvCheckForValidListAndQueue+0x60>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d005      	beq.n	8014028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801401c:	4b05      	ldr	r3, [pc, #20]	; (8014034 <prvCheckForValidListAndQueue+0x60>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	490b      	ldr	r1, [pc, #44]	; (8014050 <prvCheckForValidListAndQueue+0x7c>)
 8014022:	4618      	mov	r0, r3
 8014024:	f7fe fb02 	bl	801262c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014028:	f000 f974 	bl	8014314 <vPortExitCritical>
}
 801402c:	bf00      	nop
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	24008eb4 	.word	0x24008eb4
 8014038:	24008e84 	.word	0x24008e84
 801403c:	24008e98 	.word	0x24008e98
 8014040:	24008eac 	.word	0x24008eac
 8014044:	24008eb0 	.word	0x24008eb0
 8014048:	24008f60 	.word	0x24008f60
 801404c:	24008ec0 	.word	0x24008ec0
 8014050:	0801531c 	.word	0x0801531c

08014054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014054:	b480      	push	{r7}
 8014056:	b085      	sub	sp, #20
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	3b04      	subs	r3, #4
 8014064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801406c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	3b04      	subs	r3, #4
 8014072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	f023 0201 	bic.w	r2, r3, #1
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	3b04      	subs	r3, #4
 8014082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014084:	4a0c      	ldr	r2, [pc, #48]	; (80140b8 <pxPortInitialiseStack+0x64>)
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	3b14      	subs	r3, #20
 801408e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	3b04      	subs	r3, #4
 801409a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f06f 0202 	mvn.w	r2, #2
 80140a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	3b20      	subs	r3, #32
 80140a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80140aa:	68fb      	ldr	r3, [r7, #12]
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3714      	adds	r7, #20
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr
 80140b8:	080140bd 	.word	0x080140bd

080140bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80140bc:	b480      	push	{r7}
 80140be:	b085      	sub	sp, #20
 80140c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80140c6:	4b12      	ldr	r3, [pc, #72]	; (8014110 <prvTaskExitError+0x54>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ce:	d00a      	beq.n	80140e6 <prvTaskExitError+0x2a>
	__asm volatile
 80140d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d4:	f383 8811 	msr	BASEPRI, r3
 80140d8:	f3bf 8f6f 	isb	sy
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	60fb      	str	r3, [r7, #12]
}
 80140e2:	bf00      	nop
 80140e4:	e7fe      	b.n	80140e4 <prvTaskExitError+0x28>
	__asm volatile
 80140e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ea:	f383 8811 	msr	BASEPRI, r3
 80140ee:	f3bf 8f6f 	isb	sy
 80140f2:	f3bf 8f4f 	dsb	sy
 80140f6:	60bb      	str	r3, [r7, #8]
}
 80140f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80140fa:	bf00      	nop
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d0fc      	beq.n	80140fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014102:	bf00      	nop
 8014104:	bf00      	nop
 8014106:	3714      	adds	r7, #20
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr
 8014110:	2400803c 	.word	0x2400803c
	...

08014120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014120:	4b07      	ldr	r3, [pc, #28]	; (8014140 <pxCurrentTCBConst2>)
 8014122:	6819      	ldr	r1, [r3, #0]
 8014124:	6808      	ldr	r0, [r1, #0]
 8014126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412a:	f380 8809 	msr	PSP, r0
 801412e:	f3bf 8f6f 	isb	sy
 8014132:	f04f 0000 	mov.w	r0, #0
 8014136:	f380 8811 	msr	BASEPRI, r0
 801413a:	4770      	bx	lr
 801413c:	f3af 8000 	nop.w

08014140 <pxCurrentTCBConst2>:
 8014140:	24008984 	.word	0x24008984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014144:	bf00      	nop
 8014146:	bf00      	nop

08014148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014148:	4808      	ldr	r0, [pc, #32]	; (801416c <prvPortStartFirstTask+0x24>)
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	6800      	ldr	r0, [r0, #0]
 801414e:	f380 8808 	msr	MSP, r0
 8014152:	f04f 0000 	mov.w	r0, #0
 8014156:	f380 8814 	msr	CONTROL, r0
 801415a:	b662      	cpsie	i
 801415c:	b661      	cpsie	f
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	df00      	svc	0
 8014168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801416a:	bf00      	nop
 801416c:	e000ed08 	.word	0xe000ed08

08014170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014176:	4b46      	ldr	r3, [pc, #280]	; (8014290 <xPortStartScheduler+0x120>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4a46      	ldr	r2, [pc, #280]	; (8014294 <xPortStartScheduler+0x124>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d10a      	bne.n	8014196 <xPortStartScheduler+0x26>
	__asm volatile
 8014180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	613b      	str	r3, [r7, #16]
}
 8014192:	bf00      	nop
 8014194:	e7fe      	b.n	8014194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014196:	4b3e      	ldr	r3, [pc, #248]	; (8014290 <xPortStartScheduler+0x120>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4a3f      	ldr	r2, [pc, #252]	; (8014298 <xPortStartScheduler+0x128>)
 801419c:	4293      	cmp	r3, r2
 801419e:	d10a      	bne.n	80141b6 <xPortStartScheduler+0x46>
	__asm volatile
 80141a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	60fb      	str	r3, [r7, #12]
}
 80141b2:	bf00      	nop
 80141b4:	e7fe      	b.n	80141b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80141b6:	4b39      	ldr	r3, [pc, #228]	; (801429c <xPortStartScheduler+0x12c>)
 80141b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	22ff      	movs	r2, #255	; 0xff
 80141c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80141d8:	b2da      	uxtb	r2, r3
 80141da:	4b31      	ldr	r3, [pc, #196]	; (80142a0 <xPortStartScheduler+0x130>)
 80141dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80141de:	4b31      	ldr	r3, [pc, #196]	; (80142a4 <xPortStartScheduler+0x134>)
 80141e0:	2207      	movs	r2, #7
 80141e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141e4:	e009      	b.n	80141fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80141e6:	4b2f      	ldr	r3, [pc, #188]	; (80142a4 <xPortStartScheduler+0x134>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	3b01      	subs	r3, #1
 80141ec:	4a2d      	ldr	r2, [pc, #180]	; (80142a4 <xPortStartScheduler+0x134>)
 80141ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80141f0:	78fb      	ldrb	r3, [r7, #3]
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141fa:	78fb      	ldrb	r3, [r7, #3]
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014202:	2b80      	cmp	r3, #128	; 0x80
 8014204:	d0ef      	beq.n	80141e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014206:	4b27      	ldr	r3, [pc, #156]	; (80142a4 <xPortStartScheduler+0x134>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f1c3 0307 	rsb	r3, r3, #7
 801420e:	2b04      	cmp	r3, #4
 8014210:	d00a      	beq.n	8014228 <xPortStartScheduler+0xb8>
	__asm volatile
 8014212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014216:	f383 8811 	msr	BASEPRI, r3
 801421a:	f3bf 8f6f 	isb	sy
 801421e:	f3bf 8f4f 	dsb	sy
 8014222:	60bb      	str	r3, [r7, #8]
}
 8014224:	bf00      	nop
 8014226:	e7fe      	b.n	8014226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014228:	4b1e      	ldr	r3, [pc, #120]	; (80142a4 <xPortStartScheduler+0x134>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	021b      	lsls	r3, r3, #8
 801422e:	4a1d      	ldr	r2, [pc, #116]	; (80142a4 <xPortStartScheduler+0x134>)
 8014230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014232:	4b1c      	ldr	r3, [pc, #112]	; (80142a4 <xPortStartScheduler+0x134>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801423a:	4a1a      	ldr	r2, [pc, #104]	; (80142a4 <xPortStartScheduler+0x134>)
 801423c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	b2da      	uxtb	r2, r3
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014246:	4b18      	ldr	r3, [pc, #96]	; (80142a8 <xPortStartScheduler+0x138>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4a17      	ldr	r2, [pc, #92]	; (80142a8 <xPortStartScheduler+0x138>)
 801424c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014252:	4b15      	ldr	r3, [pc, #84]	; (80142a8 <xPortStartScheduler+0x138>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4a14      	ldr	r2, [pc, #80]	; (80142a8 <xPortStartScheduler+0x138>)
 8014258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801425c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801425e:	f000 f8dd 	bl	801441c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014262:	4b12      	ldr	r3, [pc, #72]	; (80142ac <xPortStartScheduler+0x13c>)
 8014264:	2200      	movs	r2, #0
 8014266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014268:	f000 f8fc 	bl	8014464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801426c:	4b10      	ldr	r3, [pc, #64]	; (80142b0 <xPortStartScheduler+0x140>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4a0f      	ldr	r2, [pc, #60]	; (80142b0 <xPortStartScheduler+0x140>)
 8014272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014278:	f7ff ff66 	bl	8014148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801427c:	f7fe ff48 	bl	8013110 <vTaskSwitchContext>
	prvTaskExitError();
 8014280:	f7ff ff1c 	bl	80140bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014284:	2300      	movs	r3, #0
}
 8014286:	4618      	mov	r0, r3
 8014288:	3718      	adds	r7, #24
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	e000ed00 	.word	0xe000ed00
 8014294:	410fc271 	.word	0x410fc271
 8014298:	410fc270 	.word	0x410fc270
 801429c:	e000e400 	.word	0xe000e400
 80142a0:	24008fb0 	.word	0x24008fb0
 80142a4:	24008fb4 	.word	0x24008fb4
 80142a8:	e000ed20 	.word	0xe000ed20
 80142ac:	2400803c 	.word	0x2400803c
 80142b0:	e000ef34 	.word	0xe000ef34

080142b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80142b4:	b480      	push	{r7}
 80142b6:	b083      	sub	sp, #12
 80142b8:	af00      	add	r7, sp, #0
	__asm volatile
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	607b      	str	r3, [r7, #4]
}
 80142cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80142ce:	4b0f      	ldr	r3, [pc, #60]	; (801430c <vPortEnterCritical+0x58>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	3301      	adds	r3, #1
 80142d4:	4a0d      	ldr	r2, [pc, #52]	; (801430c <vPortEnterCritical+0x58>)
 80142d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80142d8:	4b0c      	ldr	r3, [pc, #48]	; (801430c <vPortEnterCritical+0x58>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d10f      	bne.n	8014300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80142e0:	4b0b      	ldr	r3, [pc, #44]	; (8014310 <vPortEnterCritical+0x5c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00a      	beq.n	8014300 <vPortEnterCritical+0x4c>
	__asm volatile
 80142ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ee:	f383 8811 	msr	BASEPRI, r3
 80142f2:	f3bf 8f6f 	isb	sy
 80142f6:	f3bf 8f4f 	dsb	sy
 80142fa:	603b      	str	r3, [r7, #0]
}
 80142fc:	bf00      	nop
 80142fe:	e7fe      	b.n	80142fe <vPortEnterCritical+0x4a>
	}
}
 8014300:	bf00      	nop
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr
 801430c:	2400803c 	.word	0x2400803c
 8014310:	e000ed04 	.word	0xe000ed04

08014314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801431a:	4b12      	ldr	r3, [pc, #72]	; (8014364 <vPortExitCritical+0x50>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10a      	bne.n	8014338 <vPortExitCritical+0x24>
	__asm volatile
 8014322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014326:	f383 8811 	msr	BASEPRI, r3
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	f3bf 8f4f 	dsb	sy
 8014332:	607b      	str	r3, [r7, #4]
}
 8014334:	bf00      	nop
 8014336:	e7fe      	b.n	8014336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <vPortExitCritical+0x50>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	3b01      	subs	r3, #1
 801433e:	4a09      	ldr	r2, [pc, #36]	; (8014364 <vPortExitCritical+0x50>)
 8014340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014342:	4b08      	ldr	r3, [pc, #32]	; (8014364 <vPortExitCritical+0x50>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d105      	bne.n	8014356 <vPortExitCritical+0x42>
 801434a:	2300      	movs	r3, #0
 801434c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	f383 8811 	msr	BASEPRI, r3
}
 8014354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014356:	bf00      	nop
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	2400803c 	.word	0x2400803c
	...

08014370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014370:	f3ef 8009 	mrs	r0, PSP
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <pxCurrentTCBConst>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	f01e 0f10 	tst.w	lr, #16
 8014380:	bf08      	it	eq
 8014382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438a:	6010      	str	r0, [r2, #0]
 801438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014394:	f380 8811 	msr	BASEPRI, r0
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f7fe feb6 	bl	8013110 <vTaskSwitchContext>
 80143a4:	f04f 0000 	mov.w	r0, #0
 80143a8:	f380 8811 	msr	BASEPRI, r0
 80143ac:	bc09      	pop	{r0, r3}
 80143ae:	6819      	ldr	r1, [r3, #0]
 80143b0:	6808      	ldr	r0, [r1, #0]
 80143b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b6:	f01e 0f10 	tst.w	lr, #16
 80143ba:	bf08      	it	eq
 80143bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80143c0:	f380 8809 	msr	PSP, r0
 80143c4:	f3bf 8f6f 	isb	sy
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	f3af 8000 	nop.w

080143d0 <pxCurrentTCBConst>:
 80143d0:	24008984 	.word	0x24008984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80143d4:	bf00      	nop
 80143d6:	bf00      	nop

080143d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
	__asm volatile
 80143de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e2:	f383 8811 	msr	BASEPRI, r3
 80143e6:	f3bf 8f6f 	isb	sy
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	607b      	str	r3, [r7, #4]
}
 80143f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80143f2:	f7fe fdd3 	bl	8012f9c <xTaskIncrementTick>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d003      	beq.n	8014404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80143fc:	4b06      	ldr	r3, [pc, #24]	; (8014418 <xPortSysTickHandler+0x40>)
 80143fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	2300      	movs	r3, #0
 8014406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	f383 8811 	msr	BASEPRI, r3
}
 801440e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014410:	bf00      	nop
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	e000ed04 	.word	0xe000ed04

0801441c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801441c:	b480      	push	{r7}
 801441e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014420:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <vPortSetupTimerInterrupt+0x34>)
 8014422:	2200      	movs	r2, #0
 8014424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014426:	4b0b      	ldr	r3, [pc, #44]	; (8014454 <vPortSetupTimerInterrupt+0x38>)
 8014428:	2200      	movs	r2, #0
 801442a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801442c:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <vPortSetupTimerInterrupt+0x3c>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4a0a      	ldr	r2, [pc, #40]	; (801445c <vPortSetupTimerInterrupt+0x40>)
 8014432:	fba2 2303 	umull	r2, r3, r2, r3
 8014436:	099b      	lsrs	r3, r3, #6
 8014438:	4a09      	ldr	r2, [pc, #36]	; (8014460 <vPortSetupTimerInterrupt+0x44>)
 801443a:	3b01      	subs	r3, #1
 801443c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801443e:	4b04      	ldr	r3, [pc, #16]	; (8014450 <vPortSetupTimerInterrupt+0x34>)
 8014440:	2207      	movs	r2, #7
 8014442:	601a      	str	r2, [r3, #0]
}
 8014444:	bf00      	nop
 8014446:	46bd      	mov	sp, r7
 8014448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444c:	4770      	bx	lr
 801444e:	bf00      	nop
 8014450:	e000e010 	.word	0xe000e010
 8014454:	e000e018 	.word	0xe000e018
 8014458:	2400802c 	.word	0x2400802c
 801445c:	10624dd3 	.word	0x10624dd3
 8014460:	e000e014 	.word	0xe000e014

08014464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014474 <vPortEnableVFP+0x10>
 8014468:	6801      	ldr	r1, [r0, #0]
 801446a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801446e:	6001      	str	r1, [r0, #0]
 8014470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014472:	bf00      	nop
 8014474:	e000ed88 	.word	0xe000ed88

08014478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014478:	b480      	push	{r7}
 801447a:	b085      	sub	sp, #20
 801447c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801447e:	f3ef 8305 	mrs	r3, IPSR
 8014482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2b0f      	cmp	r3, #15
 8014488:	d914      	bls.n	80144b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801448a:	4a17      	ldr	r2, [pc, #92]	; (80144e8 <vPortValidateInterruptPriority+0x70>)
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	4413      	add	r3, r2
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014494:	4b15      	ldr	r3, [pc, #84]	; (80144ec <vPortValidateInterruptPriority+0x74>)
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	7afa      	ldrb	r2, [r7, #11]
 801449a:	429a      	cmp	r2, r3
 801449c:	d20a      	bcs.n	80144b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a2:	f383 8811 	msr	BASEPRI, r3
 80144a6:	f3bf 8f6f 	isb	sy
 80144aa:	f3bf 8f4f 	dsb	sy
 80144ae:	607b      	str	r3, [r7, #4]
}
 80144b0:	bf00      	nop
 80144b2:	e7fe      	b.n	80144b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80144b4:	4b0e      	ldr	r3, [pc, #56]	; (80144f0 <vPortValidateInterruptPriority+0x78>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80144bc:	4b0d      	ldr	r3, [pc, #52]	; (80144f4 <vPortValidateInterruptPriority+0x7c>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d90a      	bls.n	80144da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80144c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c8:	f383 8811 	msr	BASEPRI, r3
 80144cc:	f3bf 8f6f 	isb	sy
 80144d0:	f3bf 8f4f 	dsb	sy
 80144d4:	603b      	str	r3, [r7, #0]
}
 80144d6:	bf00      	nop
 80144d8:	e7fe      	b.n	80144d8 <vPortValidateInterruptPriority+0x60>
	}
 80144da:	bf00      	nop
 80144dc:	3714      	adds	r7, #20
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	e000e3f0 	.word	0xe000e3f0
 80144ec:	24008fb0 	.word	0x24008fb0
 80144f0:	e000ed0c 	.word	0xe000ed0c
 80144f4:	24008fb4 	.word	0x24008fb4

080144f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b08a      	sub	sp, #40	; 0x28
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014500:	2300      	movs	r3, #0
 8014502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014504:	f7fe fc7c 	bl	8012e00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014508:	4b5b      	ldr	r3, [pc, #364]	; (8014678 <pvPortMalloc+0x180>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d101      	bne.n	8014514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014510:	f000 f920 	bl	8014754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014514:	4b59      	ldr	r3, [pc, #356]	; (801467c <pvPortMalloc+0x184>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	4013      	ands	r3, r2
 801451c:	2b00      	cmp	r3, #0
 801451e:	f040 8093 	bne.w	8014648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d01d      	beq.n	8014564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014528:	2208      	movs	r2, #8
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4413      	add	r3, r2
 801452e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f003 0307 	and.w	r3, r3, #7
 8014536:	2b00      	cmp	r3, #0
 8014538:	d014      	beq.n	8014564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f023 0307 	bic.w	r3, r3, #7
 8014540:	3308      	adds	r3, #8
 8014542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f003 0307 	and.w	r3, r3, #7
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00a      	beq.n	8014564 <pvPortMalloc+0x6c>
	__asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	617b      	str	r3, [r7, #20]
}
 8014560:	bf00      	nop
 8014562:	e7fe      	b.n	8014562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d06e      	beq.n	8014648 <pvPortMalloc+0x150>
 801456a:	4b45      	ldr	r3, [pc, #276]	; (8014680 <pvPortMalloc+0x188>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	429a      	cmp	r2, r3
 8014572:	d869      	bhi.n	8014648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014574:	4b43      	ldr	r3, [pc, #268]	; (8014684 <pvPortMalloc+0x18c>)
 8014576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014578:	4b42      	ldr	r3, [pc, #264]	; (8014684 <pvPortMalloc+0x18c>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801457e:	e004      	b.n	801458a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	429a      	cmp	r2, r3
 8014592:	d903      	bls.n	801459c <pvPortMalloc+0xa4>
 8014594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d1f1      	bne.n	8014580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801459c:	4b36      	ldr	r3, [pc, #216]	; (8014678 <pvPortMalloc+0x180>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d050      	beq.n	8014648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2208      	movs	r2, #8
 80145ac:	4413      	add	r3, r2
 80145ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80145b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	6a3b      	ldr	r3, [r7, #32]
 80145b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80145b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ba:	685a      	ldr	r2, [r3, #4]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	1ad2      	subs	r2, r2, r3
 80145c0:	2308      	movs	r3, #8
 80145c2:	005b      	lsls	r3, r3, #1
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d91f      	bls.n	8014608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80145c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	4413      	add	r3, r2
 80145ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	f003 0307 	and.w	r3, r3, #7
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00a      	beq.n	80145f0 <pvPortMalloc+0xf8>
	__asm volatile
 80145da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145de:	f383 8811 	msr	BASEPRI, r3
 80145e2:	f3bf 8f6f 	isb	sy
 80145e6:	f3bf 8f4f 	dsb	sy
 80145ea:	613b      	str	r3, [r7, #16]
}
 80145ec:	bf00      	nop
 80145ee:	e7fe      	b.n	80145ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	685a      	ldr	r2, [r3, #4]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	1ad2      	subs	r2, r2, r3
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80145fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014602:	69b8      	ldr	r0, [r7, #24]
 8014604:	f000 f908 	bl	8014818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014608:	4b1d      	ldr	r3, [pc, #116]	; (8014680 <pvPortMalloc+0x188>)
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	1ad3      	subs	r3, r2, r3
 8014612:	4a1b      	ldr	r2, [pc, #108]	; (8014680 <pvPortMalloc+0x188>)
 8014614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014616:	4b1a      	ldr	r3, [pc, #104]	; (8014680 <pvPortMalloc+0x188>)
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	4b1b      	ldr	r3, [pc, #108]	; (8014688 <pvPortMalloc+0x190>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	429a      	cmp	r2, r3
 8014620:	d203      	bcs.n	801462a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014622:	4b17      	ldr	r3, [pc, #92]	; (8014680 <pvPortMalloc+0x188>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4a18      	ldr	r2, [pc, #96]	; (8014688 <pvPortMalloc+0x190>)
 8014628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462c:	685a      	ldr	r2, [r3, #4]
 801462e:	4b13      	ldr	r3, [pc, #76]	; (801467c <pvPortMalloc+0x184>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	431a      	orrs	r2, r3
 8014634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463a:	2200      	movs	r2, #0
 801463c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801463e:	4b13      	ldr	r3, [pc, #76]	; (801468c <pvPortMalloc+0x194>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	3301      	adds	r3, #1
 8014644:	4a11      	ldr	r2, [pc, #68]	; (801468c <pvPortMalloc+0x194>)
 8014646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014648:	f7fe fbe8 	bl	8012e1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	f003 0307 	and.w	r3, r3, #7
 8014652:	2b00      	cmp	r3, #0
 8014654:	d00a      	beq.n	801466c <pvPortMalloc+0x174>
	__asm volatile
 8014656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465a:	f383 8811 	msr	BASEPRI, r3
 801465e:	f3bf 8f6f 	isb	sy
 8014662:	f3bf 8f4f 	dsb	sy
 8014666:	60fb      	str	r3, [r7, #12]
}
 8014668:	bf00      	nop
 801466a:	e7fe      	b.n	801466a <pvPortMalloc+0x172>
	return pvReturn;
 801466c:	69fb      	ldr	r3, [r7, #28]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3728      	adds	r7, #40	; 0x28
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	24026fc0 	.word	0x24026fc0
 801467c:	24026fd4 	.word	0x24026fd4
 8014680:	24026fc4 	.word	0x24026fc4
 8014684:	24026fb8 	.word	0x24026fb8
 8014688:	24026fc8 	.word	0x24026fc8
 801468c:	24026fcc 	.word	0x24026fcc

08014690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b086      	sub	sp, #24
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d04d      	beq.n	801473e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80146a2:	2308      	movs	r3, #8
 80146a4:	425b      	negs	r3, r3
 80146a6:	697a      	ldr	r2, [r7, #20]
 80146a8:	4413      	add	r3, r2
 80146aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	685a      	ldr	r2, [r3, #4]
 80146b4:	4b24      	ldr	r3, [pc, #144]	; (8014748 <vPortFree+0xb8>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4013      	ands	r3, r2
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d10a      	bne.n	80146d4 <vPortFree+0x44>
	__asm volatile
 80146be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	60fb      	str	r3, [r7, #12]
}
 80146d0:	bf00      	nop
 80146d2:	e7fe      	b.n	80146d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d00a      	beq.n	80146f2 <vPortFree+0x62>
	__asm volatile
 80146dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e0:	f383 8811 	msr	BASEPRI, r3
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	60bb      	str	r3, [r7, #8]
}
 80146ee:	bf00      	nop
 80146f0:	e7fe      	b.n	80146f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	685a      	ldr	r2, [r3, #4]
 80146f6:	4b14      	ldr	r3, [pc, #80]	; (8014748 <vPortFree+0xb8>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4013      	ands	r3, r2
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d01e      	beq.n	801473e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d11a      	bne.n	801473e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	4b0e      	ldr	r3, [pc, #56]	; (8014748 <vPortFree+0xb8>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	43db      	mvns	r3, r3
 8014712:	401a      	ands	r2, r3
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014718:	f7fe fb72 	bl	8012e00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	685a      	ldr	r2, [r3, #4]
 8014720:	4b0a      	ldr	r3, [pc, #40]	; (801474c <vPortFree+0xbc>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4413      	add	r3, r2
 8014726:	4a09      	ldr	r2, [pc, #36]	; (801474c <vPortFree+0xbc>)
 8014728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801472a:	6938      	ldr	r0, [r7, #16]
 801472c:	f000 f874 	bl	8014818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014730:	4b07      	ldr	r3, [pc, #28]	; (8014750 <vPortFree+0xc0>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	3301      	adds	r3, #1
 8014736:	4a06      	ldr	r2, [pc, #24]	; (8014750 <vPortFree+0xc0>)
 8014738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801473a:	f7fe fb6f 	bl	8012e1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801473e:	bf00      	nop
 8014740:	3718      	adds	r7, #24
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	24026fd4 	.word	0x24026fd4
 801474c:	24026fc4 	.word	0x24026fc4
 8014750:	24026fd0 	.word	0x24026fd0

08014754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014754:	b480      	push	{r7}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801475a:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 801475e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014760:	4b27      	ldr	r3, [pc, #156]	; (8014800 <prvHeapInit+0xac>)
 8014762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f003 0307 	and.w	r3, r3, #7
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00c      	beq.n	8014788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	3307      	adds	r3, #7
 8014772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f023 0307 	bic.w	r3, r3, #7
 801477a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801477c:	68ba      	ldr	r2, [r7, #8]
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	1ad3      	subs	r3, r2, r3
 8014782:	4a1f      	ldr	r2, [pc, #124]	; (8014800 <prvHeapInit+0xac>)
 8014784:	4413      	add	r3, r2
 8014786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801478c:	4a1d      	ldr	r2, [pc, #116]	; (8014804 <prvHeapInit+0xb0>)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014792:	4b1c      	ldr	r3, [pc, #112]	; (8014804 <prvHeapInit+0xb0>)
 8014794:	2200      	movs	r2, #0
 8014796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	68ba      	ldr	r2, [r7, #8]
 801479c:	4413      	add	r3, r2
 801479e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80147a0:	2208      	movs	r2, #8
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	1a9b      	subs	r3, r3, r2
 80147a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f023 0307 	bic.w	r3, r3, #7
 80147ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	4a15      	ldr	r2, [pc, #84]	; (8014808 <prvHeapInit+0xb4>)
 80147b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80147b6:	4b14      	ldr	r3, [pc, #80]	; (8014808 <prvHeapInit+0xb4>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	2200      	movs	r2, #0
 80147bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80147be:	4b12      	ldr	r3, [pc, #72]	; (8014808 <prvHeapInit+0xb4>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2200      	movs	r2, #0
 80147c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	68fa      	ldr	r2, [r7, #12]
 80147ce:	1ad2      	subs	r2, r2, r3
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80147d4:	4b0c      	ldr	r3, [pc, #48]	; (8014808 <prvHeapInit+0xb4>)
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	4a0a      	ldr	r2, [pc, #40]	; (801480c <prvHeapInit+0xb8>)
 80147e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	4a09      	ldr	r2, [pc, #36]	; (8014810 <prvHeapInit+0xbc>)
 80147ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80147ec:	4b09      	ldr	r3, [pc, #36]	; (8014814 <prvHeapInit+0xc0>)
 80147ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80147f2:	601a      	str	r2, [r3, #0]
}
 80147f4:	bf00      	nop
 80147f6:	3714      	adds	r7, #20
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr
 8014800:	24008fb8 	.word	0x24008fb8
 8014804:	24026fb8 	.word	0x24026fb8
 8014808:	24026fc0 	.word	0x24026fc0
 801480c:	24026fc8 	.word	0x24026fc8
 8014810:	24026fc4 	.word	0x24026fc4
 8014814:	24026fd4 	.word	0x24026fd4

08014818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014818:	b480      	push	{r7}
 801481a:	b085      	sub	sp, #20
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014820:	4b28      	ldr	r3, [pc, #160]	; (80148c4 <prvInsertBlockIntoFreeList+0xac>)
 8014822:	60fb      	str	r3, [r7, #12]
 8014824:	e002      	b.n	801482c <prvInsertBlockIntoFreeList+0x14>
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	60fb      	str	r3, [r7, #12]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	429a      	cmp	r2, r3
 8014834:	d8f7      	bhi.n	8014826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	4413      	add	r3, r2
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	429a      	cmp	r2, r3
 8014846:	d108      	bne.n	801485a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	685a      	ldr	r2, [r3, #4]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	441a      	add	r2, r3
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	441a      	add	r2, r3
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	429a      	cmp	r2, r3
 801486c:	d118      	bne.n	80148a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	4b15      	ldr	r3, [pc, #84]	; (80148c8 <prvInsertBlockIntoFreeList+0xb0>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	429a      	cmp	r2, r3
 8014878:	d00d      	beq.n	8014896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	685a      	ldr	r2, [r3, #4]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	441a      	add	r2, r3
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	601a      	str	r2, [r3, #0]
 8014894:	e008      	b.n	80148a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014896:	4b0c      	ldr	r3, [pc, #48]	; (80148c8 <prvInsertBlockIntoFreeList+0xb0>)
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	e003      	b.n	80148a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681a      	ldr	r2, [r3, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d002      	beq.n	80148b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148b6:	bf00      	nop
 80148b8:	3714      	adds	r7, #20
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr
 80148c2:	bf00      	nop
 80148c4:	24026fb8 	.word	0x24026fb8
 80148c8:	24026fc0 	.word	0x24026fc0

080148cc <__errno>:
 80148cc:	4b01      	ldr	r3, [pc, #4]	; (80148d4 <__errno+0x8>)
 80148ce:	6818      	ldr	r0, [r3, #0]
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	24008040 	.word	0x24008040

080148d8 <__libc_init_array>:
 80148d8:	b570      	push	{r4, r5, r6, lr}
 80148da:	4d0d      	ldr	r5, [pc, #52]	; (8014910 <__libc_init_array+0x38>)
 80148dc:	4c0d      	ldr	r4, [pc, #52]	; (8014914 <__libc_init_array+0x3c>)
 80148de:	1b64      	subs	r4, r4, r5
 80148e0:	10a4      	asrs	r4, r4, #2
 80148e2:	2600      	movs	r6, #0
 80148e4:	42a6      	cmp	r6, r4
 80148e6:	d109      	bne.n	80148fc <__libc_init_array+0x24>
 80148e8:	4d0b      	ldr	r5, [pc, #44]	; (8014918 <__libc_init_array+0x40>)
 80148ea:	4c0c      	ldr	r4, [pc, #48]	; (801491c <__libc_init_array+0x44>)
 80148ec:	f000 fcb8 	bl	8015260 <_init>
 80148f0:	1b64      	subs	r4, r4, r5
 80148f2:	10a4      	asrs	r4, r4, #2
 80148f4:	2600      	movs	r6, #0
 80148f6:	42a6      	cmp	r6, r4
 80148f8:	d105      	bne.n	8014906 <__libc_init_array+0x2e>
 80148fa:	bd70      	pop	{r4, r5, r6, pc}
 80148fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014900:	4798      	blx	r3
 8014902:	3601      	adds	r6, #1
 8014904:	e7ee      	b.n	80148e4 <__libc_init_array+0xc>
 8014906:	f855 3b04 	ldr.w	r3, [r5], #4
 801490a:	4798      	blx	r3
 801490c:	3601      	adds	r6, #1
 801490e:	e7f2      	b.n	80148f6 <__libc_init_array+0x1e>
 8014910:	080154fc 	.word	0x080154fc
 8014914:	080154fc 	.word	0x080154fc
 8014918:	080154fc 	.word	0x080154fc
 801491c:	08015500 	.word	0x08015500

08014920 <__retarget_lock_acquire_recursive>:
 8014920:	4770      	bx	lr

08014922 <__retarget_lock_release_recursive>:
 8014922:	4770      	bx	lr

08014924 <memcpy>:
 8014924:	440a      	add	r2, r1
 8014926:	4291      	cmp	r1, r2
 8014928:	f100 33ff 	add.w	r3, r0, #4294967295
 801492c:	d100      	bne.n	8014930 <memcpy+0xc>
 801492e:	4770      	bx	lr
 8014930:	b510      	push	{r4, lr}
 8014932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014936:	f803 4f01 	strb.w	r4, [r3, #1]!
 801493a:	4291      	cmp	r1, r2
 801493c:	d1f9      	bne.n	8014932 <memcpy+0xe>
 801493e:	bd10      	pop	{r4, pc}

08014940 <memset>:
 8014940:	4402      	add	r2, r0
 8014942:	4603      	mov	r3, r0
 8014944:	4293      	cmp	r3, r2
 8014946:	d100      	bne.n	801494a <memset+0xa>
 8014948:	4770      	bx	lr
 801494a:	f803 1b01 	strb.w	r1, [r3], #1
 801494e:	e7f9      	b.n	8014944 <memset+0x4>

08014950 <_malloc_r>:
 8014950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014952:	1ccd      	adds	r5, r1, #3
 8014954:	f025 0503 	bic.w	r5, r5, #3
 8014958:	3508      	adds	r5, #8
 801495a:	2d0c      	cmp	r5, #12
 801495c:	bf38      	it	cc
 801495e:	250c      	movcc	r5, #12
 8014960:	2d00      	cmp	r5, #0
 8014962:	4606      	mov	r6, r0
 8014964:	db01      	blt.n	801496a <_malloc_r+0x1a>
 8014966:	42a9      	cmp	r1, r5
 8014968:	d903      	bls.n	8014972 <_malloc_r+0x22>
 801496a:	230c      	movs	r3, #12
 801496c:	6033      	str	r3, [r6, #0]
 801496e:	2000      	movs	r0, #0
 8014970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014972:	f000 f8e1 	bl	8014b38 <__malloc_lock>
 8014976:	4921      	ldr	r1, [pc, #132]	; (80149fc <_malloc_r+0xac>)
 8014978:	680a      	ldr	r2, [r1, #0]
 801497a:	4614      	mov	r4, r2
 801497c:	b99c      	cbnz	r4, 80149a6 <_malloc_r+0x56>
 801497e:	4f20      	ldr	r7, [pc, #128]	; (8014a00 <_malloc_r+0xb0>)
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	b923      	cbnz	r3, 801498e <_malloc_r+0x3e>
 8014984:	4621      	mov	r1, r4
 8014986:	4630      	mov	r0, r6
 8014988:	f000 f8a6 	bl	8014ad8 <_sbrk_r>
 801498c:	6038      	str	r0, [r7, #0]
 801498e:	4629      	mov	r1, r5
 8014990:	4630      	mov	r0, r6
 8014992:	f000 f8a1 	bl	8014ad8 <_sbrk_r>
 8014996:	1c43      	adds	r3, r0, #1
 8014998:	d123      	bne.n	80149e2 <_malloc_r+0x92>
 801499a:	230c      	movs	r3, #12
 801499c:	6033      	str	r3, [r6, #0]
 801499e:	4630      	mov	r0, r6
 80149a0:	f000 f8d0 	bl	8014b44 <__malloc_unlock>
 80149a4:	e7e3      	b.n	801496e <_malloc_r+0x1e>
 80149a6:	6823      	ldr	r3, [r4, #0]
 80149a8:	1b5b      	subs	r3, r3, r5
 80149aa:	d417      	bmi.n	80149dc <_malloc_r+0x8c>
 80149ac:	2b0b      	cmp	r3, #11
 80149ae:	d903      	bls.n	80149b8 <_malloc_r+0x68>
 80149b0:	6023      	str	r3, [r4, #0]
 80149b2:	441c      	add	r4, r3
 80149b4:	6025      	str	r5, [r4, #0]
 80149b6:	e004      	b.n	80149c2 <_malloc_r+0x72>
 80149b8:	6863      	ldr	r3, [r4, #4]
 80149ba:	42a2      	cmp	r2, r4
 80149bc:	bf0c      	ite	eq
 80149be:	600b      	streq	r3, [r1, #0]
 80149c0:	6053      	strne	r3, [r2, #4]
 80149c2:	4630      	mov	r0, r6
 80149c4:	f000 f8be 	bl	8014b44 <__malloc_unlock>
 80149c8:	f104 000b 	add.w	r0, r4, #11
 80149cc:	1d23      	adds	r3, r4, #4
 80149ce:	f020 0007 	bic.w	r0, r0, #7
 80149d2:	1ac2      	subs	r2, r0, r3
 80149d4:	d0cc      	beq.n	8014970 <_malloc_r+0x20>
 80149d6:	1a1b      	subs	r3, r3, r0
 80149d8:	50a3      	str	r3, [r4, r2]
 80149da:	e7c9      	b.n	8014970 <_malloc_r+0x20>
 80149dc:	4622      	mov	r2, r4
 80149de:	6864      	ldr	r4, [r4, #4]
 80149e0:	e7cc      	b.n	801497c <_malloc_r+0x2c>
 80149e2:	1cc4      	adds	r4, r0, #3
 80149e4:	f024 0403 	bic.w	r4, r4, #3
 80149e8:	42a0      	cmp	r0, r4
 80149ea:	d0e3      	beq.n	80149b4 <_malloc_r+0x64>
 80149ec:	1a21      	subs	r1, r4, r0
 80149ee:	4630      	mov	r0, r6
 80149f0:	f000 f872 	bl	8014ad8 <_sbrk_r>
 80149f4:	3001      	adds	r0, #1
 80149f6:	d1dd      	bne.n	80149b4 <_malloc_r+0x64>
 80149f8:	e7cf      	b.n	801499a <_malloc_r+0x4a>
 80149fa:	bf00      	nop
 80149fc:	24026fd8 	.word	0x24026fd8
 8014a00:	24026fdc 	.word	0x24026fdc

08014a04 <cleanup_glue>:
 8014a04:	b538      	push	{r3, r4, r5, lr}
 8014a06:	460c      	mov	r4, r1
 8014a08:	6809      	ldr	r1, [r1, #0]
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	b109      	cbz	r1, 8014a12 <cleanup_glue+0xe>
 8014a0e:	f7ff fff9 	bl	8014a04 <cleanup_glue>
 8014a12:	4621      	mov	r1, r4
 8014a14:	4628      	mov	r0, r5
 8014a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a1a:	f000 b899 	b.w	8014b50 <_free_r>
	...

08014a20 <_reclaim_reent>:
 8014a20:	4b2c      	ldr	r3, [pc, #176]	; (8014ad4 <_reclaim_reent+0xb4>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	4283      	cmp	r3, r0
 8014a26:	b570      	push	{r4, r5, r6, lr}
 8014a28:	4604      	mov	r4, r0
 8014a2a:	d051      	beq.n	8014ad0 <_reclaim_reent+0xb0>
 8014a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a2e:	b143      	cbz	r3, 8014a42 <_reclaim_reent+0x22>
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d14a      	bne.n	8014acc <_reclaim_reent+0xac>
 8014a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a38:	6819      	ldr	r1, [r3, #0]
 8014a3a:	b111      	cbz	r1, 8014a42 <_reclaim_reent+0x22>
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	f000 f887 	bl	8014b50 <_free_r>
 8014a42:	6961      	ldr	r1, [r4, #20]
 8014a44:	b111      	cbz	r1, 8014a4c <_reclaim_reent+0x2c>
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 f882 	bl	8014b50 <_free_r>
 8014a4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014a4e:	b111      	cbz	r1, 8014a56 <_reclaim_reent+0x36>
 8014a50:	4620      	mov	r0, r4
 8014a52:	f000 f87d 	bl	8014b50 <_free_r>
 8014a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014a58:	b111      	cbz	r1, 8014a60 <_reclaim_reent+0x40>
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f000 f878 	bl	8014b50 <_free_r>
 8014a60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014a62:	b111      	cbz	r1, 8014a6a <_reclaim_reent+0x4a>
 8014a64:	4620      	mov	r0, r4
 8014a66:	f000 f873 	bl	8014b50 <_free_r>
 8014a6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014a6c:	b111      	cbz	r1, 8014a74 <_reclaim_reent+0x54>
 8014a6e:	4620      	mov	r0, r4
 8014a70:	f000 f86e 	bl	8014b50 <_free_r>
 8014a74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014a76:	b111      	cbz	r1, 8014a7e <_reclaim_reent+0x5e>
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f000 f869 	bl	8014b50 <_free_r>
 8014a7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014a80:	b111      	cbz	r1, 8014a88 <_reclaim_reent+0x68>
 8014a82:	4620      	mov	r0, r4
 8014a84:	f000 f864 	bl	8014b50 <_free_r>
 8014a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a8a:	b111      	cbz	r1, 8014a92 <_reclaim_reent+0x72>
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f000 f85f 	bl	8014b50 <_free_r>
 8014a92:	69a3      	ldr	r3, [r4, #24]
 8014a94:	b1e3      	cbz	r3, 8014ad0 <_reclaim_reent+0xb0>
 8014a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014a98:	4620      	mov	r0, r4
 8014a9a:	4798      	blx	r3
 8014a9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014a9e:	b1b9      	cbz	r1, 8014ad0 <_reclaim_reent+0xb0>
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014aa6:	f7ff bfad 	b.w	8014a04 <cleanup_glue>
 8014aaa:	5949      	ldr	r1, [r1, r5]
 8014aac:	b941      	cbnz	r1, 8014ac0 <_reclaim_reent+0xa0>
 8014aae:	3504      	adds	r5, #4
 8014ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ab2:	2d80      	cmp	r5, #128	; 0x80
 8014ab4:	68d9      	ldr	r1, [r3, #12]
 8014ab6:	d1f8      	bne.n	8014aaa <_reclaim_reent+0x8a>
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f000 f849 	bl	8014b50 <_free_r>
 8014abe:	e7ba      	b.n	8014a36 <_reclaim_reent+0x16>
 8014ac0:	680e      	ldr	r6, [r1, #0]
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	f000 f844 	bl	8014b50 <_free_r>
 8014ac8:	4631      	mov	r1, r6
 8014aca:	e7ef      	b.n	8014aac <_reclaim_reent+0x8c>
 8014acc:	2500      	movs	r5, #0
 8014ace:	e7ef      	b.n	8014ab0 <_reclaim_reent+0x90>
 8014ad0:	bd70      	pop	{r4, r5, r6, pc}
 8014ad2:	bf00      	nop
 8014ad4:	24008040 	.word	0x24008040

08014ad8 <_sbrk_r>:
 8014ad8:	b538      	push	{r3, r4, r5, lr}
 8014ada:	4d06      	ldr	r5, [pc, #24]	; (8014af4 <_sbrk_r+0x1c>)
 8014adc:	2300      	movs	r3, #0
 8014ade:	4604      	mov	r4, r0
 8014ae0:	4608      	mov	r0, r1
 8014ae2:	602b      	str	r3, [r5, #0]
 8014ae4:	f7ee fb58 	bl	8003198 <_sbrk>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	d102      	bne.n	8014af2 <_sbrk_r+0x1a>
 8014aec:	682b      	ldr	r3, [r5, #0]
 8014aee:	b103      	cbz	r3, 8014af2 <_sbrk_r+0x1a>
 8014af0:	6023      	str	r3, [r4, #0]
 8014af2:	bd38      	pop	{r3, r4, r5, pc}
 8014af4:	24027b28 	.word	0x24027b28

08014af8 <siprintf>:
 8014af8:	b40e      	push	{r1, r2, r3}
 8014afa:	b500      	push	{lr}
 8014afc:	b09c      	sub	sp, #112	; 0x70
 8014afe:	ab1d      	add	r3, sp, #116	; 0x74
 8014b00:	9002      	str	r0, [sp, #8]
 8014b02:	9006      	str	r0, [sp, #24]
 8014b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b08:	4809      	ldr	r0, [pc, #36]	; (8014b30 <siprintf+0x38>)
 8014b0a:	9107      	str	r1, [sp, #28]
 8014b0c:	9104      	str	r1, [sp, #16]
 8014b0e:	4909      	ldr	r1, [pc, #36]	; (8014b34 <siprintf+0x3c>)
 8014b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b14:	9105      	str	r1, [sp, #20]
 8014b16:	6800      	ldr	r0, [r0, #0]
 8014b18:	9301      	str	r3, [sp, #4]
 8014b1a:	a902      	add	r1, sp, #8
 8014b1c:	f000 f8c4 	bl	8014ca8 <_svfiprintf_r>
 8014b20:	9b02      	ldr	r3, [sp, #8]
 8014b22:	2200      	movs	r2, #0
 8014b24:	701a      	strb	r2, [r3, #0]
 8014b26:	b01c      	add	sp, #112	; 0x70
 8014b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b2c:	b003      	add	sp, #12
 8014b2e:	4770      	bx	lr
 8014b30:	24008040 	.word	0x24008040
 8014b34:	ffff0208 	.word	0xffff0208

08014b38 <__malloc_lock>:
 8014b38:	4801      	ldr	r0, [pc, #4]	; (8014b40 <__malloc_lock+0x8>)
 8014b3a:	f7ff bef1 	b.w	8014920 <__retarget_lock_acquire_recursive>
 8014b3e:	bf00      	nop
 8014b40:	24027b20 	.word	0x24027b20

08014b44 <__malloc_unlock>:
 8014b44:	4801      	ldr	r0, [pc, #4]	; (8014b4c <__malloc_unlock+0x8>)
 8014b46:	f7ff beec 	b.w	8014922 <__retarget_lock_release_recursive>
 8014b4a:	bf00      	nop
 8014b4c:	24027b20 	.word	0x24027b20

08014b50 <_free_r>:
 8014b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b52:	2900      	cmp	r1, #0
 8014b54:	d048      	beq.n	8014be8 <_free_r+0x98>
 8014b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b5a:	9001      	str	r0, [sp, #4]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8014b62:	bfb8      	it	lt
 8014b64:	18e4      	addlt	r4, r4, r3
 8014b66:	f7ff ffe7 	bl	8014b38 <__malloc_lock>
 8014b6a:	4a20      	ldr	r2, [pc, #128]	; (8014bec <_free_r+0x9c>)
 8014b6c:	9801      	ldr	r0, [sp, #4]
 8014b6e:	6813      	ldr	r3, [r2, #0]
 8014b70:	4615      	mov	r5, r2
 8014b72:	b933      	cbnz	r3, 8014b82 <_free_r+0x32>
 8014b74:	6063      	str	r3, [r4, #4]
 8014b76:	6014      	str	r4, [r2, #0]
 8014b78:	b003      	add	sp, #12
 8014b7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b7e:	f7ff bfe1 	b.w	8014b44 <__malloc_unlock>
 8014b82:	42a3      	cmp	r3, r4
 8014b84:	d90b      	bls.n	8014b9e <_free_r+0x4e>
 8014b86:	6821      	ldr	r1, [r4, #0]
 8014b88:	1862      	adds	r2, r4, r1
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	bf04      	itt	eq
 8014b8e:	681a      	ldreq	r2, [r3, #0]
 8014b90:	685b      	ldreq	r3, [r3, #4]
 8014b92:	6063      	str	r3, [r4, #4]
 8014b94:	bf04      	itt	eq
 8014b96:	1852      	addeq	r2, r2, r1
 8014b98:	6022      	streq	r2, [r4, #0]
 8014b9a:	602c      	str	r4, [r5, #0]
 8014b9c:	e7ec      	b.n	8014b78 <_free_r+0x28>
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	b10b      	cbz	r3, 8014ba8 <_free_r+0x58>
 8014ba4:	42a3      	cmp	r3, r4
 8014ba6:	d9fa      	bls.n	8014b9e <_free_r+0x4e>
 8014ba8:	6811      	ldr	r1, [r2, #0]
 8014baa:	1855      	adds	r5, r2, r1
 8014bac:	42a5      	cmp	r5, r4
 8014bae:	d10b      	bne.n	8014bc8 <_free_r+0x78>
 8014bb0:	6824      	ldr	r4, [r4, #0]
 8014bb2:	4421      	add	r1, r4
 8014bb4:	1854      	adds	r4, r2, r1
 8014bb6:	42a3      	cmp	r3, r4
 8014bb8:	6011      	str	r1, [r2, #0]
 8014bba:	d1dd      	bne.n	8014b78 <_free_r+0x28>
 8014bbc:	681c      	ldr	r4, [r3, #0]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	6053      	str	r3, [r2, #4]
 8014bc2:	4421      	add	r1, r4
 8014bc4:	6011      	str	r1, [r2, #0]
 8014bc6:	e7d7      	b.n	8014b78 <_free_r+0x28>
 8014bc8:	d902      	bls.n	8014bd0 <_free_r+0x80>
 8014bca:	230c      	movs	r3, #12
 8014bcc:	6003      	str	r3, [r0, #0]
 8014bce:	e7d3      	b.n	8014b78 <_free_r+0x28>
 8014bd0:	6825      	ldr	r5, [r4, #0]
 8014bd2:	1961      	adds	r1, r4, r5
 8014bd4:	428b      	cmp	r3, r1
 8014bd6:	bf04      	itt	eq
 8014bd8:	6819      	ldreq	r1, [r3, #0]
 8014bda:	685b      	ldreq	r3, [r3, #4]
 8014bdc:	6063      	str	r3, [r4, #4]
 8014bde:	bf04      	itt	eq
 8014be0:	1949      	addeq	r1, r1, r5
 8014be2:	6021      	streq	r1, [r4, #0]
 8014be4:	6054      	str	r4, [r2, #4]
 8014be6:	e7c7      	b.n	8014b78 <_free_r+0x28>
 8014be8:	b003      	add	sp, #12
 8014bea:	bd30      	pop	{r4, r5, pc}
 8014bec:	24026fd8 	.word	0x24026fd8

08014bf0 <__ssputs_r>:
 8014bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf4:	688e      	ldr	r6, [r1, #8]
 8014bf6:	429e      	cmp	r6, r3
 8014bf8:	4682      	mov	sl, r0
 8014bfa:	460c      	mov	r4, r1
 8014bfc:	4690      	mov	r8, r2
 8014bfe:	461f      	mov	r7, r3
 8014c00:	d838      	bhi.n	8014c74 <__ssputs_r+0x84>
 8014c02:	898a      	ldrh	r2, [r1, #12]
 8014c04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c08:	d032      	beq.n	8014c70 <__ssputs_r+0x80>
 8014c0a:	6825      	ldr	r5, [r4, #0]
 8014c0c:	6909      	ldr	r1, [r1, #16]
 8014c0e:	eba5 0901 	sub.w	r9, r5, r1
 8014c12:	6965      	ldr	r5, [r4, #20]
 8014c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	444b      	add	r3, r9
 8014c20:	106d      	asrs	r5, r5, #1
 8014c22:	429d      	cmp	r5, r3
 8014c24:	bf38      	it	cc
 8014c26:	461d      	movcc	r5, r3
 8014c28:	0553      	lsls	r3, r2, #21
 8014c2a:	d531      	bpl.n	8014c90 <__ssputs_r+0xa0>
 8014c2c:	4629      	mov	r1, r5
 8014c2e:	f7ff fe8f 	bl	8014950 <_malloc_r>
 8014c32:	4606      	mov	r6, r0
 8014c34:	b950      	cbnz	r0, 8014c4c <__ssputs_r+0x5c>
 8014c36:	230c      	movs	r3, #12
 8014c38:	f8ca 3000 	str.w	r3, [sl]
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c42:	81a3      	strh	r3, [r4, #12]
 8014c44:	f04f 30ff 	mov.w	r0, #4294967295
 8014c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c4c:	6921      	ldr	r1, [r4, #16]
 8014c4e:	464a      	mov	r2, r9
 8014c50:	f7ff fe68 	bl	8014924 <memcpy>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c5e:	81a3      	strh	r3, [r4, #12]
 8014c60:	6126      	str	r6, [r4, #16]
 8014c62:	6165      	str	r5, [r4, #20]
 8014c64:	444e      	add	r6, r9
 8014c66:	eba5 0509 	sub.w	r5, r5, r9
 8014c6a:	6026      	str	r6, [r4, #0]
 8014c6c:	60a5      	str	r5, [r4, #8]
 8014c6e:	463e      	mov	r6, r7
 8014c70:	42be      	cmp	r6, r7
 8014c72:	d900      	bls.n	8014c76 <__ssputs_r+0x86>
 8014c74:	463e      	mov	r6, r7
 8014c76:	4632      	mov	r2, r6
 8014c78:	6820      	ldr	r0, [r4, #0]
 8014c7a:	4641      	mov	r1, r8
 8014c7c:	f000 faa8 	bl	80151d0 <memmove>
 8014c80:	68a3      	ldr	r3, [r4, #8]
 8014c82:	6822      	ldr	r2, [r4, #0]
 8014c84:	1b9b      	subs	r3, r3, r6
 8014c86:	4432      	add	r2, r6
 8014c88:	60a3      	str	r3, [r4, #8]
 8014c8a:	6022      	str	r2, [r4, #0]
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e7db      	b.n	8014c48 <__ssputs_r+0x58>
 8014c90:	462a      	mov	r2, r5
 8014c92:	f000 fab7 	bl	8015204 <_realloc_r>
 8014c96:	4606      	mov	r6, r0
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d1e1      	bne.n	8014c60 <__ssputs_r+0x70>
 8014c9c:	6921      	ldr	r1, [r4, #16]
 8014c9e:	4650      	mov	r0, sl
 8014ca0:	f7ff ff56 	bl	8014b50 <_free_r>
 8014ca4:	e7c7      	b.n	8014c36 <__ssputs_r+0x46>
	...

08014ca8 <_svfiprintf_r>:
 8014ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cac:	4698      	mov	r8, r3
 8014cae:	898b      	ldrh	r3, [r1, #12]
 8014cb0:	061b      	lsls	r3, r3, #24
 8014cb2:	b09d      	sub	sp, #116	; 0x74
 8014cb4:	4607      	mov	r7, r0
 8014cb6:	460d      	mov	r5, r1
 8014cb8:	4614      	mov	r4, r2
 8014cba:	d50e      	bpl.n	8014cda <_svfiprintf_r+0x32>
 8014cbc:	690b      	ldr	r3, [r1, #16]
 8014cbe:	b963      	cbnz	r3, 8014cda <_svfiprintf_r+0x32>
 8014cc0:	2140      	movs	r1, #64	; 0x40
 8014cc2:	f7ff fe45 	bl	8014950 <_malloc_r>
 8014cc6:	6028      	str	r0, [r5, #0]
 8014cc8:	6128      	str	r0, [r5, #16]
 8014cca:	b920      	cbnz	r0, 8014cd6 <_svfiprintf_r+0x2e>
 8014ccc:	230c      	movs	r3, #12
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd4:	e0d1      	b.n	8014e7a <_svfiprintf_r+0x1d2>
 8014cd6:	2340      	movs	r3, #64	; 0x40
 8014cd8:	616b      	str	r3, [r5, #20]
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cde:	2320      	movs	r3, #32
 8014ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ce8:	2330      	movs	r3, #48	; 0x30
 8014cea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014e94 <_svfiprintf_r+0x1ec>
 8014cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cf2:	f04f 0901 	mov.w	r9, #1
 8014cf6:	4623      	mov	r3, r4
 8014cf8:	469a      	mov	sl, r3
 8014cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cfe:	b10a      	cbz	r2, 8014d04 <_svfiprintf_r+0x5c>
 8014d00:	2a25      	cmp	r2, #37	; 0x25
 8014d02:	d1f9      	bne.n	8014cf8 <_svfiprintf_r+0x50>
 8014d04:	ebba 0b04 	subs.w	fp, sl, r4
 8014d08:	d00b      	beq.n	8014d22 <_svfiprintf_r+0x7a>
 8014d0a:	465b      	mov	r3, fp
 8014d0c:	4622      	mov	r2, r4
 8014d0e:	4629      	mov	r1, r5
 8014d10:	4638      	mov	r0, r7
 8014d12:	f7ff ff6d 	bl	8014bf0 <__ssputs_r>
 8014d16:	3001      	adds	r0, #1
 8014d18:	f000 80aa 	beq.w	8014e70 <_svfiprintf_r+0x1c8>
 8014d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d1e:	445a      	add	r2, fp
 8014d20:	9209      	str	r2, [sp, #36]	; 0x24
 8014d22:	f89a 3000 	ldrb.w	r3, [sl]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f000 80a2 	beq.w	8014e70 <_svfiprintf_r+0x1c8>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d36:	f10a 0a01 	add.w	sl, sl, #1
 8014d3a:	9304      	str	r3, [sp, #16]
 8014d3c:	9307      	str	r3, [sp, #28]
 8014d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d42:	931a      	str	r3, [sp, #104]	; 0x68
 8014d44:	4654      	mov	r4, sl
 8014d46:	2205      	movs	r2, #5
 8014d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d4c:	4851      	ldr	r0, [pc, #324]	; (8014e94 <_svfiprintf_r+0x1ec>)
 8014d4e:	f7eb fae7 	bl	8000320 <memchr>
 8014d52:	9a04      	ldr	r2, [sp, #16]
 8014d54:	b9d8      	cbnz	r0, 8014d8e <_svfiprintf_r+0xe6>
 8014d56:	06d0      	lsls	r0, r2, #27
 8014d58:	bf44      	itt	mi
 8014d5a:	2320      	movmi	r3, #32
 8014d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d60:	0711      	lsls	r1, r2, #28
 8014d62:	bf44      	itt	mi
 8014d64:	232b      	movmi	r3, #43	; 0x2b
 8014d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d70:	d015      	beq.n	8014d9e <_svfiprintf_r+0xf6>
 8014d72:	9a07      	ldr	r2, [sp, #28]
 8014d74:	4654      	mov	r4, sl
 8014d76:	2000      	movs	r0, #0
 8014d78:	f04f 0c0a 	mov.w	ip, #10
 8014d7c:	4621      	mov	r1, r4
 8014d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d82:	3b30      	subs	r3, #48	; 0x30
 8014d84:	2b09      	cmp	r3, #9
 8014d86:	d94e      	bls.n	8014e26 <_svfiprintf_r+0x17e>
 8014d88:	b1b0      	cbz	r0, 8014db8 <_svfiprintf_r+0x110>
 8014d8a:	9207      	str	r2, [sp, #28]
 8014d8c:	e014      	b.n	8014db8 <_svfiprintf_r+0x110>
 8014d8e:	eba0 0308 	sub.w	r3, r0, r8
 8014d92:	fa09 f303 	lsl.w	r3, r9, r3
 8014d96:	4313      	orrs	r3, r2
 8014d98:	9304      	str	r3, [sp, #16]
 8014d9a:	46a2      	mov	sl, r4
 8014d9c:	e7d2      	b.n	8014d44 <_svfiprintf_r+0x9c>
 8014d9e:	9b03      	ldr	r3, [sp, #12]
 8014da0:	1d19      	adds	r1, r3, #4
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	9103      	str	r1, [sp, #12]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	bfbb      	ittet	lt
 8014daa:	425b      	neglt	r3, r3
 8014dac:	f042 0202 	orrlt.w	r2, r2, #2
 8014db0:	9307      	strge	r3, [sp, #28]
 8014db2:	9307      	strlt	r3, [sp, #28]
 8014db4:	bfb8      	it	lt
 8014db6:	9204      	strlt	r2, [sp, #16]
 8014db8:	7823      	ldrb	r3, [r4, #0]
 8014dba:	2b2e      	cmp	r3, #46	; 0x2e
 8014dbc:	d10c      	bne.n	8014dd8 <_svfiprintf_r+0x130>
 8014dbe:	7863      	ldrb	r3, [r4, #1]
 8014dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8014dc2:	d135      	bne.n	8014e30 <_svfiprintf_r+0x188>
 8014dc4:	9b03      	ldr	r3, [sp, #12]
 8014dc6:	1d1a      	adds	r2, r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	9203      	str	r2, [sp, #12]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	bfb8      	it	lt
 8014dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014dd4:	3402      	adds	r4, #2
 8014dd6:	9305      	str	r3, [sp, #20]
 8014dd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014ea4 <_svfiprintf_r+0x1fc>
 8014ddc:	7821      	ldrb	r1, [r4, #0]
 8014dde:	2203      	movs	r2, #3
 8014de0:	4650      	mov	r0, sl
 8014de2:	f7eb fa9d 	bl	8000320 <memchr>
 8014de6:	b140      	cbz	r0, 8014dfa <_svfiprintf_r+0x152>
 8014de8:	2340      	movs	r3, #64	; 0x40
 8014dea:	eba0 000a 	sub.w	r0, r0, sl
 8014dee:	fa03 f000 	lsl.w	r0, r3, r0
 8014df2:	9b04      	ldr	r3, [sp, #16]
 8014df4:	4303      	orrs	r3, r0
 8014df6:	3401      	adds	r4, #1
 8014df8:	9304      	str	r3, [sp, #16]
 8014dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dfe:	4826      	ldr	r0, [pc, #152]	; (8014e98 <_svfiprintf_r+0x1f0>)
 8014e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e04:	2206      	movs	r2, #6
 8014e06:	f7eb fa8b 	bl	8000320 <memchr>
 8014e0a:	2800      	cmp	r0, #0
 8014e0c:	d038      	beq.n	8014e80 <_svfiprintf_r+0x1d8>
 8014e0e:	4b23      	ldr	r3, [pc, #140]	; (8014e9c <_svfiprintf_r+0x1f4>)
 8014e10:	bb1b      	cbnz	r3, 8014e5a <_svfiprintf_r+0x1b2>
 8014e12:	9b03      	ldr	r3, [sp, #12]
 8014e14:	3307      	adds	r3, #7
 8014e16:	f023 0307 	bic.w	r3, r3, #7
 8014e1a:	3308      	adds	r3, #8
 8014e1c:	9303      	str	r3, [sp, #12]
 8014e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e20:	4433      	add	r3, r6
 8014e22:	9309      	str	r3, [sp, #36]	; 0x24
 8014e24:	e767      	b.n	8014cf6 <_svfiprintf_r+0x4e>
 8014e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	e7a5      	b.n	8014d7c <_svfiprintf_r+0xd4>
 8014e30:	2300      	movs	r3, #0
 8014e32:	3401      	adds	r4, #1
 8014e34:	9305      	str	r3, [sp, #20]
 8014e36:	4619      	mov	r1, r3
 8014e38:	f04f 0c0a 	mov.w	ip, #10
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e42:	3a30      	subs	r2, #48	; 0x30
 8014e44:	2a09      	cmp	r2, #9
 8014e46:	d903      	bls.n	8014e50 <_svfiprintf_r+0x1a8>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d0c5      	beq.n	8014dd8 <_svfiprintf_r+0x130>
 8014e4c:	9105      	str	r1, [sp, #20]
 8014e4e:	e7c3      	b.n	8014dd8 <_svfiprintf_r+0x130>
 8014e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e54:	4604      	mov	r4, r0
 8014e56:	2301      	movs	r3, #1
 8014e58:	e7f0      	b.n	8014e3c <_svfiprintf_r+0x194>
 8014e5a:	ab03      	add	r3, sp, #12
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	462a      	mov	r2, r5
 8014e60:	4b0f      	ldr	r3, [pc, #60]	; (8014ea0 <_svfiprintf_r+0x1f8>)
 8014e62:	a904      	add	r1, sp, #16
 8014e64:	4638      	mov	r0, r7
 8014e66:	f3af 8000 	nop.w
 8014e6a:	1c42      	adds	r2, r0, #1
 8014e6c:	4606      	mov	r6, r0
 8014e6e:	d1d6      	bne.n	8014e1e <_svfiprintf_r+0x176>
 8014e70:	89ab      	ldrh	r3, [r5, #12]
 8014e72:	065b      	lsls	r3, r3, #25
 8014e74:	f53f af2c 	bmi.w	8014cd0 <_svfiprintf_r+0x28>
 8014e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e7a:	b01d      	add	sp, #116	; 0x74
 8014e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e80:	ab03      	add	r3, sp, #12
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	462a      	mov	r2, r5
 8014e86:	4b06      	ldr	r3, [pc, #24]	; (8014ea0 <_svfiprintf_r+0x1f8>)
 8014e88:	a904      	add	r1, sp, #16
 8014e8a:	4638      	mov	r0, r7
 8014e8c:	f000 f87a 	bl	8014f84 <_printf_i>
 8014e90:	e7eb      	b.n	8014e6a <_svfiprintf_r+0x1c2>
 8014e92:	bf00      	nop
 8014e94:	080154c0 	.word	0x080154c0
 8014e98:	080154ca 	.word	0x080154ca
 8014e9c:	00000000 	.word	0x00000000
 8014ea0:	08014bf1 	.word	0x08014bf1
 8014ea4:	080154c6 	.word	0x080154c6

08014ea8 <_printf_common>:
 8014ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eac:	4616      	mov	r6, r2
 8014eae:	4699      	mov	r9, r3
 8014eb0:	688a      	ldr	r2, [r1, #8]
 8014eb2:	690b      	ldr	r3, [r1, #16]
 8014eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014eb8:	4293      	cmp	r3, r2
 8014eba:	bfb8      	it	lt
 8014ebc:	4613      	movlt	r3, r2
 8014ebe:	6033      	str	r3, [r6, #0]
 8014ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ec4:	4607      	mov	r7, r0
 8014ec6:	460c      	mov	r4, r1
 8014ec8:	b10a      	cbz	r2, 8014ece <_printf_common+0x26>
 8014eca:	3301      	adds	r3, #1
 8014ecc:	6033      	str	r3, [r6, #0]
 8014ece:	6823      	ldr	r3, [r4, #0]
 8014ed0:	0699      	lsls	r1, r3, #26
 8014ed2:	bf42      	ittt	mi
 8014ed4:	6833      	ldrmi	r3, [r6, #0]
 8014ed6:	3302      	addmi	r3, #2
 8014ed8:	6033      	strmi	r3, [r6, #0]
 8014eda:	6825      	ldr	r5, [r4, #0]
 8014edc:	f015 0506 	ands.w	r5, r5, #6
 8014ee0:	d106      	bne.n	8014ef0 <_printf_common+0x48>
 8014ee2:	f104 0a19 	add.w	sl, r4, #25
 8014ee6:	68e3      	ldr	r3, [r4, #12]
 8014ee8:	6832      	ldr	r2, [r6, #0]
 8014eea:	1a9b      	subs	r3, r3, r2
 8014eec:	42ab      	cmp	r3, r5
 8014eee:	dc26      	bgt.n	8014f3e <_printf_common+0x96>
 8014ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ef4:	1e13      	subs	r3, r2, #0
 8014ef6:	6822      	ldr	r2, [r4, #0]
 8014ef8:	bf18      	it	ne
 8014efa:	2301      	movne	r3, #1
 8014efc:	0692      	lsls	r2, r2, #26
 8014efe:	d42b      	bmi.n	8014f58 <_printf_common+0xb0>
 8014f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f04:	4649      	mov	r1, r9
 8014f06:	4638      	mov	r0, r7
 8014f08:	47c0      	blx	r8
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	d01e      	beq.n	8014f4c <_printf_common+0xa4>
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	68e5      	ldr	r5, [r4, #12]
 8014f12:	6832      	ldr	r2, [r6, #0]
 8014f14:	f003 0306 	and.w	r3, r3, #6
 8014f18:	2b04      	cmp	r3, #4
 8014f1a:	bf08      	it	eq
 8014f1c:	1aad      	subeq	r5, r5, r2
 8014f1e:	68a3      	ldr	r3, [r4, #8]
 8014f20:	6922      	ldr	r2, [r4, #16]
 8014f22:	bf0c      	ite	eq
 8014f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f28:	2500      	movne	r5, #0
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	bfc4      	itt	gt
 8014f2e:	1a9b      	subgt	r3, r3, r2
 8014f30:	18ed      	addgt	r5, r5, r3
 8014f32:	2600      	movs	r6, #0
 8014f34:	341a      	adds	r4, #26
 8014f36:	42b5      	cmp	r5, r6
 8014f38:	d11a      	bne.n	8014f70 <_printf_common+0xc8>
 8014f3a:	2000      	movs	r0, #0
 8014f3c:	e008      	b.n	8014f50 <_printf_common+0xa8>
 8014f3e:	2301      	movs	r3, #1
 8014f40:	4652      	mov	r2, sl
 8014f42:	4649      	mov	r1, r9
 8014f44:	4638      	mov	r0, r7
 8014f46:	47c0      	blx	r8
 8014f48:	3001      	adds	r0, #1
 8014f4a:	d103      	bne.n	8014f54 <_printf_common+0xac>
 8014f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f54:	3501      	adds	r5, #1
 8014f56:	e7c6      	b.n	8014ee6 <_printf_common+0x3e>
 8014f58:	18e1      	adds	r1, r4, r3
 8014f5a:	1c5a      	adds	r2, r3, #1
 8014f5c:	2030      	movs	r0, #48	; 0x30
 8014f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f62:	4422      	add	r2, r4
 8014f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f6c:	3302      	adds	r3, #2
 8014f6e:	e7c7      	b.n	8014f00 <_printf_common+0x58>
 8014f70:	2301      	movs	r3, #1
 8014f72:	4622      	mov	r2, r4
 8014f74:	4649      	mov	r1, r9
 8014f76:	4638      	mov	r0, r7
 8014f78:	47c0      	blx	r8
 8014f7a:	3001      	adds	r0, #1
 8014f7c:	d0e6      	beq.n	8014f4c <_printf_common+0xa4>
 8014f7e:	3601      	adds	r6, #1
 8014f80:	e7d9      	b.n	8014f36 <_printf_common+0x8e>
	...

08014f84 <_printf_i>:
 8014f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f88:	460c      	mov	r4, r1
 8014f8a:	4691      	mov	r9, r2
 8014f8c:	7e27      	ldrb	r7, [r4, #24]
 8014f8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f90:	2f78      	cmp	r7, #120	; 0x78
 8014f92:	4680      	mov	r8, r0
 8014f94:	469a      	mov	sl, r3
 8014f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f9a:	d807      	bhi.n	8014fac <_printf_i+0x28>
 8014f9c:	2f62      	cmp	r7, #98	; 0x62
 8014f9e:	d80a      	bhi.n	8014fb6 <_printf_i+0x32>
 8014fa0:	2f00      	cmp	r7, #0
 8014fa2:	f000 80d8 	beq.w	8015156 <_printf_i+0x1d2>
 8014fa6:	2f58      	cmp	r7, #88	; 0x58
 8014fa8:	f000 80a3 	beq.w	80150f2 <_printf_i+0x16e>
 8014fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fb4:	e03a      	b.n	801502c <_printf_i+0xa8>
 8014fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fba:	2b15      	cmp	r3, #21
 8014fbc:	d8f6      	bhi.n	8014fac <_printf_i+0x28>
 8014fbe:	a001      	add	r0, pc, #4	; (adr r0, 8014fc4 <_printf_i+0x40>)
 8014fc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014fc4:	0801501d 	.word	0x0801501d
 8014fc8:	08015031 	.word	0x08015031
 8014fcc:	08014fad 	.word	0x08014fad
 8014fd0:	08014fad 	.word	0x08014fad
 8014fd4:	08014fad 	.word	0x08014fad
 8014fd8:	08014fad 	.word	0x08014fad
 8014fdc:	08015031 	.word	0x08015031
 8014fe0:	08014fad 	.word	0x08014fad
 8014fe4:	08014fad 	.word	0x08014fad
 8014fe8:	08014fad 	.word	0x08014fad
 8014fec:	08014fad 	.word	0x08014fad
 8014ff0:	0801513d 	.word	0x0801513d
 8014ff4:	08015061 	.word	0x08015061
 8014ff8:	0801511f 	.word	0x0801511f
 8014ffc:	08014fad 	.word	0x08014fad
 8015000:	08014fad 	.word	0x08014fad
 8015004:	0801515f 	.word	0x0801515f
 8015008:	08014fad 	.word	0x08014fad
 801500c:	08015061 	.word	0x08015061
 8015010:	08014fad 	.word	0x08014fad
 8015014:	08014fad 	.word	0x08014fad
 8015018:	08015127 	.word	0x08015127
 801501c:	680b      	ldr	r3, [r1, #0]
 801501e:	1d1a      	adds	r2, r3, #4
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	600a      	str	r2, [r1, #0]
 8015024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801502c:	2301      	movs	r3, #1
 801502e:	e0a3      	b.n	8015178 <_printf_i+0x1f4>
 8015030:	6825      	ldr	r5, [r4, #0]
 8015032:	6808      	ldr	r0, [r1, #0]
 8015034:	062e      	lsls	r6, r5, #24
 8015036:	f100 0304 	add.w	r3, r0, #4
 801503a:	d50a      	bpl.n	8015052 <_printf_i+0xce>
 801503c:	6805      	ldr	r5, [r0, #0]
 801503e:	600b      	str	r3, [r1, #0]
 8015040:	2d00      	cmp	r5, #0
 8015042:	da03      	bge.n	801504c <_printf_i+0xc8>
 8015044:	232d      	movs	r3, #45	; 0x2d
 8015046:	426d      	negs	r5, r5
 8015048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801504c:	485e      	ldr	r0, [pc, #376]	; (80151c8 <_printf_i+0x244>)
 801504e:	230a      	movs	r3, #10
 8015050:	e019      	b.n	8015086 <_printf_i+0x102>
 8015052:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015056:	6805      	ldr	r5, [r0, #0]
 8015058:	600b      	str	r3, [r1, #0]
 801505a:	bf18      	it	ne
 801505c:	b22d      	sxthne	r5, r5
 801505e:	e7ef      	b.n	8015040 <_printf_i+0xbc>
 8015060:	680b      	ldr	r3, [r1, #0]
 8015062:	6825      	ldr	r5, [r4, #0]
 8015064:	1d18      	adds	r0, r3, #4
 8015066:	6008      	str	r0, [r1, #0]
 8015068:	0628      	lsls	r0, r5, #24
 801506a:	d501      	bpl.n	8015070 <_printf_i+0xec>
 801506c:	681d      	ldr	r5, [r3, #0]
 801506e:	e002      	b.n	8015076 <_printf_i+0xf2>
 8015070:	0669      	lsls	r1, r5, #25
 8015072:	d5fb      	bpl.n	801506c <_printf_i+0xe8>
 8015074:	881d      	ldrh	r5, [r3, #0]
 8015076:	4854      	ldr	r0, [pc, #336]	; (80151c8 <_printf_i+0x244>)
 8015078:	2f6f      	cmp	r7, #111	; 0x6f
 801507a:	bf0c      	ite	eq
 801507c:	2308      	moveq	r3, #8
 801507e:	230a      	movne	r3, #10
 8015080:	2100      	movs	r1, #0
 8015082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015086:	6866      	ldr	r6, [r4, #4]
 8015088:	60a6      	str	r6, [r4, #8]
 801508a:	2e00      	cmp	r6, #0
 801508c:	bfa2      	ittt	ge
 801508e:	6821      	ldrge	r1, [r4, #0]
 8015090:	f021 0104 	bicge.w	r1, r1, #4
 8015094:	6021      	strge	r1, [r4, #0]
 8015096:	b90d      	cbnz	r5, 801509c <_printf_i+0x118>
 8015098:	2e00      	cmp	r6, #0
 801509a:	d04d      	beq.n	8015138 <_printf_i+0x1b4>
 801509c:	4616      	mov	r6, r2
 801509e:	fbb5 f1f3 	udiv	r1, r5, r3
 80150a2:	fb03 5711 	mls	r7, r3, r1, r5
 80150a6:	5dc7      	ldrb	r7, [r0, r7]
 80150a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80150ac:	462f      	mov	r7, r5
 80150ae:	42bb      	cmp	r3, r7
 80150b0:	460d      	mov	r5, r1
 80150b2:	d9f4      	bls.n	801509e <_printf_i+0x11a>
 80150b4:	2b08      	cmp	r3, #8
 80150b6:	d10b      	bne.n	80150d0 <_printf_i+0x14c>
 80150b8:	6823      	ldr	r3, [r4, #0]
 80150ba:	07df      	lsls	r7, r3, #31
 80150bc:	d508      	bpl.n	80150d0 <_printf_i+0x14c>
 80150be:	6923      	ldr	r3, [r4, #16]
 80150c0:	6861      	ldr	r1, [r4, #4]
 80150c2:	4299      	cmp	r1, r3
 80150c4:	bfde      	ittt	le
 80150c6:	2330      	movle	r3, #48	; 0x30
 80150c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80150cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80150d0:	1b92      	subs	r2, r2, r6
 80150d2:	6122      	str	r2, [r4, #16]
 80150d4:	f8cd a000 	str.w	sl, [sp]
 80150d8:	464b      	mov	r3, r9
 80150da:	aa03      	add	r2, sp, #12
 80150dc:	4621      	mov	r1, r4
 80150de:	4640      	mov	r0, r8
 80150e0:	f7ff fee2 	bl	8014ea8 <_printf_common>
 80150e4:	3001      	adds	r0, #1
 80150e6:	d14c      	bne.n	8015182 <_printf_i+0x1fe>
 80150e8:	f04f 30ff 	mov.w	r0, #4294967295
 80150ec:	b004      	add	sp, #16
 80150ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f2:	4835      	ldr	r0, [pc, #212]	; (80151c8 <_printf_i+0x244>)
 80150f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	680e      	ldr	r6, [r1, #0]
 80150fc:	061f      	lsls	r7, r3, #24
 80150fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8015102:	600e      	str	r6, [r1, #0]
 8015104:	d514      	bpl.n	8015130 <_printf_i+0x1ac>
 8015106:	07d9      	lsls	r1, r3, #31
 8015108:	bf44      	itt	mi
 801510a:	f043 0320 	orrmi.w	r3, r3, #32
 801510e:	6023      	strmi	r3, [r4, #0]
 8015110:	b91d      	cbnz	r5, 801511a <_printf_i+0x196>
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	f023 0320 	bic.w	r3, r3, #32
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	2310      	movs	r3, #16
 801511c:	e7b0      	b.n	8015080 <_printf_i+0xfc>
 801511e:	6823      	ldr	r3, [r4, #0]
 8015120:	f043 0320 	orr.w	r3, r3, #32
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	2378      	movs	r3, #120	; 0x78
 8015128:	4828      	ldr	r0, [pc, #160]	; (80151cc <_printf_i+0x248>)
 801512a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801512e:	e7e3      	b.n	80150f8 <_printf_i+0x174>
 8015130:	065e      	lsls	r6, r3, #25
 8015132:	bf48      	it	mi
 8015134:	b2ad      	uxthmi	r5, r5
 8015136:	e7e6      	b.n	8015106 <_printf_i+0x182>
 8015138:	4616      	mov	r6, r2
 801513a:	e7bb      	b.n	80150b4 <_printf_i+0x130>
 801513c:	680b      	ldr	r3, [r1, #0]
 801513e:	6826      	ldr	r6, [r4, #0]
 8015140:	6960      	ldr	r0, [r4, #20]
 8015142:	1d1d      	adds	r5, r3, #4
 8015144:	600d      	str	r5, [r1, #0]
 8015146:	0635      	lsls	r5, r6, #24
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	d501      	bpl.n	8015150 <_printf_i+0x1cc>
 801514c:	6018      	str	r0, [r3, #0]
 801514e:	e002      	b.n	8015156 <_printf_i+0x1d2>
 8015150:	0671      	lsls	r1, r6, #25
 8015152:	d5fb      	bpl.n	801514c <_printf_i+0x1c8>
 8015154:	8018      	strh	r0, [r3, #0]
 8015156:	2300      	movs	r3, #0
 8015158:	6123      	str	r3, [r4, #16]
 801515a:	4616      	mov	r6, r2
 801515c:	e7ba      	b.n	80150d4 <_printf_i+0x150>
 801515e:	680b      	ldr	r3, [r1, #0]
 8015160:	1d1a      	adds	r2, r3, #4
 8015162:	600a      	str	r2, [r1, #0]
 8015164:	681e      	ldr	r6, [r3, #0]
 8015166:	6862      	ldr	r2, [r4, #4]
 8015168:	2100      	movs	r1, #0
 801516a:	4630      	mov	r0, r6
 801516c:	f7eb f8d8 	bl	8000320 <memchr>
 8015170:	b108      	cbz	r0, 8015176 <_printf_i+0x1f2>
 8015172:	1b80      	subs	r0, r0, r6
 8015174:	6060      	str	r0, [r4, #4]
 8015176:	6863      	ldr	r3, [r4, #4]
 8015178:	6123      	str	r3, [r4, #16]
 801517a:	2300      	movs	r3, #0
 801517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015180:	e7a8      	b.n	80150d4 <_printf_i+0x150>
 8015182:	6923      	ldr	r3, [r4, #16]
 8015184:	4632      	mov	r2, r6
 8015186:	4649      	mov	r1, r9
 8015188:	4640      	mov	r0, r8
 801518a:	47d0      	blx	sl
 801518c:	3001      	adds	r0, #1
 801518e:	d0ab      	beq.n	80150e8 <_printf_i+0x164>
 8015190:	6823      	ldr	r3, [r4, #0]
 8015192:	079b      	lsls	r3, r3, #30
 8015194:	d413      	bmi.n	80151be <_printf_i+0x23a>
 8015196:	68e0      	ldr	r0, [r4, #12]
 8015198:	9b03      	ldr	r3, [sp, #12]
 801519a:	4298      	cmp	r0, r3
 801519c:	bfb8      	it	lt
 801519e:	4618      	movlt	r0, r3
 80151a0:	e7a4      	b.n	80150ec <_printf_i+0x168>
 80151a2:	2301      	movs	r3, #1
 80151a4:	4632      	mov	r2, r6
 80151a6:	4649      	mov	r1, r9
 80151a8:	4640      	mov	r0, r8
 80151aa:	47d0      	blx	sl
 80151ac:	3001      	adds	r0, #1
 80151ae:	d09b      	beq.n	80150e8 <_printf_i+0x164>
 80151b0:	3501      	adds	r5, #1
 80151b2:	68e3      	ldr	r3, [r4, #12]
 80151b4:	9903      	ldr	r1, [sp, #12]
 80151b6:	1a5b      	subs	r3, r3, r1
 80151b8:	42ab      	cmp	r3, r5
 80151ba:	dcf2      	bgt.n	80151a2 <_printf_i+0x21e>
 80151bc:	e7eb      	b.n	8015196 <_printf_i+0x212>
 80151be:	2500      	movs	r5, #0
 80151c0:	f104 0619 	add.w	r6, r4, #25
 80151c4:	e7f5      	b.n	80151b2 <_printf_i+0x22e>
 80151c6:	bf00      	nop
 80151c8:	080154d1 	.word	0x080154d1
 80151cc:	080154e2 	.word	0x080154e2

080151d0 <memmove>:
 80151d0:	4288      	cmp	r0, r1
 80151d2:	b510      	push	{r4, lr}
 80151d4:	eb01 0402 	add.w	r4, r1, r2
 80151d8:	d902      	bls.n	80151e0 <memmove+0x10>
 80151da:	4284      	cmp	r4, r0
 80151dc:	4623      	mov	r3, r4
 80151de:	d807      	bhi.n	80151f0 <memmove+0x20>
 80151e0:	1e43      	subs	r3, r0, #1
 80151e2:	42a1      	cmp	r1, r4
 80151e4:	d008      	beq.n	80151f8 <memmove+0x28>
 80151e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151ee:	e7f8      	b.n	80151e2 <memmove+0x12>
 80151f0:	4402      	add	r2, r0
 80151f2:	4601      	mov	r1, r0
 80151f4:	428a      	cmp	r2, r1
 80151f6:	d100      	bne.n	80151fa <memmove+0x2a>
 80151f8:	bd10      	pop	{r4, pc}
 80151fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015202:	e7f7      	b.n	80151f4 <memmove+0x24>

08015204 <_realloc_r>:
 8015204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015206:	4607      	mov	r7, r0
 8015208:	4614      	mov	r4, r2
 801520a:	460e      	mov	r6, r1
 801520c:	b921      	cbnz	r1, 8015218 <_realloc_r+0x14>
 801520e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015212:	4611      	mov	r1, r2
 8015214:	f7ff bb9c 	b.w	8014950 <_malloc_r>
 8015218:	b922      	cbnz	r2, 8015224 <_realloc_r+0x20>
 801521a:	f7ff fc99 	bl	8014b50 <_free_r>
 801521e:	4625      	mov	r5, r4
 8015220:	4628      	mov	r0, r5
 8015222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015224:	f000 f814 	bl	8015250 <_malloc_usable_size_r>
 8015228:	42a0      	cmp	r0, r4
 801522a:	d20f      	bcs.n	801524c <_realloc_r+0x48>
 801522c:	4621      	mov	r1, r4
 801522e:	4638      	mov	r0, r7
 8015230:	f7ff fb8e 	bl	8014950 <_malloc_r>
 8015234:	4605      	mov	r5, r0
 8015236:	2800      	cmp	r0, #0
 8015238:	d0f2      	beq.n	8015220 <_realloc_r+0x1c>
 801523a:	4631      	mov	r1, r6
 801523c:	4622      	mov	r2, r4
 801523e:	f7ff fb71 	bl	8014924 <memcpy>
 8015242:	4631      	mov	r1, r6
 8015244:	4638      	mov	r0, r7
 8015246:	f7ff fc83 	bl	8014b50 <_free_r>
 801524a:	e7e9      	b.n	8015220 <_realloc_r+0x1c>
 801524c:	4635      	mov	r5, r6
 801524e:	e7e7      	b.n	8015220 <_realloc_r+0x1c>

08015250 <_malloc_usable_size_r>:
 8015250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015254:	1f18      	subs	r0, r3, #4
 8015256:	2b00      	cmp	r3, #0
 8015258:	bfbc      	itt	lt
 801525a:	580b      	ldrlt	r3, [r1, r0]
 801525c:	18c0      	addlt	r0, r0, r3
 801525e:	4770      	bx	lr

08015260 <_init>:
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015262:	bf00      	nop
 8015264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015266:	bc08      	pop	{r3}
 8015268:	469e      	mov	lr, r3
 801526a:	4770      	bx	lr

0801526c <_fini>:
 801526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801526e:	bf00      	nop
 8015270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015272:	bc08      	pop	{r3}
 8015274:	469e      	mov	lr, r3
 8015276:	4770      	bx	lr
