
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a08  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08010cd8  08010cd8  00020cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f1c  08010f1c  00020f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f24  08010f24  00020f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010f28  08010f28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000080a0  24000000  08010f2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240080a0  08018fcc  000380a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24008100  0801902c  00038100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053f4  24008160  0801908c  00038160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400d554  0801908c  0003d554  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00038160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000434e0  00000000  00000000  0003818e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006780  00000000  00000000  0007b66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002210  00000000  00000000  00081df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ff8  00000000  00000000  00084000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000886c  00000000  00000000  00085ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c41d  00000000  00000000  0008e864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165e87  00000000  00000000  000bac81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00220b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009534  00000000  00000000  00220b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008160 	.word	0x24008160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010cc0 	.word	0x08010cc0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24008164 	.word	0x24008164
 800030c:	08010cc0 	.word	0x08010cc0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e024      	b.n	8000714 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e01a      	b.n	8000706 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	dd0a      	ble.n	80006ec <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	025a      	lsls	r2, r3, #9
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e009      	b.n	8000700 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	025a      	lsls	r2, r3, #9
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800070c:	dbe0      	blt.n	80006d0 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbd6      	blt.n	80006ca <HalfKBWrite+0x12>
			}

		}

	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000730:	2140      	movs	r1, #64	; 0x40
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <main+0x58>)
 8000734:	f7ff ffc0 	bl	80006b8 <HalfKBWrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 ff48 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f82c 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f9d6 	bl	8000af0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000744:	f000 f8a2 	bl	800088c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f91a 	bl	8000980 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 800074c:	f000 f96c 	bl	8000a28 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000750:	f000 f8e8 	bl	8000924 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000754:	f009 f80a 	bl	800976c <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 8000758:	f000 f95e 	bl	8000a18 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <main+0x5c>)
 8000762:	f001 fe7d 	bl	8002460 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000766:	f00c f98b 	bl	800ca80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDCard */
  SDCardHandle = osThreadNew(StartSDCardTask, NULL, &SDCard_attributes);
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <main+0x60>)
 800076c:	2100      	movs	r1, #0
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <main+0x64>)
 8000770:	f00c fa07 	bl	800cb82 <osThreadNew>
 8000774:	4603      	mov	r3, r0
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <main+0x68>)
 8000778:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800077a:	f00c f9c7 	bl	800cb0c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  char str[80]={0};
  //  HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
    Error_Handler();
 800077e:	f000 fba7 	bl	8000ed0 <Error_Handler>
  while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x56>
 8000784:	24000028 	.word	0x24000028
 8000788:	58020400 	.word	0x58020400
 800078c:	08010d78 	.word	0x08010d78
 8000790:	08000e55 	.word	0x08000e55
 8000794:	2400cc34 	.word	0x2400cc34

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09c      	sub	sp, #112	; 0x70
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	224c      	movs	r2, #76	; 0x4c
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00f fdfa 	bl	80103a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2220      	movs	r2, #32
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00f fdf4 	bl	80103a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f002 f911 	bl	80029e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <SystemClock_Config+0xec>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <SystemClock_Config+0xec>)
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <SystemClock_Config+0xec>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007da:	bf00      	nop
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xec>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e8:	d1f8      	bne.n	80007dc <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <SystemClock_Config+0xf0>)
 80007ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ee:	f023 0303 	bic.w	r3, r3, #3
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <SystemClock_Config+0xf0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007fa:	2321      	movs	r3, #33	; 0x21
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007fe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000814:	f240 1313 	movw	r3, #275	; 0x113
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000826:	2304      	movs	r3, #4
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082a:	2300      	movs	r3, #0
 800082c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f90c 	bl	8002a54 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000842:	f000 fb45 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	233f      	movs	r3, #63	; 0x3f
 8000848:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000852:	2308      	movs	r3, #8
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2103      	movs	r1, #3
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fc9d 	bl	80031ac <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000878:	f000 fb2a 	bl	8000ed0 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3770      	adds	r7, #112	; 0x70
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58024800 	.word	0x58024800
 8000888:	58024400 	.word	0x58024400

0800088c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ETH_Init+0x80>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_ETH_Init+0x84>)
 8000894:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ETH_Init+0x88>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ETH_Init+0x88>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ETH_Init+0x88>)
 80008a4:	22e1      	movs	r2, #225	; 0xe1
 80008a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ETH_Init+0x88>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ETH_Init+0x88>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ETH_Init+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ETH_Init+0x80>)
 80008bc:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_ETH_Init+0x88>)
 80008be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ETH_Init+0x80>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ETH_Init+0x80>)
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_ETH_Init+0x8c>)
 80008ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_ETH_Init+0x80>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_ETH_Init+0x90>)
 80008d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_ETH_Init+0x80>)
 80008d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_ETH_Init+0x80>)
 80008dc:	f000 ffea 	bl	80018b4 <HAL_ETH_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 faf3 	bl	8000ed0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_ETH_Init+0x94>)
 80008f0:	f00f fd56 	bl	80103a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_ETH_Init+0x94>)
 80008f6:	2221      	movs	r2, #33	; 0x21
 80008f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_ETH_Init+0x94>)
 80008fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000900:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_ETH_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2400cf8c 	.word	0x2400cf8c
 8000910:	40028000 	.word	0x40028000
 8000914:	24008180 	.word	0x24008180
 8000918:	24008100 	.word	0x24008100
 800091c:	240080a0 	.word	0x240080a0
 8000920:	2400d014 	.word	0x2400d014

08000924 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_SDMMC1_SD_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 8000936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 800093e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000942:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SDMMC1_SD_Init+0x50>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_SDMMC1_SD_Init+0x58>)
 8000952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <MX_SDMMC1_SD_Init+0x58>)
 8000956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_SDMMC1_SD_Init+0x58>)
 800095e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <MX_SDMMC1_SD_Init+0x58>)
 8000962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000966:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2400cc38 	.word	0x2400cc38
 8000978:	52007000 	.word	0x52007000
 800097c:	58024400 	.word	0x58024400

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f006 ff9f 	bl	800790c <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 fa7c 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f008 f832 	bl	8008a44 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 fa73 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f008 f867 	bl	8008ac0 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 fa6a 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f007 ffe8 	bl	80089d2 <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 fa62 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2400cb9c 	.word	0x2400cb9c
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_MDMA_Init+0xbc>)
 8000a30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <MX_MDMA_Init+0xbc>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_MDMA_Init+0xbc>)
 8000a40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a4e:	4a27      	ldr	r2, [pc, #156]	; (8000aec <MX_MDMA_Init+0xc4>)
 8000a50:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a54:	221d      	movs	r2, #29
 8000a56:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a72:	2208      	movs	r2, #8
 8000a74:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000aaa:	f001 fd0c 	bl	80024c6 <HAL_MDMA_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000ab4:	f000 fa0c 	bl	8000ed0 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <MX_MDMA_Init+0xc0>)
 8000abe:	f001 fd4e 	bl	800255e <HAL_MDMA_ConfigPostRequestMask>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000ac8:	f000 fa02 	bl	8000ed0 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2105      	movs	r1, #5
 8000ad0:	207a      	movs	r0, #122	; 0x7a
 8000ad2:	f000 fec7 	bl	8001864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ad6:	207a      	movs	r0, #122	; 0x7a
 8000ad8:	f000 fede 	bl	8001898 <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	2400cf20 	.word	0x2400cf20
 8000aec:	52000040 	.word	0x52000040

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b71      	ldr	r3, [pc, #452]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a6f      	ldr	r2, [pc, #444]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b24:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a68      	ldr	r2, [pc, #416]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a60      	ldr	r2, [pc, #384]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a59      	ldr	r2, [pc, #356]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b56      	ldr	r3, [pc, #344]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a51      	ldr	r2, [pc, #324]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4b47      	ldr	r3, [pc, #284]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bde:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x1e0>)
 8000be0:	f001 fc3e 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	483a      	ldr	r0, [pc, #232]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000bec:	f001 fc38 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000bf6:	f001 fc33 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4833      	ldr	r0, [pc, #204]	; (8000cdc <MX_GPIO_Init+0x1ec>)
 8000c10:	f001 fa66 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c14:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <MX_GPIO_Init+0x1e0>)
 8000c2e:	f001 fa57 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4822      	ldr	r0, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000c4c:	f001 fa48 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0x1f0>)
 8000c66:	f001 fa3b 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <MX_GPIO_Init+0x1f4>)
 8000c80:	f001 fa2e 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <MX_GPIO_Init+0x1f4>)
 8000ca2:	f001 fa1d 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000cbe:	f001 fa0f 	bl	80020e0 <HAL_GPIO_Init>

}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58020c00 	.word	0x58020c00
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58021800 	.word	0x58021800
 8000ce4:	58020000 	.word	0x58020000

08000ce8 <WriteTime>:

/* USER CODE BEGIN 4 */

void WriteTime()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8000cec:	2233      	movs	r2, #51	; 0x33
 8000cee:	4918      	ldr	r1, [pc, #96]	; (8000d50 <WriteTime+0x68>)
 8000cf0:	4818      	ldr	r0, [pc, #96]	; (8000d54 <WriteTime+0x6c>)
 8000cf2:	f00a fd91 	bl	800b818 <f_open>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <WriteTime+0x70>)
 8000cfc:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <WriteTime+0x70>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <WriteTime+0x22>
	{
		Error_Handler();
 8000d06:	f000 f8e3 	bl	8000ed0 <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",(uint)HAL_GetTick());
 8000d0a:	f000 fcaf 	bl	800166c <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	4912      	ldr	r1, [pc, #72]	; (8000d5c <WriteTime+0x74>)
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <WriteTime+0x78>)
 8000d16:	f00f fc1f 	bl	8010558 <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <WriteTime+0x78>)
 8000d1c:	f7ff faf8 	bl	8000310 <strlen>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <WriteTime+0x7c>)
 8000d24:	490e      	ldr	r1, [pc, #56]	; (8000d60 <WriteTime+0x78>)
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <WriteTime+0x6c>)
 8000d28:	f00a ff3b 	bl	800bba2 <f_write>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <WriteTime+0x70>)
 8000d32:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <WriteTime+0x7c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <WriteTime+0x62>
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <WriteTime+0x70>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <WriteTime+0x6c>)
 8000d46:	f00b f959 	bl	800bffc <f_close>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08010cec 	.word	0x08010cec
 8000d54:	2400d0a0 	.word	0x2400d0a0
 8000d58:	2400cf1c 	.word	0x2400cf1c
 8000d5c:	08010cf4 	.word	0x08010cf4
 8000d60:	24000000 	.word	0x24000000
 8000d64:	2400cc2c 	.word	0x2400cc2c

08000d68 <FS_MOUNT>:



static void FS_MOUNT(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <FS_MOUNT+0x5c>)
 8000d72:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <FS_MOUNT+0x60>)
 8000d74:	f00a fcec 	bl	800b750 <f_mount>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <FS_MOUNT+0x64>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <FS_MOUNT+0x64>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d119      	bne.n	8000dbc <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <FS_MOUNT+0x68>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d115      	bne.n	8000dbc <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <FS_MOUNT+0x6c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2107      	movs	r1, #7
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <FS_MOUNT+0x5c>)
 8000d9e:	f00b f95d 	bl	800c05c <f_mkfs>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <FS_MOUNT+0x64>)
 8000da8:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <FS_MOUNT+0x64>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <FS_MOUNT+0x4e>
			{
				Error_Handler();
 8000db2:	f000 f88d 	bl	8000ed0 <Error_Handler>
			}
		isFsCreated = 1;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <FS_MOUNT+0x68>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2400d09c 	.word	0x2400d09c
 8000dc8:	2400d2d0 	.word	0x2400d2d0
 8000dcc:	2400cf1c 	.word	0x2400cf1c
 8000dd0:	2400817c 	.word	0x2400817c
 8000dd4:	2400ccb8 	.word	0x2400ccb8

08000dd8 <FS_SPAM>:

static void FS_SPAM(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 8000dde:	2233      	movs	r2, #51	; 0x33
 8000de0:	4917      	ldr	r1, [pc, #92]	; (8000e40 <FS_SPAM+0x68>)
 8000de2:	4818      	ldr	r0, [pc, #96]	; (8000e44 <FS_SPAM+0x6c>)
 8000de4:	f00a fd18 	bl	800b818 <f_open>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <FS_SPAM+0x70>)
 8000dee:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <FS_SPAM+0x70>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d11e      	bne.n	8000e36 <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e00d      	b.n	8000e1a <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <FS_SPAM+0x74>)
 8000e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e04:	4912      	ldr	r1, [pc, #72]	; (8000e50 <FS_SPAM+0x78>)
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <FS_SPAM+0x6c>)
 8000e08:	f00a fecb 	bl	800bba2 <f_write>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <FS_SPAM+0x70>)
 8000e12:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b63      	cmp	r3, #99	; 0x63
 8000e1e:	ddee      	ble.n	8000dfe <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <FS_SPAM+0x74>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <FS_SPAM+0x5e>
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <FS_SPAM+0x70>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <FS_SPAM+0x6c>)
 8000e32:	f00b f8e3 	bl	800bffc <f_close>
		}
	}
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08010d10 	.word	0x08010d10
 8000e44:	2400d0a0 	.word	0x2400d0a0
 8000e48:	2400cf1c 	.word	0x2400cf1c
 8000e4c:	2400cc2c 	.word	0x2400cc2c
 8000e50:	24000028 	.word	0x24000028

08000e54 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int counter = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
	FS_MOUNT();
 8000e60:	f7ff ff82 	bl	8000d68 <FS_MOUNT>
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <StartSDCardTask+0x50>)
 8000e70:	f001 faf6 	bl	8002460 <HAL_GPIO_WritePin>
	WriteTime();
 8000e74:	f7ff ff38 	bl	8000ce8 <WriteTime>
	FS_SPAM();
 8000e78:	f7ff ffae 	bl	8000dd8 <FS_SPAM>
	WriteTime();
 8000e7c:	f7ff ff34 	bl	8000ce8 <WriteTime>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <StartSDCardTask+0x50>)
 8000e86:	f001 faeb 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <StartSDCardTask+0x54>)
 8000e90:	f001 faff 	bl	8002492 <HAL_GPIO_TogglePin>
	if(counter>=1){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dde4      	ble.n	8000e64 <StartSDCardTask+0x10>
		osDelay(10000);
 8000e9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e9e:	f00b ff02 	bl	800cca6 <osDelay>
	counter++;
 8000ea2:	e7df      	b.n	8000e64 <StartSDCardTask+0x10>
 8000ea4:	58021000 	.word	0x58021000
 8000ea8:	58020400 	.word	0x58020400

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 fbc1 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <Error_Handler+0x2c>)
 8000eda:	f001 fac1 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <Error_Handler+0x30>)
 8000ee4:	f001 fabc 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <Error_Handler+0x2c>)
 8000ef0:	f001 fab6 	bl	8002460 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x28>
 8000efa:	bf00      	nop
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58021000 	.word	0x58021000

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x38>)
 8000f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_MspInit+0x38>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x38>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f06f 0001 	mvn.w	r0, #1
 8000f30:	f000 fc98 	bl	8001864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a59      	ldr	r2, [pc, #356]	; (80010c4 <HAL_ETH_MspInit+0x184>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 80ab 	bne.w	80010ba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f64:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f92:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fa0:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001036:	2332      	movs	r3, #50	; 0x32
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001046:	230b      	movs	r3, #11
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <HAL_ETH_MspInit+0x18c>)
 8001052:	f001 f845 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001056:	2386      	movs	r3, #134	; 0x86
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <HAL_ETH_MspInit+0x190>)
 8001072:	f001 f835 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <HAL_ETH_MspInit+0x194>)
 8001094:	f001 f824 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <HAL_ETH_MspInit+0x198>)
 80010b6:	f001 f813 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40028000 	.word	0x40028000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020800 	.word	0x58020800
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58020400 	.word	0x58020400
 80010d8:	58021800 	.word	0x58021800

080010dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0b8      	sub	sp, #224	; 0xe0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	22b4      	movs	r2, #180	; 0xb4
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00f f94f 	bl	80103a0 <memset>
  if(hsd->Instance==SDMMC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a43      	ldr	r2, [pc, #268]	; (8001214 <HAL_SD_MspInit+0x138>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d17f      	bne.n	800120c <HAL_SD_MspInit+0x130>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8001116:	2319      	movs	r3, #25
 8001118:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001136:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fc03 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8001148:	f7ff fec2 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800114e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_SD_MspInit+0x13c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800115e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <HAL_SD_MspInit+0x13c>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_SD_MspInit+0x13c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_SD_MspInit+0x13c>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011c0:	230c      	movs	r3, #12
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <HAL_SD_MspInit+0x140>)
 80011ce:	f000 ff87 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d2:	2304      	movs	r3, #4
 80011d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f4:	4619      	mov	r1, r3
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <HAL_SD_MspInit+0x144>)
 80011f8:	f000 ff72 	bl	80020e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2105      	movs	r1, #5
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f000 fb2f 	bl	8001864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001206:	2031      	movs	r0, #49	; 0x31
 8001208:	f000 fb46 	bl	8001898 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	37e0      	adds	r7, #224	; 0xe0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	52007000 	.word	0x52007000
 8001218:	58024400 	.word	0x58024400
 800121c:	58020800 	.word	0x58020800
 8001220:	58020c00 	.word	0x58020c00

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0b6      	sub	sp, #216	; 0xd8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	22b4      	movs	r2, #180	; 0xb4
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f00f f8ab 	bl	80103a0 <memset>
  if(huart->Instance==USART3)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_UART_MspInit+0xc0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d142      	bne.n	80012da <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fb70 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800126e:	f7ff fe2f 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 800127a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 8001284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0xc4>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80012ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c8:	2307      	movs	r3, #7
 80012ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0xc8>)
 80012d6:	f000 ff03 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	37d8      	adds	r7, #216	; 0xd8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004800 	.word	0x40004800
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020c00 	.word	0x58020c00

080012f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d844      	bhi.n	8001388 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80012fe:	2200      	movs	r2, #0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	2019      	movs	r0, #25
 8001304:	f000 faae 	bl	8001864 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001308:	2019      	movs	r0, #25
 800130a:	f000 fac5 	bl	8001898 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <HAL_InitTick+0xb0>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_InitTick+0xb4>)
 8001316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800131a:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <HAL_InitTick+0xb4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_InitTick+0xb4>)
 8001326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001332:	f107 020c 	add.w	r2, r7, #12
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fac1 	bl	80038c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001342:	f002 faa9 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <HAL_InitTick+0xb8>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	3b01      	subs	r3, #1
 8001358:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_InitTick+0xbc>)
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_InitTick+0xc0>)
 800135e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0xbc>)
 8001362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_InitTick+0xbc>)
 800136a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_InitTick+0xbc>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_InitTick+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <HAL_InitTick+0xbc>)
 800137c:	f005 ffd2 	bl	8007324 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d107      	bne.n	8001396 <HAL_InitTick+0xa6>
 8001386:	e001      	b.n	800138c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e005      	b.n	8001398 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <HAL_InitTick+0xbc>)
 800138e:	f006 f82b 	bl	80073e8 <HAL_TIM_Base_Start_IT>
 8001392:	4603      	mov	r3, r0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3738      	adds	r7, #56	; 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24008030 	.word	0x24008030
 80013a4:	58024400 	.word	0x58024400
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	2400d048 	.word	0x2400d048
 80013b0:	40010000 	.word	0x40010000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM1_UP_IRQHandler+0x10>)
 80013e6:	f006 f885 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2400d048 	.word	0x2400d048

080013f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <SDMMC1_IRQHandler+0x10>)
 80013fa:	f004 fda1 	bl	8005f40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2400cc38 	.word	0x2400cc38

08001408 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <MDMA_IRQHandler+0x10>)
 800140e:	f001 f8f9 	bl	8002604 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2400cf20 	.word	0x2400cf20

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f00e ff6e 	bl	801032c <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	24050000 	.word	0x24050000
 800147c:	00000400 	.word	0x00000400
 8001480:	24008188 	.word	0x24008188
 8001484:	2400d558 	.word	0x2400d558

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <SystemInit+0xd0>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <SystemInit+0xd0>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <SystemInit+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d807      	bhi.n	80014b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <SystemInit+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <SystemInit+0xd4>)
 80014b2:	f043 0307 	orr.w	r3, r3, #7
 80014b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <SystemInit+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a28      	ldr	r2, [pc, #160]	; (8001560 <SystemInit+0xd8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SystemInit+0xd8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <SystemInit+0xd8>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4924      	ldr	r1, [pc, #144]	; (8001560 <SystemInit+0xd8>)
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <SystemInit+0xdc>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <SystemInit+0xd4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <SystemInit+0xd4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 030f 	bic.w	r3, r3, #15
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <SystemInit+0xd4>)
 80014ec:	f043 0307 	orr.w	r3, r3, #7
 80014f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <SystemInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <SystemInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <SystemInit+0xd8>)
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <SystemInit+0xe0>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <SystemInit+0xd8>)
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <SystemInit+0xe4>)
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <SystemInit+0xd8>)
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <SystemInit+0xe8>)
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <SystemInit+0xd8>)
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <SystemInit+0xe8>)
 8001520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <SystemInit+0xd8>)
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <SystemInit+0xe8>)
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <SystemInit+0xd8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <SystemInit+0xd8>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <SystemInit+0xd8>)
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <SystemInit+0xec>)
 8001548:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800154c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	52002000 	.word	0x52002000
 8001560:	58024400 	.word	0x58024400
 8001564:	eaf6ed7f 	.word	0xeaf6ed7f
 8001568:	02020200 	.word	0x02020200
 800156c:	01ff0000 	.word	0x01ff0000
 8001570:	01010280 	.word	0x01010280
 8001574:	52004000 	.word	0x52004000

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f7ff ff84 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f00e fec7 	bl	8010338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f8bf 	bl	800072c <main>
  bx  lr
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b8:	240080a0 	.word	0x240080a0
  ldr r2, =_sidata
 80015bc:	08010f2c 	.word	0x08010f2c
  ldr r2, =_sbss
 80015c0:	24008160 	.word	0x24008160
  ldr r4, =_ebss
 80015c4:	2400d554 	.word	0x2400d554

080015c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC3_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 f93b 	bl	800184e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d8:	f001 ff9e 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	4913      	ldr	r1, [pc, #76]	; (8001638 <HAL_Init+0x6c>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_Init+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_Init+0x6c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_Init+0x70>)
 800160e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_Init+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001616:	200f      	movs	r0, #15
 8001618:	f7ff fe6a 	bl	80012f0 <HAL_InitTick>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e002      	b.n	800162c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001626:	f7ff fc6d 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58024400 	.word	0x58024400
 8001638:	08010d9c 	.word	0x08010d9c
 800163c:	2400802c 	.word	0x2400802c
 8001640:	24008028 	.word	0x24008028

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	24008034 	.word	0x24008034
 8001668:	2400d094 	.word	0x2400d094

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2400d094 	.word	0x2400d094

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24008034 	.word	0x24008034

080016cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016dc:	4904      	ldr	r1, [pc, #16]	; (80016f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58000400 	.word	0x58000400

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	05fa0000 	.word	0x05fa0000

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff4c 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001872:	f7ff ff63 	bl	800173c <__NVIC_GetPriorityGrouping>
 8001876:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	6978      	ldr	r0, [r7, #20]
 800187e:	f7ff ffb3 	bl	80017e8 <NVIC_EncodePriority>
 8001882:	4602      	mov	r2, r0
 8001884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff82 	bl	8001794 <__NVIC_SetPriority>
}
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff56 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0c6      	b.n	8001a54 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fb36 	bl	8000f40 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2223      	movs	r2, #35	; 0x23
 80018d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_ETH_Init+0x1a8>)
 80018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e0:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_ETH_Init+0x1a8>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_ETH_Init+0x1a8>)
 80018ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7a1b      	ldrb	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fee3 	bl	80016cc <HAL_SYSCFG_ETHInterfaceSelect>
 8001906:	e003      	b.n	8001910 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001908:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800190c:	f7ff fede 	bl	80016cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001928:	f7ff fea0 	bl	800166c <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800192e:	e00f      	b.n	8001950 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001930:	f7ff fe9c 	bl	800166c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800193e:	d907      	bls.n	8001950 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2204      	movs	r2, #4
 8001944:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	22e0      	movs	r2, #224	; 0xe0
 800194a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e081      	b.n	8001a54 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e6      	bne.n	8001930 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fac0 	bl	8001ee8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001968:	f001 ff50 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800196c:	4603      	mov	r3, r0
 800196e:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_ETH_Init+0x1ac>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	0c9a      	lsrs	r2, r3, #18
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3a01      	subs	r2, #1
 800197c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fa13 	bl	8001dac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800199c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019a0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	22e0      	movs	r2, #224	; 0xe0
 80019b8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e04a      	b.n	8001a54 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019c6:	4413      	add	r3, r2
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_ETH_Init+0x1b0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6952      	ldr	r2, [r2, #20]
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	431a      	orrs	r2, r3
 80019da:	f241 1308 	movw	r3, #4360	; 0x1108
 80019de:	440b      	add	r3, r1
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fad8 	bl	8001f98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fb1c 	bl	8002026 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	3305      	adds	r3, #5
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	021a      	lsls	r2, r3, #8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	3303      	adds	r3, #3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	061a      	lsls	r2, r3, #24
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a3a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2210      	movs	r2, #16
 8001a50:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	ffff8001 	.word	0xffff8001

08001a68 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a7a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a82:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
 8001a88:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a8a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7b5b      	ldrb	r3, [r3, #13]
 8001a90:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a92:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7b9b      	ldrb	r3, [r3, #14]
 8001a98:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	7bdb      	ldrb	r3, [r3, #15]
 8001aa0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001aa2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	7c12      	ldrb	r2, [r2, #16]
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d102      	bne.n	8001ab2 <ETH_SetMACConfig+0x4a>
 8001aac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ab0:	e000      	b.n	8001ab4 <ETH_SetMACConfig+0x4c>
 8001ab2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ab4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	7c52      	ldrb	r2, [r2, #17]
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d102      	bne.n	8001ac4 <ETH_SetMACConfig+0x5c>
 8001abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac2:	e000      	b.n	8001ac6 <ETH_SetMACConfig+0x5e>
 8001ac4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ac6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	7c9b      	ldrb	r3, [r3, #18]
 8001acc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ace:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ad4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001ada:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	7f1b      	ldrb	r3, [r3, #28]
 8001ae0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001ae2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	7f5b      	ldrb	r3, [r3, #29]
 8001ae8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001aea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	7f92      	ldrb	r2, [r2, #30]
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d102      	bne.n	8001afa <ETH_SetMACConfig+0x92>
 8001af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af8:	e000      	b.n	8001afc <ETH_SetMACConfig+0x94>
 8001afa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001afc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7fdb      	ldrb	r3, [r3, #31]
 8001b02:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b04:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d102      	bne.n	8001b16 <ETH_SetMACConfig+0xae>
 8001b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b14:	e000      	b.n	8001b18 <ETH_SetMACConfig+0xb0>
 8001b16:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b18:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b1e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b26:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b28:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <ETH_SetMACConfig+0x22c>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b54:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b5e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b66:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b68:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	d102      	bne.n	8001b7a <ETH_SetMACConfig+0x112>
 8001b74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b78:	e000      	b.n	8001b7c <ETH_SetMACConfig+0x114>
 8001b7a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b7c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <ETH_SetMACConfig+0x230>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <ETH_SetMACConfig+0x234>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d101      	bne.n	8001bda <ETH_SetMACConfig+0x172>
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	e000      	b.n	8001bdc <ETH_SetMACConfig+0x174>
 8001bda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bdc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c04:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c0c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f023 0103 	bic.w	r1, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c32:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d101      	bne.n	8001c56 <ETH_SetMACConfig+0x1ee>
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	e000      	b.n	8001c58 <ETH_SetMACConfig+0x1f0>
 8001c56:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c58:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c60:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c62:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c6a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c78:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	00048083 	.word	0x00048083
 8001c98:	c0f88000 	.word	0xc0f88000
 8001c9c:	fffffef0 	.word	0xfffffef0

08001ca0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <ETH_SetDMAConfig+0xf8>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6809      	ldr	r1, [r1, #0]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001cc6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cd2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7b1b      	ldrb	r3, [r3, #12]
 8001cd8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <ETH_SetDMAConfig+0xfc>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6811      	ldr	r1, [r2, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cfa:	440b      	add	r3, r1
 8001cfc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7b5b      	ldrb	r3, [r3, #13]
 8001d02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <ETH_SetDMAConfig+0x100>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6811      	ldr	r1, [r2, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d26:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	7d1b      	ldrb	r3, [r3, #20]
 8001d30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d32:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7f5b      	ldrb	r3, [r3, #29]
 8001d38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d46:	4413      	add	r3, r2
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <ETH_SetDMAConfig+0x104>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6811      	ldr	r1, [r2, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d5a:	440b      	add	r3, r1
 8001d5c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	7f1b      	ldrb	r3, [r3, #28]
 8001d62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d74:	4413      	add	r3, r2
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <ETH_SetDMAConfig+0x108>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6811      	ldr	r1, [r2, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d88:	440b      	add	r3, r1
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	ffff87fd 	.word	0xffff87fd
 8001d9c:	ffff2ffe 	.word	0xffff2ffe
 8001da0:	fffec000 	.word	0xfffec000
 8001da4:	ffc0efef 	.word	0xffc0efef
 8001da8:	7fc0ffff 	.word	0x7fc0ffff

08001dac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0a4      	sub	sp, #144	; 0x90
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e44:	2320      	movs	r3, #32
 8001e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e86:	2300      	movs	r3, #0
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fde6 	bl	8001a68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001eb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ec4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ecc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fee1 	bl	8001ca0 <ETH_SetDMAConfig>
}
 8001ede:	bf00      	nop
 8001ee0:	3790      	adds	r7, #144	; 0x90
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f02:	f001 fc83 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8001f06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d908      	bls.n	8001f22 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d804      	bhi.n	8001f22 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e027      	b.n	8001f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d908      	bls.n	8001f3c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d204      	bcs.n	8001f3c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e01a      	b.n	8001f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d303      	bcc.n	8001f4c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d911      	bls.n	8001f70 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d908      	bls.n	8001f66 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d804      	bhi.n	8001f66 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e005      	b.n	8001f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e000      	b.n	8001f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f70:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	01312cff 	.word	0x01312cff
 8001f88:	02160ebf 	.word	0x02160ebf
 8001f8c:	03938700 	.word	0x03938700
 8001f90:	05f5e0ff 	.word	0x05f5e0ff
 8001f94:	08f0d17f 	.word	0x08f0d17f

08001f98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e01d      	b.n	8001fe2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68d9      	ldr	r1, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	3206      	adds	r2, #6
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9de      	bls.n	8001fa6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f241 132c 	movw	r3, #4396	; 0x112c
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68d9      	ldr	r1, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f241 1314 	movw	r3, #4372	; 0x1114
 8002008:	4413      	add	r3, r2
 800200a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e024      	b.n	800207e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6919      	ldr	r1, [r3, #16]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3310      	adds	r3, #16
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d9d7      	bls.n	8002034 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f241 1330 	movw	r3, #4400	; 0x1130
 80020aa:	4413      	add	r3, r2
 80020ac:	2203      	movs	r2, #3
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80020bc:	4413      	add	r3, r2
 80020be:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f241 1328 	movw	r3, #4392	; 0x1128
 80020d0:	4413      	add	r3, r2
 80020d2:	6019      	str	r1, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ee:	4b86      	ldr	r3, [pc, #536]	; (8002308 <HAL_GPIO_Init+0x228>)
 80020f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f2:	e18c      	b.n	800240e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 817e 	beq.w	8002408 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d005      	beq.n	8002124 <HAL_GPIO_Init+0x44>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d130      	bne.n	8002186 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215a:	2201      	movs	r2, #1
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 0201 	and.w	r2, r3, #1
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d123      	bne.n	8002216 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	69b9      	ldr	r1, [r7, #24]
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80d8 	beq.w	8002408 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_GPIO_Init+0x22c>)
 800225a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800225e:	4a2b      	ldr	r2, [pc, #172]	; (800230c <HAL_GPIO_Init+0x22c>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_GPIO_Init+0x22c>)
 800226a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_GPIO_Init+0x230>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x234>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d04a      	beq.n	8002338 <HAL_GPIO_Init+0x258>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_GPIO_Init+0x238>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x222>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_GPIO_Init+0x23c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x21e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_GPIO_Init+0x240>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x244>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x248>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_GPIO_Init+0x24c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_GPIO_Init+0x250>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x20a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_GPIO_Init+0x254>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x206>
 80022e2:	2309      	movs	r3, #9
 80022e4:	e029      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022e6:	230a      	movs	r3, #10
 80022e8:	e027      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022ea:	2307      	movs	r3, #7
 80022ec:	e025      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e023      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e021      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e01f      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e01d      	b.n	800233a <HAL_GPIO_Init+0x25a>
 80022fe:	2302      	movs	r3, #2
 8002300:	e01b      	b.n	800233a <HAL_GPIO_Init+0x25a>
 8002302:	2301      	movs	r3, #1
 8002304:	e019      	b.n	800233a <HAL_GPIO_Init+0x25a>
 8002306:	bf00      	nop
 8002308:	58000080 	.word	0x58000080
 800230c:	58024400 	.word	0x58024400
 8002310:	58000400 	.word	0x58000400
 8002314:	58020000 	.word	0x58020000
 8002318:	58020400 	.word	0x58020400
 800231c:	58020800 	.word	0x58020800
 8002320:	58020c00 	.word	0x58020c00
 8002324:	58021000 	.word	0x58021000
 8002328:	58021400 	.word	0x58021400
 800232c:	58021800 	.word	0x58021800
 8002330:	58021c00 	.word	0x58021c00
 8002334:	58022400 	.word	0x58022400
 8002338:	2300      	movs	r3, #0
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4093      	lsls	r3, r2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234a:	4938      	ldr	r1, [pc, #224]	; (800242c <HAL_GPIO_Init+0x34c>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800237e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	f47f ae6b 	bne.w	80020f4 <HAL_GPIO_Init+0x14>
  }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3724      	adds	r7, #36	; 0x24
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	58000400 	.word	0x58000400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	041a      	lsls	r2, r3, #16
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	400b      	ands	r3, r1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ce:	f7ff f8cd 	bl	800166c <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e03b      	b.n	8002556 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80024fe:	e00f      	b.n	8002520 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8002500:	f7ff f8b4 	bl	800166c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d908      	bls.n	8002520 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e01a      	b.n	8002556 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e8      	bne.n	8002500 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9be 	bl	80028b0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800255e:	b480      	push	{r7}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e03e      	b.n	80025f6 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8002582:	2302      	movs	r3, #2
 8002584:	e037      	b.n	80025f6 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d126      	bne.n	80025e8 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11c      	bne.n	80025e2 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e00d      	b.n	80025ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e004      	b.n	80025ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
 80025e6:	e001      	b.n	80025ec <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002610:	4b9a      	ldr	r3, [pc, #616]	; (800287c <HAL_MDMA_IRQHandler+0x278>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a9a      	ldr	r2, [pc, #616]	; (8002880 <HAL_MDMA_IRQHandler+0x27c>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b97      	ldr	r3, [pc, #604]	; (8002884 <HAL_MDMA_IRQHandler+0x280>)
 8002626:	4413      	add	r3, r2
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2201      	movs	r2, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8002636:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 812e 	beq.w	80028a2 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d054      	beq.n	80026fe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04d      	beq.n	80026fe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0202 	bic.w	r2, r2, #2
 8002670:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	669a      	str	r2, [r3, #104]	; 0x68
 8002690:	e005      	b.n	800269e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c2:	f043 0208 	orr.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2208      	movs	r2, #8
 8002754:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2204      	movs	r2, #4
 8002788:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d039      	beq.n	800281c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d032      	beq.n	800281c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80027c4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d110      	bne.n	80027f4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d05d      	beq.n	80028a6 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
        }
        return;
 80027f2:	e058      	b.n	80028a6 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2202      	movs	r2, #2
 80027fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002820:	2b00      	cmp	r3, #0
 8002822:	d041      	beq.n	80028a8 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3301      	adds	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d307      	bcc.n	8002858 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f2      	bne.n	800283c <HAL_MDMA_IRQHandler+0x238>
 8002856:	e000      	b.n	800285a <HAL_MDMA_IRQHandler+0x256>
        break;
 8002858:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002878:	e00a      	b.n	8002890 <HAL_MDMA_IRQHandler+0x28c>
 800287a:	bf00      	nop
 800287c:	24008028 	.word	0x24008028
 8002880:	1b4e81b5 	.word	0x1b4e81b5
 8002884:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e002      	b.n	80028a8 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80028a6:	bf00      	nop
    }
  }
}
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop

080028b0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68d9      	ldr	r1, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80028d6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80028e2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80028ee:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002904:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002906:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d107      	bne.n	8002922 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002920:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	2b00      	cmp	r3, #0
 8002930:	da11      	bge.n	8002956 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002940:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	425b      	negs	r3, r3
 8002948:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	b292      	uxth	r2, r2
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	e006      	b.n	8002964 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b292      	uxth	r2, r2
 8002962:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	da15      	bge.n	8002998 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800297a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	425b      	negs	r3, r3
 8002982:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a19      	ldr	r1, [r3, #32]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	621a      	str	r2, [r3, #32]
 8002996:	e009      	b.n	80029ac <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a19      	ldr	r1, [r3, #32]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	041a      	lsls	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d006      	beq.n	80029c4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
 80029c2:	e003      	b.n	80029cc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00a      	beq.n	8002a0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01f      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e01d      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	490f      	ldr	r1, [pc, #60]	; (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a1a:	f7fe fe27 	bl	800166c <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a20:	e009      	b.n	8002a36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a22:	f7fe fe23 	bl	800166c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d901      	bls.n	8002a36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	d1ee      	bne.n	8002a22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	58024800 	.word	0x58024800

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	; 0x30
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e397      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8087 	beq.w	8002b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4b9e      	ldr	r3, [pc, #632]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7e:	4b9c      	ldr	r3, [pc, #624]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x46>
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d110      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x5e>
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d10b      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9a:	4b95      	ldr	r3, [pc, #596]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x12c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d168      	bne.n	8002b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e371      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x76>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a8b      	ldr	r2, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	e02e      	b.n	8002b28 <HAL_RCC_OscConfig+0xd4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x98>
 8002ad2:	4b87      	ldr	r3, [pc, #540]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a86      	ldr	r2, [pc, #536]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01d      	b.n	8002b28 <HAL_RCC_OscConfig+0xd4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0xbc>
 8002af6:	4b7e      	ldr	r3, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0xd4>
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a76      	ldr	r2, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a73      	ldr	r2, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fd9c 	bl	800166c <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fd98 	bl	800166c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e325      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4a:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0xe4>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fd88 	bl	800166c <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fd84 	bl	800166c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e311      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b72:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x10c>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 808a 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9a:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x162>
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b18      	cmp	r3, #24
 8002baa:	d137      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1c8>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d132      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x17a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e2e3      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bce:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0219 	bic.w	r2, r3, #25
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4945      	ldr	r1, [pc, #276]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be0:	f7fe fd44 	bl	800166c <HAL_GetTick>
 8002be4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fd40 	bl	800166c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e2cd      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	4936      	ldr	r1, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1a:	e043      	b.n	8002ca4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d026      	beq.n	8002c72 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0219 	bic.w	r2, r3, #25
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	492f      	ldr	r1, [pc, #188]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fd19 	bl	800166c <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fd15 	bl	800166c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e2a2      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4921      	ldr	r1, [pc, #132]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
 8002c70:	e018      	b.n	8002ca4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fcf5 	bl	800166c <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fe fcf1 	bl	800166c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e27e      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d06d      	beq.n	8002d8c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x282>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b18      	cmp	r3, #24
 8002cca:	d11e      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2b6>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_OscConfig+0x29c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2a0>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d004      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e253      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
 8002cee:	bf00      	nop
 8002cf0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf4:	4ba3      	ldr	r3, [pc, #652]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	49a0      	ldr	r1, [pc, #640]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d08:	e040      	b.n	8002d8c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d12:	4b9c      	ldr	r3, [pc, #624]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a9b      	ldr	r2, [pc, #620]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fca5 	bl	800166c <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d26:	f7fe fca1 	bl	800166c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e22e      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d44:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	498c      	ldr	r1, [pc, #560]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d5a:	4b8a      	ldr	r3, [pc, #552]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a89      	ldr	r2, [pc, #548]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fc81 	bl	800166c <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fc7d 	bl	800166c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e20a      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d80:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d036      	beq.n	8002e06 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d019      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fc5e 	bl	800166c <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fc5a 	bl	800166c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1e7      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x360>
 8002dd2:	e018      	b.n	8002e06 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fc44 	bl	800166c <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fc40 	bl	800166c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1cd      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d019      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1a:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a59      	ldr	r2, [pc, #356]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fc21 	bl	800166c <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e2e:	f7fe fc1d 	bl	800166c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1aa      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3da>
 8002e4c:	e018      	b.n	8002e80 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e4e:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4c      	ldr	r2, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fc07 	bl	800166c <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e62:	f7fe fc03 	bl	800166c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e190      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8085 	beq.w	8002f98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCC_OscConfig+0x534>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3d      	ldr	r2, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x534>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe fbe7 	bl	800166c <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe fbe3 	bl	800166c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	; 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e170      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_OscConfig+0x534>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x482>
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e02d      	b.n	8002f32 <HAL_RCC_OscConfig+0x4de>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4a4>
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4de>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x4c6>
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x4de>
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fb97 	bl	800166c <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fb93 	bl	800166c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e11e      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCC_OscConfig+0x530>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4ee>
 8002f64:	e018      	b.n	8002f98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe fb81 	bl	800166c <HAL_GetTick>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f6c:	e00e      	b.n	8002f8c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fb7d 	bl	800166c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d905      	bls.n	8002f8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e108      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
 8002f84:	58024400 	.word	0x58024400
 8002f88:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f8c:	4b84      	ldr	r3, [pc, #528]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ea      	bne.n	8002f6e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80f9 	beq.w	8003194 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002faa:	2b18      	cmp	r3, #24
 8002fac:	f000 80b4 	beq.w	8003118 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f040 8095 	bne.w	80030e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fb51 	bl	800166c <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fb4d 	bl	800166c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0da      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8002fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x750>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	430a      	orrs	r2, r1
 8003000:	4967      	ldr	r1, [pc, #412]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	628b      	str	r3, [r1, #40]	; 0x28
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	3b01      	subs	r3, #1
 800300c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	3b01      	subs	r3, #1
 8003016:	025b      	lsls	r3, r3, #9
 8003018:	b29b      	uxth	r3, r3
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	3b01      	subs	r3, #1
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003036:	495a      	ldr	r1, [pc, #360]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800304a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304c:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x754>)
 800304e:	4013      	ands	r3, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003054:	00d2      	lsls	r2, r2, #3
 8003056:	4952      	ldr	r1, [pc, #328]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f023 020c 	bic.w	r2, r3, #12
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f023 0202 	bic.w	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4949      	ldr	r1, [pc, #292]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003080:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4a46      	ldr	r2, [pc, #280]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800309e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80030a4:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fad6 	bl	800166c <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fad2 	bl	800166c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e05f      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x670>
 80030e2:	e057      	b.n	8003194 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2d      	ldr	r2, [pc, #180]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fabc 	bl	800166c <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fab8 	bl	800166c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e045      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a4>
 8003116:	e03d      	b.n	8003194 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_OscConfig+0x74c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b01      	cmp	r3, #1
 800312a:	d031      	beq.n	8003190 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0203 	and.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d12a      	bne.n	8003190 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d122      	bne.n	8003190 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d11a      	bne.n	8003190 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	0a5b      	lsrs	r3, r3, #9
 800315e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d111      	bne.n	8003190 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d108      	bne.n	8003190 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0e1b      	lsrs	r3, r3, #24
 8003182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3730      	adds	r7, #48	; 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	fffffc0c 	.word	0xfffffc0c
 80031a8:	ffff0007 	.word	0xffff0007

080031ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e19c      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d910      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 020f 	bic.w	r2, r3, #15
 80031d6:	4985      	ldr	r1, [pc, #532]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e184      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	4b7b      	ldr	r3, [pc, #492]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003208:	429a      	cmp	r2, r3
 800320a:	d908      	bls.n	800321e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800320c:	4b78      	ldr	r3, [pc, #480]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	4975      	ldr	r1, [pc, #468]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800321a:	4313      	orrs	r3, r2
 800321c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d010      	beq.n	800324c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003236:	429a      	cmp	r2, r3
 8003238:	d908      	bls.n	800324c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	496a      	ldr	r1, [pc, #424]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003264:	429a      	cmp	r2, r3
 8003266:	d908      	bls.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003268:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	495e      	ldr	r1, [pc, #376]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d010      	beq.n	80032a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003292:	429a      	cmp	r2, r3
 8003294:	d908      	bls.n	80032a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003296:	4b56      	ldr	r3, [pc, #344]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4953      	ldr	r1, [pc, #332]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d908      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f023 020f 	bic.w	r2, r3, #15
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4947      	ldr	r1, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d055      	beq.n	800338e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4940      	ldr	r1, [pc, #256]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d107      	bne.n	800330c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032fc:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d121      	bne.n	800334c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0f6      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d115      	bne.n	800334c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0ea      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800332c:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0de      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333c:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d6      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 0207 	bic.w	r2, r3, #7
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800335a:	4313      	orrs	r3, r2
 800335c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe f985 	bl	800166c <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003364:	e00a      	b.n	800337c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003366:	f7fe f981 	bl	800166c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0be      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337c:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	429a      	cmp	r2, r3
 800338c:	d1eb      	bne.n	8003366 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d208      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f023 020f 	bic.w	r2, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_RCC_ClockConfig+0x244>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d214      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 020f 	bic.w	r2, r3, #15
 80033d2:	4906      	ldr	r1, [pc, #24]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_RCC_ClockConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e086      	b.n	80034fa <HAL_RCC_ClockConfig+0x34e>
 80033ec:	52002000 	.word	0x52002000
 80033f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340c:	429a      	cmp	r2, r3
 800340e:	d208      	bcs.n	8003422 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003410:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4939      	ldr	r1, [pc, #228]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 800341e:	4313      	orrs	r3, r2
 8003420:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800343a:	429a      	cmp	r2, r3
 800343c:	d208      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	492e      	ldr	r1, [pc, #184]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 800344c:	4313      	orrs	r3, r2
 800344e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003468:	429a      	cmp	r2, r3
 800346a:	d208      	bcs.n	800347e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4922      	ldr	r1, [pc, #136]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 800347a:	4313      	orrs	r3, r2
 800347c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003496:	429a      	cmp	r2, r3
 8003498:	d208      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4917      	ldr	r1, [pc, #92]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ac:	f000 f834 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4912      	ldr	r1, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x35c>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
 80034c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <HAL_RCC_ClockConfig+0x35c>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x360>)
 80034e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034e4:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x364>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x368>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fefe 	bl	80012f0 <HAL_InitTick>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	58024400 	.word	0x58024400
 8003508:	08010d9c 	.word	0x08010d9c
 800350c:	2400802c 	.word	0x2400802c
 8003510:	24008028 	.word	0x24008028
 8003514:	24008030 	.word	0x24008030

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351e:	4bb3      	ldr	r3, [pc, #716]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003526:	2b18      	cmp	r3, #24
 8003528:	f200 8155 	bhi.w	80037d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <HAL_RCC_GetSysClockFreq+0x1c>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003599 	.word	0x08003599
 8003538:	080037d7 	.word	0x080037d7
 800353c:	080037d7 	.word	0x080037d7
 8003540:	080037d7 	.word	0x080037d7
 8003544:	080037d7 	.word	0x080037d7
 8003548:	080037d7 	.word	0x080037d7
 800354c:	080037d7 	.word	0x080037d7
 8003550:	080037d7 	.word	0x080037d7
 8003554:	080035bf 	.word	0x080035bf
 8003558:	080037d7 	.word	0x080037d7
 800355c:	080037d7 	.word	0x080037d7
 8003560:	080037d7 	.word	0x080037d7
 8003564:	080037d7 	.word	0x080037d7
 8003568:	080037d7 	.word	0x080037d7
 800356c:	080037d7 	.word	0x080037d7
 8003570:	080037d7 	.word	0x080037d7
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080037d7 	.word	0x080037d7
 800357c:	080037d7 	.word	0x080037d7
 8003580:	080037d7 	.word	0x080037d7
 8003584:	080037d7 	.word	0x080037d7
 8003588:	080037d7 	.word	0x080037d7
 800358c:	080037d7 	.word	0x080037d7
 8003590:	080037d7 	.word	0x080037d7
 8003594:	080035cb 	.word	0x080035cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003598:	4b94      	ldr	r3, [pc, #592]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035a4:	4b91      	ldr	r3, [pc, #580]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	4a90      	ldr	r2, [pc, #576]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80035b6:	e111      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035b8:	4b8d      	ldr	r3, [pc, #564]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ba:	61bb      	str	r3, [r7, #24]
    break;
 80035bc:	e10e      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035be:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035c0:	61bb      	str	r3, [r7, #24]
    break;
 80035c2:	e10b      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80035c4:	4b8c      	ldr	r3, [pc, #560]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035c6:	61bb      	str	r3, [r7, #24]
    break;
 80035c8:	e108      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ca:	4b88      	ldr	r3, [pc, #544]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035d4:	4b85      	ldr	r3, [pc, #532]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035e0:	4b82      	ldr	r3, [pc, #520]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035ea:	4b80      	ldr	r3, [pc, #512]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80e1 	beq.w	80037d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b02      	cmp	r3, #2
 8003612:	f000 8083 	beq.w	800371c <HAL_RCC_GetSysClockFreq+0x204>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b02      	cmp	r3, #2
 800361a:	f200 80a1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x248>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x114>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d056      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800362a:	e099      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800362c:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02d      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003638:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	08db      	lsrs	r3, r3, #3
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	4a6b      	ldr	r2, [pc, #428]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b62      	ldr	r3, [pc, #392]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003692:	e087      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003800 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d6:	e065      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003804 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ea:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800371a:	e043      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003808 <HAL_RCC_GetSysClockFreq+0x2f0>
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003742:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800375e:	e021      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003804 <HAL_RCC_GetSysClockFreq+0x2ec>
 800376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003782:	ed97 6a02 	vldr	s12, [r7, #8]
 8003786:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	0a5b      	lsrs	r3, r3, #9
 80037aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ae:	3301      	adds	r3, #1
 80037b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c8:	ee17 3a90 	vmov	r3, s15
 80037cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037d8:	61bb      	str	r3, [r7, #24]
    break;
 80037da:	bf00      	nop
  }

  return sysclockfreq;
 80037dc:	69bb      	ldr	r3, [r7, #24]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
 80037f0:	03d09000 	.word	0x03d09000
 80037f4:	003d0900 	.word	0x003d0900
 80037f8:	007a1200 	.word	0x007a1200
 80037fc:	46000000 	.word	0x46000000
 8003800:	4c742400 	.word	0x4c742400
 8003804:	4a742400 	.word	0x4a742400
 8003808:	4af42400 	.word	0x4af42400

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003812:	f7ff fe81 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_GetHCLKFreq+0x50>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490f      	ldr	r1, [pc, #60]	; (8003860 <HAL_RCC_GetHCLKFreq+0x54>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_GetHCLKFreq+0x50>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_GetHCLKFreq+0x54>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a07      	ldr	r2, [pc, #28]	; (8003864 <HAL_RCC_GetHCLKFreq+0x58>)
 8003848:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <HAL_RCC_GetHCLKFreq+0x5c>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_GetHCLKFreq+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400
 8003860:	08010d9c 	.word	0x08010d9c
 8003864:	2400802c 	.word	0x2400802c
 8003868:	24008028 	.word	0x24008028

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003870:	f7ff ffcc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	58024400 	.word	0x58024400
 8003894:	08010d9c 	.word	0x08010d9c

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800389c:	f7ff ffb6 	bl	800380c <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58024400 	.word	0x58024400
 80038c0:	08010d9c 	.word	0x08010d9c

080038c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	223f      	movs	r2, #63	; 0x3f
 80038d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f003 0207 	and.w	r2, r3, #7
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_GetClockConfig+0x7c>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetClockConfig+0x80>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	58024400 	.word	0x58024400
 8003944:	52002000 	.word	0x52002000

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003954:	2300      	movs	r3, #0
 8003956:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03f      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800396c:	d02a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800396e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003972:	d824      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003978:	d018      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800397a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800397e:	d81e      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003988:	d007      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800398a:	e018      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398c:	4bab      	ldr	r3, [pc, #684]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4aaa      	ldr	r2, [pc, #680]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003998:	e015      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	2102      	movs	r1, #2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 feff 	bl	80057a4 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039aa:	e00c      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3324      	adds	r3, #36	; 0x24
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 ffa8 	bl	8005908 <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
      break;
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039cc:	4b9b      	ldr	r3, [pc, #620]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	4998      	ldr	r1, [pc, #608]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	650b      	str	r3, [r1, #80]	; 0x50
 80039de:	e001      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d03d      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d826      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a15 	.word	0x08003a15
 8003a04:	08003a23 	.word	0x08003a23
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4d 	.word	0x08003a4d
 8003a10:	08003a4d 	.word	0x08003a4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a14:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4a88      	ldr	r2, [pc, #544]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a20:	e015      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 febb 	bl	80057a4 <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a32:	e00c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 ff64 	bl	8005908 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a54:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	f023 0207 	bic.w	r2, r3, #7
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	4976      	ldr	r1, [pc, #472]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	650b      	str	r3, [r1, #80]	; 0x50
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d051      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a7e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003a82:	d036      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a84:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003a88:	d830      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a8e:	d032      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a94:	d82a      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003a96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a9a:	d02e      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aa0:	d824      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d018      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aac:	d81e      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003ab8:	e018      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aba:	4b60      	ldr	r3, [pc, #384]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	4a5f      	ldr	r2, [pc, #380]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac6:	e019      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 fe68 	bl	80057a4 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e010      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3324      	adds	r3, #36	; 0x24
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 ff11 	bl	8005908 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aea:	e007      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e004      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b02:	4b4e      	ldr	r3, [pc, #312]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b10:	494a      	ldr	r1, [pc, #296]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	658b      	str	r3, [r1, #88]	; 0x58
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d051      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b2e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b32:	d036      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003b34:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b38:	d830      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b3e:	d032      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b44:	d82a      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b4a:	d02e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b50:	d824      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b56:	d018      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b5c:	d81e      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b66:	d007      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b68:	e018      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b76:	e019      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fe10 	bl	80057a4 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b88:	e010      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3324      	adds	r3, #36	; 0x24
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 feb9 	bl	8005908 <RCCEx_PLL3_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b9a:	e007      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bb2:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bc0:	491e      	ldr	r1, [pc, #120]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d035      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	2b30      	cmp	r3, #48	; 0x30
 8003bde:	d01c      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d817      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d00c      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d813      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d016      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d10f      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c00:	e00e      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fdcb 	bl	80057a4 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c12:	e005      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
      break;
 8003c18:	e002      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	4902      	ldr	r1, [pc, #8]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d047      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c58:	d030      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c5e:	d82a      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c64:	d02c      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003c66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c6a:	d824      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d018      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	d81e      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d007      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c82:	e018      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4bac      	ldr	r3, [pc, #688]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4aab      	ldr	r2, [pc, #684]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c90:	e017      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fd83 	bl	80057a4 <RCCEx_PLL2_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ca2:	e00e      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fe2c 	bl	8005908 <RCCEx_PLL3_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cc8:	4b9b      	ldr	r3, [pc, #620]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	4998      	ldr	r1, [pc, #608]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d049      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfa:	d828      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d00:	d02a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d06:	d822      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d0c:	d026      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d12:	d81c      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d18:	d010      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1e:	d816      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d111      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fd37 	bl	80057a4 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e012      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fde0 	bl	8005908 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e009      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      break;
 8003d52:	e006      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d54:	bf00      	nop
 8003d56:	e004      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d68:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	4970      	ldr	r1, [pc, #448]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	650b      	str	r3, [r1, #80]	; 0x50
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d04b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d96:	d02e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9c:	d828      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d02a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d822      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dae:	d026      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db4:	d81c      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dba:	d010      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d816      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01d      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dca:	d111      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fce6 	bl	80057a4 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e012      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fd8f 	bl	8005908 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003df6:	bf00      	nop
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e18:	4947      	ldr	r1, [pc, #284]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d02f      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e38:	d00e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d814      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e48:	d10f      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e56:	e00c      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fca0 	bl	80057a4 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e78:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e84:	492c      	ldr	r1, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	650b      	str	r3, [r1, #80]	; 0x50
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d032      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ebd 	.word	0x08003ebd
 8003eb4:	08003ecb 	.word	0x08003ecb
 8003eb8:	08003ee3 	.word	0x08003ee3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fc67 	bl	80057a4 <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4910      	ldr	r1, [pc, #64]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003efc:	e001      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 808a 	beq.w	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fba6 	bl	800166c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f22:	e00d      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f24:	f7fd fba2 	bl	800166c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d906      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	75fb      	strb	r3, [r7, #23]
        break;
 8003f36:	e009      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f40:	4bb9      	ldr	r3, [pc, #740]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0eb      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d166      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f52:	4bb6      	ldr	r3, [pc, #728]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f5c:	4053      	eors	r3, r2
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f66:	4bb1      	ldr	r3, [pc, #708]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f70:	4bae      	ldr	r3, [pc, #696]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	4aad      	ldr	r2, [pc, #692]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7c:	4bab      	ldr	r3, [pc, #684]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4aaa      	ldr	r2, [pc, #680]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f88:	4aa8      	ldr	r2, [pc, #672]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fb67 	bl	800166c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa0:	e00b      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fd fb63 	bl	800166c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d902      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	75fb      	strb	r3, [r7, #23]
            break;
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fba:	4b9c      	ldr	r3, [pc, #624]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ed      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d126      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003fdc:	4b93      	ldr	r3, [pc, #588]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fea:	0919      	lsrs	r1, r3, #4
 8003fec:	4b90      	ldr	r3, [pc, #576]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fee:	400b      	ands	r3, r1
 8003ff0:	498e      	ldr	r1, [pc, #568]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	610b      	str	r3, [r1, #16]
 8003ff6:	e005      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003ff8:	4b8c      	ldr	r3, [pc, #560]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4a8b      	ldr	r2, [pc, #556]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004002:	6113      	str	r3, [r2, #16]
 8004004:	4b89      	ldr	r3, [pc, #548]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	4986      	ldr	r1, [pc, #536]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	670b      	str	r3, [r1, #112]	; 0x70
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	75bb      	strb	r3, [r7, #22]
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d07e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	2b28      	cmp	r3, #40	; 0x28
 8004036:	d867      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	0800410f 	.word	0x0800410f
 8004044:	08004109 	.word	0x08004109
 8004048:	08004109 	.word	0x08004109
 800404c:	08004109 	.word	0x08004109
 8004050:	08004109 	.word	0x08004109
 8004054:	08004109 	.word	0x08004109
 8004058:	08004109 	.word	0x08004109
 800405c:	08004109 	.word	0x08004109
 8004060:	080040e5 	.word	0x080040e5
 8004064:	08004109 	.word	0x08004109
 8004068:	08004109 	.word	0x08004109
 800406c:	08004109 	.word	0x08004109
 8004070:	08004109 	.word	0x08004109
 8004074:	08004109 	.word	0x08004109
 8004078:	08004109 	.word	0x08004109
 800407c:	08004109 	.word	0x08004109
 8004080:	080040f7 	.word	0x080040f7
 8004084:	08004109 	.word	0x08004109
 8004088:	08004109 	.word	0x08004109
 800408c:	08004109 	.word	0x08004109
 8004090:	08004109 	.word	0x08004109
 8004094:	08004109 	.word	0x08004109
 8004098:	08004109 	.word	0x08004109
 800409c:	08004109 	.word	0x08004109
 80040a0:	0800410f 	.word	0x0800410f
 80040a4:	08004109 	.word	0x08004109
 80040a8:	08004109 	.word	0x08004109
 80040ac:	08004109 	.word	0x08004109
 80040b0:	08004109 	.word	0x08004109
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004109 	.word	0x08004109
 80040bc:	08004109 	.word	0x08004109
 80040c0:	0800410f 	.word	0x0800410f
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004109 	.word	0x08004109
 80040cc:	08004109 	.word	0x08004109
 80040d0:	08004109 	.word	0x08004109
 80040d4:	08004109 	.word	0x08004109
 80040d8:	08004109 	.word	0x08004109
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800410f 	.word	0x0800410f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 fb5a 	bl	80057a4 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fc03 	bl	8005908 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004116:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	4942      	ldr	r1, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	654b      	str	r3, [r1, #84]	; 0x54
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d037      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	2b05      	cmp	r3, #5
 8004140:	d820      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800418b 	.word	0x0800418b
 800414c:	08004161 	.word	0x08004161
 8004150:	08004173 	.word	0x08004173
 8004154:	0800418b 	.word	0x0800418b
 8004158:	0800418b 	.word	0x0800418b
 800415c:	0800418b 	.word	0x0800418b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fb1c 	bl	80057a4 <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004170:	e00c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fbc5 	bl	8005908 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800418a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4923      	ldr	r1, [pc, #140]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	654b      	str	r3, [r1, #84]	; 0x54
 80041a4:	e001      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d040      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d821      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	0800420b 	.word	0x0800420b
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	080041f3 	.word	0x080041f3
 80041d4:	0800420b 	.word	0x0800420b
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	0800420b 	.word	0x0800420b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fadc 	bl	80057a4 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041f0:	e00c      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fb85 	bl	8005908 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800420a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d110      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f023 0207 	bic.w	r2, r3, #7
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	4902      	ldr	r1, [pc, #8]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	658b      	str	r3, [r1, #88]	; 0x58
 8004226:	e007      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004228:	58024800 	.word	0x58024800
 800422c:	58024400 	.word	0x58024400
 8004230:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d04b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424e:	d02e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004254:	d828      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d02a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004260:	d822      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004266:	d026      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800426c:	d81c      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800426e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004272:	d010      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d816      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01d      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004282:	d111      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fa8a 	bl	80057a4 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004294:	e012      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3324      	adds	r3, #36	; 0x24
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fb33 	bl	8005908 <RCCEx_PLL3_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042a6:	e009      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c2:	4bb2      	ldr	r3, [pc, #712]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	49ae      	ldr	r1, [pc, #696]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	654b      	str	r3, [r1, #84]	; 0x54
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d04b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042f2:	d02e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80042f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042f8:	d828      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d02a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d822      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800430a:	d026      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800430c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004310:	d81c      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004316:	d010      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d816      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01d      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d111      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fa38 	bl	80057a4 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004338:	e012      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3324      	adds	r3, #36	; 0x24
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f001 fae1 	bl	8005908 <RCCEx_PLL3_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800434a:	e009      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
      break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004352:	bf00      	nop
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800435e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004366:	4b89      	ldr	r3, [pc, #548]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	4985      	ldr	r1, [pc, #532]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004376:	4313      	orrs	r3, r2
 8004378:	658b      	str	r3, [r1, #88]	; 0x58
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d04b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004392:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004396:	d02e      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004398:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800439c:	d828      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d02a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d822      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043ae:	d026      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80043b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043b4:	d81c      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ba:	d010      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d816      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d111      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 f9e6 	bl	80057a4 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043dc:	e012      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3324      	adds	r3, #36	; 0x24
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fa8f 	bl	8005908 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043ee:	e009      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e006      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80043f6:	bf00      	nop
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800440a:	4b60      	ldr	r3, [pc, #384]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	495c      	ldr	r1, [pc, #368]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800441a:	4313      	orrs	r3, r2
 800441c:	658b      	str	r3, [r1, #88]	; 0x58
 800441e:	e001      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d018      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d10a      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f001 fa61 	bl	8005908 <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004450:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445c:	494b      	ldr	r1, [pc, #300]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800445e:	4313      	orrs	r3, r2
 8004460:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004478:	d10a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fa41 	bl	8005908 <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	493b      	ldr	r1, [pc, #236]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d034      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ba:	d01d      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80044bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c0:	d817      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044cc:	e011      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f965 	bl	80057a4 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044de:	e00c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fa0e 	bl	8005908 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800450e:	491f      	ldr	r1, [pc, #124]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004510:	4313      	orrs	r3, r2
 8004512:	658b      	str	r3, [r1, #88]	; 0x58
 8004514:	e001      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d036      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004530:	d01c      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004536:	d816      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453c:	d003      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800453e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004542:	d007      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004544:	e00f      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800454c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004552:	e00c      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3324      	adds	r3, #36	; 0x24
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f9d4 	bl	8005908 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004564:	e003      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
      break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	4902      	ldr	r1, [pc, #8]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004584:	4313      	orrs	r3, r2
 8004586:	654b      	str	r3, [r1, #84]	; 0x54
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800458a:	bf00      	nop
 800458c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d029      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d007      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80045ae:	e00f      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b0:	4b61      	ldr	r3, [pc, #388]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4a60      	ldr	r2, [pc, #384]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045bc:	e00b      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f8ed 	bl	80057a4 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045dc:	4b56      	ldr	r3, [pc, #344]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	4953      	ldr	r1, [pc, #332]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045ee:	e001      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f97e 	bl	8005908 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d030      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462a:	d017      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800462c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004630:	d811      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004636:	d013      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d80b      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004654:	e007      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
      break;
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004678:	492f      	ldr	r1, [pc, #188]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	654b      	str	r3, [r1, #84]	; 0x54
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469c:	4926      	ldr	r1, [pc, #152]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ba:	491f      	ldr	r1, [pc, #124]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046d6:	6113      	str	r3, [r2, #16]
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046e2:	4915      	ldr	r1, [pc, #84]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da08      	bge.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	4906      	ldr	r1, [pc, #24]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004722:	7dbb      	ldrb	r3, [r7, #22]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	58024400 	.word	0x58024400

0800473c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	; 0x40
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474a:	f040 8089 	bne.w	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800474e:	4b95      	ldr	r3, [pc, #596]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	2b04      	cmp	r3, #4
 800475c:	d87d      	bhi.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004779 	.word	0x08004779
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	08004855 	.word	0x08004855
 8004774:	080047e5 	.word	0x080047e5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004778:	4b8a      	ldr	r3, [pc, #552]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d107      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478a:	4618      	mov	r0, r3
 800478c:	f000 feb8 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004794:	e3ed      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800479a:	e3ea      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d107      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fbfe 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047b8:	e3db      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047be:	e3d8      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047c0:	4b78      	ldr	r3, [pc, #480]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047cc:	d107      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd40 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047dc:	e3c9      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047e2:	e3c6      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047e4:	4b6f      	ldr	r3, [pc, #444]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004800:	4b68      	ldr	r3, [pc, #416]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004812:	e01e      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004814:	4b63      	ldr	r3, [pc, #396]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004828:	d102      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800482a:	4b60      	ldr	r3, [pc, #384]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482e:	e010      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004830:	4b5c      	ldr	r3, [pc, #368]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483c:	d106      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d102      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004846:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484a:	e002      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004850:	e38f      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004852:	e38e      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004854:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004858:	e38b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485e:	e388      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	f040 80a7 	bne.w	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800486a:	4b4e      	ldr	r3, [pc, #312]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004872:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d054      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004882:	f200 808b 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800488c:	f000 8083 	beq.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004896:	f200 8081 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a0:	d02f      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a8:	d878      	bhi.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b6:	d012      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80048b8:	e070      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c6:	d107      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe17 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048d6:	e34c      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048dc:	e349      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ea:	d107      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ec:	f107 0318 	add.w	r3, r7, #24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fb5d 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048fa:	e33a      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004900:	e337      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490e:	d107      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fc9f 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800491e:	e328      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004924:	e325      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800492e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004930:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d10c      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	08db      	lsrs	r3, r3, #3
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004954:	e01e      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d106      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496a:	d102      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	e010      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004986:	d102      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e002      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004992:	e2ee      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004994:	e2ed      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800499a:	e2ea      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a0:	e2e7      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	003d0900 	.word	0x003d0900
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	f040 809c 	bne.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80049c2:	4b9e      	ldr	r3, [pc, #632]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d2:	d054      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049da:	f200 808b 	bhi.w	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049e4:	f000 8083 	beq.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ee:	f200 8081 	bhi.w	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d02f      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a00:	d878      	bhi.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a0e:	d012      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a10:	e070      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a12:	4b8a      	ldr	r3, [pc, #552]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fd6b 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a2e:	e2a0      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a34:	e29d      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a36:	4b81      	ldr	r3, [pc, #516]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a42:	d107      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a44:	f107 0318 	add.w	r3, r7, #24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fab1 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004a52:	e28e      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a58:	e28b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a5a:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a66:	d107      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fbf3 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a76:	e27c      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a7c:	e279      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a88:	4b6c      	ldr	r3, [pc, #432]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a9a:	4b68      	ldr	r3, [pc, #416]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	4a66      	ldr	r2, [pc, #408]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	e01e      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004aae:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d106      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac2:	d102      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ac4:	4b5f      	ldr	r3, [pc, #380]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac8:	e010      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004aca:	4b5c      	ldr	r3, [pc, #368]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004aea:	e242      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004aec:	e241      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aee:	4b57      	ldr	r3, [pc, #348]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af2:	e23e      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e23b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	f040 80a6 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b04:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d054      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1c:	f200 808b 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b30:	f200 8081 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3a:	d02f      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	d878      	bhi.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b50:	d012      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004b52:	e070      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b54:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b60:	d107      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fcca 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b70:	e1ff      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b76:	e1fc      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b84:	d107      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fa10 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b94:	e1ed      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b9a:	e1ea      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fb52 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb8:	e1db      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e1d8      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	e01e      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d106      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c04:	d102      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0a:	e010      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d106      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c20:	d102      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c2c:	e1a1      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c2e:	e1a0      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c34:	e19d      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3a:	e19a      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	03d09000 	.word	0x03d09000
 8004c44:	003d0900 	.word	0x003d0900
 8004c48:	007a1200 	.word	0x007a1200
 8004c4c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c56:	d173      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004c58:	4b9a      	ldr	r3, [pc, #616]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c68:	d02f      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c70:	d863      	bhi.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d012      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004c80:	e05b      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c82:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c90:	f107 0318 	add.w	r3, r7, #24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f98b 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c9e:	e168      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca4:	e165      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ca6:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 facd 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cc2:	e156      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc8:	e153      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cca:	4b7e      	ldr	r3, [pc, #504]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cd4:	4b7b      	ldr	r3, [pc, #492]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ce6:	4b77      	ldr	r3, [pc, #476]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	4a75      	ldr	r2, [pc, #468]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf8:	e01e      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cfa:	4b72      	ldr	r3, [pc, #456]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d10:	4b6e      	ldr	r3, [pc, #440]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	e010      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d16:	4b6b      	ldr	r3, [pc, #428]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d22:	d106      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d2c:	4b68      	ldr	r3, [pc, #416]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d36:	e11c      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d38:	e11b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d3e:	e118      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d46:	d133      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004d48:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5e:	d012      	beq.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004d60:	e023      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d62:	4b58      	ldr	r3, [pc, #352]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fbc3 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d7e:	e0f8      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d84:	e0f5      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d86:	4b4f      	ldr	r3, [pc, #316]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d92:	d107      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d94:	f107 0318 	add.w	r3, r7, #24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f909 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004da2:	e0e6      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da8:	e0e3      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dae:	e0e0      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db6:	f040 808d 	bne.w	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004dba:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dca:	d06b      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd2:	d874      	bhi.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d056      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d86c      	bhi.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dea:	d03b      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df2:	d864      	bhi.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfa:	d021      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e02:	d85c      	bhi.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e10:	d004      	beq.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004e12:	e054      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e14:	f000 f8b6 	bl	8004f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e18:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e1a:	e0aa      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e28:	d107      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2a:	f107 0318 	add.w	r3, r7, #24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f8be 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e38:	e09b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3e:	e098      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e40:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fa00 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e5c:	e089      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e62:	e086      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e64:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e82:	e076      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e88:	e073      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e96:	d102      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e9c:	e069      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea2:	e066      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eb6:	e05c      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ebc:	e059      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec2:	e056      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	03d09000 	.word	0x03d09000
 8004ecc:	003d0900 	.word	0x003d0900
 8004ed0:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d148      	bne.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eec:	d02a      	beq.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d838      	bhi.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f02:	d00d      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8004f04:	e030      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f12:	d102      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f18:	e02b      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f1e:	e028      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fae4 	bl	8005500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f3c:	e019      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f42:	e016      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d107      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f52:	f107 0318 	add.w	r3, r7, #24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f82a 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f60:	e007      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f6c:	e001      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3740      	adds	r7, #64	; 0x40
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	007a1200 	.word	0x007a1200

08004f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f88:	f7fe fc40 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4904      	ldr	r1, [pc, #16]	; (8004fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	08010d9c 	.word	0x08010d9c

08004fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	; 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb8:	4ba1      	ldr	r3, [pc, #644]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004fc2:	4b9f      	ldr	r3, [pc, #636]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	0b1b      	lsrs	r3, r3, #12
 8004fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fce:	4b9c      	ldr	r3, [pc, #624]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fda:	4b99      	ldr	r3, [pc, #612]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8111 	beq.w	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b02      	cmp	r3, #2
 8005002:	f000 8083 	beq.w	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b02      	cmp	r3, #2
 800500a:	f200 80a1 	bhi.w	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d056      	beq.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800501a:	e099      	b.n	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800501c:	4b88      	ldr	r3, [pc, #544]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d02d      	beq.n	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005028:	4b85      	ldr	r3, [pc, #532]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	08db      	lsrs	r3, r3, #3
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	4a84      	ldr	r2, [pc, #528]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b7b      	ldr	r3, [pc, #492]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005082:	e087      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050c6:	e065      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510a:	e043      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b48      	ldr	r3, [pc, #288]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514e:	e021      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b37      	ldr	r3, [pc, #220]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	0a5b      	lsrs	r3, r3, #9
 800519a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ba:	ee17 2a90 	vmov	r2, s15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80051e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e8:	ee17 2a90 	vmov	r2, s15
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80051f0:	4b13      	ldr	r3, [pc, #76]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520a:	edd7 6a07 	vldr	s13, [r7, #28]
 800520e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005216:	ee17 2a90 	vmov	r2, s15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800521e:	e008      	b.n	8005232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	03d09000 	.word	0x03d09000
 8005248:	46000000 	.word	0x46000000
 800524c:	4c742400 	.word	0x4c742400
 8005250:	4a742400 	.word	0x4a742400
 8005254:	4af42400 	.word	0x4af42400

08005258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	; 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005260:	4ba1      	ldr	r3, [pc, #644]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800526a:	4b9f      	ldr	r3, [pc, #636]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	0d1b      	lsrs	r3, r3, #20
 8005270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005276:	4b9c      	ldr	r3, [pc, #624]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005282:	4b99      	ldr	r3, [pc, #612]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	08db      	lsrs	r3, r3, #3
 8005288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8111 	beq.w	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	f000 8083 	beq.w	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	f200 80a1 	bhi.w	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d056      	beq.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052c2:	e099      	b.n	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c4:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02d      	beq.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052d0:	4b85      	ldr	r3, [pc, #532]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	4a84      	ldr	r2, [pc, #528]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a03 	vldr	s12, [r7, #12]
 800530e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800532a:	e087      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b6a      	ldr	r3, [pc, #424]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800536e:	e065      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b59      	ldr	r3, [pc, #356]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b2:	e043      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053f6:	e021      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b37      	ldr	r3, [pc, #220]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800543a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	0a5b      	lsrs	r3, r3, #9
 8005442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005456:	edd7 6a07 	vldr	s13, [r7, #28]
 800545a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800545e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005462:	ee17 2a90 	vmov	r2, s15
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005484:	edd7 6a07 	vldr	s13, [r7, #28]
 8005488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800548c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005490:	ee17 2a90 	vmov	r2, s15
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	0e1b      	lsrs	r3, r3, #24
 800549e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054be:	ee17 2a90 	vmov	r2, s15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054c6:	e008      	b.n	80054da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
}
 80054da:	bf00      	nop
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
 80054ec:	03d09000 	.word	0x03d09000
 80054f0:	46000000 	.word	0x46000000
 80054f4:	4c742400 	.word	0x4c742400
 80054f8:	4a742400 	.word	0x4a742400
 80054fc:	4af42400 	.word	0x4af42400

08005500 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005508:	4ba0      	ldr	r3, [pc, #640]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005512:	4b9e      	ldr	r3, [pc, #632]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800551c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800551e:	4b9b      	ldr	r3, [pc, #620]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005528:	4b98      	ldr	r3, [pc, #608]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	ee07 3a90 	vmov	s15, r3
 800553c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005540:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8111 	beq.w	800576e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b02      	cmp	r3, #2
 8005550:	f000 8083 	beq.w	800565a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b02      	cmp	r3, #2
 8005558:	f200 80a1 	bhi.w	800569e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d056      	beq.n	8005616 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005568:	e099      	b.n	800569e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556a:	4b88      	ldr	r3, [pc, #544]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d02d      	beq.n	80055d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005576:	4b85      	ldr	r3, [pc, #532]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	4a83      	ldr	r2, [pc, #524]	; (8005790 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a0:	4b7a      	ldr	r3, [pc, #488]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055d0:	e087      	b.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e4:	4b69      	ldr	r3, [pc, #420]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005614:	e065      	b.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005620:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800579c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005628:	4b58      	ldr	r3, [pc, #352]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005638:	ed97 6a03 	vldr	s12, [r7, #12]
 800563c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005658:	e043      	b.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80057a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566c:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005680:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569c:	e021      	b.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b0:	4b36      	ldr	r3, [pc, #216]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80056e2:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	0a5b      	lsrs	r3, r3, #9
 80056e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005708:	ee17 2a90 	vmov	r2, s15
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800572a:	edd7 6a07 	vldr	s13, [r7, #28]
 800572e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005736:	ee17 2a90 	vmov	r2, s15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	0e1b      	lsrs	r3, r3, #24
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005758:	edd7 6a07 	vldr	s13, [r7, #28]
 800575c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005764:	ee17 2a90 	vmov	r2, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800576c:	e008      	b.n	8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	3724      	adds	r7, #36	; 0x24
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	58024400 	.word	0x58024400
 8005790:	03d09000 	.word	0x03d09000
 8005794:	46000000 	.word	0x46000000
 8005798:	4c742400 	.word	0x4c742400
 800579c:	4a742400 	.word	0x4a742400
 80057a0:	4af42400 	.word	0x4af42400

080057a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057b2:	4b53      	ldr	r3, [pc, #332]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d101      	bne.n	80057c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e099      	b.n	80058f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80057c2:	4b4f      	ldr	r3, [pc, #316]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a4e      	ldr	r2, [pc, #312]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80057c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ce:	f7fb ff4d 	bl	800166c <HAL_GetTick>
 80057d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057d4:	e008      	b.n	80057e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057d6:	f7fb ff49 	bl	800166c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e086      	b.n	80058f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057e8:	4b45      	ldr	r3, [pc, #276]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057f4:	4b42      	ldr	r3, [pc, #264]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	493f      	ldr	r1, [pc, #252]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005804:	4313      	orrs	r3, r2
 8005806:	628b      	str	r3, [r1, #40]	; 0x28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	3b01      	subs	r3, #1
 800580e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	3b01      	subs	r3, #1
 8005818:	025b      	lsls	r3, r3, #9
 800581a:	b29b      	uxth	r3, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	3b01      	subs	r3, #1
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	3b01      	subs	r3, #1
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005838:	4931      	ldr	r1, [pc, #196]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800583e:	4b30      	ldr	r3, [pc, #192]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	492d      	ldr	r1, [pc, #180]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	f023 0220 	bic.w	r2, r3, #32
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	4928      	ldr	r1, [pc, #160]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 800585e:	4313      	orrs	r3, r2
 8005860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005862:	4b27      	ldr	r3, [pc, #156]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005868:	f023 0310 	bic.w	r3, r3, #16
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800586e:	4b24      	ldr	r3, [pc, #144]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <RCCEx_PLL2_Config+0x160>)
 8005874:	4013      	ands	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	69d2      	ldr	r2, [r2, #28]
 800587a:	00d2      	lsls	r2, r2, #3
 800587c:	4920      	ldr	r1, [pc, #128]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005882:	4b1f      	ldr	r3, [pc, #124]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005888:	f043 0310 	orr.w	r3, r3, #16
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 800589a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800589e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058a0:	e00f      	b.n	80058c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d106      	bne.n	80058b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058b4:	e005      	b.n	80058c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	4a11      	ldr	r2, [pc, #68]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ce:	f7fb fecd 	bl	800166c <HAL_GetTick>
 80058d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058d4:	e008      	b.n	80058e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058d6:	f7fb fec9 	bl	800166c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e006      	b.n	80058f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	58024400 	.word	0x58024400
 8005904:	ffff0007 	.word	0xffff0007

08005908 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005916:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b03      	cmp	r3, #3
 8005920:	d101      	bne.n	8005926 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e099      	b.n	8005a5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005926:	4b4f      	ldr	r3, [pc, #316]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a4e      	ldr	r2, [pc, #312]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 800592c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fb fe9b 	bl	800166c <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005938:	e008      	b.n	800594c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800593a:	f7fb fe97 	bl	800166c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e086      	b.n	8005a5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800594c:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005958:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	051b      	lsls	r3, r3, #20
 8005966:	493f      	ldr	r1, [pc, #252]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005968:	4313      	orrs	r3, r2
 800596a:	628b      	str	r3, [r1, #40]	; 0x28
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	3b01      	subs	r3, #1
 8005972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	3b01      	subs	r3, #1
 800597c:	025b      	lsls	r3, r3, #9
 800597e:	b29b      	uxth	r3, r3
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	3b01      	subs	r3, #1
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	3b01      	subs	r3, #1
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800599c:	4931      	ldr	r1, [pc, #196]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059a2:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	492d      	ldr	r1, [pc, #180]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059b4:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	4928      	ldr	r1, [pc, #160]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <RCCEx_PLL3_Config+0x160>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	69d2      	ldr	r2, [r2, #28]
 80059de:	00d2      	lsls	r2, r2, #3
 80059e0:	4920      	ldr	r1, [pc, #128]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80059e6:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 80059fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a04:	e00f      	b.n	8005a26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d106      	bne.n	8005a1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a0c:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a18:	e005      	b.n	8005a26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a0e      	ldr	r2, [pc, #56]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fb fe1b 	bl	800166c <HAL_GetTick>
 8005a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a3a:	f7fb fe17 	bl	800166c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	ffff0007 	.word	0xffff0007

08005a6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e075      	b.n	8005b6a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fb fb23 	bl	80010dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f868 	bl	8005b74 <HAL_SD_InitCard>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e05d      	b.n	8005b6a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fda7 	bl	8006608 <HAL_SD_GetCardStatus>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e052      	b.n	8005b6a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005ac4:	7e3b      	ldrb	r3, [r7, #24]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005aca:	7e7b      	ldrb	r3, [r7, #25]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10a      	bne.n	8005aee <HAL_SD_Init+0x82>
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_SD_Init+0x78>
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	659a      	str	r2, [r3, #88]	; 0x58
 8005aec:	e00b      	b.n	8005b06 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d104      	bne.n	8005b00 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58
 8005afe:	e002      	b.n	8005b06 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fe65 	bl	80067dc <HAL_SD_ConfigWideBusOperation>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e026      	b.n	8005b6a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b1c:	f7fb fda6 	bl	800166c <HAL_GetTick>
 8005b20:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b22:	e011      	b.n	8005b48 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b24:	f7fb fda2 	bl	800166c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d109      	bne.n	8005b48 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b3a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e010      	b.n	8005b6a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 ff59 	bl	8006a00 <HAL_SD_GetCardState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d1e7      	bne.n	8005b24 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3728      	adds	r7, #40	; 0x28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b08d      	sub	sp, #52	; 0x34
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005b90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b94:	f7fe fdd2 	bl	800473c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e06a      	b.n	8005c8a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	4a36      	ldr	r2, [pc, #216]	; (8005c94 <HAL_SD_InitCard+0x120>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	466a      	mov	r2, sp
 8005bc8:	f107 0318 	add.w	r3, r7, #24
 8005bcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005bd0:	e882 0003 	stmia.w	r2, {r0, r1}
 8005bd4:	f107 030c 	add.w	r3, r7, #12
 8005bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f002 fffc 	bl	8008bd8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f003 f83f 	bl	8008c68 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005bf6:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <HAL_SD_InitCard+0x124>)
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fb fd3f 	bl	8001684 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 ffe8 	bl	8006bdc <SD_PowerON>
 8005c0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e02e      	b.n	8005c8a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 ff07 	bl	8006a40 <SD_InitCard>
 8005c32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e01b      	b.n	8005c8a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 f89a 	bl	8008d94 <SDMMC_CmdBlockLength>
 8005c60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00f      	beq.n	8005c88 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <HAL_SD_InitCard+0x128>)
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	372c      	adds	r7, #44	; 0x2c
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	014f8b59 	.word	0x014f8b59
 8005c98:	00012110 	.word	0x00012110
 8005c9c:	1fe00fff 	.word	0x1fe00fff

08005ca0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e08d      	b.n	8005de4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f040 8086 	bne.w	8005de2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d907      	bls.n	8005cfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e074      	b.n	8005de4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	025a      	lsls	r2, r3, #9
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d002      	beq.n	8005d26 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	025b      	lsls	r3, r3, #9
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	025b      	lsls	r3, r3, #9
 8005d30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d32:	2390      	movs	r3, #144	; 0x90
 8005d34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d36:	2302      	movs	r3, #2
 8005d38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f107 0210 	add.w	r2, r7, #16
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f002 fff5 	bl	8008d3c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d60:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d90a      	bls.n	8005d8e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2282      	movs	r2, #130	; 0x82
 8005d7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d84:	4618      	mov	r0, r3
 8005d86:	f003 f84b 	bl	8008e20 <SDMMC_CmdReadMultiBlock>
 8005d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d8c:	e009      	b.n	8005da2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2281      	movs	r2, #129	; 0x81
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f003 f81d 	bl	8008dda <SDMMC_CmdReadSingleBlock>
 8005da0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0f      	ldr	r2, [pc, #60]	; (8005dec <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e00a      	b.n	8005de4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ddc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e000      	b.n	8005de4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005de2:	2302      	movs	r3, #2
  }
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3730      	adds	r7, #48	; 0x30
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	1fe00fff 	.word	0x1fe00fff

08005df0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08c      	sub	sp, #48	; 0x30
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e08d      	b.n	8005f34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	f040 8086 	bne.w	8005f32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d907      	bls.n	8005e4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e074      	b.n	8005f34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	025a      	lsls	r2, r3, #9
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d002      	beq.n	8005e76 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	025b      	lsls	r3, r3, #9
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	025b      	lsls	r3, r3, #9
 8005e80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e82:	2390      	movs	r3, #144	; 0x90
 8005e84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f107 0210 	add.w	r2, r7, #16
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f002 ff4d 	bl	8008d3c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d90a      	bls.n	8005ede <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	22a0      	movs	r2, #160	; 0xa0
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f002 ffe9 	bl	8008eac <SDMMC_CmdWriteMultiBlock>
 8005eda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005edc:	e009      	b.n	8005ef2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2290      	movs	r2, #144	; 0x90
 8005ee2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eea:	4618      	mov	r0, r3
 8005eec:	f002 ffbb 	bl	8008e66 <SDMMC_CmdWriteSingleBlock>
 8005ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	431a      	orrs	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e00a      	b.n	8005f34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3730      	adds	r7, #48	; 0x30
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	1fe00fff 	.word	0x1fe00fff

08005f40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_SD_IRQHandler+0x2e>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 f924 	bl	80071b4 <SD_Read_IT>
 8005f6c:	e19a      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80ac 	beq.w	80060d6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b9d      	ldr	r3, [pc, #628]	; (8006208 <HAL_SD_IRQHandler+0x2c8>)
 8005f94:	400b      	ands	r3, r1
 8005f96:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d038      	beq.n	8006034 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <HAL_SD_IRQHandler+0x96>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d011      	beq.n	8005ffa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 ff8a 	bl	8008ef4 <SDMMC_CmdStopTransfer>
 8005fe0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f959 	bl	80062ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a83      	ldr	r2, [pc, #524]	; (800620c <HAL_SD_IRQHandler+0x2cc>)
 8006000:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_SD_IRQHandler+0xe4>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f003 fc3d 	bl	80098a4 <HAL_SD_RxCpltCallback>
 800602a:	e13b      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f003 fc2f 	bl	8009890 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006032:	e137      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8132 	beq.w	80062a4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2200      	movs	r2, #0
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2200      	movs	r2, #0
 8006056:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <HAL_SD_IRQHandler+0x12c>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d011      	beq.n	8006090 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f002 ff3f 	bl	8008ef4 <SDMMC_CmdStopTransfer>
 8006076:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f90e 	bl	80062ac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_SD_IRQHandler+0x172>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f003 fbec 	bl	8009890 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <HAL_SD_IRQHandler+0x18e>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80eb 	beq.w	80062a4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f003 fbe8 	bl	80098a4 <HAL_SD_RxCpltCallback>
}
 80060d4:	e0e6      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_SD_IRQHandler+0x1b6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f8a6 	bl	8007240 <SD_Write_IT>
 80060f4:	e0d6      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a2 	beq.w	800624a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	f043 0202 	orr.w	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006132:	f043 0208 	orr.w	r2, r3, #8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	f043 0210 	orr.w	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a26      	ldr	r2, [pc, #152]	; (800620c <HAL_SD_IRQHandler+0x2cc>)
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006194:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061b4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f002 fe9a 	bl	8008ef4 <SDMMC_CmdStopTransfer>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061da:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f854 	bl	80062ac <HAL_SD_ErrorCallback>
}
 8006204:	e04e      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
 8006206:	bf00      	nop
 8006208:	ffff3ec5 	.word	0xffff3ec5
 800620c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d044      	beq.n	80062a4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	2b00      	cmp	r3, #0
 8006220:	d040      	beq.n	80062a4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006230:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f832 	bl	80062ac <HAL_SD_ErrorCallback>
}
 8006248:	e02c      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d025      	beq.n	80062a4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 f848 	bl	8007310 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006280:	e010      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f830 	bl	80072e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006288:	e00c      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f831 	bl	80072fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800629a:	e003      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f819 	bl	80072d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80062a2:	e7ff      	b.n	80062a4 <HAL_SD_IRQHandler+0x364>
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ce:	0f9b      	lsrs	r3, r3, #30
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	0e9b      	lsrs	r3, r3, #26
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	b2da      	uxtb	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b2da      	uxtb	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006316:	b2da      	uxtb	r2, r3
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006320:	0d1b      	lsrs	r3, r3, #20
 8006322:	b29a      	uxth	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633e:	0bdb      	lsrs	r3, r3, #15
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	0b9b      	lsrs	r3, r3, #14
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	0b5b      	lsrs	r3, r3, #13
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006374:	0b1b      	lsrs	r3, r3, #12
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d163      	bne.n	8006458 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006394:	009a      	lsls	r2, r3, #2
 8006396:	f640 73fc 	movw	r3, #4092	; 0xffc
 800639a:	4013      	ands	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80063a0:	0f92      	lsrs	r2, r2, #30
 80063a2:	431a      	orrs	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ac:	0edb      	lsrs	r3, r3, #27
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	0e1b      	lsrs	r3, r3, #24
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d0:	0d5b      	lsrs	r3, r3, #21
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e2:	0c9b      	lsrs	r3, r3, #18
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f4:	0bdb      	lsrs	r3, r3, #15
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	7e1b      	ldrb	r3, [r3, #24]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	3302      	adds	r3, #2
 8006418:	2201      	movs	r2, #1
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006422:	fb02 f203 	mul.w	r2, r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	7a1b      	ldrb	r3, [r3, #8]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	2201      	movs	r2, #1
 8006436:	409a      	lsls	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006444:	0a52      	lsrs	r2, r2, #9
 8006446:	fb02 f203 	mul.w	r2, r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006454:	655a      	str	r2, [r3, #84]	; 0x54
 8006456:	e031      	b.n	80064bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	2b01      	cmp	r3, #1
 800645e:	d11d      	bne.n	800649c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006464:	041b      	lsls	r3, r3, #16
 8006466:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	431a      	orrs	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	3301      	adds	r3, #1
 800647c:	029a      	lsls	r2, r3, #10
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
 800649a:	e00f      	b.n	80064bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a58      	ldr	r2, [pc, #352]	; (8006604 <HAL_SD_GetCardCSD+0x344>)
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e09d      	b.n	80065f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	0b9b      	lsrs	r3, r3, #14
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d2:	09db      	lsrs	r3, r3, #7
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f4:	0fdb      	lsrs	r3, r3, #31
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006500:	0f5b      	lsrs	r3, r3, #29
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	b2da      	uxtb	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006512:	0e9b      	lsrs	r3, r3, #26
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	b2da      	uxtb	r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006524:	0d9b      	lsrs	r3, r3, #22
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006536:	0d5b      	lsrs	r3, r3, #21
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006566:	0bdb      	lsrs	r3, r3, #15
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	0b9b      	lsrs	r3, r3, #14
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658e:	0b5b      	lsrs	r3, r3, #13
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a2:	0b1b      	lsrs	r3, r3, #12
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b6:	0a9b      	lsrs	r3, r3, #10
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	1fe00fff 	.word	0x1fe00fff

08006608 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b094      	sub	sp, #80	; 0x50
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d101      	bne.n	8006628 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0a7      	b.n	8006778 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb62 	bl	8006cf8 <SD_SendSDStatus>
 8006634:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a4f      	ldr	r2, [pc, #316]	; (8006780 <HAL_SD_GetCardStatus+0x178>)
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800665e:	e070      	b.n	8006742 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	b2da      	uxtb	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b29b      	uxth	r3, r3
 8006686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800668a:	b29a      	uxth	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	b29b      	uxth	r3, r3
 8006692:	4313      	orrs	r3, r2
 8006694:	b29a      	uxth	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	061a      	lsls	r2, r3, #24
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80066b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	0e1b      	lsrs	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	0d1b      	lsrs	r3, r3, #20
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	0a9b      	lsrs	r3, r3, #10
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	b2da      	uxtb	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	0e1b      	lsrs	r3, r3, #24
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800674a:	4618      	mov	r0, r3
 800674c:	f002 fb22 	bl	8008d94 <SDMMC_CmdBlockLength>
 8006750:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a08      	ldr	r2, [pc, #32]	; (8006780 <HAL_SD_GetCardStatus+0x178>)
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006764:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006774:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006778:	4618      	mov	r0, r3
 800677a:	3750      	adds	r7, #80	; 0x50
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	1fe00fff 	.word	0x1fe00fff

08006784 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b08d      	sub	sp, #52	; 0x34
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2203      	movs	r2, #3
 80067f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d02e      	beq.n	800685e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006806:	d106      	bne.n	8006816 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	635a      	str	r2, [r3, #52]	; 0x34
 8006814:	e029      	b.n	800686a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800681c:	d10a      	bne.n	8006834 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fb62 	bl	8006ee8 <SD_WideBus_Enable>
 8006824:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	635a      	str	r2, [r3, #52]	; 0x34
 8006832:	e01a      	b.n	800686a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb9f 	bl	8006f7e <SD_WideBus_Disable>
 8006840:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	635a      	str	r2, [r3, #52]	; 0x34
 800684e:	e00c      	b.n	800686a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006854:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	635a      	str	r2, [r3, #52]	; 0x34
 800685c:	e005      	b.n	800686a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a5e      	ldr	r2, [pc, #376]	; (80069f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006880:	e094      	b.n	80069ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006882:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006886:	f7fd ff59 	bl	800473c <HAL_RCCEx_GetPeriphCLKFreq>
 800688a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8083 	beq.w	800699a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695a      	ldr	r2, [r3, #20]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	4950      	ldr	r1, [pc, #320]	; (80069f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80068b2:	fba1 1303 	umull	r1, r3, r1, r3
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d303      	bcc.n	80068c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e05a      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d103      	bne.n	80068d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	e051      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d126      	bne.n	800692e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10e      	bne.n	8006906 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	4a43      	ldr	r2, [pc, #268]	; (80069f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d906      	bls.n	80068fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	4a40      	ldr	r2, [pc, #256]	; (80069f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	0e5b      	lsrs	r3, r3, #25
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e03d      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e039      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	4a39      	ldr	r2, [pc, #228]	; (80069f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d906      	bls.n	8006926 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	4a36      	ldr	r2, [pc, #216]	; (80069f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	0e5b      	lsrs	r3, r3, #25
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e029      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	e025      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10e      	bne.n	8006954 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	4a30      	ldr	r2, [pc, #192]	; (80069fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d906      	bls.n	800694c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	0e1b      	lsrs	r3, r3, #24
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e016      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e012      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	6a3a      	ldr	r2, [r7, #32]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	4a26      	ldr	r2, [pc, #152]	; (80069fc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d906      	bls.n	8006974 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	0e1b      	lsrs	r3, r3, #24
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e002      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681c      	ldr	r4, [r3, #0]
 800697e:	466a      	mov	r2, sp
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006988:	e882 0003 	stmia.w	r2, {r0, r1}
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006992:	4620      	mov	r0, r4
 8006994:	f002 f920 	bl	8008bd8 <SDMMC_Init>
 8006998:	e008      	b.n	80069ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069b4:	4618      	mov	r0, r3
 80069b6:	f002 f9ed 	bl	8008d94 <SDMMC_CmdBlockLength>
 80069ba:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80069e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	372c      	adds	r7, #44	; 0x2c
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd90      	pop	{r4, r7, pc}
 80069f0:	1fe00fff 	.word	0x1fe00fff
 80069f4:	55e63b89 	.word	0x55e63b89
 80069f8:	02faf080 	.word	0x02faf080
 80069fc:	017d7840 	.word	0x017d7840

08006a00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa40 	bl	8006e98 <SD_SendStatus>
 8006a18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	0a5b      	lsrs	r3, r3, #9
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006a36:	693b      	ldr	r3, [r7, #16]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b090      	sub	sp, #64	; 0x40
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006a4c:	f7fa fe0e 	bl	800166c <HAL_GetTick>
 8006a50:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 f917 	bl	8008c8a <SDMMC_GetPowerState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a66:	e0b5      	b.n	8006bd4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d02e      	beq.n	8006ace <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 fb62 	bl	800913e <SDMMC_CmdSendCID>
 8006a7a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <SD_InitCard+0x46>
    {
      return errorstate;
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	e0a6      	b.n	8006bd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 f942 	bl	8008d16 <SDMMC_GetResponse>
 8006a92:	4602      	mov	r2, r0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 f939 	bl	8008d16 <SDMMC_GetResponse>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2108      	movs	r1, #8
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 f930 	bl	8008d16 <SDMMC_GetResponse>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	210c      	movs	r1, #12
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 f927 	bl	8008d16 <SDMMC_GetResponse>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d01d      	beq.n	8006b12 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006ad6:	e019      	b.n	8006b0c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f107 020a 	add.w	r2, r7, #10
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f002 fb6a 	bl	80091bc <SDMMC_CmdSetRelAdd>
 8006ae8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	e06f      	b.n	8006bd4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006af4:	f7fa fdba 	bl	800166c <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3287 	movw	r2, #4999	; 0x1387
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d902      	bls.n	8006b0c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006b06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b0a:	e063      	b.n	8006bd4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006b0c:	897b      	ldrh	r3, [r7, #10]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0e2      	beq.n	8006ad8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d036      	beq.n	8006b88 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006b1a:	897b      	ldrh	r3, [r7, #10]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f002 fb24 	bl	800917c <SDMMC_CmdSendCSD>
 8006b34:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <SD_InitCard+0x100>
    {
      return errorstate;
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	e049      	b.n	8006bd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f002 f8e5 	bl	8008d16 <SDMMC_GetResponse>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2104      	movs	r1, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 f8dc 	bl	8008d16 <SDMMC_GetResponse>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2108      	movs	r1, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 f8d3 	bl	8008d16 <SDMMC_GetResponse>
 8006b70:	4602      	mov	r2, r0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	210c      	movs	r1, #12
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 f8ca 	bl	8008d16 <SDMMC_GetResponse>
 8006b82:	4602      	mov	r2, r0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f8c1 	bl	8008d16 <SDMMC_GetResponse>
 8006b94:	4603      	mov	r3, r0
 8006b96:	0d1a      	lsrs	r2, r3, #20
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fb8c 	bl	80062c0 <HAL_SD_GetCardCSD>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bb2:	e00f      	b.n	8006bd4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f002 f9d3 	bl	8008f6c <SDMMC_CmdSelDesel>
 8006bc6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <SD_InitCard+0x192>
  {
    return errorstate;
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	e000      	b.n	8006bd4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3740      	adds	r7, #64	; 0x40
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f002 f9dc 	bl	8008fb2 <SDMMC_CmdGoIdleState>
 8006bfa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	e072      	b.n	8006cec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 f9ef 	bl	8008fee <SDMMC_CmdOperCond>
 8006c10:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c18:	d10d      	bne.n	8006c36 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 f9c4 	bl	8008fb2 <SDMMC_CmdGoIdleState>
 8006c2a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <SD_PowerON+0x60>
    {
      return errorstate;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	e05a      	b.n	8006cec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d137      	bne.n	8006cb4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 f9ef 	bl	800902e <SDMMC_CmdAppCommand>
 8006c50:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d02d      	beq.n	8006cb4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c5c:	e046      	b.n	8006cec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f002 f9e2 	bl	800902e <SDMMC_CmdAppCommand>
 8006c6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	e03a      	b.n	8006cec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	491e      	ldr	r1, [pc, #120]	; (8006cf4 <SD_PowerON+0x118>)
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 f9f9 	bl	8009074 <SDMMC_CmdAppOperCommand>
 8006c82:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c8e:	e02d      	b.n	8006cec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 f83d 	bl	8008d16 <SDMMC_GetResponse>
 8006c9c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	0fdb      	lsrs	r3, r3, #31
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <SD_PowerON+0xce>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <SD_PowerON+0xd0>
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]

    count++;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d802      	bhi.n	8006cc4 <SD_PowerON+0xe8>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0cc      	beq.n	8006c5e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d902      	bls.n	8006cd4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd2:	e00b      	b.n	8006cec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	c1100000 	.word	0xc1100000

08006cf8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d02:	f7fa fcb3 	bl	800166c <HAL_GetTick>
 8006d06:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 ffff 	bl	8008d16 <SDMMC_GetResponse>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d22:	d102      	bne.n	8006d2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d28:	e0b0      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 f82f 	bl	8008d94 <SDMMC_CmdBlockLength>
 8006d36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	e0a0      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f002 f969 	bl	800902e <SDMMC_CmdAppCommand>
 8006d5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e08d      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006d7a:	2360      	movs	r3, #96	; 0x60
 8006d7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f107 0208 	add.w	r2, r7, #8
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 ffd1 	bl	8008d3c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 fa51 	bl	8009246 <SDMMC_CmdStatusRegister>
 8006da4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d02b      	beq.n	8006e04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	e069      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d013      	beq.n	8006dee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dca:	e00d      	b.n	8006de8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 ff2b 	bl	8008c2c <SDMMC_ReadFIFO>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	601a      	str	r2, [r3, #0]
        pData++;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	3304      	adds	r3, #4
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	3301      	adds	r3, #1
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d9ee      	bls.n	8006dcc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006dee:	f7fa fc3d 	bl	800166c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e02:	e043      	b.n	8006e8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0d2      	beq.n	8006db8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e20:	2308      	movs	r3, #8
 8006e22:	e033      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	e02a      	b.n	8006e8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d017      	beq.n	8006e74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006e44:	2320      	movs	r3, #32
 8006e46:	e021      	b.n	8006e8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 feed 	bl	8008c2c <SDMMC_ReadFIFO>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	601a      	str	r2, [r3, #0]
    pData++;
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e5e:	f7fa fc05 	bl	800166c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d102      	bne.n	8006e74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e72:	e00b      	b.n	8006e8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e2      	bne.n	8006e48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a03      	ldr	r2, [pc, #12]	; (8006e94 <SD_SendSDStatus+0x19c>)
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3730      	adds	r7, #48	; 0x30
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	18000f3a 	.word	0x18000f3a

08006e98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eac:	e018      	b.n	8006ee0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	041b      	lsls	r3, r3, #16
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f002 f9a0 	bl	8009200 <SDMMC_CmdSendStatus>
 8006ec0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	e009      	b.n	8006ee0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 ff1f 	bl	8008d16 <SDMMC_GetResponse>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 ff09 	bl	8008d16 <SDMMC_GetResponse>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f0e:	d102      	bne.n	8006f16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f14:	e02f      	b.n	8006f76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f16:	f107 030c 	add.w	r3, r7, #12
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f879 	bl	8007014 <SD_FindSCR>
 8006f22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	e023      	b.n	8006f76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01c      	beq.n	8006f72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f002 f872 	bl	800902e <SDMMC_CmdAppCommand>
 8006f4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	e00f      	b.n	8006f76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f002 f8a9 	bl	80090b4 <SDMMC_CmdBusWidth>
 8006f62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	e003      	b.n	8006f76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e001      	b.n	8006f76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 febe 	bl	8008d16 <SDMMC_GetResponse>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa4:	d102      	bne.n	8006fac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006faa:	e02f      	b.n	800700c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fac:	f107 030c 	add.w	r3, r7, #12
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f82e 	bl	8007014 <SD_FindSCR>
 8006fb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	e023      	b.n	800700c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01c      	beq.n	8007008 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f002 f827 	bl	800902e <SDMMC_CmdAppCommand>
 8006fe0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	e00f      	b.n	800700c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f002 f85e 	bl	80090b4 <SDMMC_CmdBusWidth>
 8006ff8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	e003      	b.n	800700c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007004:	2300      	movs	r3, #0
 8007006:	e001      	b.n	800700c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08e      	sub	sp, #56	; 0x38
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800701e:	f7fa fb25 	bl	800166c <HAL_GetTick>
 8007022:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007028:	2300      	movs	r3, #0
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2108      	movs	r1, #8
 800703a:	4618      	mov	r0, r3
 800703c:	f001 feaa 	bl	8008d94 <SDMMC_CmdBlockLength>
 8007040:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	e0ad      	b.n	80071a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f001 ffe8 	bl	800902e <SDMMC_CmdAppCommand>
 800705e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	e09e      	b.n	80071a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800706a:	f04f 33ff 	mov.w	r3, #4294967295
 800706e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007070:	2308      	movs	r3, #8
 8007072:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007078:	2302      	movs	r3, #2
 800707a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800707c:	2300      	movs	r3, #0
 800707e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007080:	2301      	movs	r3, #1
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f107 0210 	add.w	r2, r7, #16
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f001 fe54 	bl	8008d3c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f002 f82e 	bl	80090fa <SDMMC_CmdSendSCR>
 800709e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d027      	beq.n	80070f6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	e07e      	b.n	80071a8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d113      	bne.n	80070e0 <SD_FindSCR+0xcc>
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fdb2 	bl	8008c2c <SDMMC_ReadFIFO>
 80070c8:	4603      	mov	r3, r0
 80070ca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fdab 	bl	8008c2c <SDMMC_ReadFIFO>
 80070d6:	4603      	mov	r3, r0
 80070d8:	60fb      	str	r3, [r7, #12]
      index++;
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	3301      	adds	r3, #1
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070e0:	f7fa fac4 	bl	800166c <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d102      	bne.n	80070f6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070f4:	e058      	b.n	80071a8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fc:	f240 532a 	movw	r3, #1322	; 0x52a
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0d1      	beq.n	80070aa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2208      	movs	r2, #8
 800711a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800711c:	2308      	movs	r3, #8
 800711e:	e043      	b.n	80071a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2202      	movs	r2, #2
 8007134:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	e036      	b.n	80071a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2220      	movs	r2, #32
 800714e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007150:	2320      	movs	r3, #32
 8007152:	e029      	b.n	80071a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <SD_FindSCR+0x19c>)
 800715a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	061a      	lsls	r2, r3, #24
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007168:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007172:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	0e1b      	lsrs	r3, r3, #24
 8007178:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	601a      	str	r2, [r3, #0]
    scr++;
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	3304      	adds	r3, #4
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	061a      	lsls	r2, r3, #24
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007190:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800719a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	0e1b      	lsrs	r3, r3, #24
 80071a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3738      	adds	r7, #56	; 0x38
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	18000f3a 	.word	0x18000f3a

080071b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	2b1f      	cmp	r3, #31
 80071c8:	d936      	bls.n	8007238 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	e027      	b.n	8007220 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 fd29 	bl	8008c2c <SDMMC_ReadFIFO>
 80071da:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3301      	adds	r3, #1
 80071e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3301      	adds	r3, #1
 80071f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	3301      	adds	r3, #1
 8007208:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	0e1b      	lsrs	r3, r3, #24
 800720e:	b2da      	uxtb	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	3301      	adds	r3, #1
 8007218:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	3301      	adds	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b07      	cmp	r3, #7
 8007224:	d9d4      	bls.n	80071d0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	f1a3 0220 	sub.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	2b1f      	cmp	r3, #31
 8007254:	d93a      	bls.n	80072cc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e02b      	b.n	80072b4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3301      	adds	r3, #1
 8007266:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	021a      	lsls	r2, r3, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3301      	adds	r3, #1
 8007278:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	041a      	lsls	r2, r3, #16
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3301      	adds	r3, #1
 800728a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	061a      	lsls	r2, r3, #24
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3301      	adds	r3, #1
 800729c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f107 020c 	add.w	r2, r7, #12
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fccc 	bl	8008c46 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3301      	adds	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b07      	cmp	r3, #7
 80072b8:	d9d0      	bls.n	800725c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f1a3 0220 	sub.w	r2, r3, #32
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	621a      	str	r2, [r3, #32]
  }
}
 80072cc:	bf00      	nop
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e049      	b.n	80073ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f841 	bl	80073d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f000 fa0e 	bl	8007784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d001      	beq.n	8007400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e05e      	b.n	80074be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2b      	ldr	r2, [pc, #172]	; (80074cc <HAL_TIM_Base_Start_IT+0xe4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d02c      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742a:	d027      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d022      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a26      	ldr	r2, [pc, #152]	; (80074d4 <HAL_TIM_Base_Start_IT+0xec>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01d      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a24      	ldr	r2, [pc, #144]	; (80074d8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d018      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a23      	ldr	r2, [pc, #140]	; (80074dc <HAL_TIM_Base_Start_IT+0xf4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00e      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a20      	ldr	r2, [pc, #128]	; (80074e4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_TIM_Base_Start_IT+0x100>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x94>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1d      	ldr	r2, [pc, #116]	; (80074ec <HAL_TIM_Base_Start_IT+0x104>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d115      	bne.n	80074a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <HAL_TIM_Base_Start_IT+0x108>)
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b06      	cmp	r3, #6
 800748c:	d015      	beq.n	80074ba <HAL_TIM_Base_Start_IT+0xd2>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007494:	d011      	beq.n	80074ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0201 	orr.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a6:	e008      	b.n	80074ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e000      	b.n	80074bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40001800 	.word	0x40001800
 80074e4:	40014000 	.word	0x40014000
 80074e8:	4000e000 	.word	0x4000e000
 80074ec:	4000e400 	.word	0x4000e400
 80074f0:	00010007 	.word	0x00010007

080074f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d122      	bne.n	8007550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d11b      	bne.n	8007550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0202 	mvn.w	r2, #2
 8007520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f905 	bl	8007746 <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8f7 	bl	8007732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f908 	bl	800775a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b04      	cmp	r3, #4
 800755c:	d122      	bne.n	80075a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b04      	cmp	r3, #4
 800756a:	d11b      	bne.n	80075a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0204 	mvn.w	r2, #4
 8007574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8db 	bl	8007746 <HAL_TIM_IC_CaptureCallback>
 8007590:	e005      	b.n	800759e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8cd 	bl	8007732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f8de 	bl	800775a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d122      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d11b      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0208 	mvn.w	r2, #8
 80075c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2204      	movs	r2, #4
 80075ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8b1 	bl	8007746 <HAL_TIM_IC_CaptureCallback>
 80075e4:	e005      	b.n	80075f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8a3 	bl	8007732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8b4 	bl	800775a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b10      	cmp	r3, #16
 8007604:	d122      	bne.n	800764c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b10      	cmp	r3, #16
 8007612:	d11b      	bne.n	800764c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0210 	mvn.w	r2, #16
 800761c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2208      	movs	r2, #8
 8007622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f887 	bl	8007746 <HAL_TIM_IC_CaptureCallback>
 8007638:	e005      	b.n	8007646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f879 	bl	8007732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f88a 	bl	800775a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b01      	cmp	r3, #1
 8007658:	d10e      	bne.n	8007678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d107      	bne.n	8007678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0201 	mvn.w	r2, #1
 8007670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 fc1a 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d10e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f920 	bl	80078e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d10e      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	d107      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f913 	bl	80078f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d10e      	bne.n	80076fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f838 	bl	800776e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b20      	cmp	r3, #32
 800770a:	d10e      	bne.n	800772a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	d107      	bne.n	800772a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0220 	mvn.w	r2, #32
 8007722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f8d3 	bl	80078d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a44      	ldr	r2, [pc, #272]	; (80078a8 <TIM_Base_SetConfig+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <TIM_Base_SetConfig+0x40>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a2:	d00f      	beq.n	80077c4 <TIM_Base_SetConfig+0x40>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a41      	ldr	r2, [pc, #260]	; (80078ac <TIM_Base_SetConfig+0x128>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_Base_SetConfig+0x40>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a40      	ldr	r2, [pc, #256]	; (80078b0 <TIM_Base_SetConfig+0x12c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_Base_SetConfig+0x40>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <TIM_Base_SetConfig+0x130>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a3e      	ldr	r2, [pc, #248]	; (80078b8 <TIM_Base_SetConfig+0x134>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d108      	bne.n	80077d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a33      	ldr	r2, [pc, #204]	; (80078a8 <TIM_Base_SetConfig+0x124>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d027      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d023      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a30      	ldr	r2, [pc, #192]	; (80078ac <TIM_Base_SetConfig+0x128>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01f      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <TIM_Base_SetConfig+0x12c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d01b      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a2e      	ldr	r2, [pc, #184]	; (80078b4 <TIM_Base_SetConfig+0x130>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d017      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2d      	ldr	r2, [pc, #180]	; (80078b8 <TIM_Base_SetConfig+0x134>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d013      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <TIM_Base_SetConfig+0x138>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00f      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2b      	ldr	r2, [pc, #172]	; (80078c0 <TIM_Base_SetConfig+0x13c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00b      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <TIM_Base_SetConfig+0x140>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d007      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <TIM_Base_SetConfig+0x144>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d003      	beq.n	800782e <TIM_Base_SetConfig+0xaa>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a28      	ldr	r2, [pc, #160]	; (80078cc <TIM_Base_SetConfig+0x148>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d108      	bne.n	8007840 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a10      	ldr	r2, [pc, #64]	; (80078a8 <TIM_Base_SetConfig+0x124>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00f      	beq.n	800788c <TIM_Base_SetConfig+0x108>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <TIM_Base_SetConfig+0x134>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0x108>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a11      	ldr	r2, [pc, #68]	; (80078bc <TIM_Base_SetConfig+0x138>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0x108>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <TIM_Base_SetConfig+0x13c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0x108>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a0f      	ldr	r2, [pc, #60]	; (80078c4 <TIM_Base_SetConfig+0x140>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d103      	bne.n	8007894 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	615a      	str	r2, [r3, #20]
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40010000 	.word	0x40010000
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40000c00 	.word	0x40000c00
 80078b8:	40010400 	.word	0x40010400
 80078bc:	40014000 	.word	0x40014000
 80078c0:	40014400 	.word	0x40014400
 80078c4:	40014800 	.word	0x40014800
 80078c8:	4000e000 	.word	0x4000e000
 80078cc:	4000e400 	.word	0x4000e400

080078d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e042      	b.n	80079a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7f9 fc77 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2224      	movs	r2, #36	; 0x24
 800793a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f82c 	bl	80079ac <UART_SetConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e022      	b.n	80079a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fe7e 	bl	8008668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800797a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800798a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 ff05 	bl	80087ac <UART_CheckIdleState>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079ac:	b5b0      	push	{r4, r5, r7, lr}
 80079ae:	b08e      	sub	sp, #56	; 0x38
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4bbf      	ldr	r3, [pc, #764]	; (8007cd8 <UART_SetConfig+0x32c>)
 80079da:	4013      	ands	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4ab5      	ldr	r2, [pc, #724]	; (8007cdc <UART_SetConfig+0x330>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a12:	4313      	orrs	r3, r2
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	4bb0      	ldr	r3, [pc, #704]	; (8007ce0 <UART_SetConfig+0x334>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a26:	430b      	orrs	r3, r1
 8007a28:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f023 010f 	bic.w	r1, r3, #15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4aa7      	ldr	r2, [pc, #668]	; (8007ce4 <UART_SetConfig+0x338>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d176      	bne.n	8007b38 <UART_SetConfig+0x18c>
 8007a4a:	4ba7      	ldr	r3, [pc, #668]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a52:	2b28      	cmp	r3, #40	; 0x28
 8007a54:	d86c      	bhi.n	8007b30 <UART_SetConfig+0x184>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0xb0>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007b01 	.word	0x08007b01
 8007a60:	08007b31 	.word	0x08007b31
 8007a64:	08007b31 	.word	0x08007b31
 8007a68:	08007b31 	.word	0x08007b31
 8007a6c:	08007b31 	.word	0x08007b31
 8007a70:	08007b31 	.word	0x08007b31
 8007a74:	08007b31 	.word	0x08007b31
 8007a78:	08007b31 	.word	0x08007b31
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b31 	.word	0x08007b31
 8007a84:	08007b31 	.word	0x08007b31
 8007a88:	08007b31 	.word	0x08007b31
 8007a8c:	08007b31 	.word	0x08007b31
 8007a90:	08007b31 	.word	0x08007b31
 8007a94:	08007b31 	.word	0x08007b31
 8007a98:	08007b31 	.word	0x08007b31
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b31 	.word	0x08007b31
 8007aa4:	08007b31 	.word	0x08007b31
 8007aa8:	08007b31 	.word	0x08007b31
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b31 	.word	0x08007b31
 8007ab4:	08007b31 	.word	0x08007b31
 8007ab8:	08007b31 	.word	0x08007b31
 8007abc:	08007b19 	.word	0x08007b19
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b31 	.word	0x08007b31
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007b31 	.word	0x08007b31
 8007ad4:	08007b31 	.word	0x08007b31
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b31 	.word	0x08007b31
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b31 	.word	0x08007b31
 8007af0:	08007b31 	.word	0x08007b31
 8007af4:	08007b31 	.word	0x08007b31
 8007af8:	08007b31 	.word	0x08007b31
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	e326      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0e:	e322      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e31e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1e:	e31a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b20:	2320      	movs	r3, #32
 8007b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b26:	e316      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b28:	2340      	movs	r3, #64	; 0x40
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e312      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b36:	e30e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a6b      	ldr	r2, [pc, #428]	; (8007cec <UART_SetConfig+0x340>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d130      	bne.n	8007ba4 <UART_SetConfig+0x1f8>
 8007b42:	4b69      	ldr	r3, [pc, #420]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d826      	bhi.n	8007b9c <UART_SetConfig+0x1f0>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x1a8>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b6d 	.word	0x08007b6d
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b8d 	.word	0x08007b8d
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b72:	e2f0      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7a:	e2ec      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b82:	e2e8      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8a:	e2e4      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b92:	e2e0      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9a:	e2dc      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba2:	e2d8      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a51      	ldr	r2, [pc, #324]	; (8007cf0 <UART_SetConfig+0x344>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d130      	bne.n	8007c10 <UART_SetConfig+0x264>
 8007bae:	4b4e      	ldr	r3, [pc, #312]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d826      	bhi.n	8007c08 <UART_SetConfig+0x25c>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0x214>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007be9 	.word	0x08007be9
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007bf9 	.word	0x08007bf9
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	e2ba      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be6:	e2b6      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bee:	e2b2      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf6:	e2ae      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfe:	e2aa      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c06:	e2a6      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c08:	2380      	movs	r3, #128	; 0x80
 8007c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0e:	e2a2      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a37      	ldr	r2, [pc, #220]	; (8007cf4 <UART_SetConfig+0x348>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d130      	bne.n	8007c7c <UART_SetConfig+0x2d0>
 8007c1a:	4b33      	ldr	r3, [pc, #204]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d826      	bhi.n	8007c74 <UART_SetConfig+0x2c8>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x280>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4a:	e284      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c52:	e280      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5a:	e27c      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c62:	e278      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6a:	e274      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c72:	e270      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7a:	e26c      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <UART_SetConfig+0x34c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d142      	bne.n	8007d0c <UART_SetConfig+0x360>
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d838      	bhi.n	8007d04 <UART_SetConfig+0x358>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x2ec>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cc1 	.word	0x08007cc1
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cb6:	e24e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cbe:	e24a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc6:	e246      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cce:	e242      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	e23e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007cd8:	cfff69f3 	.word	0xcfff69f3
 8007cdc:	58000c00 	.word	0x58000c00
 8007ce0:	11fff4ff 	.word	0x11fff4ff
 8007ce4:	40011000 	.word	0x40011000
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	40004400 	.word	0x40004400
 8007cf0:	40004800 	.word	0x40004800
 8007cf4:	40004c00 	.word	0x40004c00
 8007cf8:	40005000 	.word	0x40005000
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d02:	e228      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0a:	e224      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4ab1      	ldr	r2, [pc, #708]	; (8007fd8 <UART_SetConfig+0x62c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d176      	bne.n	8007e04 <UART_SetConfig+0x458>
 8007d16:	4bb1      	ldr	r3, [pc, #708]	; (8007fdc <UART_SetConfig+0x630>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1e:	2b28      	cmp	r3, #40	; 0x28
 8007d20:	d86c      	bhi.n	8007dfc <UART_SetConfig+0x450>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x37c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007dcd 	.word	0x08007dcd
 8007d2c:	08007dfd 	.word	0x08007dfd
 8007d30:	08007dfd 	.word	0x08007dfd
 8007d34:	08007dfd 	.word	0x08007dfd
 8007d38:	08007dfd 	.word	0x08007dfd
 8007d3c:	08007dfd 	.word	0x08007dfd
 8007d40:	08007dfd 	.word	0x08007dfd
 8007d44:	08007dfd 	.word	0x08007dfd
 8007d48:	08007dd5 	.word	0x08007dd5
 8007d4c:	08007dfd 	.word	0x08007dfd
 8007d50:	08007dfd 	.word	0x08007dfd
 8007d54:	08007dfd 	.word	0x08007dfd
 8007d58:	08007dfd 	.word	0x08007dfd
 8007d5c:	08007dfd 	.word	0x08007dfd
 8007d60:	08007dfd 	.word	0x08007dfd
 8007d64:	08007dfd 	.word	0x08007dfd
 8007d68:	08007ddd 	.word	0x08007ddd
 8007d6c:	08007dfd 	.word	0x08007dfd
 8007d70:	08007dfd 	.word	0x08007dfd
 8007d74:	08007dfd 	.word	0x08007dfd
 8007d78:	08007dfd 	.word	0x08007dfd
 8007d7c:	08007dfd 	.word	0x08007dfd
 8007d80:	08007dfd 	.word	0x08007dfd
 8007d84:	08007dfd 	.word	0x08007dfd
 8007d88:	08007de5 	.word	0x08007de5
 8007d8c:	08007dfd 	.word	0x08007dfd
 8007d90:	08007dfd 	.word	0x08007dfd
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007dfd 	.word	0x08007dfd
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	08007dfd 	.word	0x08007dfd
 8007da4:	08007dfd 	.word	0x08007dfd
 8007da8:	08007ded 	.word	0x08007ded
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e1c0      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e1bc      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e1b8      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	e1b4      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df2:	e1b0      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfa:	e1ac      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e02:	e1a8      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a75      	ldr	r2, [pc, #468]	; (8007fe0 <UART_SetConfig+0x634>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d130      	bne.n	8007e70 <UART_SetConfig+0x4c4>
 8007e0e:	4b73      	ldr	r3, [pc, #460]	; (8007fdc <UART_SetConfig+0x630>)
 8007e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	d826      	bhi.n	8007e68 <UART_SetConfig+0x4bc>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0x474>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e59 	.word	0x08007e59
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e18a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e186      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e182      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e17e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e58:	2320      	movs	r3, #32
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e17a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e60:	2340      	movs	r3, #64	; 0x40
 8007e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e66:	e176      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e68:	2380      	movs	r3, #128	; 0x80
 8007e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e6e:	e172      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a5b      	ldr	r2, [pc, #364]	; (8007fe4 <UART_SetConfig+0x638>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d130      	bne.n	8007edc <UART_SetConfig+0x530>
 8007e7a:	4b58      	ldr	r3, [pc, #352]	; (8007fdc <UART_SetConfig+0x630>)
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d826      	bhi.n	8007ed4 <UART_SetConfig+0x528>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0x4e0>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ea5 	.word	0x08007ea5
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007eb5 	.word	0x08007eb5
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e154      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e150      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e14c      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e148      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e144      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ecc:	2340      	movs	r3, #64	; 0x40
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e140      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eda:	e13c      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a41      	ldr	r2, [pc, #260]	; (8007fe8 <UART_SetConfig+0x63c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	f040 8082 	bne.w	8007fec <UART_SetConfig+0x640>
 8007ee8:	4b3c      	ldr	r3, [pc, #240]	; (8007fdc <UART_SetConfig+0x630>)
 8007eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef0:	2b28      	cmp	r3, #40	; 0x28
 8007ef2:	d86d      	bhi.n	8007fd0 <UART_SetConfig+0x624>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x550>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007fa1 	.word	0x08007fa1
 8007f00:	08007fd1 	.word	0x08007fd1
 8007f04:	08007fd1 	.word	0x08007fd1
 8007f08:	08007fd1 	.word	0x08007fd1
 8007f0c:	08007fd1 	.word	0x08007fd1
 8007f10:	08007fd1 	.word	0x08007fd1
 8007f14:	08007fd1 	.word	0x08007fd1
 8007f18:	08007fd1 	.word	0x08007fd1
 8007f1c:	08007fa9 	.word	0x08007fa9
 8007f20:	08007fd1 	.word	0x08007fd1
 8007f24:	08007fd1 	.word	0x08007fd1
 8007f28:	08007fd1 	.word	0x08007fd1
 8007f2c:	08007fd1 	.word	0x08007fd1
 8007f30:	08007fd1 	.word	0x08007fd1
 8007f34:	08007fd1 	.word	0x08007fd1
 8007f38:	08007fd1 	.word	0x08007fd1
 8007f3c:	08007fb1 	.word	0x08007fb1
 8007f40:	08007fd1 	.word	0x08007fd1
 8007f44:	08007fd1 	.word	0x08007fd1
 8007f48:	08007fd1 	.word	0x08007fd1
 8007f4c:	08007fd1 	.word	0x08007fd1
 8007f50:	08007fd1 	.word	0x08007fd1
 8007f54:	08007fd1 	.word	0x08007fd1
 8007f58:	08007fd1 	.word	0x08007fd1
 8007f5c:	08007fb9 	.word	0x08007fb9
 8007f60:	08007fd1 	.word	0x08007fd1
 8007f64:	08007fd1 	.word	0x08007fd1
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08007fd1 	.word	0x08007fd1
 8007f70:	08007fd1 	.word	0x08007fd1
 8007f74:	08007fd1 	.word	0x08007fd1
 8007f78:	08007fd1 	.word	0x08007fd1
 8007f7c:	08007fc1 	.word	0x08007fc1
 8007f80:	08007fd1 	.word	0x08007fd1
 8007f84:	08007fd1 	.word	0x08007fd1
 8007f88:	08007fd1 	.word	0x08007fd1
 8007f8c:	08007fd1 	.word	0x08007fd1
 8007f90:	08007fd1 	.word	0x08007fd1
 8007f94:	08007fd1 	.word	0x08007fd1
 8007f98:	08007fd1 	.word	0x08007fd1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e0d6      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fae:	e0d2      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb6:	e0ce      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e0ca      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e0c6      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e0c2      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e0be      	b.n	8008156 <UART_SetConfig+0x7aa>
 8007fd8:	40011400 	.word	0x40011400
 8007fdc:	58024400 	.word	0x58024400
 8007fe0:	40007800 	.word	0x40007800
 8007fe4:	40007c00 	.word	0x40007c00
 8007fe8:	40011800 	.word	0x40011800
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4aad      	ldr	r2, [pc, #692]	; (80082a8 <UART_SetConfig+0x8fc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d176      	bne.n	80080e4 <UART_SetConfig+0x738>
 8007ff6:	4bad      	ldr	r3, [pc, #692]	; (80082ac <UART_SetConfig+0x900>)
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ffe:	2b28      	cmp	r3, #40	; 0x28
 8008000:	d86c      	bhi.n	80080dc <UART_SetConfig+0x730>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <UART_SetConfig+0x65c>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	080080ad 	.word	0x080080ad
 800800c:	080080dd 	.word	0x080080dd
 8008010:	080080dd 	.word	0x080080dd
 8008014:	080080dd 	.word	0x080080dd
 8008018:	080080dd 	.word	0x080080dd
 800801c:	080080dd 	.word	0x080080dd
 8008020:	080080dd 	.word	0x080080dd
 8008024:	080080dd 	.word	0x080080dd
 8008028:	080080b5 	.word	0x080080b5
 800802c:	080080dd 	.word	0x080080dd
 8008030:	080080dd 	.word	0x080080dd
 8008034:	080080dd 	.word	0x080080dd
 8008038:	080080dd 	.word	0x080080dd
 800803c:	080080dd 	.word	0x080080dd
 8008040:	080080dd 	.word	0x080080dd
 8008044:	080080dd 	.word	0x080080dd
 8008048:	080080bd 	.word	0x080080bd
 800804c:	080080dd 	.word	0x080080dd
 8008050:	080080dd 	.word	0x080080dd
 8008054:	080080dd 	.word	0x080080dd
 8008058:	080080dd 	.word	0x080080dd
 800805c:	080080dd 	.word	0x080080dd
 8008060:	080080dd 	.word	0x080080dd
 8008064:	080080dd 	.word	0x080080dd
 8008068:	080080c5 	.word	0x080080c5
 800806c:	080080dd 	.word	0x080080dd
 8008070:	080080dd 	.word	0x080080dd
 8008074:	080080dd 	.word	0x080080dd
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080dd 	.word	0x080080dd
 8008080:	080080dd 	.word	0x080080dd
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080cd 	.word	0x080080cd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080dd 	.word	0x080080dd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b2:	e050      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ba:	e04c      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c2:	e048      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ca:	e044      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080cc:	2320      	movs	r3, #32
 80080ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d2:	e040      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080da:	e03c      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e2:	e038      	b.n	8008156 <UART_SetConfig+0x7aa>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a71      	ldr	r2, [pc, #452]	; (80082b0 <UART_SetConfig+0x904>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d130      	bne.n	8008150 <UART_SetConfig+0x7a4>
 80080ee:	4b6f      	ldr	r3, [pc, #444]	; (80082ac <UART_SetConfig+0x900>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d826      	bhi.n	8008148 <UART_SetConfig+0x79c>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x754>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008119 	.word	0x08008119
 8008104:	08008121 	.word	0x08008121
 8008108:	08008129 	.word	0x08008129
 800810c:	08008131 	.word	0x08008131
 8008110:	08008139 	.word	0x08008139
 8008114:	08008141 	.word	0x08008141
 8008118:	2302      	movs	r3, #2
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e01a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e016      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e012      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e00e      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008138:	2320      	movs	r3, #32
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	e00a      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008146:	e006      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814e:	e002      	b.n	8008156 <UART_SetConfig+0x7aa>
 8008150:	2380      	movs	r3, #128	; 0x80
 8008152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a55      	ldr	r2, [pc, #340]	; (80082b0 <UART_SetConfig+0x904>)
 800815c:	4293      	cmp	r3, r2
 800815e:	f040 80f0 	bne.w	8008342 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008166:	2b20      	cmp	r3, #32
 8008168:	dc46      	bgt.n	80081f8 <UART_SetConfig+0x84c>
 800816a:	2b02      	cmp	r3, #2
 800816c:	db75      	blt.n	800825a <UART_SetConfig+0x8ae>
 800816e:	3b02      	subs	r3, #2
 8008170:	2b1e      	cmp	r3, #30
 8008172:	d872      	bhi.n	800825a <UART_SetConfig+0x8ae>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x7d0>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081ff 	.word	0x080081ff
 8008180:	0800825b 	.word	0x0800825b
 8008184:	08008207 	.word	0x08008207
 8008188:	0800825b 	.word	0x0800825b
 800818c:	0800825b 	.word	0x0800825b
 8008190:	0800825b 	.word	0x0800825b
 8008194:	08008217 	.word	0x08008217
 8008198:	0800825b 	.word	0x0800825b
 800819c:	0800825b 	.word	0x0800825b
 80081a0:	0800825b 	.word	0x0800825b
 80081a4:	0800825b 	.word	0x0800825b
 80081a8:	0800825b 	.word	0x0800825b
 80081ac:	0800825b 	.word	0x0800825b
 80081b0:	0800825b 	.word	0x0800825b
 80081b4:	08008227 	.word	0x08008227
 80081b8:	0800825b 	.word	0x0800825b
 80081bc:	0800825b 	.word	0x0800825b
 80081c0:	0800825b 	.word	0x0800825b
 80081c4:	0800825b 	.word	0x0800825b
 80081c8:	0800825b 	.word	0x0800825b
 80081cc:	0800825b 	.word	0x0800825b
 80081d0:	0800825b 	.word	0x0800825b
 80081d4:	0800825b 	.word	0x0800825b
 80081d8:	0800825b 	.word	0x0800825b
 80081dc:	0800825b 	.word	0x0800825b
 80081e0:	0800825b 	.word	0x0800825b
 80081e4:	0800825b 	.word	0x0800825b
 80081e8:	0800825b 	.word	0x0800825b
 80081ec:	0800825b 	.word	0x0800825b
 80081f0:	0800825b 	.word	0x0800825b
 80081f4:	0800824d 	.word	0x0800824d
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d02a      	beq.n	8008252 <UART_SetConfig+0x8a6>
 80081fc:	e02d      	b.n	800825a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081fe:	f7fc fec1 	bl	8004f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8008202:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008204:	e02f      	b.n	8008266 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0314 	add.w	r3, r7, #20
 800820a:	4618      	mov	r0, r3
 800820c:	f7fc fed0 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008214:	e027      	b.n	8008266 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	4618      	mov	r0, r3
 800821c:	f7fd f81c 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008224:	e01f      	b.n	8008266 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008226:	4b21      	ldr	r3, [pc, #132]	; (80082ac <UART_SetConfig+0x900>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008232:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <UART_SetConfig+0x900>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	08db      	lsrs	r3, r3, #3
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <UART_SetConfig+0x908>)
 800823e:	fa22 f303 	lsr.w	r3, r2, r3
 8008242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008244:	e00f      	b.n	8008266 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008246:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <UART_SetConfig+0x908>)
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800824a:	e00c      	b.n	8008266 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800824c:	4b1a      	ldr	r3, [pc, #104]	; (80082b8 <UART_SetConfig+0x90c>)
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008250:	e009      	b.n	8008266 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008258:	e005      	b.n	8008266 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 81e6 	beq.w	800863a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	4a12      	ldr	r2, [pc, #72]	; (80082bc <UART_SetConfig+0x910>)
 8008274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008278:	461a      	mov	r2, r3
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008280:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4413      	add	r3, r2
 800828c:	6a3a      	ldr	r2, [r7, #32]
 800828e:	429a      	cmp	r2, r3
 8008290:	d305      	bcc.n	800829e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	429a      	cmp	r2, r3
 800829c:	d910      	bls.n	80082c0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082a4:	e1c9      	b.n	800863a <UART_SetConfig+0xc8e>
 80082a6:	bf00      	nop
 80082a8:	40011c00 	.word	0x40011c00
 80082ac:	58024400 	.word	0x58024400
 80082b0:	58000c00 	.word	0x58000c00
 80082b4:	03d09000 	.word	0x03d09000
 80082b8:	003d0900 	.word	0x003d0900
 80082bc:	08010dac 	.word	0x08010dac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	4618      	mov	r0, r3
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	4ac1      	ldr	r2, [pc, #772]	; (80085d4 <UART_SetConfig+0xc28>)
 80082ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	f7f8 f872 	bl	80003c0 <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4610      	mov	r0, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	020b      	lsls	r3, r1, #8
 80082ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082f2:	0202      	lsls	r2, r0, #8
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	6849      	ldr	r1, [r1, #4]
 80082f8:	0849      	lsrs	r1, r1, #1
 80082fa:	4608      	mov	r0, r1
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	1814      	adds	r4, r2, r0
 8008302:	eb43 0501 	adc.w	r5, r3, r1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	461a      	mov	r2, r3
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	f7f8 f854 	bl	80003c0 <__aeabi_uldivmod>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4613      	mov	r3, r2
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008326:	d308      	bcc.n	800833a <UART_SetConfig+0x98e>
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800832e:	d204      	bcs.n	800833a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	e17f      	b.n	800863a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008340:	e17b      	b.n	800863a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834a:	f040 80bd 	bne.w	80084c8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800834e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008352:	2b20      	cmp	r3, #32
 8008354:	dc48      	bgt.n	80083e8 <UART_SetConfig+0xa3c>
 8008356:	2b00      	cmp	r3, #0
 8008358:	db7b      	blt.n	8008452 <UART_SetConfig+0xaa6>
 800835a:	2b20      	cmp	r3, #32
 800835c:	d879      	bhi.n	8008452 <UART_SetConfig+0xaa6>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <UART_SetConfig+0x9b8>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	080083ef 	.word	0x080083ef
 8008368:	080083f7 	.word	0x080083f7
 800836c:	08008453 	.word	0x08008453
 8008370:	08008453 	.word	0x08008453
 8008374:	080083ff 	.word	0x080083ff
 8008378:	08008453 	.word	0x08008453
 800837c:	08008453 	.word	0x08008453
 8008380:	08008453 	.word	0x08008453
 8008384:	0800840f 	.word	0x0800840f
 8008388:	08008453 	.word	0x08008453
 800838c:	08008453 	.word	0x08008453
 8008390:	08008453 	.word	0x08008453
 8008394:	08008453 	.word	0x08008453
 8008398:	08008453 	.word	0x08008453
 800839c:	08008453 	.word	0x08008453
 80083a0:	08008453 	.word	0x08008453
 80083a4:	0800841f 	.word	0x0800841f
 80083a8:	08008453 	.word	0x08008453
 80083ac:	08008453 	.word	0x08008453
 80083b0:	08008453 	.word	0x08008453
 80083b4:	08008453 	.word	0x08008453
 80083b8:	08008453 	.word	0x08008453
 80083bc:	08008453 	.word	0x08008453
 80083c0:	08008453 	.word	0x08008453
 80083c4:	08008453 	.word	0x08008453
 80083c8:	08008453 	.word	0x08008453
 80083cc:	08008453 	.word	0x08008453
 80083d0:	08008453 	.word	0x08008453
 80083d4:	08008453 	.word	0x08008453
 80083d8:	08008453 	.word	0x08008453
 80083dc:	08008453 	.word	0x08008453
 80083e0:	08008453 	.word	0x08008453
 80083e4:	08008445 	.word	0x08008445
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d02e      	beq.n	800844a <UART_SetConfig+0xa9e>
 80083ec:	e031      	b.n	8008452 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ee:	f7fb fa3d 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 80083f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083f4:	e033      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f6:	f7fb fa4f 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 80083fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80083fc:	e02f      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fe:	f107 0314 	add.w	r3, r7, #20
 8008402:	4618      	mov	r0, r3
 8008404:	f7fc fdd4 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800840c:	e027      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840e:	f107 0308 	add.w	r3, r7, #8
 8008412:	4618      	mov	r0, r3
 8008414:	f7fc ff20 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800841c:	e01f      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841e:	4b6e      	ldr	r3, [pc, #440]	; (80085d8 <UART_SetConfig+0xc2c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800842a:	4b6b      	ldr	r3, [pc, #428]	; (80085d8 <UART_SetConfig+0xc2c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	4a69      	ldr	r2, [pc, #420]	; (80085dc <UART_SetConfig+0xc30>)
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800843c:	e00f      	b.n	800845e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800843e:	4b67      	ldr	r3, [pc, #412]	; (80085dc <UART_SetConfig+0xc30>)
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008442:	e00c      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008444:	4b66      	ldr	r3, [pc, #408]	; (80085e0 <UART_SetConfig+0xc34>)
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008448:	e009      	b.n	800845e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008450:	e005      	b.n	800845e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800845c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80ea 	beq.w	800863a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	4a5a      	ldr	r2, [pc, #360]	; (80085d4 <UART_SetConfig+0xc28>)
 800846c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008470:	461a      	mov	r2, r3
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	fbb3 f3f2 	udiv	r3, r3, r2
 8008478:	005a      	lsls	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d916      	bls.n	80084c0 <UART_SetConfig+0xb14>
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008498:	d212      	bcs.n	80084c0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	b29b      	uxth	r3, r3
 800849e:	f023 030f 	bic.w	r3, r3, #15
 80084a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084b2:	4313      	orrs	r3, r2
 80084b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	e0bc      	b.n	800863a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084c6:	e0b8      	b.n	800863a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	dc4b      	bgt.n	8008568 <UART_SetConfig+0xbbc>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f2c0 8087 	blt.w	80085e4 <UART_SetConfig+0xc38>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	f200 8084 	bhi.w	80085e4 <UART_SetConfig+0xc38>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <UART_SetConfig+0xb38>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	0800856f 	.word	0x0800856f
 80084e8:	08008577 	.word	0x08008577
 80084ec:	080085e5 	.word	0x080085e5
 80084f0:	080085e5 	.word	0x080085e5
 80084f4:	0800857f 	.word	0x0800857f
 80084f8:	080085e5 	.word	0x080085e5
 80084fc:	080085e5 	.word	0x080085e5
 8008500:	080085e5 	.word	0x080085e5
 8008504:	0800858f 	.word	0x0800858f
 8008508:	080085e5 	.word	0x080085e5
 800850c:	080085e5 	.word	0x080085e5
 8008510:	080085e5 	.word	0x080085e5
 8008514:	080085e5 	.word	0x080085e5
 8008518:	080085e5 	.word	0x080085e5
 800851c:	080085e5 	.word	0x080085e5
 8008520:	080085e5 	.word	0x080085e5
 8008524:	0800859f 	.word	0x0800859f
 8008528:	080085e5 	.word	0x080085e5
 800852c:	080085e5 	.word	0x080085e5
 8008530:	080085e5 	.word	0x080085e5
 8008534:	080085e5 	.word	0x080085e5
 8008538:	080085e5 	.word	0x080085e5
 800853c:	080085e5 	.word	0x080085e5
 8008540:	080085e5 	.word	0x080085e5
 8008544:	080085e5 	.word	0x080085e5
 8008548:	080085e5 	.word	0x080085e5
 800854c:	080085e5 	.word	0x080085e5
 8008550:	080085e5 	.word	0x080085e5
 8008554:	080085e5 	.word	0x080085e5
 8008558:	080085e5 	.word	0x080085e5
 800855c:	080085e5 	.word	0x080085e5
 8008560:	080085e5 	.word	0x080085e5
 8008564:	080085c5 	.word	0x080085c5
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d02e      	beq.n	80085ca <UART_SetConfig+0xc1e>
 800856c:	e03a      	b.n	80085e4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800856e:	f7fb f97d 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8008572:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008574:	e03c      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008576:	f7fb f98f 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 800857a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800857c:	e038      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800857e:	f107 0314 	add.w	r3, r7, #20
 8008582:	4618      	mov	r0, r3
 8008584:	f7fc fd14 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800858c:	e030      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	4618      	mov	r0, r3
 8008594:	f7fc fe60 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800859c:	e028      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800859e:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <UART_SetConfig+0xc2c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <UART_SetConfig+0xc2c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	4a09      	ldr	r2, [pc, #36]	; (80085dc <UART_SetConfig+0xc30>)
 80085b6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085bc:	e018      	b.n	80085f0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <UART_SetConfig+0xc30>)
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085c2:	e015      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085c4:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <UART_SetConfig+0xc34>)
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085c8:	e012      	b.n	80085f0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085d0:	e00e      	b.n	80085f0 <UART_SetConfig+0xc44>
 80085d2:	bf00      	nop
 80085d4:	08010dac 	.word	0x08010dac
 80085d8:	58024400 	.word	0x58024400
 80085dc:	03d09000 	.word	0x03d09000
 80085e0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80085ee:	bf00      	nop
    }

    if (pclk != 0U)
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d021      	beq.n	800863a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	4a1a      	ldr	r2, [pc, #104]	; (8008664 <UART_SetConfig+0xcb8>)
 80085fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008600:	461a      	mov	r2, r3
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	fbb3 f2f2 	udiv	r2, r3, r2
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	085b      	lsrs	r3, r3, #1
 800860e:	441a      	add	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d909      	bls.n	8008634 <UART_SetConfig+0xc88>
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008626:	d205      	bcs.n	8008634 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	b29a      	uxth	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	e002      	b.n	800863a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008656:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800865a:	4618      	mov	r0, r3
 800865c:	3738      	adds	r7, #56	; 0x38
 800865e:	46bd      	mov	sp, r7
 8008660:	bdb0      	pop	{r4, r5, r7, pc}
 8008662:	bf00      	nop
 8008664:	08010dac 	.word	0x08010dac

08008668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	f003 0310 	and.w	r3, r3, #16
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01a      	beq.n	800877e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008766:	d10a      	bne.n	800877e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	605a      	str	r2, [r3, #4]
  }
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087bc:	f7f8 ff56 	bl	800166c <HAL_GetTick>
 80087c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0308 	and.w	r3, r3, #8
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d10e      	bne.n	80087ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f82f 	bl	8008842 <UART_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e025      	b.n	800883a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d10e      	bne.n	800881a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f819 	bl	8008842 <UART_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e00f      	b.n	800883a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b09c      	sub	sp, #112	; 0x70
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	603b      	str	r3, [r7, #0]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008852:	e0a9      	b.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	f000 80a5 	beq.w	80089a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885e:	f7f8 ff05 	bl	800166c <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <UART_WaitOnFlagUntilTimeout+0x32>
 800886e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008870:	2b00      	cmp	r3, #0
 8008872:	d140      	bne.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008888:	667b      	str	r3, [r7, #100]	; 0x64
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008894:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e6      	bne.n	8008874 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b8:	f023 0301 	bic.w	r3, r3, #1
 80088bc:	663b      	str	r3, [r7, #96]	; 0x60
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80088c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e5      	bne.n	80088a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2220      	movs	r2, #32
 80088de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e069      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d051      	beq.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008912:	d149      	bne.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800891c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
 800893e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e6      	bne.n	800891e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	613b      	str	r3, [r7, #16]
   return(result);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	66bb      	str	r3, [r7, #104]	; 0x68
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008970:	623a      	str	r2, [r7, #32]
 8008972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	69f9      	ldr	r1, [r7, #28]
 8008976:	6a3a      	ldr	r2, [r7, #32]
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	61bb      	str	r3, [r7, #24]
   return(result);
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e5      	bne.n	8008950 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2220      	movs	r2, #32
 8008998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e010      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69da      	ldr	r2, [r3, #28]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4013      	ands	r3, r2
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	f43f af46 	beq.w	8008854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3770      	adds	r7, #112	; 0x70
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e027      	b.n	8008a38 <HAL_UARTEx_DisableFifoMode+0x66>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	; 0x24
 80089f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e02d      	b.n	8008ab8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2224      	movs	r2, #36	; 0x24
 8008a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f84f 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e02d      	b.n	8008b34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	; 0x24
 8008ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f811 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b5c:	e031      	b.n	8008bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b5e:	2310      	movs	r3, #16
 8008b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b62:	2310      	movs	r3, #16
 8008b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0e5b      	lsrs	r3, r3, #25
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0f5b      	lsrs	r3, r3, #29
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	7b3a      	ldrb	r2, [r7, #12]
 8008b8a:	4911      	ldr	r1, [pc, #68]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b8c:	5c8a      	ldrb	r2, [r1, r2]
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b92:	7b3a      	ldrb	r2, [r7, #12]
 8008b94:	490f      	ldr	r1, [pc, #60]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	7b7a      	ldrb	r2, [r7, #13]
 8008ba8:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008baa:	5c8a      	ldrb	r2, [r1, r2]
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bb0:	7b7a      	ldrb	r2, [r7, #13]
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	08010dc4 	.word	0x08010dc4
 8008bd4:	08010dcc 	.word	0x08010dcc

08008bd8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008bd8:	b084      	sub	sp, #16
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	f107 001c 	add.w	r0, r7, #28
 8008be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008bee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008bf2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <SDMMC_Init+0x50>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	b004      	add	sp, #16
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	ffc02c00 	.word	0xffc02c00

08008c2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f043 0203 	orr.w	r2, r3, #3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0303 	and.w	r3, r3, #3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008cc6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008ccc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008cd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <SDMMC_SendCommand+0x50>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	fffee0c0 	.word	0xfffee0c0

08008cfc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	b2db      	uxtb	r3, r3
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3314      	adds	r3, #20
 8008d24:	461a      	mov	r2, r3
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	4413      	add	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d62:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008d68:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008d6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0

}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008da2:	2310      	movs	r3, #16
 8008da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff73 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa5f 	bl	800928c <SDMMC_GetCmdResp1>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008de8:	2311      	movs	r3, #17
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ff50 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0c:	2111      	movs	r1, #17
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa3c 	bl	800928c <SDMMC_GetCmdResp1>
 8008e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e16:	69fb      	ldr	r3, [r7, #28]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e2e:	2312      	movs	r3, #18
 8008e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff ff2d 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e52:	2112      	movs	r1, #18
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fa19 	bl	800928c <SDMMC_GetCmdResp1>
 8008e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b088      	sub	sp, #32
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e74:	2318      	movs	r3, #24
 8008e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff ff0a 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e98:	2118      	movs	r1, #24
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f9f6 	bl	800928c <SDMMC_GetCmdResp1>
 8008ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008eba:	2319      	movs	r3, #25
 8008ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ecc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ece:	f107 0308 	add.w	r3, r7, #8
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fee7 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ede:	2119      	movs	r1, #25
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9d3 	bl	800928c <SDMMC_GetCmdResp1>
 8008ee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f00:	230c      	movs	r3, #12
 8008f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f12:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff feb8 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f38:	4a0b      	ldr	r2, [pc, #44]	; (8008f68 <SDMMC_CmdStopTransfer+0x74>)
 8008f3a:	210c      	movs	r1, #12
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9a5 	bl	800928c <SDMMC_GetCmdResp1>
 8008f42:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f56:	d101      	bne.n	8008f5c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	05f5e100 	.word	0x05f5e100

08008f6c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f7a:	2307      	movs	r3, #7
 8008f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff fe87 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9e:	2107      	movs	r1, #7
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f973 	bl	800928c <SDMMC_GetCmdResp1>
 8008fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd0:	f107 0308 	add.w	r3, r7, #8
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fe66 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fb97 	bl	8009710 <SDMMC_GetCmdError>
 8008fe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b088      	sub	sp, #32
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ff6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800900a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff fe46 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fb29 	bl	8009674 <SDMMC_GetCmdResp7>
 8009022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009024:	69fb      	ldr	r3, [r7, #28]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b088      	sub	sp, #32
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800903c:	2337      	movs	r3, #55	; 0x37
 800903e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800904a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800904e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff fe26 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800905c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009060:	2137      	movs	r1, #55	; 0x37
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f912 	bl	800928c <SDMMC_GetCmdResp1>
 8009068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800906a:	69fb      	ldr	r3, [r7, #28]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009082:	2329      	movs	r3, #41	; 0x29
 8009084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800908a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009094:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009096:	f107 0308 	add.w	r3, r7, #8
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fe03 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa2e 	bl	8009504 <SDMMC_GetCmdResp3>
 80090a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090aa:	69fb      	ldr	r3, [r7, #28]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090c2:	2306      	movs	r3, #6
 80090c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fde3 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e6:	2106      	movs	r1, #6
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8cf 	bl	800928c <SDMMC_GetCmdResp1>
 80090ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090f0:	69fb      	ldr	r3, [r7, #28]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b088      	sub	sp, #32
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009106:	2333      	movs	r3, #51	; 0x33
 8009108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800910a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800910e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009118:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fdc1 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009126:	f241 3288 	movw	r2, #5000	; 0x1388
 800912a:	2133      	movs	r1, #51	; 0x33
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8ad 	bl	800928c <SDMMC_GetCmdResp1>
 8009132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009134:	69fb      	ldr	r3, [r7, #28]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b088      	sub	sp, #32
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800914a:	2302      	movs	r3, #2
 800914c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800914e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800915c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800915e:	f107 0308 	add.w	r3, r7, #8
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fd9f 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f980 	bl	8009470 <SDMMC_GetCmdResp2>
 8009170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009172:	69fb      	ldr	r3, [r7, #28]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800918a:	2309      	movs	r3, #9
 800918c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800918e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800919c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fd7f 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f960 	bl	8009470 <SDMMC_GetCmdResp2>
 80091b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b2:	69fb      	ldr	r3, [r7, #28]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3720      	adds	r7, #32
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091ca:	2303      	movs	r3, #3
 80091cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff fd5f 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	2103      	movs	r1, #3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f9c8 	bl	8009584 <SDMMC_GetCmdResp6>
 80091f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f6:	69fb      	ldr	r3, [r7, #28]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800920e:	230d      	movs	r3, #13
 8009210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800921c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009220:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fd3d 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800922e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009232:	210d      	movs	r1, #13
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f829 	bl	800928c <SDMMC_GetCmdResp1>
 800923a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800923c:	69fb      	ldr	r3, [r7, #28]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b088      	sub	sp, #32
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009252:	230d      	movs	r3, #13
 8009254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800925a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fd1b 	bl	8008ca8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009272:	f241 3288 	movw	r2, #5000	; 0x1388
 8009276:	210d      	movs	r1, #13
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f807 	bl	800928c <SDMMC_GetCmdResp1>
 800927e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009280:	69fb      	ldr	r3, [r7, #28]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	460b      	mov	r3, r1
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800929a:	4b70      	ldr	r3, [pc, #448]	; (800945c <SDMMC_GetCmdResp1+0x1d0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a70      	ldr	r2, [pc, #448]	; (8009460 <SDMMC_GetCmdResp1+0x1d4>)
 80092a0:	fba2 2303 	umull	r2, r3, r2, r3
 80092a4:	0a5a      	lsrs	r2, r3, #9
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	1e5a      	subs	r2, r3, #1
 80092b2:	61fa      	str	r2, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092bc:	e0c9      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	4b67      	ldr	r3, [pc, #412]	; (8009464 <SDMMC_GetCmdResp1+0x1d8>)
 80092c8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0ef      	beq.n	80092ae <SDMMC_GetCmdResp1+0x22>
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1ea      	bne.n	80092ae <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2204      	movs	r2, #4
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ea:	2304      	movs	r3, #4
 80092ec:	e0b1      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d004      	beq.n	8009304 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009300:	2301      	movs	r3, #1
 8009302:	e0a6      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a58      	ldr	r2, [pc, #352]	; (8009468 <SDMMC_GetCmdResp1+0x1dc>)
 8009308:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff fcf6 	bl	8008cfc <SDMMC_GetCommandResponse>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	4293      	cmp	r3, r2
 8009318:	d001      	beq.n	800931e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800931a:	2301      	movs	r3, #1
 800931c:	e099      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800931e:	2100      	movs	r1, #0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f7ff fcf8 	bl	8008d16 <SDMMC_GetResponse>
 8009326:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4b50      	ldr	r3, [pc, #320]	; (800946c <SDMMC_GetCmdResp1+0x1e0>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
 8009334:	e08d      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da02      	bge.n	8009342 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800933c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009340:	e087      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800934c:	2340      	movs	r3, #64	; 0x40
 800934e:	e080      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	e079      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936c:	e071      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800937c:	e069      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938c:	e061      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800939c:	e059      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ac:	e051      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093bc:	e049      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093cc:	e041      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80093d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093dc:	e039      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093ec:	e031      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093fc:	e029      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009408:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800940c:	e021      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800941c:	e019      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800942c:	e011      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009438:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800943c:	e009      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009448:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800944c:	e001      	b.n	8009452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800944e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	24008028 	.word	0x24008028
 8009460:	10624dd3 	.word	0x10624dd3
 8009464:	00200045 	.word	0x00200045
 8009468:	002000c5 	.word	0x002000c5
 800946c:	fdffe008 	.word	0xfdffe008

08009470 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009478:	4b1f      	ldr	r3, [pc, #124]	; (80094f8 <SDMMC_GetCmdResp2+0x88>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <SDMMC_GetCmdResp2+0x8c>)
 800947e:	fba2 2303 	umull	r2, r3, r2, r3
 8009482:	0a5b      	lsrs	r3, r3, #9
 8009484:	f241 3288 	movw	r2, #5000	; 0x1388
 8009488:	fb02 f303 	mul.w	r3, r2, r3
 800948c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1e5a      	subs	r2, r3, #1
 8009492:	60fa      	str	r2, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800949c:	e026      	b.n	80094ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0ef      	beq.n	800948e <SDMMC_GetCmdResp2+0x1e>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1ea      	bne.n	800948e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2204      	movs	r2, #4
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094ca:	2304      	movs	r3, #4
 80094cc:	e00e      	b.n	80094ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d004      	beq.n	80094e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e003      	b.n	80094ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a06      	ldr	r2, [pc, #24]	; (8009500 <SDMMC_GetCmdResp2+0x90>)
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	24008028 	.word	0x24008028
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	002000c5 	.word	0x002000c5

08009504 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <SDMMC_GetCmdResp3+0x74>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a1a      	ldr	r2, [pc, #104]	; (800957c <SDMMC_GetCmdResp3+0x78>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	0a5b      	lsrs	r3, r3, #9
 8009518:	f241 3288 	movw	r2, #5000	; 0x1388
 800951c:	fb02 f303 	mul.w	r3, r2, r3
 8009520:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	1e5a      	subs	r2, r3, #1
 8009526:	60fa      	str	r2, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800952c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009530:	e01b      	b.n	800956a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009536:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0ef      	beq.n	8009522 <SDMMC_GetCmdResp3+0x1e>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ea      	bne.n	8009522 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2204      	movs	r2, #4
 800955c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800955e:	2304      	movs	r3, #4
 8009560:	e003      	b.n	800956a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a06      	ldr	r2, [pc, #24]	; (8009580 <SDMMC_GetCmdResp3+0x7c>)
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	24008028 	.word	0x24008028
 800957c:	10624dd3 	.word	0x10624dd3
 8009580:	002000c5 	.word	0x002000c5

08009584 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	460b      	mov	r3, r1
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009592:	4b35      	ldr	r3, [pc, #212]	; (8009668 <SDMMC_GetCmdResp6+0xe4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a35      	ldr	r2, [pc, #212]	; (800966c <SDMMC_GetCmdResp6+0xe8>)
 8009598:	fba2 2303 	umull	r2, r3, r2, r3
 800959c:	0a5b      	lsrs	r3, r3, #9
 800959e:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a2:	fb02 f303 	mul.w	r3, r2, r3
 80095a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	61fa      	str	r2, [r7, #28]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095b6:	e052      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095bc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0ef      	beq.n	80095a8 <SDMMC_GetCmdResp6+0x24>
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1ea      	bne.n	80095a8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d004      	beq.n	80095e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2204      	movs	r2, #4
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095e4:	2304      	movs	r3, #4
 80095e6:	e03a      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e02f      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff fb7c 	bl	8008cfc <SDMMC_GetCommandResponse>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	4293      	cmp	r3, r2
 800960c:	d001      	beq.n	8009612 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800960e:	2301      	movs	r3, #1
 8009610:	e025      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4a16      	ldr	r2, [pc, #88]	; (8009670 <SDMMC_GetCmdResp6+0xec>)
 8009616:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009618:	2100      	movs	r1, #0
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7ff fb7b 	bl	8008d16 <SDMMC_GetResponse>
 8009620:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009636:	2300      	movs	r3, #0
 8009638:	e011      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009648:	e009      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009658:	e001      	b.n	800965e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800965a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	24008028 	.word	0x24008028
 800966c:	10624dd3 	.word	0x10624dd3
 8009670:	002000c5 	.word	0x002000c5

08009674 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800967c:	4b22      	ldr	r3, [pc, #136]	; (8009708 <SDMMC_GetCmdResp7+0x94>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a22      	ldr	r2, [pc, #136]	; (800970c <SDMMC_GetCmdResp7+0x98>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	0a5b      	lsrs	r3, r3, #9
 8009688:	f241 3288 	movw	r2, #5000	; 0x1388
 800968c:	fb02 f303 	mul.w	r3, r2, r3
 8009690:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	1e5a      	subs	r2, r3, #1
 8009696:	60fa      	str	r2, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800969c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096a0:	e02c      	b.n	80096fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0ef      	beq.n	8009692 <SDMMC_GetCmdResp7+0x1e>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1ea      	bne.n	8009692 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2204      	movs	r2, #4
 80096cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096ce:	2304      	movs	r3, #4
 80096d0:	e014      	b.n	80096fc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e009      	b.n	80096fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2240      	movs	r2, #64	; 0x40
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096fa:	2300      	movs	r3, #0

}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	24008028 	.word	0x24008028
 800970c:	10624dd3 	.word	0x10624dd3

08009710 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <SDMMC_GetCmdError+0x50>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a11      	ldr	r2, [pc, #68]	; (8009764 <SDMMC_GetCmdError+0x54>)
 800971e:	fba2 2303 	umull	r2, r3, r2, r3
 8009722:	0a5b      	lsrs	r3, r3, #9
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	fb02 f303 	mul.w	r3, r2, r3
 800972c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	60fa      	str	r2, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800973c:	e009      	b.n	8009752 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0f1      	beq.n	800972e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a06      	ldr	r2, [pc, #24]	; (8009768 <SDMMC_GetCmdError+0x58>)
 800974e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	24008028 	.word	0x24008028
 8009764:	10624dd3 	.word	0x10624dd3
 8009768:	002000c5 	.word	0x002000c5

0800976c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009770:	4904      	ldr	r1, [pc, #16]	; (8009784 <MX_FATFS_Init+0x18>)
 8009772:	4805      	ldr	r0, [pc, #20]	; (8009788 <MX_FATFS_Init+0x1c>)
 8009774:	f003 f8ea 	bl	800c94c <FATFS_LinkDriver>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	4b03      	ldr	r3, [pc, #12]	; (800978c <MX_FATFS_Init+0x20>)
 800977e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009780:	bf00      	nop
 8009782:	bd80      	pop	{r7, pc}
 8009784:	2400d09c 	.word	0x2400d09c
 8009788:	08010dd4 	.word	0x08010dd4
 800978c:	2400d098 	.word	0x2400d098

08009790 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009794:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009796:	4618      	mov	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097aa:	f000 f885 	bl	80098b8 <BSP_SD_IsDetected>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d001      	beq.n	80097b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80097b4:	2302      	movs	r3, #2
 80097b6:	e012      	b.n	80097de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80097b8:	480b      	ldr	r0, [pc, #44]	; (80097e8 <BSP_SD_Init+0x48>)
 80097ba:	f7fc f957 	bl	8005a6c <HAL_SD_Init>
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80097c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80097cc:	4806      	ldr	r0, [pc, #24]	; (80097e8 <BSP_SD_Init+0x48>)
 80097ce:	f7fd f805 	bl	80067dc <HAL_SD_ConfigWideBusOperation>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80097dc:	79fb      	ldrb	r3, [r7, #7]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	2400cc38 	.word	0x2400cc38

080097ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	4806      	ldr	r0, [pc, #24]	; (800981c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009804:	f7fc fa4c 	bl	8005ca0 <HAL_SD_ReadBlocks_DMA>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2400cc38 	.word	0x2400cc38

08009820 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	4806      	ldr	r0, [pc, #24]	; (8009850 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009838:	f7fc fada 	bl	8005df0 <HAL_SD_WriteBlocks_DMA>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009846:	7dfb      	ldrb	r3, [r7, #23]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	2400cc38 	.word	0x2400cc38

08009854 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <BSP_SD_GetCardState+0x1c>)
 800985a:	f7fd f8d1 	bl	8006a00 <HAL_SD_GetCardState>
 800985e:	4603      	mov	r3, r0
 8009860:	2b04      	cmp	r3, #4
 8009862:	bf14      	ite	ne
 8009864:	2301      	movne	r3, #1
 8009866:	2300      	moveq	r3, #0
 8009868:	b2db      	uxtb	r3, r3
}
 800986a:	4618      	mov	r0, r3
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	2400cc38 	.word	0x2400cc38

08009874 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4803      	ldr	r0, [pc, #12]	; (800988c <BSP_SD_GetCardInfo+0x18>)
 8009880:	f7fc ff80 	bl	8006784 <HAL_SD_GetCardInfo>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	2400cc38 	.word	0x2400cc38

08009890 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009898:	f000 f9ac 	bl	8009bf4 <BSP_SD_WriteCpltCallback>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80098ac:	f000 f9b4 	bl	8009c18 <BSP_SD_ReadCpltCallback>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098be:	2301      	movs	r3, #1
 80098c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80098c2:	f000 f80b 	bl	80098dc <BSP_PlatformIsDetected>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80098cc:	2300      	movs	r3, #0
 80098ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	b2db      	uxtb	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80098e2:	2301      	movs	r3, #1
 80098e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80098e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098ea:	4806      	ldr	r0, [pc, #24]	; (8009904 <BSP_PlatformIsDetected+0x28>)
 80098ec:	f7f8 fda0 	bl	8002430 <HAL_GPIO_ReadPin>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80098f6:	2300      	movs	r3, #0
 80098f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80098fa:	79fb      	ldrb	r3, [r7, #7]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	58020800 	.word	0x58020800

08009908 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009910:	f003 f922 	bl	800cb58 <osKernelGetTickCount>
 8009914:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009916:	e006      	b.n	8009926 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009918:	f7ff ff9c 	bl	8009854 <BSP_SD_GetCardState>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009922:	2300      	movs	r3, #0
 8009924:	e009      	b.n	800993a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009926:	f003 f917 	bl	800cb58 <osKernelGetTickCount>
 800992a:	4602      	mov	r2, r0
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d8f0      	bhi.n	8009918 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <SD_CheckStatus+0x38>)
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009954:	f7ff ff7e 	bl	8009854 <BSP_SD_GetCardState>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d107      	bne.n	800996e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800995e:	4b07      	ldr	r3, [pc, #28]	; (800997c <SD_CheckStatus+0x38>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4b04      	ldr	r3, [pc, #16]	; (800997c <SD_CheckStatus+0x38>)
 800996c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <SD_CheckStatus+0x38>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b2db      	uxtb	r3, r3
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	24008035 	.word	0x24008035

08009980 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <SD_initialize+0x7c>)
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009990:	f003 f89a 	bl	800cac8 <osKernelGetState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b02      	cmp	r3, #2
 8009998:	d129      	bne.n	80099ee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800999a:	f7ff ff01 	bl	80097a0 <BSP_SD_Init>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d107      	bne.n	80099b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff ffcc 	bl	8009944 <SD_CheckStatus>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	4b12      	ldr	r3, [pc, #72]	; (80099fc <SD_initialize+0x7c>)
 80099b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80099b4:	4b11      	ldr	r3, [pc, #68]	; (80099fc <SD_initialize+0x7c>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d017      	beq.n	80099ee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80099be:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <SD_initialize+0x80>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d107      	bne.n	80099d6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80099c6:	2200      	movs	r2, #0
 80099c8:	2102      	movs	r1, #2
 80099ca:	200a      	movs	r0, #10
 80099cc:	f003 faca 	bl	800cf64 <osMessageQueueNew>
 80099d0:	4603      	mov	r3, r0
 80099d2:	4a0b      	ldr	r2, [pc, #44]	; (8009a00 <SD_initialize+0x80>)
 80099d4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <SD_initialize+0x80>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d107      	bne.n	80099ee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80099de:	4b07      	ldr	r3, [pc, #28]	; (80099fc <SD_initialize+0x7c>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	4b04      	ldr	r3, [pc, #16]	; (80099fc <SD_initialize+0x7c>)
 80099ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <SD_initialize+0x7c>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	b2db      	uxtb	r3, r3
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	24008035 	.word	0x24008035
 8009a00:	2400818c 	.word	0x2400818c

08009a04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff ff97 	bl	8009944 <SD_CheckStatus>
 8009a16:	4603      	mov	r3, r0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a34:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a38:	f7ff ff66 	bl	8009908 <SD_CheckStatusWithTimeout>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da01      	bge.n	8009a46 <SD_read+0x26>
  {
    return res;
 8009a42:	7ffb      	ldrb	r3, [r7, #31]
 8009a44:	e02f      	b.n	8009aa6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f7ff fece 	bl	80097ec <BSP_SD_ReadBlocks_DMA>
 8009a50:	4603      	mov	r3, r0
 8009a52:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009a54:	7fbb      	ldrb	r3, [r7, #30]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d124      	bne.n	8009aa4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009a5a:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <SD_read+0x90>)
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	f107 0112 	add.w	r1, r7, #18
 8009a62:	f247 5330 	movw	r3, #30000	; 0x7530
 8009a66:	2200      	movs	r2, #0
 8009a68:	f003 fb50 	bl	800d10c <osMessageQueueGet>
 8009a6c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d117      	bne.n	8009aa4 <SD_read+0x84>
 8009a74:	8a7b      	ldrh	r3, [r7, #18]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d114      	bne.n	8009aa4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009a7a:	f003 f86d 	bl	800cb58 <osKernelGetTickCount>
 8009a7e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a80:	e007      	b.n	8009a92 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a82:	f7ff fee7 	bl	8009854 <BSP_SD_GetCardState>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d102      	bne.n	8009a92 <SD_read+0x72>
              {
                res = RES_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009a90:	e008      	b.n	8009aa4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a92:	f003 f861 	bl	800cb58 <osKernelGetTickCount>
 8009a96:	4602      	mov	r2, r0
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d9ee      	bls.n	8009a82 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	2400818c 	.word	0x2400818c

08009ab4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	607a      	str	r2, [r7, #4]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ac8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009acc:	f7ff ff1c 	bl	8009908 <SD_CheckStatusWithTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da01      	bge.n	8009ada <SD_write+0x26>
  {
    return res;
 8009ad6:	7ffb      	ldrb	r3, [r7, #31]
 8009ad8:	e02d      	b.n	8009b36 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	68b8      	ldr	r0, [r7, #8]
 8009ae0:	f7ff fe9e 	bl	8009820 <BSP_SD_WriteBlocks_DMA>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d124      	bne.n	8009b34 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <SD_write+0x8c>)
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	f107 0112 	add.w	r1, r7, #18
 8009af2:	f247 5330 	movw	r3, #30000	; 0x7530
 8009af6:	2200      	movs	r2, #0
 8009af8:	f003 fb08 	bl	800d10c <osMessageQueueGet>
 8009afc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d117      	bne.n	8009b34 <SD_write+0x80>
 8009b04:	8a7b      	ldrh	r3, [r7, #18]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d114      	bne.n	8009b34 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009b0a:	f003 f825 	bl	800cb58 <osKernelGetTickCount>
 8009b0e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009b10:	e007      	b.n	8009b22 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b12:	f7ff fe9f 	bl	8009854 <BSP_SD_GetCardState>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <SD_write+0x6e>
          {
            res = RES_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	77fb      	strb	r3, [r7, #31]
            break;
 8009b20:	e008      	b.n	8009b34 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009b22:	f003 f819 	bl	800cb58 <osKernelGetTickCount>
 8009b26:	4602      	mov	r2, r0
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d9ee      	bls.n	8009b12 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	2400818c 	.word	0x2400818c

08009b44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08c      	sub	sp, #48	; 0x30
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	603a      	str	r2, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
 8009b50:	460b      	mov	r3, r1
 8009b52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009b5a:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <SD_ioctl+0xac>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <SD_ioctl+0x28>
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e03c      	b.n	8009be6 <SD_ioctl+0xa2>

  switch (cmd)
 8009b6c:	79bb      	ldrb	r3, [r7, #6]
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d834      	bhi.n	8009bdc <SD_ioctl+0x98>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <SD_ioctl+0x34>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009b89 	.word	0x08009b89
 8009b7c:	08009b91 	.word	0x08009b91
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bc3 	.word	0x08009bc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b8e:	e028      	b.n	8009be2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b90:	f107 0308 	add.w	r3, r7, #8
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff fe6d 	bl	8009874 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009b9a:	6a3a      	ldr	r2, [r7, #32]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ba6:	e01c      	b.n	8009be2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ba8:	f107 0308 	add.w	r3, r7, #8
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fe61 	bl	8009874 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bc0:	e00f      	b.n	8009be2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bc2:	f107 0308 	add.w	r3, r7, #8
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff fe54 	bl	8009874 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	0a5a      	lsrs	r2, r3, #9
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bda:	e002      	b.n	8009be2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3730      	adds	r7, #48	; 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	24008035 	.word	0x24008035

08009bf4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009bfe:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <BSP_SD_WriteCpltCallback+0x20>)
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	1db9      	adds	r1, r7, #6
 8009c04:	2300      	movs	r3, #0
 8009c06:	2200      	movs	r2, #0
 8009c08:	f003 fa20 	bl	800d04c <osMessageQueuePut>
#endif
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	2400818c 	.word	0x2400818c

08009c18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <BSP_SD_ReadCpltCallback+0x20>)
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	1db9      	adds	r1, r7, #6
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f003 fa0e 	bl	800d04c <osMessageQueuePut>
#endif
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	2400818c 	.word	0x2400818c

08009c3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	4a08      	ldr	r2, [pc, #32]	; (8009c6c <disk_status+0x30>)
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	79fa      	ldrb	r2, [r7, #7]
 8009c54:	4905      	ldr	r1, [pc, #20]	; (8009c6c <disk_status+0x30>)
 8009c56:	440a      	add	r2, r1
 8009c58:	7a12      	ldrb	r2, [r2, #8]
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4798      	blx	r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	240081b8 	.word	0x240081b8

08009c70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	4a0d      	ldr	r2, [pc, #52]	; (8009cb8 <disk_initialize+0x48>)
 8009c82:	5cd3      	ldrb	r3, [r2, r3]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d111      	bne.n	8009cac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	4a0b      	ldr	r2, [pc, #44]	; (8009cb8 <disk_initialize+0x48>)
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <disk_initialize+0x48>)
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	79fa      	ldrb	r2, [r7, #7]
 8009c9e:	4906      	ldr	r1, [pc, #24]	; (8009cb8 <disk_initialize+0x48>)
 8009ca0:	440a      	add	r2, r1
 8009ca2:	7a12      	ldrb	r2, [r2, #8]
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	240081b8 	.word	0x240081b8

08009cbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4a0a      	ldr	r2, [pc, #40]	; (8009cf8 <disk_read+0x3c>)
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	689c      	ldr	r4, [r3, #8]
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <disk_read+0x3c>)
 8009cdc:	4413      	add	r3, r2
 8009cde:	7a18      	ldrb	r0, [r3, #8]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	47a0      	blx	r4
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd90      	pop	{r4, r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	240081b8 	.word	0x240081b8

08009cfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4a0a      	ldr	r2, [pc, #40]	; (8009d38 <disk_write+0x3c>)
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	68dc      	ldr	r4, [r3, #12]
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	4a07      	ldr	r2, [pc, #28]	; (8009d38 <disk_write+0x3c>)
 8009d1c:	4413      	add	r3, r2
 8009d1e:	7a18      	ldrb	r0, [r3, #8]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	47a0      	blx	r4
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd90      	pop	{r4, r7, pc}
 8009d36:	bf00      	nop
 8009d38:	240081b8 	.word	0x240081b8

08009d3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	603a      	str	r2, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <disk_ioctl+0x38>)
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	79fa      	ldrb	r2, [r7, #7]
 8009d5a:	4906      	ldr	r1, [pc, #24]	; (8009d74 <disk_ioctl+0x38>)
 8009d5c:	440a      	add	r2, r1
 8009d5e:	7a10      	ldrb	r0, [r2, #8]
 8009d60:	79b9      	ldrb	r1, [r7, #6]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4798      	blx	r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	73fb      	strb	r3, [r7, #15]
  return res;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	240081b8 	.word	0x240081b8

08009d78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3301      	adds	r3, #1
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	b21a      	sxth	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b21b      	sxth	r3, r3
 8009d94:	4313      	orrs	r3, r2
 8009d96:	b21b      	sxth	r3, r3
 8009d98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3303      	adds	r3, #3
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	3202      	adds	r2, #2
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	3201      	adds	r2, #1
 8009dce:	7812      	ldrb	r2, [r2, #0]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	7812      	ldrb	r2, [r2, #0]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
	return rv;
 8009de0:	68fb      	ldr	r3, [r7, #12]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	887a      	ldrh	r2, [r7, #2]
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	887b      	ldrh	r3, [r7, #2]
 8009e08:	0a1b      	lsrs	r3, r3, #8
 8009e0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	887a      	ldrh	r2, [r7, #2]
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	0a1b      	lsrs	r3, r3, #8
 8009e3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	1c5a      	adds	r2, r3, #1
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	b2d2      	uxtb	r2, r2
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	0a1b      	lsrs	r3, r3, #8
 8009e62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	b2d2      	uxtb	r2, r2
 8009e6e:	701a      	strb	r2, [r3, #0]
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	1c53      	adds	r3, r2, #1
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	1c59      	adds	r1, r3, #1
 8009ea0:	6179      	str	r1, [r7, #20]
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	607b      	str	r3, [r7, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f1      	bne.n	8009e96 <mem_cpy+0x1a>
	}
}
 8009eb2:	bf00      	nop
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	617a      	str	r2, [r7, #20]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f3      	bne.n	8009ece <mem_set+0x10>
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009ef4:	b480      	push	{r7}
 8009ef6:	b089      	sub	sp, #36	; 0x24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	61fa      	str	r2, [r7, #28]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	4619      	mov	r1, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	61ba      	str	r2, [r7, #24]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	1acb      	subs	r3, r1, r3
 8009f20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	607b      	str	r3, [r7, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d002      	beq.n	8009f34 <mem_cmp+0x40>
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0eb      	beq.n	8009f0c <mem_cmp+0x18>

	return r;
 8009f34:	697b      	ldr	r3, [r7, #20]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3724      	adds	r7, #36	; 0x24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f4c:	e002      	b.n	8009f54 <chk_chr+0x12>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3301      	adds	r3, #1
 8009f52:	607b      	str	r3, [r7, #4]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <chk_chr+0x26>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d1f2      	bne.n	8009f4e <chk_chr+0xc>
	return *str;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d009      	beq.n	8009f9a <lock_fs+0x22>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fd14 	bl	800c9b8 <ff_req_grant>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <lock_fs+0x22>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <lock_fs+0x24>
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00d      	beq.n	8009fd2 <unlock_fs+0x2e>
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	2b0c      	cmp	r3, #12
 8009fba:	d00a      	beq.n	8009fd2 <unlock_fs+0x2e>
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	2b0b      	cmp	r3, #11
 8009fc0:	d007      	beq.n	8009fd2 <unlock_fs+0x2e>
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	2b0f      	cmp	r3, #15
 8009fc6:	d004      	beq.n	8009fd2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f002 fd08 	bl	800c9e2 <ff_rel_grant>
	}
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e029      	b.n	800a044 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ff0:	4a27      	ldr	r2, [pc, #156]	; (800a090 <chk_lock+0xb4>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	011b      	lsls	r3, r3, #4
 8009ff6:	4413      	add	r3, r2
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d01d      	beq.n	800a03a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ffe:	4a24      	ldr	r2, [pc, #144]	; (800a090 <chk_lock+0xb4>)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	4413      	add	r3, r2
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d116      	bne.n	800a03e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a010:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <chk_lock+0xb4>)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	011b      	lsls	r3, r3, #4
 800a016:	4413      	add	r3, r2
 800a018:	3304      	adds	r3, #4
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a020:	429a      	cmp	r2, r3
 800a022:	d10c      	bne.n	800a03e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a024:	4a1a      	ldr	r2, [pc, #104]	; (800a090 <chk_lock+0xb4>)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	011b      	lsls	r3, r3, #4
 800a02a:	4413      	add	r3, r2
 800a02c:	3308      	adds	r3, #8
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a034:	429a      	cmp	r2, r3
 800a036:	d102      	bne.n	800a03e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a038:	e007      	b.n	800a04a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a03a:	2301      	movs	r3, #1
 800a03c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d9d2      	bls.n	8009ff0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d109      	bne.n	800a064 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d102      	bne.n	800a05c <chk_lock+0x80>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d101      	bne.n	800a060 <chk_lock+0x84>
 800a05c:	2300      	movs	r3, #0
 800a05e:	e010      	b.n	800a082 <chk_lock+0xa6>
 800a060:	2312      	movs	r3, #18
 800a062:	e00e      	b.n	800a082 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d108      	bne.n	800a07c <chk_lock+0xa0>
 800a06a:	4a09      	ldr	r2, [pc, #36]	; (800a090 <chk_lock+0xb4>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	4413      	add	r3, r2
 800a072:	330c      	adds	r3, #12
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07a:	d101      	bne.n	800a080 <chk_lock+0xa4>
 800a07c:	2310      	movs	r3, #16
 800a07e:	e000      	b.n	800a082 <chk_lock+0xa6>
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	24008198 	.word	0x24008198

0800a094 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a09a:	2300      	movs	r3, #0
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	e002      	b.n	800a0a6 <enq_lock+0x12>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d806      	bhi.n	800a0ba <enq_lock+0x26>
 800a0ac:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <enq_lock+0x40>)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	4413      	add	r3, r2
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1f2      	bne.n	800a0a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	bf14      	ite	ne
 800a0c0:	2301      	movne	r3, #1
 800a0c2:	2300      	moveq	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	24008198 	.word	0x24008198

0800a0d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	e01f      	b.n	800a128 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0e8:	4a41      	ldr	r2, [pc, #260]	; (800a1f0 <inc_lock+0x118>)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	4413      	add	r3, r2
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d113      	bne.n	800a122 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0fa:	4a3d      	ldr	r2, [pc, #244]	; (800a1f0 <inc_lock+0x118>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	4413      	add	r3, r2
 800a102:	3304      	adds	r3, #4
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d109      	bne.n	800a122 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a10e:	4a38      	ldr	r2, [pc, #224]	; (800a1f0 <inc_lock+0x118>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	4413      	add	r3, r2
 800a116:	3308      	adds	r3, #8
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a11e:	429a      	cmp	r2, r3
 800a120:	d006      	beq.n	800a130 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d9dc      	bls.n	800a0e8 <inc_lock+0x10>
 800a12e:	e000      	b.n	800a132 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a130:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b02      	cmp	r3, #2
 800a136:	d132      	bne.n	800a19e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	e002      	b.n	800a144 <inc_lock+0x6c>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3301      	adds	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d806      	bhi.n	800a158 <inc_lock+0x80>
 800a14a:	4a29      	ldr	r2, [pc, #164]	; (800a1f0 <inc_lock+0x118>)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	4413      	add	r3, r2
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1f2      	bne.n	800a13e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d101      	bne.n	800a162 <inc_lock+0x8a>
 800a15e:	2300      	movs	r3, #0
 800a160:	e040      	b.n	800a1e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4922      	ldr	r1, [pc, #136]	; (800a1f0 <inc_lock+0x118>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	440b      	add	r3, r1
 800a16e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	491e      	ldr	r1, [pc, #120]	; (800a1f0 <inc_lock+0x118>)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	440b      	add	r3, r1
 800a17c:	3304      	adds	r3, #4
 800a17e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695a      	ldr	r2, [r3, #20]
 800a184:	491a      	ldr	r1, [pc, #104]	; (800a1f0 <inc_lock+0x118>)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	440b      	add	r3, r1
 800a18c:	3308      	adds	r3, #8
 800a18e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a190:	4a17      	ldr	r2, [pc, #92]	; (800a1f0 <inc_lock+0x118>)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	4413      	add	r3, r2
 800a198:	330c      	adds	r3, #12
 800a19a:	2200      	movs	r2, #0
 800a19c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d009      	beq.n	800a1b8 <inc_lock+0xe0>
 800a1a4:	4a12      	ldr	r2, [pc, #72]	; (800a1f0 <inc_lock+0x118>)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	011b      	lsls	r3, r3, #4
 800a1aa:	4413      	add	r3, r2
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <inc_lock+0xe0>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e015      	b.n	800a1e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d108      	bne.n	800a1d0 <inc_lock+0xf8>
 800a1be:	4a0c      	ldr	r2, [pc, #48]	; (800a1f0 <inc_lock+0x118>)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	4413      	add	r3, r2
 800a1c6:	330c      	adds	r3, #12
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	e001      	b.n	800a1d4 <inc_lock+0xfc>
 800a1d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <inc_lock+0x118>)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	440b      	add	r3, r1
 800a1dc:	330c      	adds	r3, #12
 800a1de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	24008198 	.word	0x24008198

0800a1f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d825      	bhi.n	800a254 <dec_lock+0x60>
		n = Files[i].ctr;
 800a208:	4a17      	ldr	r2, [pc, #92]	; (800a268 <dec_lock+0x74>)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	4413      	add	r3, r2
 800a210:	330c      	adds	r3, #12
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a216:	89fb      	ldrh	r3, [r7, #14]
 800a218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21c:	d101      	bne.n	800a222 <dec_lock+0x2e>
 800a21e:	2300      	movs	r3, #0
 800a220:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a222:	89fb      	ldrh	r3, [r7, #14]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <dec_lock+0x3a>
 800a228:	89fb      	ldrh	r3, [r7, #14]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a22e:	4a0e      	ldr	r2, [pc, #56]	; (800a268 <dec_lock+0x74>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	4413      	add	r3, r2
 800a236:	330c      	adds	r3, #12
 800a238:	89fa      	ldrh	r2, [r7, #14]
 800a23a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a23c:	89fb      	ldrh	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d105      	bne.n	800a24e <dec_lock+0x5a>
 800a242:	4a09      	ldr	r2, [pc, #36]	; (800a268 <dec_lock+0x74>)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	4413      	add	r3, r2
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	737b      	strb	r3, [r7, #13]
 800a252:	e001      	b.n	800a258 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a254:	2302      	movs	r3, #2
 800a256:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a258:	7b7b      	ldrb	r3, [r7, #13]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	24008198 	.word	0x24008198

0800a26c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	e010      	b.n	800a29c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a27a:	4a0d      	ldr	r2, [pc, #52]	; (800a2b0 <clear_lock+0x44>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	4413      	add	r3, r2
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d105      	bne.n	800a296 <clear_lock+0x2a>
 800a28a:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <clear_lock+0x44>)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	4413      	add	r3, r2
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d9eb      	bls.n	800a27a <clear_lock+0xe>
	}
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	24008198 	.word	0x24008198

0800a2b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	78db      	ldrb	r3, [r3, #3]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d034      	beq.n	800a332 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7858      	ldrb	r0, [r3, #1]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a2d8:	2301      	movs	r3, #1
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	f7ff fd0e 	bl	8009cfc <disk_write>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	73fb      	strb	r3, [r7, #15]
 800a2ea:	e022      	b.n	800a332 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	1ad2      	subs	r2, r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d217      	bcs.n	800a332 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	789b      	ldrb	r3, [r3, #2]
 800a306:	613b      	str	r3, [r7, #16]
 800a308:	e010      	b.n	800a32c <sync_window+0x78>
					wsect += fs->fsize;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4413      	add	r3, r2
 800a312:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	7858      	ldrb	r0, [r3, #1]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a31e:	2301      	movs	r3, #1
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	f7ff fceb 	bl	8009cfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3b01      	subs	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d8eb      	bhi.n	800a30a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d01b      	beq.n	800a38c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff ffad 	bl	800a2b4 <sync_window>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d113      	bne.n	800a38c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7858      	ldrb	r0, [r3, #1]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a36e:	2301      	movs	r3, #1
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	f7ff fca3 	bl	8009cbc <disk_read>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a37c:	f04f 33ff 	mov.w	r3, #4294967295
 800a380:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a382:	2301      	movs	r3, #1
 800a384:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff ff87 	bl	800a2b4 <sync_window>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d158      	bne.n	800a462 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d148      	bne.n	800a44a <sync_fs+0xb2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	791b      	ldrb	r3, [r3, #4]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d144      	bne.n	800a44a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3334      	adds	r3, #52	; 0x34
 800a3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fd77 	bl	8009ebe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3334      	adds	r3, #52	; 0x34
 800a3d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff fd06 	bl	8009dee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3334      	adds	r3, #52	; 0x34
 800a3e6:	4921      	ldr	r1, [pc, #132]	; (800a46c <sync_fs+0xd4>)
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fd1b 	bl	8009e24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3334      	adds	r3, #52	; 0x34
 800a3f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3f6:	491e      	ldr	r1, [pc, #120]	; (800a470 <sync_fs+0xd8>)
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fd13 	bl	8009e24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	3334      	adds	r3, #52	; 0x34
 800a402:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7ff fd09 	bl	8009e24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3334      	adds	r3, #52	; 0x34
 800a416:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7ff fcff 	bl	8009e24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	7858      	ldrb	r0, [r3, #1]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43e:	2301      	movs	r3, #1
 800a440:	f7ff fc5c 	bl	8009cfc <disk_write>
			fs->fsi_flag = 0;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff fc72 	bl	8009d3c <disk_ioctl>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <sync_fs+0xca>
 800a45e:	2301      	movs	r3, #1
 800a460:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	41615252 	.word	0x41615252
 800a470:	61417272 	.word	0x61417272

0800a474 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	3b02      	subs	r3, #2
 800a482:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	3b02      	subs	r3, #2
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d301      	bcc.n	800a494 <clust2sect+0x20>
 800a490:	2300      	movs	r3, #0
 800a492:	e008      	b.n	800a4a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	895b      	ldrh	r3, [r3, #10]
 800a498:	461a      	mov	r2, r3
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	fb03 f202 	mul.w	r2, r3, r2
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	4413      	add	r3, r2
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b086      	sub	sp, #24
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d904      	bls.n	800a4d2 <get_fat+0x20>
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d302      	bcc.n	800a4d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	e08f      	b.n	800a5f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d062      	beq.n	800a5ac <get_fat+0xfa>
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	dc7c      	bgt.n	800a5e4 <get_fat+0x132>
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d002      	beq.n	800a4f4 <get_fat+0x42>
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d042      	beq.n	800a578 <get_fat+0xc6>
 800a4f2:	e077      	b.n	800a5e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	0a5b      	lsrs	r3, r3, #9
 800a50a:	4413      	add	r3, r2
 800a50c:	4619      	mov	r1, r3
 800a50e:	6938      	ldr	r0, [r7, #16]
 800a510:	f7ff ff14 	bl	800a33c <move_window>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d167      	bne.n	800a5ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	60fa      	str	r2, [r7, #12]
 800a520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4413      	add	r3, r2
 800a528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a52c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	0a5b      	lsrs	r3, r3, #9
 800a536:	4413      	add	r3, r2
 800a538:	4619      	mov	r1, r3
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f7ff fefe 	bl	800a33c <move_window>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d153      	bne.n	800a5ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	461a      	mov	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <get_fat+0xbc>
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	091b      	lsrs	r3, r3, #4
 800a56c:	e002      	b.n	800a574 <get_fat+0xc2>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a574:	617b      	str	r3, [r7, #20]
			break;
 800a576:	e03f      	b.n	800a5f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	4413      	add	r3, r2
 800a582:	4619      	mov	r1, r3
 800a584:	6938      	ldr	r0, [r7, #16]
 800a586:	f7ff fed9 	bl	800a33c <move_window>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d130      	bne.n	800a5f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a59e:	4413      	add	r3, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fbe9 	bl	8009d78 <ld_word>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	617b      	str	r3, [r7, #20]
			break;
 800a5aa:	e025      	b.n	800a5f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	09db      	lsrs	r3, r3, #7
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f7ff febf 	bl	800a33c <move_window>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d118      	bne.n	800a5f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5d2:	4413      	add	r3, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7ff fbe7 	bl	8009da8 <ld_dword>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a5e0:	617b      	str	r3, [r7, #20]
			break;
 800a5e2:	e009      	b.n	800a5f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	e006      	b.n	800a5f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5ea:	bf00      	nop
 800a5ec:	e004      	b.n	800a5f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5ee:	bf00      	nop
 800a5f0:	e002      	b.n	800a5f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5f2:	bf00      	nop
 800a5f4:	e000      	b.n	800a5f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5f6:	bf00      	nop
		}
	}

	return val;
 800a5f8:	697b      	ldr	r3, [r7, #20]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a602:	b590      	push	{r4, r7, lr}
 800a604:	b089      	sub	sp, #36	; 0x24
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a60e:	2302      	movs	r3, #2
 800a610:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b01      	cmp	r3, #1
 800a616:	f240 80d2 	bls.w	800a7be <put_fat+0x1bc>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	429a      	cmp	r2, r3
 800a622:	f080 80cc 	bcs.w	800a7be <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	f000 8096 	beq.w	800a75c <put_fat+0x15a>
 800a630:	2b03      	cmp	r3, #3
 800a632:	f300 80cd 	bgt.w	800a7d0 <put_fat+0x1ce>
 800a636:	2b01      	cmp	r3, #1
 800a638:	d002      	beq.n	800a640 <put_fat+0x3e>
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d06e      	beq.n	800a71c <put_fat+0x11a>
 800a63e:	e0c7      	b.n	800a7d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	61bb      	str	r3, [r7, #24]
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	4413      	add	r3, r2
 800a64c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	0a5b      	lsrs	r3, r3, #9
 800a656:	4413      	add	r3, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fe6e 	bl	800a33c <move_window>
 800a660:	4603      	mov	r3, r0
 800a662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a664:	7ffb      	ldrb	r3, [r7, #31]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 80ab 	bne.w	800a7c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	61b9      	str	r1, [r7, #24]
 800a678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67c:	4413      	add	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <put_fat+0xa4>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	b25b      	sxtb	r3, r3
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	b25a      	sxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	b25b      	sxtb	r3, r3
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	e001      	b.n	800a6aa <put_fat+0xa8>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	0a5b      	lsrs	r3, r3, #9
 800a6bc:	4413      	add	r3, r2
 800a6be:	4619      	mov	r1, r3
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7ff fe3b 	bl	800a33c <move_window>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d17a      	bne.n	800a7c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6dc:	4413      	add	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <put_fat+0xf0>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	091b      	lsrs	r3, r3, #4
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	e00e      	b.n	800a710 <put_fat+0x10e>
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	b25b      	sxtb	r3, r3
 800a6f8:	f023 030f 	bic.w	r3, r3, #15
 800a6fc:	b25a      	sxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	0a1b      	lsrs	r3, r3, #8
 800a702:	b25b      	sxtb	r3, r3
 800a704:	f003 030f 	and.w	r3, r3, #15
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	70da      	strb	r2, [r3, #3]
			break;
 800a71a:	e059      	b.n	800a7d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	4413      	add	r3, r2
 800a726:	4619      	mov	r1, r3
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff fe07 	bl	800a33c <move_window>
 800a72e:	4603      	mov	r3, r0
 800a730:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a732:	7ffb      	ldrb	r3, [r7, #31]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d148      	bne.n	800a7ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a746:	4413      	add	r3, r2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	b292      	uxth	r2, r2
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fb4d 	bl	8009dee <st_word>
			fs->wflag = 1;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2201      	movs	r2, #1
 800a758:	70da      	strb	r2, [r3, #3]
			break;
 800a75a:	e039      	b.n	800a7d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	09db      	lsrs	r3, r3, #7
 800a764:	4413      	add	r3, r2
 800a766:	4619      	mov	r1, r3
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff fde7 	bl	800a33c <move_window>
 800a76e:	4603      	mov	r3, r0
 800a770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a772:	7ffb      	ldrb	r3, [r7, #31]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d12a      	bne.n	800a7ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a78c:	4413      	add	r3, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fb0a 	bl	8009da8 <ld_dword>
 800a794:	4603      	mov	r3, r0
 800a796:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a79a:	4323      	orrs	r3, r4
 800a79c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7ac:	4413      	add	r3, r2
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff fb37 	bl	8009e24 <st_dword>
			fs->wflag = 1;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	70da      	strb	r2, [r3, #3]
			break;
 800a7bc:	e008      	b.n	800a7d0 <put_fat+0x1ce>
		}
	}
 800a7be:	bf00      	nop
 800a7c0:	e006      	b.n	800a7d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a7c2:	bf00      	nop
 800a7c4:	e004      	b.n	800a7d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a7c6:	bf00      	nop
 800a7c8:	e002      	b.n	800a7d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a7ca:	bf00      	nop
 800a7cc:	e000      	b.n	800a7d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a7ce:	bf00      	nop
	return res;
 800a7d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3724      	adds	r7, #36	; 0x24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd90      	pop	{r4, r7, pc}

0800a7da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b088      	sub	sp, #32
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d904      	bls.n	800a800 <remove_chain+0x26>
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d301      	bcc.n	800a804 <remove_chain+0x2a>
 800a800:	2302      	movs	r3, #2
 800a802:	e04b      	b.n	800a89c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	69b8      	ldr	r0, [r7, #24]
 800a812:	f7ff fef6 	bl	800a602 <put_fat>
 800a816:	4603      	mov	r3, r0
 800a818:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a81a:	7ffb      	ldrb	r3, [r7, #31]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <remove_chain+0x4a>
 800a820:	7ffb      	ldrb	r3, [r7, #31]
 800a822:	e03b      	b.n	800a89c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff fe43 	bl	800a4b2 <get_fat>
 800a82c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d031      	beq.n	800a898 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <remove_chain+0x64>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e02e      	b.n	800a89c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d101      	bne.n	800a84a <remove_chain+0x70>
 800a846:	2301      	movs	r3, #1
 800a848:	e028      	b.n	800a89c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a84a:	2200      	movs	r2, #0
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	69b8      	ldr	r0, [r7, #24]
 800a850:	f7ff fed7 	bl	800a602 <put_fat>
 800a854:	4603      	mov	r3, r0
 800a856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a858:	7ffb      	ldrb	r3, [r7, #31]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <remove_chain+0x88>
 800a85e:	7ffb      	ldrb	r3, [r7, #31]
 800a860:	e01c      	b.n	800a89c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	695a      	ldr	r2, [r3, #20]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	3b02      	subs	r3, #2
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d20b      	bcs.n	800a888 <remove_chain+0xae>
			fs->free_clst++;
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	791b      	ldrb	r3, [r3, #4]
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	b2da      	uxtb	r2, r3
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	429a      	cmp	r2, r3
 800a894:	d3c6      	bcc.n	800a824 <remove_chain+0x4a>
 800a896:	e000      	b.n	800a89a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a898:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <create_chain+0x2c>
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d31b      	bcc.n	800a908 <create_chain+0x64>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	e018      	b.n	800a908 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fdea 	bl	800a4b2 <get_fat>
 800a8de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d801      	bhi.n	800a8ea <create_chain+0x46>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e070      	b.n	800a9cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d101      	bne.n	800a8f6 <create_chain+0x52>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	e06a      	b.n	800a9cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d201      	bcs.n	800a904 <create_chain+0x60>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	e063      	b.n	800a9cc <create_chain+0x128>
		scl = clst;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	3301      	adds	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	69fa      	ldr	r2, [r7, #28]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d307      	bcc.n	800a92c <create_chain+0x88>
				ncl = 2;
 800a91c:	2302      	movs	r3, #2
 800a91e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a920:	69fa      	ldr	r2, [r7, #28]
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	429a      	cmp	r2, r3
 800a926:	d901      	bls.n	800a92c <create_chain+0x88>
 800a928:	2300      	movs	r3, #0
 800a92a:	e04f      	b.n	800a9cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a92c:	69f9      	ldr	r1, [r7, #28]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff fdbf 	bl	800a4b2 <get_fat>
 800a934:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00e      	beq.n	800a95a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d003      	beq.n	800a94a <create_chain+0xa6>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a948:	d101      	bne.n	800a94e <create_chain+0xaa>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	e03e      	b.n	800a9cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	429a      	cmp	r2, r3
 800a954:	d1da      	bne.n	800a90c <create_chain+0x68>
 800a956:	2300      	movs	r3, #0
 800a958:	e038      	b.n	800a9cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a95a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a95c:	f04f 32ff 	mov.w	r2, #4294967295
 800a960:	69f9      	ldr	r1, [r7, #28]
 800a962:	6938      	ldr	r0, [r7, #16]
 800a964:	f7ff fe4d 	bl	800a602 <put_fat>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <create_chain+0xe2>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a978:	69fa      	ldr	r2, [r7, #28]
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6938      	ldr	r0, [r7, #16]
 800a97e:	f7ff fe40 	bl	800a602 <put_fat>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d116      	bne.n	800a9ba <create_chain+0x116>
		fs->last_clst = ncl;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	695a      	ldr	r2, [r3, #20]
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	3b02      	subs	r3, #2
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d804      	bhi.n	800a9aa <create_chain+0x106>
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	1e5a      	subs	r2, r3, #1
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	791b      	ldrb	r3, [r3, #4]
 800a9ae:	f043 0301 	orr.w	r3, r3, #1
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	711a      	strb	r2, [r3, #4]
 800a9b8:	e007      	b.n	800a9ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d102      	bne.n	800a9c6 <create_chain+0x122>
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	e000      	b.n	800a9c8 <create_chain+0x124>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a9ca:	69fb      	ldr	r3, [r7, #28]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	0a5b      	lsrs	r3, r3, #9
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	8952      	ldrh	r2, [r2, #10]
 800a9f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	613a      	str	r2, [r7, #16]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <clmt_clust+0x3a>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e010      	b.n	800aa30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d307      	bcc.n	800aa26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa24:	e7e9      	b.n	800a9fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aa26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	4413      	add	r3, r2
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	371c      	adds	r7, #28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa52:	d204      	bcs.n	800aa5e <dir_sdi+0x22>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	f003 031f 	and.w	r3, r3, #31
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e063      	b.n	800ab2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <dir_sdi+0x46>
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d902      	bls.n	800aa82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10c      	bne.n	800aaa2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	095b      	lsrs	r3, r3, #5
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	8912      	ldrh	r2, [r2, #8]
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d301      	bcc.n	800aa98 <dir_sdi+0x5c>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e048      	b.n	800ab2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	61da      	str	r2, [r3, #28]
 800aaa0:	e029      	b.n	800aaf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	895b      	ldrh	r3, [r3, #10]
 800aaa6:	025b      	lsls	r3, r3, #9
 800aaa8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aaaa:	e019      	b.n	800aae0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff fcfe 	bl	800a4b2 <get_fat>
 800aab6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d101      	bne.n	800aac4 <dir_sdi+0x88>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e032      	b.n	800ab2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d904      	bls.n	800aad4 <dir_sdi+0x98>
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d301      	bcc.n	800aad8 <dir_sdi+0x9c>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e028      	b.n	800ab2a <dir_sdi+0xee>
			ofs -= csz;
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d2e1      	bcs.n	800aaac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800aae8:	6979      	ldr	r1, [r7, #20]
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f7ff fcc2 	bl	800a474 <clust2sect>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <dir_sdi+0xcc>
 800ab04:	2302      	movs	r3, #2
 800ab06:	e010      	b.n	800ab2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	69da      	ldr	r2, [r3, #28]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	0a5b      	lsrs	r3, r3, #9
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab22:	441a      	add	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b086      	sub	sp, #24
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	3320      	adds	r3, #32
 800ab48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <dir_next+0x28>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab58:	d301      	bcc.n	800ab5e <dir_next+0x2c>
 800ab5a:	2304      	movs	r3, #4
 800ab5c:	e0aa      	b.n	800acb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f040 8098 	bne.w	800ac9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10b      	bne.n	800ab94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	8912      	ldrh	r2, [r2, #8]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	f0c0 8088 	bcc.w	800ac9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	61da      	str	r2, [r3, #28]
 800ab90:	2304      	movs	r3, #4
 800ab92:	e08f      	b.n	800acb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	0a5b      	lsrs	r3, r3, #9
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	8952      	ldrh	r2, [r2, #10]
 800ab9c:	3a01      	subs	r2, #1
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d17a      	bne.n	800ac9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7ff fc80 	bl	800a4b2 <get_fat>
 800abb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d801      	bhi.n	800abbe <dir_next+0x8c>
 800abba:	2302      	movs	r3, #2
 800abbc:	e07a      	b.n	800acb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d101      	bne.n	800abca <dir_next+0x98>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e074      	b.n	800acb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d358      	bcc.n	800ac86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d104      	bne.n	800abe4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	61da      	str	r2, [r3, #28]
 800abe0:	2304      	movs	r3, #4
 800abe2:	e067      	b.n	800acb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7ff fe59 	bl	800a8a4 <create_chain>
 800abf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <dir_next+0xcc>
 800abfa:	2307      	movs	r3, #7
 800abfc:	e05a      	b.n	800acb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d101      	bne.n	800ac08 <dir_next+0xd6>
 800ac04:	2302      	movs	r3, #2
 800ac06:	e055      	b.n	800acb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d101      	bne.n	800ac14 <dir_next+0xe2>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e04f      	b.n	800acb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7ff fb4d 	bl	800a2b4 <sync_window>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <dir_next+0xf2>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e047      	b.n	800acb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3334      	adds	r3, #52	; 0x34
 800ac28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff f945 	bl	8009ebe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fc1a 	bl	800a474 <clust2sect>
 800ac40:	4602      	mov	r2, r0
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	631a      	str	r2, [r3, #48]	; 0x30
 800ac46:	e012      	b.n	800ac6e <dir_next+0x13c>
						fs->wflag = 1;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fb30 	bl	800a2b4 <sync_window>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <dir_next+0x12c>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e02a      	b.n	800acb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	3301      	adds	r3, #1
 800ac62:	613b      	str	r3, [r7, #16]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	895b      	ldrh	r3, [r3, #10]
 800ac72:	461a      	mov	r2, r3
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d3e6      	bcc.n	800ac48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad2      	subs	r2, r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ac8c:	6979      	ldr	r1, [r7, #20]
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7ff fbf0 	bl	800a474 <clust2sect>
 800ac94:	4602      	mov	r2, r0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acac:	441a      	add	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff feb4 	bl	800aa3c <dir_sdi>
 800acd4:	4603      	mov	r3, r0
 800acd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d12b      	bne.n	800ad36 <dir_alloc+0x7a>
		n = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7ff fb27 	bl	800a33c <move_window>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11d      	bne.n	800ad34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2be5      	cmp	r3, #229	; 0xe5
 800ad00:	d004      	beq.n	800ad0c <dir_alloc+0x50>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d107      	bne.n	800ad1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d102      	bne.n	800ad20 <dir_alloc+0x64>
 800ad1a:	e00c      	b.n	800ad36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad20:	2101      	movs	r1, #1
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff ff05 	bl	800ab32 <dir_next>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0d7      	beq.n	800ace2 <dir_alloc+0x26>
 800ad32:	e000      	b.n	800ad36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ad34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d101      	bne.n	800ad40 <dir_alloc+0x84>
 800ad3c:	2307      	movs	r3, #7
 800ad3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	331a      	adds	r3, #26
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff f80d 	bl	8009d78 <ld_word>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d109      	bne.n	800ad7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	3314      	adds	r3, #20
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff f802 	bl	8009d78 <ld_word>
 800ad74:	4603      	mov	r3, r0
 800ad76:	041b      	lsls	r3, r3, #16
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	331a      	adds	r3, #26
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	b292      	uxth	r2, r2
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff f825 	bl	8009dee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d109      	bne.n	800adc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f103 0214 	add.w	r2, r3, #20
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	0c1b      	lsrs	r3, r3, #16
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7ff f817 	bl	8009dee <st_word>
	}
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800add6:	2100      	movs	r1, #0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff fe2f 	bl	800aa3c <dir_sdi>
 800adde:	4603      	mov	r3, r0
 800ade0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <dir_find+0x24>
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	e03e      	b.n	800ae6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6938      	ldr	r0, [r7, #16]
 800adf4:	f7ff faa2 	bl	800a33c <move_window>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d12f      	bne.n	800ae62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d102      	bne.n	800ae16 <dir_find+0x4e>
 800ae10:	2304      	movs	r3, #4
 800ae12:	75fb      	strb	r3, [r7, #23]
 800ae14:	e028      	b.n	800ae68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	330b      	adds	r3, #11
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	330b      	adds	r3, #11
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10a      	bne.n	800ae4e <dir_find+0x86>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a18      	ldr	r0, [r3, #32]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	220b      	movs	r2, #11
 800ae42:	4619      	mov	r1, r3
 800ae44:	f7ff f856 	bl	8009ef4 <mem_cmp>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae4e:	2100      	movs	r1, #0
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff fe6e 	bl	800ab32 <dir_next>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0c5      	beq.n	800adec <dir_find+0x24>
 800ae60:	e002      	b.n	800ae68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae66:	bf00      	nop

	return res;
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ae80:	2101      	movs	r1, #1
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff ff1a 	bl	800acbc <dir_alloc>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d11c      	bne.n	800aecc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	4619      	mov	r1, r3
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7ff fa4f 	bl	800a33c <move_window>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d111      	bne.n	800aecc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	2220      	movs	r2, #32
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff f804 	bl	8009ebe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a18      	ldr	r0, [r3, #32]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3324      	adds	r3, #36	; 0x24
 800aebe:	220b      	movs	r2, #11
 800aec0:	4619      	mov	r1, r3
 800aec2:	f7fe ffdb 	bl	8009e7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2201      	movs	r2, #1
 800aeca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aeee:	220b      	movs	r2, #11
 800aef0:	2120      	movs	r1, #32
 800aef2:	68b8      	ldr	r0, [r7, #8]
 800aef4:	f7fe ffe3 	bl	8009ebe <mem_set>
	si = i = 0; ni = 8;
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	61fb      	str	r3, [r7, #28]
 800af00:	2308      	movs	r3, #8
 800af02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	61fa      	str	r2, [r7, #28]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4413      	add	r3, r2
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af12:	7efb      	ldrb	r3, [r7, #27]
 800af14:	2b20      	cmp	r3, #32
 800af16:	d94e      	bls.n	800afb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800af18:	7efb      	ldrb	r3, [r7, #27]
 800af1a:	2b2f      	cmp	r3, #47	; 0x2f
 800af1c:	d006      	beq.n	800af2c <create_name+0x54>
 800af1e:	7efb      	ldrb	r3, [r7, #27]
 800af20:	2b5c      	cmp	r3, #92	; 0x5c
 800af22:	d110      	bne.n	800af46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af24:	e002      	b.n	800af2c <create_name+0x54>
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	3301      	adds	r3, #1
 800af2a:	61fb      	str	r3, [r7, #28]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	4413      	add	r3, r2
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b2f      	cmp	r3, #47	; 0x2f
 800af36:	d0f6      	beq.n	800af26 <create_name+0x4e>
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	4413      	add	r3, r2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b5c      	cmp	r3, #92	; 0x5c
 800af42:	d0f0      	beq.n	800af26 <create_name+0x4e>
			break;
 800af44:	e038      	b.n	800afb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af46:	7efb      	ldrb	r3, [r7, #27]
 800af48:	2b2e      	cmp	r3, #46	; 0x2e
 800af4a:	d003      	beq.n	800af54 <create_name+0x7c>
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	429a      	cmp	r2, r3
 800af52:	d30c      	bcc.n	800af6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2b0b      	cmp	r3, #11
 800af58:	d002      	beq.n	800af60 <create_name+0x88>
 800af5a:	7efb      	ldrb	r3, [r7, #27]
 800af5c:	2b2e      	cmp	r3, #46	; 0x2e
 800af5e:	d001      	beq.n	800af64 <create_name+0x8c>
 800af60:	2306      	movs	r3, #6
 800af62:	e044      	b.n	800afee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af64:	2308      	movs	r3, #8
 800af66:	613b      	str	r3, [r7, #16]
 800af68:	230b      	movs	r3, #11
 800af6a:	617b      	str	r3, [r7, #20]
			continue;
 800af6c:	e022      	b.n	800afb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af72:	2b00      	cmp	r3, #0
 800af74:	da04      	bge.n	800af80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af76:	7efb      	ldrb	r3, [r7, #27]
 800af78:	3b80      	subs	r3, #128	; 0x80
 800af7a:	4a1f      	ldr	r2, [pc, #124]	; (800aff8 <create_name+0x120>)
 800af7c:	5cd3      	ldrb	r3, [r2, r3]
 800af7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800af80:	7efb      	ldrb	r3, [r7, #27]
 800af82:	4619      	mov	r1, r3
 800af84:	481d      	ldr	r0, [pc, #116]	; (800affc <create_name+0x124>)
 800af86:	f7fe ffdc 	bl	8009f42 <chk_chr>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <create_name+0xbc>
 800af90:	2306      	movs	r3, #6
 800af92:	e02c      	b.n	800afee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af94:	7efb      	ldrb	r3, [r7, #27]
 800af96:	2b60      	cmp	r3, #96	; 0x60
 800af98:	d905      	bls.n	800afa6 <create_name+0xce>
 800af9a:	7efb      	ldrb	r3, [r7, #27]
 800af9c:	2b7a      	cmp	r3, #122	; 0x7a
 800af9e:	d802      	bhi.n	800afa6 <create_name+0xce>
 800afa0:	7efb      	ldrb	r3, [r7, #27]
 800afa2:	3b20      	subs	r3, #32
 800afa4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	613a      	str	r2, [r7, #16]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	4413      	add	r3, r2
 800afb0:	7efa      	ldrb	r2, [r7, #27]
 800afb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800afb4:	e7a6      	b.n	800af04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	441a      	add	r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <create_name+0xf4>
 800afc8:	2306      	movs	r3, #6
 800afca:	e010      	b.n	800afee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2be5      	cmp	r3, #229	; 0xe5
 800afd2:	d102      	bne.n	800afda <create_name+0x102>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2205      	movs	r2, #5
 800afd8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800afda:	7efb      	ldrb	r3, [r7, #27]
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d801      	bhi.n	800afe4 <create_name+0x10c>
 800afe0:	2204      	movs	r2, #4
 800afe2:	e000      	b.n	800afe6 <create_name+0x10e>
 800afe4:	2200      	movs	r2, #0
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	330b      	adds	r3, #11
 800afea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800afec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	08010de8 	.word	0x08010de8
 800affc:	08010d1c 	.word	0x08010d1c

0800b000 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b014:	e002      	b.n	800b01c <follow_path+0x1c>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2b2f      	cmp	r3, #47	; 0x2f
 800b022:	d0f8      	beq.n	800b016 <follow_path+0x16>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b5c      	cmp	r3, #92	; 0x5c
 800b02a:	d0f4      	beq.n	800b016 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	2200      	movs	r2, #0
 800b030:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b1f      	cmp	r3, #31
 800b038:	d80a      	bhi.n	800b050 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2280      	movs	r2, #128	; 0x80
 800b03e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff fcf9 	bl	800aa3c <dir_sdi>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75fb      	strb	r3, [r7, #23]
 800b04e:	e043      	b.n	800b0d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b050:	463b      	mov	r3, r7
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff ff3f 	bl	800aed8 <create_name>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d134      	bne.n	800b0ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7ff feaf 	bl	800adc8 <dir_find>
 800b06a:	4603      	mov	r3, r0
 800b06c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b074:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d127      	bne.n	800b0d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b082:	7afb      	ldrb	r3, [r7, #11]
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d122      	bne.n	800b0d2 <follow_path+0xd2>
 800b08c:	2305      	movs	r3, #5
 800b08e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b090:	e01f      	b.n	800b0d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d11c      	bne.n	800b0d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	799b      	ldrb	r3, [r3, #6]
 800b0a0:	f003 0310 	and.w	r3, r3, #16
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b0a8:	2305      	movs	r3, #5
 800b0aa:	75fb      	strb	r3, [r7, #23]
 800b0ac:	e014      	b.n	800b0d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0bc:	4413      	add	r3, r2
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fe42 	bl	800ad4a <ld_clust>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0cc:	e7c0      	b.n	800b050 <follow_path+0x50>
			if (res != FR_OK) break;
 800b0ce:	bf00      	nop
 800b0d0:	e002      	b.n	800b0d8 <follow_path+0xd8>
				break;
 800b0d2:	bf00      	nop
 800b0d4:	e000      	b.n	800b0d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0d6:	bf00      	nop
			}
		}
	}

	return res;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b087      	sub	sp, #28
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d031      	beq.n	800b15c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e002      	b.n	800b106 <get_ldnumber+0x24>
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	3301      	adds	r3, #1
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	d903      	bls.n	800b116 <get_ldnumber+0x34>
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b3a      	cmp	r3, #58	; 0x3a
 800b114:	d1f4      	bne.n	800b100 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b3a      	cmp	r3, #58	; 0x3a
 800b11c:	d11c      	bne.n	800b158 <get_ldnumber+0x76>
			tp = *path;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	60fa      	str	r2, [r7, #12]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	3b30      	subs	r3, #48	; 0x30
 800b12e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b09      	cmp	r3, #9
 800b134:	d80e      	bhi.n	800b154 <get_ldnumber+0x72>
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d10a      	bne.n	800b154 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d107      	bne.n	800b154 <get_ldnumber+0x72>
					vol = (int)i;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	3301      	adds	r3, #1
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	e002      	b.n	800b15e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b158:	2300      	movs	r3, #0
 800b15a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b15c:	693b      	ldr	r3, [r7, #16]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	70da      	strb	r2, [r3, #3]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f04f 32ff 	mov.w	r2, #4294967295
 800b182:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff f8d8 	bl	800a33c <move_window>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <check_fs+0x2a>
 800b192:	2304      	movs	r3, #4
 800b194:	e038      	b.n	800b208 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3334      	adds	r3, #52	; 0x34
 800b19a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fdea 	bl	8009d78 <ld_word>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d001      	beq.n	800b1b4 <check_fs+0x48>
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e029      	b.n	800b208 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1ba:	2be9      	cmp	r3, #233	; 0xe9
 800b1bc:	d009      	beq.n	800b1d2 <check_fs+0x66>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1c4:	2beb      	cmp	r3, #235	; 0xeb
 800b1c6:	d11e      	bne.n	800b206 <check_fs+0x9a>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b1ce:	2b90      	cmp	r3, #144	; 0x90
 800b1d0:	d119      	bne.n	800b206 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3334      	adds	r3, #52	; 0x34
 800b1d6:	3336      	adds	r3, #54	; 0x36
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fde5 	bl	8009da8 <ld_dword>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1e4:	4a0a      	ldr	r2, [pc, #40]	; (800b210 <check_fs+0xa4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d101      	bne.n	800b1ee <check_fs+0x82>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e00c      	b.n	800b208 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3334      	adds	r3, #52	; 0x34
 800b1f2:	3352      	adds	r3, #82	; 0x52
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe fdd7 	bl	8009da8 <ld_dword>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	4a05      	ldr	r2, [pc, #20]	; (800b214 <check_fs+0xa8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d101      	bne.n	800b206 <check_fs+0x9a>
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b206:	2302      	movs	r3, #2
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	00544146 	.word	0x00544146
 800b214:	33544146 	.word	0x33544146

0800b218 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b096      	sub	sp, #88	; 0x58
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff ff58 	bl	800b0e2 <get_ldnumber>
 800b232:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b236:	2b00      	cmp	r3, #0
 800b238:	da01      	bge.n	800b23e <find_volume+0x26>
 800b23a:	230b      	movs	r3, #11
 800b23c:	e236      	b.n	800b6ac <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b23e:	4aac      	ldr	r2, [pc, #688]	; (800b4f0 <find_volume+0x2d8>)
 800b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b246:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <find_volume+0x3a>
 800b24e:	230c      	movs	r3, #12
 800b250:	e22c      	b.n	800b6ac <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800b252:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b254:	f7fe fe90 	bl	8009f78 <lock_fs>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <find_volume+0x4a>
 800b25e:	230f      	movs	r3, #15
 800b260:	e224      	b.n	800b6ac <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b266:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	f023 0301 	bic.w	r3, r3, #1
 800b26e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d01a      	beq.n	800b2ae <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	785b      	ldrb	r3, [r3, #1]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fcdd 	bl	8009c3c <disk_status>
 800b282:	4603      	mov	r3, r0
 800b284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10c      	bne.n	800b2ae <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b294:	79fb      	ldrb	r3, [r7, #7]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d007      	beq.n	800b2aa <find_volume+0x92>
 800b29a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b29e:	f003 0304 	and.w	r3, r3, #4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b2a6:	230a      	movs	r3, #10
 800b2a8:	e200      	b.n	800b6ac <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e1fe      	b.n	800b6ac <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	785b      	ldrb	r3, [r3, #1]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fcd5 	bl	8009c70 <disk_initialize>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e1e7      	b.n	800b6ac <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <find_volume+0xda>
 800b2e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b2ee:	230a      	movs	r3, #10
 800b2f0:	e1dc      	b.n	800b6ac <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2fa:	f7ff ff37 	bl	800b16c <check_fs>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d14b      	bne.n	800b3a4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b30c:	2300      	movs	r3, #0
 800b30e:	643b      	str	r3, [r7, #64]	; 0x40
 800b310:	e01f      	b.n	800b352 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b320:	4413      	add	r3, r2
 800b322:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	3304      	adds	r3, #4
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d006      	beq.n	800b33c <find_volume+0x124>
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	3308      	adds	r3, #8
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fd38 	bl	8009da8 <ld_dword>
 800b338:	4602      	mov	r2, r0
 800b33a:	e000      	b.n	800b33e <find_volume+0x126>
 800b33c:	2200      	movs	r2, #0
 800b33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b346:	440b      	add	r3, r1
 800b348:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34e:	3301      	adds	r3, #1
 800b350:	643b      	str	r3, [r7, #64]	; 0x40
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	2b03      	cmp	r3, #3
 800b356:	d9dc      	bls.n	800b312 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b358:	2300      	movs	r3, #0
 800b35a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <find_volume+0x150>
 800b362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b364:	3b01      	subs	r3, #1
 800b366:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b370:	4413      	add	r3, r2
 800b372:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b376:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <find_volume+0x172>
 800b37e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b382:	f7ff fef3 	bl	800b16c <check_fs>
 800b386:	4603      	mov	r3, r0
 800b388:	e000      	b.n	800b38c <find_volume+0x174>
 800b38a:	2303      	movs	r3, #3
 800b38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b394:	2b01      	cmp	r3, #1
 800b396:	d905      	bls.n	800b3a4 <find_volume+0x18c>
 800b398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39a:	3301      	adds	r3, #1
 800b39c:	643b      	str	r3, [r7, #64]	; 0x40
 800b39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d9e1      	bls.n	800b368 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d101      	bne.n	800b3b0 <find_volume+0x198>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e17d      	b.n	800b6ac <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d901      	bls.n	800b3bc <find_volume+0x1a4>
 800b3b8:	230d      	movs	r3, #13
 800b3ba:	e177      	b.n	800b6ac <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	3334      	adds	r3, #52	; 0x34
 800b3c0:	330b      	adds	r3, #11
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fcd8 	bl	8009d78 <ld_word>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ce:	d001      	beq.n	800b3d4 <find_volume+0x1bc>
 800b3d0:	230d      	movs	r3, #13
 800b3d2:	e16b      	b.n	800b6ac <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	3334      	adds	r3, #52	; 0x34
 800b3d8:	3316      	adds	r3, #22
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fccc 	bl	8009d78 <ld_word>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <find_volume+0x1e0>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	3334      	adds	r3, #52	; 0x34
 800b3ee:	3324      	adds	r3, #36	; 0x24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe fcd9 	bl	8009da8 <ld_dword>
 800b3f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3fc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	789b      	ldrb	r3, [r3, #2]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d005      	beq.n	800b41c <find_volume+0x204>
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	789b      	ldrb	r3, [r3, #2]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d001      	beq.n	800b41c <find_volume+0x204>
 800b418:	230d      	movs	r3, #13
 800b41a:	e147      	b.n	800b6ac <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	789b      	ldrb	r3, [r3, #2]
 800b420:	461a      	mov	r2, r3
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	fb02 f303 	mul.w	r3, r2, r3
 800b428:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b430:	b29a      	uxth	r2, r3
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	895b      	ldrh	r3, [r3, #10]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d008      	beq.n	800b450 <find_volume+0x238>
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	895b      	ldrh	r3, [r3, #10]
 800b442:	461a      	mov	r2, r3
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	895b      	ldrh	r3, [r3, #10]
 800b448:	3b01      	subs	r3, #1
 800b44a:	4013      	ands	r3, r2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <find_volume+0x23c>
 800b450:	230d      	movs	r3, #13
 800b452:	e12b      	b.n	800b6ac <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	3334      	adds	r3, #52	; 0x34
 800b458:	3311      	adds	r3, #17
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fc8c 	bl	8009d78 <ld_word>
 800b460:	4603      	mov	r3, r0
 800b462:	461a      	mov	r2, r3
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	891b      	ldrh	r3, [r3, #8]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	b29b      	uxth	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <find_volume+0x262>
 800b476:	230d      	movs	r3, #13
 800b478:	e118      	b.n	800b6ac <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	3334      	adds	r3, #52	; 0x34
 800b47e:	3313      	adds	r3, #19
 800b480:	4618      	mov	r0, r3
 800b482:	f7fe fc79 	bl	8009d78 <ld_word>
 800b486:	4603      	mov	r3, r0
 800b488:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <find_volume+0x286>
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	3334      	adds	r3, #52	; 0x34
 800b494:	3320      	adds	r3, #32
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fc86 	bl	8009da8 <ld_dword>
 800b49c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	3334      	adds	r3, #52	; 0x34
 800b4a2:	330e      	adds	r3, #14
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fc67 	bl	8009d78 <ld_word>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <find_volume+0x2a0>
 800b4b4:	230d      	movs	r3, #13
 800b4b6:	e0f9      	b.n	800b6ac <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4bc:	4413      	add	r3, r2
 800b4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4c0:	8912      	ldrh	r2, [r2, #8]
 800b4c2:	0912      	lsrs	r2, r2, #4
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d201      	bcs.n	800b4d6 <find_volume+0x2be>
 800b4d2:	230d      	movs	r3, #13
 800b4d4:	e0ea      	b.n	800b6ac <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4de:	8952      	ldrh	r2, [r2, #10]
 800b4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <find_volume+0x2dc>
 800b4ec:	230d      	movs	r3, #13
 800b4ee:	e0dd      	b.n	800b6ac <find_volume+0x494>
 800b4f0:	24008190 	.word	0x24008190
		fmt = FS_FAT32;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b500:	4293      	cmp	r3, r2
 800b502:	d802      	bhi.n	800b50a <find_volume+0x2f2>
 800b504:	2302      	movs	r3, #2
 800b506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b510:	4293      	cmp	r3, r2
 800b512:	d802      	bhi.n	800b51a <find_volume+0x302>
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	1c9a      	adds	r2, r3, #2
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b526:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b528:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b52a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b52c:	441a      	add	r2, r3
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	441a      	add	r2, r3
 800b538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b53c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b540:	2b03      	cmp	r3, #3
 800b542:	d11e      	bne.n	800b582 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	3334      	adds	r3, #52	; 0x34
 800b548:	332a      	adds	r3, #42	; 0x2a
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fc14 	bl	8009d78 <ld_word>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <find_volume+0x342>
 800b556:	230d      	movs	r3, #13
 800b558:	e0a8      	b.n	800b6ac <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	891b      	ldrh	r3, [r3, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <find_volume+0x34e>
 800b562:	230d      	movs	r3, #13
 800b564:	e0a2      	b.n	800b6ac <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	3334      	adds	r3, #52	; 0x34
 800b56a:	332c      	adds	r3, #44	; 0x2c
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fc1b 	bl	8009da8 <ld_dword>
 800b572:	4602      	mov	r2, r0
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	647b      	str	r3, [r7, #68]	; 0x44
 800b580:	e01f      	b.n	800b5c2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	891b      	ldrh	r3, [r3, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <find_volume+0x376>
 800b58a:	230d      	movs	r3, #13
 800b58c:	e08e      	b.n	800b6ac <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b594:	441a      	add	r2, r3
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b59a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d103      	bne.n	800b5aa <find_volume+0x392>
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	e00a      	b.n	800b5c0 <find_volume+0x3a8>
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	4413      	add	r3, r2
 800b5b4:	085a      	lsrs	r2, r3, #1
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	69da      	ldr	r2, [r3, #28]
 800b5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5cc:	0a5b      	lsrs	r3, r3, #9
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d201      	bcs.n	800b5d6 <find_volume+0x3be>
 800b5d2:	230d      	movs	r3, #13
 800b5d4:	e06a      	b.n	800b6ac <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5dc:	615a      	str	r2, [r3, #20]
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	695a      	ldr	r2, [r3, #20]
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	2280      	movs	r2, #128	; 0x80
 800b5ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5f0:	2b03      	cmp	r3, #3
 800b5f2:	d149      	bne.n	800b688 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	3334      	adds	r3, #52	; 0x34
 800b5f8:	3330      	adds	r3, #48	; 0x30
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fbbc 	bl	8009d78 <ld_word>
 800b600:	4603      	mov	r3, r0
 800b602:	2b01      	cmp	r3, #1
 800b604:	d140      	bne.n	800b688 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b608:	3301      	adds	r3, #1
 800b60a:	4619      	mov	r1, r3
 800b60c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b60e:	f7fe fe95 	bl	800a33c <move_window>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d137      	bne.n	800b688 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	2200      	movs	r2, #0
 800b61c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	3334      	adds	r3, #52	; 0x34
 800b622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fba6 	bl	8009d78 <ld_word>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b634:	429a      	cmp	r2, r3
 800b636:	d127      	bne.n	800b688 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	3334      	adds	r3, #52	; 0x34
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fbb3 	bl	8009da8 <ld_dword>
 800b642:	4603      	mov	r3, r0
 800b644:	4a1b      	ldr	r2, [pc, #108]	; (800b6b4 <find_volume+0x49c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d11e      	bne.n	800b688 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	3334      	adds	r3, #52	; 0x34
 800b64e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fba8 	bl	8009da8 <ld_dword>
 800b658:	4603      	mov	r3, r0
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <find_volume+0x4a0>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d113      	bne.n	800b688 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	3334      	adds	r3, #52	; 0x34
 800b664:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe fb9d 	bl	8009da8 <ld_dword>
 800b66e:	4602      	mov	r2, r0
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	3334      	adds	r3, #52	; 0x34
 800b678:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fe fb93 	bl	8009da8 <ld_dword>
 800b682:	4602      	mov	r2, r0
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b68e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <find_volume+0x4a4>)
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	4b08      	ldr	r3, [pc, #32]	; (800b6bc <find_volume+0x4a4>)
 800b69a:	801a      	strh	r2, [r3, #0]
 800b69c:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <find_volume+0x4a4>)
 800b69e:	881a      	ldrh	r2, [r3, #0]
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6a6:	f7fe fde1 	bl	800a26c <clear_lock>
#endif
	return FR_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3758      	adds	r7, #88	; 0x58
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	41615252 	.word	0x41615252
 800b6b8:	61417272 	.word	0x61417272
 800b6bc:	24008194 	.word	0x24008194

0800b6c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6ca:	2309      	movs	r3, #9
 800b6cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d02e      	beq.n	800b732 <validate+0x72>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d02a      	beq.n	800b732 <validate+0x72>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d025      	beq.n	800b732 <validate+0x72>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	889a      	ldrh	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	88db      	ldrh	r3, [r3, #6]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d11e      	bne.n	800b732 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe fc3d 	bl	8009f78 <lock_fs>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d014      	beq.n	800b72e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	785b      	ldrb	r3, [r3, #1]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fa96 	bl	8009c3c <disk_status>
 800b710:	4603      	mov	r3, r0
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <validate+0x60>
				res = FR_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]
 800b71e:	e008      	b.n	800b732 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fc3c 	bl	8009fa4 <unlock_fs>
 800b72c:	e001      	b.n	800b732 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b72e:	230f      	movs	r3, #15
 800b730:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <validate+0x7e>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	e000      	b.n	800b740 <validate+0x80>
 800b73e:	2300      	movs	r3, #0
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	6013      	str	r3, [r2, #0]
	return res;
 800b744:	7bfb      	ldrb	r3, [r7, #15]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b762:	f107 0310 	add.w	r3, r7, #16
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fcbb 	bl	800b0e2 <get_ldnumber>
 800b76c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	2b00      	cmp	r3, #0
 800b772:	da01      	bge.n	800b778 <f_mount+0x28>
 800b774:	230b      	movs	r3, #11
 800b776:	e048      	b.n	800b80a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b778:	4a26      	ldr	r2, [pc, #152]	; (800b814 <f_mount+0xc4>)
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b780:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00f      	beq.n	800b7a8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b788:	69b8      	ldr	r0, [r7, #24]
 800b78a:	f7fe fd6f 	bl	800a26c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	4618      	mov	r0, r3
 800b794:	f001 f904 	bl	800c9a0 <ff_del_syncobj>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <f_mount+0x52>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e033      	b.n	800b80a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00f      	beq.n	800b7ce <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	330c      	adds	r3, #12
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f001 f8d3 	bl	800c96a <ff_cre_syncobj>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <f_mount+0x7e>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e01d      	b.n	800b80a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	4910      	ldr	r1, [pc, #64]	; (800b814 <f_mount+0xc4>)
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <f_mount+0x94>
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d001      	beq.n	800b7e8 <f_mount+0x98>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e010      	b.n	800b80a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7e8:	f107 010c 	add.w	r1, r7, #12
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff fd10 	bl	800b218 <find_volume>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	7dfa      	ldrb	r2, [r7, #23]
 800b800:	4611      	mov	r1, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fbce 	bl	8009fa4 <unlock_fs>
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	24008190 	.word	0x24008190

0800b818 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b098      	sub	sp, #96	; 0x60
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <f_open+0x18>
 800b82c:	2309      	movs	r3, #9
 800b82e:	e1b4      	b.n	800bb9a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b830:	79fb      	ldrb	r3, [r7, #7]
 800b832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b836:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b838:	79fa      	ldrb	r2, [r7, #7]
 800b83a:	f107 0110 	add.w	r1, r7, #16
 800b83e:	f107 0308 	add.w	r3, r7, #8
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fce8 	bl	800b218 <find_volume>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b84e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 8191 	bne.w	800bb7a <f_open+0x362>
		dj.obj.fs = fs;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	f107 0314 	add.w	r3, r7, #20
 800b862:	4611      	mov	r1, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fbcb 	bl	800b000 <follow_path>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11a      	bne.n	800b8ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b878:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b87c:	b25b      	sxtb	r3, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	da03      	bge.n	800b88a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b882:	2306      	movs	r3, #6
 800b884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b888:	e011      	b.n	800b8ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	f023 0301 	bic.w	r3, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	bf14      	ite	ne
 800b894:	2301      	movne	r3, #1
 800b896:	2300      	moveq	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	f107 0314 	add.w	r3, r7, #20
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe fb9a 	bl	8009fdc <chk_lock>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	f003 031c 	and.w	r3, r3, #28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d07f      	beq.n	800b9b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d017      	beq.n	800b8f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d10e      	bne.n	800b8e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b8c8:	f7fe fbe4 	bl	800a094 <enq_lock>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d006      	beq.n	800b8e0 <f_open+0xc8>
 800b8d2:	f107 0314 	add.w	r3, r7, #20
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff facb 	bl	800ae72 <dir_register>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	e000      	b.n	800b8e2 <f_open+0xca>
 800b8e0:	2312      	movs	r3, #18
 800b8e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	f043 0308 	orr.w	r3, r3, #8
 800b8ec:	71fb      	strb	r3, [r7, #7]
 800b8ee:	e010      	b.n	800b912 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b8f0:	7ebb      	ldrb	r3, [r7, #26]
 800b8f2:	f003 0311 	and.w	r3, r3, #17
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <f_open+0xea>
					res = FR_DENIED;
 800b8fa:	2307      	movs	r3, #7
 800b8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b900:	e007      	b.n	800b912 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <f_open+0xfa>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b916:	2b00      	cmp	r3, #0
 800b918:	d168      	bne.n	800b9ec <f_open+0x1d4>
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	f003 0308 	and.w	r3, r3, #8
 800b920:	2b00      	cmp	r3, #0
 800b922:	d063      	beq.n	800b9ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800b924:	f7fd ff34 	bl	8009790 <get_fattime>
 800b928:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92c:	330e      	adds	r3, #14
 800b92e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fa77 	bl	8009e24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b938:	3316      	adds	r3, #22
 800b93a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe fa71 	bl	8009e24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b944:	330b      	adds	r3, #11
 800b946:	2220      	movs	r2, #32
 800b948:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff f9fa 	bl	800ad4a <ld_clust>
 800b956:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b95c:	2200      	movs	r2, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fa12 	bl	800ad88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b966:	331c      	adds	r3, #28
 800b968:	2100      	movs	r1, #0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fa5a 	bl	8009e24 <st_dword>
					fs->wflag = 1;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2201      	movs	r2, #1
 800b974:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d037      	beq.n	800b9ec <f_open+0x1d4>
						dw = fs->winsect;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b980:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b982:	f107 0314 	add.w	r3, r7, #20
 800b986:	2200      	movs	r2, #0
 800b988:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe ff25 	bl	800a7da <remove_chain>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d126      	bne.n	800b9ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fcca 	bl	800a33c <move_window>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9b2:	3a01      	subs	r2, #1
 800b9b4:	611a      	str	r2, [r3, #16]
 800b9b6:	e019      	b.n	800b9ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d115      	bne.n	800b9ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b9c0:	7ebb      	ldrb	r3, [r7, #26]
 800b9c2:	f003 0310 	and.w	r3, r3, #16
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b9ca:	2304      	movs	r3, #4
 800b9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b9d0:	e00c      	b.n	800b9ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	f003 0302 	and.w	r3, r3, #2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <f_open+0x1d4>
 800b9dc:	7ebb      	ldrb	r3, [r7, #26]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <f_open+0x1d4>
						res = FR_DENIED;
 800b9e6:	2307      	movs	r3, #7
 800b9e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b9ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d128      	bne.n	800ba46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	f023 0301 	bic.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bf14      	ite	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	2300      	moveq	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	461a      	mov	r2, r3
 800ba26:	f107 0314 	add.w	r3, r7, #20
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe fb53 	bl	800a0d8 <inc_lock>
 800ba32:	4602      	mov	r2, r0
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <f_open+0x22e>
 800ba40:	2302      	movs	r3, #2
 800ba42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ba46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f040 8095 	bne.w	800bb7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba54:	4611      	mov	r1, r2
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7ff f977 	bl	800ad4a <ld_clust>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	331c      	adds	r3, #28
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fe f99e 	bl	8009da8 <ld_dword>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	88da      	ldrh	r2, [r3, #6]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	79fa      	ldrb	r2, [r7, #7]
 800ba8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3330      	adds	r3, #48	; 0x30
 800baa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fa08 	bl	8009ebe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800baae:	79fb      	ldrb	r3, [r7, #7]
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d060      	beq.n	800bb7a <f_open+0x362>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05c      	beq.n	800bb7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	895b      	ldrh	r3, [r3, #10]
 800bacc:	025b      	lsls	r3, r3, #9
 800bace:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	657b      	str	r3, [r7, #84]	; 0x54
 800badc:	e016      	b.n	800bb0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fce5 	bl	800a4b2 <get_fat>
 800bae8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800baea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baec:	2b01      	cmp	r3, #1
 800baee:	d802      	bhi.n	800baf6 <f_open+0x2de>
 800baf0:	2302      	movs	r3, #2
 800baf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800baf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafc:	d102      	bne.n	800bb04 <f_open+0x2ec>
 800bafe:	2301      	movs	r3, #1
 800bb00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d103      	bne.n	800bb1c <f_open+0x304>
 800bb14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d8e0      	bhi.n	800bade <f_open+0x2c6>
				}
				fp->clust = clst;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d127      	bne.n	800bb7a <f_open+0x362>
 800bb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d022      	beq.n	800bb7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fc9b 	bl	800a474 <clust2sect>
 800bb3e:	6478      	str	r0, [r7, #68]	; 0x44
 800bb40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d103      	bne.n	800bb4e <f_open+0x336>
						res = FR_INT_ERR;
 800bb46:	2302      	movs	r3, #2
 800bb48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb4c:	e015      	b.n	800bb7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb50:	0a5a      	lsrs	r2, r3, #9
 800bb52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb54:	441a      	add	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	7858      	ldrb	r0, [r3, #1]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a1a      	ldr	r2, [r3, #32]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f7fe f8a7 	bl	8009cbc <disk_read>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <f_open+0x362>
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <f_open+0x370>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fa07 	bl	8009fa4 <unlock_fs>
 800bb96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3760      	adds	r7, #96	; 0x60
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b08c      	sub	sp, #48	; 0x30
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
 800bbae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f107 0210 	add.w	r2, r7, #16
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fd7c 	bl	800b6c0 <validate>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d107      	bne.n	800bbe6 <f_write+0x44>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	7d5b      	ldrb	r3, [r3, #21]
 800bbda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d009      	beq.n	800bbfa <f_write+0x58>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbec:	4611      	mov	r1, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fe f9d8 	bl	8009fa4 <unlock_fs>
 800bbf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbf8:	e173      	b.n	800bee2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	7d1b      	ldrb	r3, [r3, #20]
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <f_write+0x72>
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	2107      	movs	r1, #7
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe f9ca 	bl	8009fa4 <unlock_fs>
 800bc10:	2307      	movs	r3, #7
 800bc12:	e166      	b.n	800bee2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	699a      	ldr	r2, [r3, #24]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	441a      	add	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f080 814b 	bcs.w	800bebc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	43db      	mvns	r3, r3
 800bc2c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc2e:	e145      	b.n	800bebc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f040 8101 	bne.w	800be40 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	0a5b      	lsrs	r3, r3, #9
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	8952      	ldrh	r2, [r2, #10]
 800bc48:	3a01      	subs	r2, #1
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d14d      	bne.n	800bcf0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10c      	bne.n	800bc76 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11a      	bne.n	800bc9e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe fe19 	bl	800a8a4 <create_chain>
 800bc72:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc74:	e013      	b.n	800bc9e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	4619      	mov	r1, r3
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f7fe fea5 	bl	800a9d4 <clmt_clust>
 800bc8a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc8c:	e007      	b.n	800bc9e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	69db      	ldr	r3, [r3, #28]
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fe fe04 	bl	800a8a4 <create_chain>
 800bc9c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 8110 	beq.w	800bec6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d109      	bne.n	800bcc0 <f_write+0x11e>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	755a      	strb	r2, [r3, #21]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe f974 	bl	8009fa4 <unlock_fs>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e110      	b.n	800bee2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc6:	d109      	bne.n	800bcdc <f_write+0x13a>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2201      	movs	r2, #1
 800bccc:	755a      	strb	r2, [r3, #21]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe f966 	bl	8009fa4 <unlock_fs>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e102      	b.n	800bee2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <f_write+0x14e>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	7d1b      	ldrb	r3, [r3, #20]
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da1d      	bge.n	800bd36 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	7858      	ldrb	r0, [r3, #1]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6a1a      	ldr	r2, [r3, #32]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f7fd fff7 	bl	8009cfc <disk_write>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d009      	beq.n	800bd28 <f_write+0x186>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2201      	movs	r2, #1
 800bd18:	755a      	strb	r2, [r3, #21]
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe f940 	bl	8009fa4 <unlock_fs>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e0dc      	b.n	800bee2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	7d1b      	ldrb	r3, [r3, #20]
 800bd2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	69db      	ldr	r3, [r3, #28]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7fe fb98 	bl	800a474 <clust2sect>
 800bd44:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d109      	bne.n	800bd60 <f_write+0x1be>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	755a      	strb	r2, [r3, #21]
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2102      	movs	r1, #2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe f924 	bl	8009fa4 <unlock_fs>
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	e0c0      	b.n	800bee2 <f_write+0x340>
			sect += csect;
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	4413      	add	r3, r2
 800bd66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	0a5b      	lsrs	r3, r3, #9
 800bd6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d041      	beq.n	800bdf8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	4413      	add	r3, r2
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	8952      	ldrh	r2, [r2, #10]
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d905      	bls.n	800bd8e <f_write+0x1ec>
					cc = fs->csize - csect;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	895b      	ldrh	r3, [r3, #10]
 800bd86:	461a      	mov	r2, r3
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	7858      	ldrb	r0, [r3, #1]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	69f9      	ldr	r1, [r7, #28]
 800bd98:	f7fd ffb0 	bl	8009cfc <disk_write>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <f_write+0x214>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2201      	movs	r2, #1
 800bda6:	755a      	strb	r2, [r3, #21]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe f8f9 	bl	8009fa4 <unlock_fs>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e095      	b.n	800bee2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1a      	ldr	r2, [r3, #32]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	6a3a      	ldr	r2, [r7, #32]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d915      	bls.n	800bdf0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1a      	ldr	r2, [r3, #32]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	025b      	lsls	r3, r3, #9
 800bdd4:	69fa      	ldr	r2, [r7, #28]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bddc:	4619      	mov	r1, r3
 800bdde:	f7fe f84d 	bl	8009e7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	025b      	lsls	r3, r3, #9
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bdf6:	e044      	b.n	800be82 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d01b      	beq.n	800be3a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	699a      	ldr	r2, [r3, #24]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d215      	bcs.n	800be3a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	7858      	ldrb	r0, [r3, #1]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be18:	2301      	movs	r3, #1
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	f7fd ff4e 	bl	8009cbc <disk_read>
 800be20:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2201      	movs	r2, #1
 800be2a:	755a      	strb	r2, [r3, #21]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	2101      	movs	r1, #1
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe f8b7 	bl	8009fa4 <unlock_fs>
 800be36:	2301      	movs	r3, #1
 800be38:	e053      	b.n	800bee2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be48:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	429a      	cmp	r2, r3
 800be54:	d901      	bls.n	800be5a <f_write+0x2b8>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be68:	4413      	add	r3, r2
 800be6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be6c:	69f9      	ldr	r1, [r7, #28]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fe f804 	bl	8009e7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7d1b      	ldrb	r3, [r3, #20]
 800be78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	4413      	add	r3, r2
 800be88:	61fb      	str	r3, [r7, #28]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	699a      	ldr	r2, [r3, #24]
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	619a      	str	r2, [r3, #24]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68da      	ldr	r2, [r3, #12]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	bf38      	it	cc
 800bea2:	461a      	movcc	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	60da      	str	r2, [r3, #12]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	441a      	add	r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f47f aeb6 	bne.w	800bc30 <f_write+0x8e>
 800bec4:	e000      	b.n	800bec8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bec6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	7d1b      	ldrb	r3, [r3, #20]
 800becc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	2100      	movs	r1, #0
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe f862 	bl	8009fa4 <unlock_fs>
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3730      	adds	r7, #48	; 0x30
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b086      	sub	sp, #24
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f107 0208 	add.w	r2, r7, #8
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fbe0 	bl	800b6c0 <validate>
 800bf00:	4603      	mov	r3, r0
 800bf02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d16d      	bne.n	800bfe6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	7d1b      	ldrb	r3, [r3, #20]
 800bf0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d067      	beq.n	800bfe6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	7d1b      	ldrb	r3, [r3, #20]
 800bf1a:	b25b      	sxtb	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	da1a      	bge.n	800bf56 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	7858      	ldrb	r0, [r3, #1]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1a      	ldr	r2, [r3, #32]
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f7fd fee4 	bl	8009cfc <disk_write>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d006      	beq.n	800bf48 <f_sync+0x5e>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe f830 	bl	8009fa4 <unlock_fs>
 800bf44:	2301      	movs	r3, #1
 800bf46:	e055      	b.n	800bff4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	7d1b      	ldrb	r3, [r3, #20]
 800bf4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf56:	f7fd fc1b 	bl	8009790 <get_fattime>
 800bf5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	4619      	mov	r1, r3
 800bf64:	4610      	mov	r0, r2
 800bf66:	f7fe f9e9 	bl	800a33c <move_window>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d138      	bne.n	800bfe6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	330b      	adds	r3, #11
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	330b      	adds	r3, #11
 800bf84:	f042 0220 	orr.w	r2, r2, #32
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	461a      	mov	r2, r3
 800bf96:	68f9      	ldr	r1, [r7, #12]
 800bf98:	f7fe fef6 	bl	800ad88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f103 021c 	add.w	r2, r3, #28
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	f7fd ff3b 	bl	8009e24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3316      	adds	r3, #22
 800bfb2:	6939      	ldr	r1, [r7, #16]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fd ff35 	bl	8009e24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3312      	adds	r3, #18
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fd ff14 	bl	8009dee <st_word>
					fs->wflag = 1;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe f9e2 	bl	800a398 <sync_fs>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	7d1b      	ldrb	r3, [r3, #20]
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	7dfa      	ldrb	r2, [r7, #23]
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd ffd9 	bl	8009fa4 <unlock_fs>
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ff70 	bl	800beea <f_sync>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11d      	bne.n	800c050 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f107 0208 	add.w	r2, r7, #8
 800c01a:	4611      	mov	r1, r2
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fb4f 	bl	800b6c0 <validate>
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c026:	7bfb      	ldrb	r3, [r7, #15]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d111      	bne.n	800c050 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe f8df 	bl	800a1f4 <dec_lock>
 800c036:	4603      	mov	r3, r0
 800c038:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d102      	bne.n	800c046 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2100      	movs	r1, #0
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd ffaa 	bl	8009fa4 <unlock_fs>
#endif
		}
	}
	return res;
 800c050:	7bfb      	ldrb	r3, [r7, #15]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800c05c:	b590      	push	{r4, r7, lr}
 800c05e:	b09d      	sub	sp, #116	; 0x74
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	460b      	mov	r3, r1
 800c06a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800c06c:	2301      	movs	r3, #1
 800c06e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800c070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c074:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800c076:	f107 030c 	add.w	r3, r7, #12
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff f831 	bl	800b0e2 <get_ldnumber>
 800c080:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c084:	2b00      	cmp	r3, #0
 800c086:	da02      	bge.n	800c08e <f_mkfs+0x32>
 800c088:	230b      	movs	r3, #11
 800c08a:	f000 bc0d 	b.w	800c8a8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800c08e:	4a94      	ldr	r2, [pc, #592]	; (800c2e0 <f_mkfs+0x284>)
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d005      	beq.n	800c0a6 <f_mkfs+0x4a>
 800c09a:	4a91      	ldr	r2, [pc, #580]	; (800c2e0 <f_mkfs+0x284>)
 800c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800c0b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd fdda 	bl	8009c70 <disk_initialize>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800c0c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <f_mkfs+0x76>
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e3ea      	b.n	800c8a8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800c0d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <f_mkfs+0x86>
 800c0de:	230a      	movs	r3, #10
 800c0e0:	e3e2      	b.n	800c8a8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800c0e2:	f107 0214 	add.w	r2, r7, #20
 800c0e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c0ea:	2103      	movs	r1, #3
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fd fe25 	bl	8009d3c <disk_ioctl>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10c      	bne.n	800c112 <f_mkfs+0xb6>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d009      	beq.n	800c112 <f_mkfs+0xb6>
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c104:	d805      	bhi.n	800c112 <f_mkfs+0xb6>
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	1e5a      	subs	r2, r3, #1
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	4013      	ands	r3, r2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <f_mkfs+0xba>
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800c116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c11a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <f_mkfs+0xce>
 800c122:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d309      	bcc.n	800c13e <f_mkfs+0xe2>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c130:	d805      	bhi.n	800c13e <f_mkfs+0xe2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	1e5a      	subs	r2, r3, #1
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4013      	ands	r3, r2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <f_mkfs+0xe6>
 800c13e:	2313      	movs	r3, #19
 800c140:	e3b2      	b.n	800c8a8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800c142:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800c150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c156:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800c15c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	fb02 f303 	mul.w	r3, r2, r3
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <f_mkfs+0x114>
 800c16c:	230e      	movs	r3, #14
 800c16e:	e39b      	b.n	800c8a8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800c170:	f107 0210 	add.w	r2, r7, #16
 800c174:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c178:	2101      	movs	r1, #1
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fd fdde 	bl	8009d3c <disk_ioctl>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <f_mkfs+0x12e>
 800c186:	2301      	movs	r3, #1
 800c188:	e38e      	b.n	800c8a8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	f003 0308 	and.w	r3, r3, #8
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <f_mkfs+0x13c>
 800c194:	2300      	movs	r3, #0
 800c196:	e000      	b.n	800c19a <f_mkfs+0x13e>
 800c198:	233f      	movs	r3, #63	; 0x3f
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d901      	bls.n	800c1a8 <f_mkfs+0x14c>
 800c1a4:	230e      	movs	r3, #14
 800c1a6:	e37f      	b.n	800c8a8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1b4:	d801      	bhi.n	800c1ba <f_mkfs+0x15e>
 800c1b6:	230e      	movs	r3, #14
 800c1b8:	e376      	b.n	800c8a8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b80      	cmp	r3, #128	; 0x80
 800c1be:	d901      	bls.n	800c1c4 <f_mkfs+0x168>
 800c1c0:	2313      	movs	r3, #19
 800c1c2:	e371      	b.n	800c8a8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800c1c4:	7afb      	ldrb	r3, [r7, #11]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00d      	beq.n	800c1ea <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	f003 0307 	and.w	r3, r3, #7
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d004      	beq.n	800c1e2 <f_mkfs+0x186>
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d103      	bne.n	800c1ea <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c1e8:	e009      	b.n	800c1fe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <f_mkfs+0x19c>
 800c1f4:	2313      	movs	r3, #19
 800c1f6:	e357      	b.n	800c8a8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800c202:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c206:	2b03      	cmp	r3, #3
 800c208:	d13c      	bne.n	800c284 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d11b      	bne.n	800c248 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	0c5b      	lsrs	r3, r3, #17
 800c214:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c216:	2300      	movs	r3, #0
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21a:	2301      	movs	r3, #1
 800c21c:	653b      	str	r3, [r7, #80]	; 0x50
 800c21e:	e005      	b.n	800c22c <f_mkfs+0x1d0>
 800c220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c222:	3301      	adds	r3, #1
 800c224:	64bb      	str	r3, [r7, #72]	; 0x48
 800c226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	653b      	str	r3, [r7, #80]	; 0x50
 800c22c:	4a2d      	ldr	r2, [pc, #180]	; (800c2e4 <f_mkfs+0x288>)
 800c22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d007      	beq.n	800c248 <f_mkfs+0x1ec>
 800c238:	4a2a      	ldr	r2, [pc, #168]	; (800c2e4 <f_mkfs+0x288>)
 800c23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c240:	461a      	mov	r2, r3
 800c242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c244:	4293      	cmp	r3, r2
 800c246:	d2eb      	bcs.n	800c220 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c250:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	3302      	adds	r3, #2
 800c256:	009a      	lsls	r2, r3, #2
 800c258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c25a:	4413      	add	r3, r2
 800c25c:	1e5a      	subs	r2, r3, #1
 800c25e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800c266:	2320      	movs	r3, #32
 800c268:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800c26a:	2300      	movs	r3, #0
 800c26c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c274:	4293      	cmp	r3, r2
 800c276:	d903      	bls.n	800c280 <f_mkfs+0x224>
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	4a1b      	ldr	r2, [pc, #108]	; (800c2e8 <f_mkfs+0x28c>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d952      	bls.n	800c326 <f_mkfs+0x2ca>
 800c280:	230e      	movs	r3, #14
 800c282:	e311      	b.n	800c8a8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800c284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11b      	bne.n	800c2c2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	0b1b      	lsrs	r3, r3, #12
 800c28e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c290:	2300      	movs	r3, #0
 800c292:	64bb      	str	r3, [r7, #72]	; 0x48
 800c294:	2301      	movs	r3, #1
 800c296:	653b      	str	r3, [r7, #80]	; 0x50
 800c298:	e005      	b.n	800c2a6 <f_mkfs+0x24a>
 800c29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c29c:	3301      	adds	r3, #1
 800c29e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	653b      	str	r3, [r7, #80]	; 0x50
 800c2a6:	4a11      	ldr	r2, [pc, #68]	; (800c2ec <f_mkfs+0x290>)
 800c2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <f_mkfs+0x266>
 800c2b2:	4a0e      	ldr	r2, [pc, #56]	; (800c2ec <f_mkfs+0x290>)
 800c2b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d2eb      	bcs.n	800c29a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ca:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d90c      	bls.n	800c2f0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	3302      	adds	r3, #2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2de:	e012      	b.n	800c306 <f_mkfs+0x2aa>
 800c2e0:	24008190 	.word	0x24008190
 800c2e4:	08010e68 	.word	0x08010e68
 800c2e8:	0ffffff5 	.word	0x0ffffff5
 800c2ec:	08010e78 	.word	0x08010e78
				} else {
					fmt = FS_FAT12;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800c2f6:	6a3a      	ldr	r2, [r7, #32]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	4413      	add	r3, r2
 800c2fe:	3301      	adds	r3, #1
 800c300:	085b      	lsrs	r3, r3, #1
 800c302:	3303      	adds	r3, #3
 800c304:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800c306:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30a:	4413      	add	r3, r2
 800c30c:	1e5a      	subs	r2, r3, #1
 800c30e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c310:	fbb2 f3f3 	udiv	r3, r2, r3
 800c314:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800c316:	2301      	movs	r3, #1
 800c318:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800c31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c320:	fbb2 f3f3 	udiv	r3, r2, r3
 800c324:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800c326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c32a:	4413      	add	r3, r2
 800c32c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800c32e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c332:	fb02 f203 	mul.w	r2, r2, r3
 800c336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c338:	4413      	add	r3, r2
 800c33a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c33c:	4413      	add	r3, r2
 800c33e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	1e5a      	subs	r2, r3, #1
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	425b      	negs	r3, r3
 800c34c:	401a      	ands	r2, r3
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800c354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d108      	bne.n	800c36e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800c35c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c360:	4413      	add	r3, r2
 800c362:	657b      	str	r3, [r7, #84]	; 0x54
 800c364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c368:	4413      	add	r3, r2
 800c36a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c36c:	e006      	b.n	800c37c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800c36e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c372:	fbb2 f3f3 	udiv	r3, r2, r3
 800c376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c378:	4413      	add	r3, r2
 800c37a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c37e:	011a      	lsls	r2, r3, #4
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	441a      	add	r2, r3
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	1ad2      	subs	r2, r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d901      	bls.n	800c392 <f_mkfs+0x336>
 800c38e:	230e      	movs	r3, #14
 800c390:	e28a      	b.n	800c8a8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c396:	1ad2      	subs	r2, r2, r3
 800c398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c39a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c39c:	fb01 f303 	mul.w	r3, r1, r3
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a4:	1ad2      	subs	r2, r2, r3
 800c3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ac:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800c3ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d10f      	bne.n	800c3d6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d80a      	bhi.n	800c3d6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d105      	bne.n	800c3d2 <f_mkfs+0x376>
 800c3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c8:	085b      	lsrs	r3, r3, #1
 800c3ca:	607b      	str	r3, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d144      	bne.n	800c45c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800c3d2:	230e      	movs	r3, #14
 800c3d4:	e268      	b.n	800c8a8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800c3d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d133      	bne.n	800c446 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d91e      	bls.n	800c426 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d107      	bne.n	800c3fe <f_mkfs+0x3a2>
 800c3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	2b40      	cmp	r3, #64	; 0x40
 800c3f4:	d803      	bhi.n	800c3fe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800c3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e033      	b.n	800c466 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800c3fe:	7afb      	ldrb	r3, [r7, #11]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800c408:	2303      	movs	r3, #3
 800c40a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c40e:	e02a      	b.n	800c466 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d105      	bne.n	800c422 <f_mkfs+0x3c6>
 800c416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	607b      	str	r3, [r7, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b80      	cmp	r3, #128	; 0x80
 800c420:	d91e      	bls.n	800c460 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800c422:	230e      	movs	r3, #14
 800c424:	e240      	b.n	800c8a8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d80a      	bhi.n	800c446 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d105      	bne.n	800c442 <f_mkfs+0x3e6>
 800c436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b80      	cmp	r3, #128	; 0x80
 800c440:	d910      	bls.n	800c464 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800c442:	230e      	movs	r3, #14
 800c444:	e230      	b.n	800c8a8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800c446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d10c      	bne.n	800c468 <f_mkfs+0x40c>
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c454:	4293      	cmp	r3, r2
 800c456:	d907      	bls.n	800c468 <f_mkfs+0x40c>
 800c458:	230e      	movs	r3, #14
 800c45a:	e225      	b.n	800c8a8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c45c:	bf00      	nop
 800c45e:	e6ce      	b.n	800c1fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c460:	bf00      	nop
 800c462:	e6cc      	b.n	800c1fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c464:	bf00      	nop
			pau = au;
 800c466:	e6ca      	b.n	800c1fe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800c468:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c46a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c46c:	461a      	mov	r2, r3
 800c46e:	2100      	movs	r1, #0
 800c470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c472:	f7fd fd24 	bl	8009ebe <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c476:	220b      	movs	r2, #11
 800c478:	49bc      	ldr	r1, [pc, #752]	; (800c76c <f_mkfs+0x710>)
 800c47a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c47c:	f7fd fcfe 	bl	8009e7c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	330b      	adds	r3, #11
 800c484:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd fcb0 	bl	8009dee <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	330d      	adds	r3, #13
 800c492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49a:	330e      	adds	r3, #14
 800c49c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c49e:	b292      	uxth	r2, r2
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fd fca3 	bl	8009dee <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4aa:	3310      	adds	r3, #16
 800c4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	f103 0211 	add.w	r2, r3, #17
 800c4b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d002      	beq.n	800c4c6 <f_mkfs+0x46a>
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	e000      	b.n	800c4c8 <f_mkfs+0x46c>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fd fc8f 	bl	8009dee <st_word>
		if (sz_vol < 0x10000) {
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d6:	d208      	bcs.n	800c4ea <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	3313      	adds	r3, #19
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	b292      	uxth	r2, r2
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fd fc83 	bl	8009dee <st_word>
 800c4e8:	e006      	b.n	800c4f8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	3320      	adds	r3, #32
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd fc96 	bl	8009e24 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fa:	3315      	adds	r3, #21
 800c4fc:	22f8      	movs	r2, #248	; 0xf8
 800c4fe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	3318      	adds	r3, #24
 800c504:	213f      	movs	r1, #63	; 0x3f
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd fc71 	bl	8009dee <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	331a      	adds	r3, #26
 800c510:	21ff      	movs	r1, #255	; 0xff
 800c512:	4618      	mov	r0, r3
 800c514:	f7fd fc6b 	bl	8009dee <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	331c      	adds	r3, #28
 800c51c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fd fc80 	bl	8009e24 <st_dword>
		if (fmt == FS_FAT32) {
 800c524:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d131      	bne.n	800c590 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c532:	f7fd f92d 	bl	8009790 <get_fattime>
 800c536:	4603      	mov	r3, r0
 800c538:	4619      	mov	r1, r3
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7fd fc72 	bl	8009e24 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	3324      	adds	r3, #36	; 0x24
 800c544:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c546:	4618      	mov	r0, r3
 800c548:	f7fd fc6c 	bl	8009e24 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	332c      	adds	r3, #44	; 0x2c
 800c550:	2102      	movs	r1, #2
 800c552:	4618      	mov	r0, r3
 800c554:	f7fd fc66 	bl	8009e24 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	3330      	adds	r3, #48	; 0x30
 800c55c:	2101      	movs	r1, #1
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fd fc45 	bl	8009dee <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	3332      	adds	r3, #50	; 0x32
 800c568:	2106      	movs	r1, #6
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fd fc3f 	bl	8009dee <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	3340      	adds	r3, #64	; 0x40
 800c574:	2280      	movs	r2, #128	; 0x80
 800c576:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	3342      	adds	r3, #66	; 0x42
 800c57c:	2229      	movs	r2, #41	; 0x29
 800c57e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	3347      	adds	r3, #71	; 0x47
 800c584:	2213      	movs	r2, #19
 800c586:	497a      	ldr	r1, [pc, #488]	; (800c770 <f_mkfs+0x714>)
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fd fc77 	bl	8009e7c <mem_cpy>
 800c58e:	e020      	b.n	800c5d2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c596:	f7fd f8fb 	bl	8009790 <get_fattime>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4619      	mov	r1, r3
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f7fd fc40 	bl	8009e24 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	3316      	adds	r3, #22
 800c5a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5aa:	b292      	uxth	r2, r2
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fd fc1d 	bl	8009dee <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	3324      	adds	r3, #36	; 0x24
 800c5b8:	2280      	movs	r2, #128	; 0x80
 800c5ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	3326      	adds	r3, #38	; 0x26
 800c5c0:	2229      	movs	r2, #41	; 0x29
 800c5c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	332b      	adds	r3, #43	; 0x2b
 800c5c8:	2213      	movs	r2, #19
 800c5ca:	496a      	ldr	r1, [pc, #424]	; (800c774 <f_mkfs+0x718>)
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd fc55 	bl	8009e7c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fd fc06 	bl	8009dee <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c5e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5ec:	f7fd fb86 	bl	8009cfc <disk_write>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <f_mkfs+0x59e>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e156      	b.n	800c8a8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c5fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d140      	bne.n	800c684 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	1d9a      	adds	r2, r3, #6
 800c606:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c60a:	2301      	movs	r3, #1
 800c60c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c60e:	f7fd fb75 	bl	8009cfc <disk_write>
			mem_set(buf, 0, ss);
 800c612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c614:	461a      	mov	r2, r3
 800c616:	2100      	movs	r1, #0
 800c618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c61a:	f7fd fc50 	bl	8009ebe <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c61e:	4956      	ldr	r1, [pc, #344]	; (800c778 <f_mkfs+0x71c>)
 800c620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c622:	f7fd fbff 	bl	8009e24 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c62c:	4953      	ldr	r1, [pc, #332]	; (800c77c <f_mkfs+0x720>)
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd fbf8 	bl	8009e24 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	4619      	mov	r1, r3
 800c640:	4610      	mov	r0, r2
 800c642:	f7fd fbef 	bl	8009e24 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c64c:	2102      	movs	r1, #2
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fd fbe8 	bl	8009e24 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c65a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd fbc5 	bl	8009dee <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	1dda      	adds	r2, r3, #7
 800c668:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c66c:	2301      	movs	r3, #1
 800c66e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c670:	f7fd fb44 	bl	8009cfc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c67c:	2301      	movs	r3, #1
 800c67e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c680:	f7fd fb3c 	bl	8009cfc <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c686:	2100      	movs	r1, #0
 800c688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c68a:	f7fd fc18 	bl	8009ebe <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c690:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c692:	2300      	movs	r3, #0
 800c694:	64bb      	str	r3, [r7, #72]	; 0x48
 800c696:	e04b      	b.n	800c730 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c69c:	2b03      	cmp	r3, #3
 800c69e:	d113      	bne.n	800c6c8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c6a0:	f06f 0107 	mvn.w	r1, #7
 800c6a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6a6:	f7fd fbbd 	bl	8009e24 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	f04f 31ff 	mov.w	r1, #4294967295
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fd fbb6 	bl	8009e24 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fd fbaf 	bl	8009e24 <st_dword>
 800c6c6:	e00b      	b.n	800c6e0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c6c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d101      	bne.n	800c6d4 <f_mkfs+0x678>
 800c6d0:	4b2b      	ldr	r3, [pc, #172]	; (800c780 <f_mkfs+0x724>)
 800c6d2:	e001      	b.n	800c6d8 <f_mkfs+0x67c>
 800c6d4:	f06f 0307 	mvn.w	r3, #7
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6dc:	f7fd fba2 	bl	8009e24 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c6e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6e2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c6e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	bf28      	it	cs
 800c6ec:	4613      	movcs	r3, r2
 800c6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c6f0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c6f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6fa:	f7fd faff 	bl	8009cfc <disk_write>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <f_mkfs+0x6ac>
 800c704:	2301      	movs	r3, #1
 800c706:	e0cf      	b.n	800c8a8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c70a:	461a      	mov	r2, r3
 800c70c:	2100      	movs	r1, #0
 800c70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c710:	f7fd fbd5 	bl	8009ebe <mem_set>
				sect += n; nsect -= n;
 800c714:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c718:	4413      	add	r3, r2
 800c71a:	667b      	str	r3, [r7, #100]	; 0x64
 800c71c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1dc      	bne.n	800c6e4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c72c:	3301      	adds	r3, #1
 800c72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c734:	429a      	cmp	r2, r3
 800c736:	d3af      	bcc.n	800c698 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c738:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d101      	bne.n	800c744 <f_mkfs+0x6e8>
 800c740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c742:	e000      	b.n	800c746 <f_mkfs+0x6ea>
 800c744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c746:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	4293      	cmp	r3, r2
 800c74e:	bf28      	it	cs
 800c750:	4613      	movcs	r3, r2
 800c752:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c754:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c75a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c75c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c75e:	f7fd facd 	bl	8009cfc <disk_write>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00d      	beq.n	800c784 <f_mkfs+0x728>
 800c768:	2301      	movs	r3, #1
 800c76a:	e09d      	b.n	800c8a8 <f_mkfs+0x84c>
 800c76c:	08010d2c 	.word	0x08010d2c
 800c770:	08010d38 	.word	0x08010d38
 800c774:	08010d4c 	.word	0x08010d4c
 800c778:	41615252 	.word	0x41615252
 800c77c:	61417272 	.word	0x61417272
 800c780:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c788:	4413      	add	r3, r2
 800c78a:	667b      	str	r3, [r7, #100]	; 0x64
 800c78c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c78e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1d6      	bne.n	800c748 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c79a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d103      	bne.n	800c7aa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c7a8:	e010      	b.n	800c7cc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b0:	d303      	bcc.n	800c7ba <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c7b2:	2306      	movs	r3, #6
 800c7b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c7b8:	e008      	b.n	800c7cc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c7ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d101      	bne.n	800c7c6 <f_mkfs+0x76a>
 800c7c2:	2304      	movs	r3, #4
 800c7c4:	e000      	b.n	800c7c8 <f_mkfs+0x76c>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	f003 0308 	and.w	r3, r3, #8
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d15b      	bne.n	800c88e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c7d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c7d8:	461a      	mov	r2, r3
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7de:	f7fd fb6e 	bl	8009ebe <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd fafe 	bl	8009dee <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c7f8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	3301      	adds	r3, #1
 800c804:	2201      	movs	r2, #1
 800c806:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	3302      	adds	r3, #2
 800c80c:	2201      	movs	r2, #1
 800c80e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	3303      	adds	r3, #3
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	3304      	adds	r3, #4
 800c81c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c820:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	441a      	add	r2, r3
 800c828:	4b21      	ldr	r3, [pc, #132]	; (800c8b0 <f_mkfs+0x854>)
 800c82a:	fba3 1302 	umull	r1, r3, r3, r2
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	0852      	lsrs	r2, r2, #1
 800c832:	4413      	add	r3, r2
 800c834:	0b5b      	lsrs	r3, r3, #13
 800c836:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	3305      	adds	r3, #5
 800c83c:	22fe      	movs	r2, #254	; 0xfe
 800c83e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c842:	089b      	lsrs	r3, r3, #2
 800c844:	b2da      	uxtb	r2, r3
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	3306      	adds	r3, #6
 800c84a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	3307      	adds	r3, #7
 800c856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	3308      	adds	r3, #8
 800c860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c862:	4618      	mov	r0, r3
 800c864:	f7fd fade 	bl	8009e24 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	330c      	adds	r3, #12
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f7fd fad7 	bl	8009e24 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c876:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c87a:	2301      	movs	r3, #1
 800c87c:	2200      	movs	r2, #0
 800c87e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c880:	f7fd fa3c 	bl	8009cfc <disk_write>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <f_mkfs+0x832>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e00c      	b.n	800c8a8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c88e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	4618      	mov	r0, r3
 800c898:	f7fd fa50 	bl	8009d3c <disk_ioctl>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <f_mkfs+0x84a>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e000      	b.n	800c8a8 <f_mkfs+0x84c>

	return FR_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3774      	adds	r7, #116	; 0x74
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd90      	pop	{r4, r7, pc}
 800c8b0:	0515565b 	.word	0x0515565b

0800c8b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8ca:	4b1f      	ldr	r3, [pc, #124]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8cc:	7a5b      	ldrb	r3, [r3, #9]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d131      	bne.n	800c938 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8d4:	4b1c      	ldr	r3, [pc, #112]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8d6:	7a5b      	ldrb	r3, [r3, #9]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	461a      	mov	r2, r3
 800c8dc:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8de:	2100      	movs	r1, #0
 800c8e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8e2:	4b19      	ldr	r3, [pc, #100]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8e4:	7a5b      	ldrb	r3, [r3, #9]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	4a17      	ldr	r2, [pc, #92]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8f4:	7a5b      	ldrb	r3, [r3, #9]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b13      	ldr	r3, [pc, #76]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c8fc:	4413      	add	r3, r2
 800c8fe:	79fa      	ldrb	r2, [r7, #7]
 800c900:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c902:	4b11      	ldr	r3, [pc, #68]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c904:	7a5b      	ldrb	r3, [r3, #9]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	b2d1      	uxtb	r1, r2
 800c90c:	4a0e      	ldr	r2, [pc, #56]	; (800c948 <FATFS_LinkDriverEx+0x94>)
 800c90e:	7251      	strb	r1, [r2, #9]
 800c910:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c912:	7dbb      	ldrb	r3, [r7, #22]
 800c914:	3330      	adds	r3, #48	; 0x30
 800c916:	b2da      	uxtb	r2, r3
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	3301      	adds	r3, #1
 800c920:	223a      	movs	r2, #58	; 0x3a
 800c922:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	3302      	adds	r3, #2
 800c928:	222f      	movs	r2, #47	; 0x2f
 800c92a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	3303      	adds	r3, #3
 800c930:	2200      	movs	r2, #0
 800c932:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c938:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	371c      	adds	r7, #28
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	240081b8 	.word	0x240081b8

0800c94c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c956:	2200      	movs	r2, #0
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff ffaa 	bl	800c8b4 <FATFS_LinkDriverEx>
 800c960:	4603      	mov	r3, r0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	4603      	mov	r3, r0
 800c972:	6039      	str	r1, [r7, #0]
 800c974:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c976:	2200      	movs	r2, #0
 800c978:	2101      	movs	r1, #1
 800c97a:	2001      	movs	r0, #1
 800c97c:	f000 f9ae 	bl	800ccdc <osSemaphoreNew>
 800c980:	4602      	mov	r2, r0
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bf14      	ite	ne
 800c98e:	2301      	movne	r3, #1
 800c990:	2300      	moveq	r3, #0
 800c992:	b2db      	uxtb	r3, r3
 800c994:	60fb      	str	r3, [r7, #12]

    return ret;
 800c996:	68fb      	ldr	r3, [r7, #12]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fab7 	bl	800cf1c <osSemaphoreDelete>
#endif
    return 1;
 800c9ae:	2301      	movs	r3, #1
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c9c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa11 	bl	800cdf0 <osSemaphoreAcquire>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fa52 	bl	800ce94 <osSemaphoreRelease>
#endif
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <__NVIC_SetPriority>:
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ca04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db0a      	blt.n	800ca22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	490c      	ldr	r1, [pc, #48]	; (800ca44 <__NVIC_SetPriority+0x4c>)
 800ca12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca16:	0112      	lsls	r2, r2, #4
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	440b      	add	r3, r1
 800ca1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca20:	e00a      	b.n	800ca38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	4908      	ldr	r1, [pc, #32]	; (800ca48 <__NVIC_SetPriority+0x50>)
 800ca28:	88fb      	ldrh	r3, [r7, #6]
 800ca2a:	f003 030f 	and.w	r3, r3, #15
 800ca2e:	3b04      	subs	r3, #4
 800ca30:	0112      	lsls	r2, r2, #4
 800ca32:	b2d2      	uxtb	r2, r2
 800ca34:	440b      	add	r3, r1
 800ca36:	761a      	strb	r2, [r3, #24]
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	e000e100 	.word	0xe000e100
 800ca48:	e000ed00 	.word	0xe000ed00

0800ca4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca50:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <SysTick_Handler+0x1c>)
 800ca52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca54:	f002 fb08 	bl	800f068 <xTaskGetSchedulerState>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d001      	beq.n	800ca62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca5e:	f003 f9eb 	bl	800fe38 <xPortSysTickHandler>
  }
}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	e000e010 	.word	0xe000e010

0800ca6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca70:	2100      	movs	r1, #0
 800ca72:	f06f 0004 	mvn.w	r0, #4
 800ca76:	f7ff ffbf 	bl	800c9f8 <__NVIC_SetPriority>
#endif
}
 800ca7a:	bf00      	nop
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca86:	f3ef 8305 	mrs	r3, IPSR
 800ca8a:	603b      	str	r3, [r7, #0]
  return(result);
 800ca8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ca92:	f06f 0305 	mvn.w	r3, #5
 800ca96:	607b      	str	r3, [r7, #4]
 800ca98:	e00c      	b.n	800cab4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ca9a:	4b0a      	ldr	r3, [pc, #40]	; (800cac4 <osKernelInitialize+0x44>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800caa2:	4b08      	ldr	r3, [pc, #32]	; (800cac4 <osKernelInitialize+0x44>)
 800caa4:	2201      	movs	r2, #1
 800caa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	607b      	str	r3, [r7, #4]
 800caac:	e002      	b.n	800cab4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800caae:	f04f 33ff 	mov.w	r3, #4294967295
 800cab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cab4:	687b      	ldr	r3, [r7, #4]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	240081c4 	.word	0x240081c4

0800cac8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800cace:	f002 facb 	bl	800f068 <xTaskGetSchedulerState>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <osKernelGetState+0x1a>
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d105      	bne.n	800cae8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800cadc:	2302      	movs	r3, #2
 800cade:	607b      	str	r3, [r7, #4]
      break;
 800cae0:	e00c      	b.n	800cafc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800cae2:	2303      	movs	r3, #3
 800cae4:	607b      	str	r3, [r7, #4]
      break;
 800cae6:	e009      	b.n	800cafc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <osKernelGetState+0x40>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d102      	bne.n	800caf6 <osKernelGetState+0x2e>
        state = osKernelReady;
 800caf0:	2301      	movs	r3, #1
 800caf2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800caf4:	e001      	b.n	800cafa <osKernelGetState+0x32>
        state = osKernelInactive;
 800caf6:	2300      	movs	r3, #0
 800caf8:	607b      	str	r3, [r7, #4]
      break;
 800cafa:	bf00      	nop
  }

  return (state);
 800cafc:	687b      	ldr	r3, [r7, #4]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	240081c4 	.word	0x240081c4

0800cb0c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb12:	f3ef 8305 	mrs	r3, IPSR
 800cb16:	603b      	str	r3, [r7, #0]
  return(result);
 800cb18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cb1e:	f06f 0305 	mvn.w	r3, #5
 800cb22:	607b      	str	r3, [r7, #4]
 800cb24:	e010      	b.n	800cb48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb26:	4b0b      	ldr	r3, [pc, #44]	; (800cb54 <osKernelStart+0x48>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d109      	bne.n	800cb42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb2e:	f7ff ff9d 	bl	800ca6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb32:	4b08      	ldr	r3, [pc, #32]	; (800cb54 <osKernelStart+0x48>)
 800cb34:	2202      	movs	r2, #2
 800cb36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb38:	f001 fe28 	bl	800e78c <vTaskStartScheduler>
      stat = osOK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	607b      	str	r3, [r7, #4]
 800cb40:	e002      	b.n	800cb48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb42:	f04f 33ff 	mov.w	r3, #4294967295
 800cb46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb48:	687b      	ldr	r3, [r7, #4]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	240081c4 	.word	0x240081c4

0800cb58 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb5e:	f3ef 8305 	mrs	r3, IPSR
 800cb62:	603b      	str	r3, [r7, #0]
  return(result);
 800cb64:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d003      	beq.n	800cb72 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800cb6a:	f001 ff3b 	bl	800e9e4 <xTaskGetTickCountFromISR>
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	e002      	b.n	800cb78 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800cb72:	f001 ff27 	bl	800e9c4 <xTaskGetTickCount>
 800cb76:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800cb78:	687b      	ldr	r3, [r7, #4]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b08e      	sub	sp, #56	; 0x38
 800cb86:	af04      	add	r7, sp, #16
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb92:	f3ef 8305 	mrs	r3, IPSR
 800cb96:	617b      	str	r3, [r7, #20]
  return(result);
 800cb98:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d17e      	bne.n	800cc9c <osThreadNew+0x11a>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d07b      	beq.n	800cc9c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cba4:	2380      	movs	r3, #128	; 0x80
 800cba6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cba8:	2318      	movs	r3, #24
 800cbaa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d045      	beq.n	800cc48 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <osThreadNew+0x48>
        name = attr->name;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d008      	beq.n	800cbf0 <osThreadNew+0x6e>
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	2b38      	cmp	r3, #56	; 0x38
 800cbe2:	d805      	bhi.n	800cbf0 <osThreadNew+0x6e>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d001      	beq.n	800cbf4 <osThreadNew+0x72>
        return (NULL);
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e054      	b.n	800cc9e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	089b      	lsrs	r3, r3, #2
 800cc02:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00e      	beq.n	800cc2a <osThreadNew+0xa8>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	2bbb      	cmp	r3, #187	; 0xbb
 800cc12:	d90a      	bls.n	800cc2a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d006      	beq.n	800cc2a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <osThreadNew+0xa8>
        mem = 1;
 800cc24:	2301      	movs	r3, #1
 800cc26:	61bb      	str	r3, [r7, #24]
 800cc28:	e010      	b.n	800cc4c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10c      	bne.n	800cc4c <osThreadNew+0xca>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d108      	bne.n	800cc4c <osThreadNew+0xca>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d104      	bne.n	800cc4c <osThreadNew+0xca>
          mem = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	61bb      	str	r3, [r7, #24]
 800cc46:	e001      	b.n	800cc4c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d110      	bne.n	800cc74 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc5a:	9202      	str	r2, [sp, #8]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	6a3a      	ldr	r2, [r7, #32]
 800cc66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f001 fba3 	bl	800e3b4 <xTaskCreateStatic>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	e013      	b.n	800cc9c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d110      	bne.n	800cc9c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	f107 0310 	add.w	r3, r7, #16
 800cc82:	9301      	str	r3, [sp, #4]
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f001 fbee 	bl	800e46e <xTaskCreate>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d001      	beq.n	800cc9c <osThreadNew+0x11a>
            hTask = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc9c:	693b      	ldr	r3, [r7, #16]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccae:	f3ef 8305 	mrs	r3, IPSR
 800ccb2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <osDelay+0x1c>
    stat = osErrorISR;
 800ccba:	f06f 0305 	mvn.w	r3, #5
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	e007      	b.n	800ccd2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fd29 	bl	800e724 <vTaskDelay>
    }
  }

  return (stat);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08a      	sub	sp, #40	; 0x28
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cce8:	2300      	movs	r3, #0
 800ccea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccec:	f3ef 8305 	mrs	r3, IPSR
 800ccf0:	613b      	str	r3, [r7, #16]
  return(result);
 800ccf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d175      	bne.n	800cde4 <osSemaphoreNew+0x108>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d072      	beq.n	800cde4 <osSemaphoreNew+0x108>
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d86e      	bhi.n	800cde4 <osSemaphoreNew+0x108>
    mem = -1;
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d015      	beq.n	800cd3e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d006      	beq.n	800cd28 <osSemaphoreNew+0x4c>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	2b4f      	cmp	r3, #79	; 0x4f
 800cd20:	d902      	bls.n	800cd28 <osSemaphoreNew+0x4c>
        mem = 1;
 800cd22:	2301      	movs	r3, #1
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	e00c      	b.n	800cd42 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d108      	bne.n	800cd42 <osSemaphoreNew+0x66>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <osSemaphoreNew+0x66>
          mem = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	61bb      	str	r3, [r7, #24]
 800cd3c:	e001      	b.n	800cd42 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d04c      	beq.n	800cde4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d128      	bne.n	800cda2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d10a      	bne.n	800cd6c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	9200      	str	r2, [sp, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2100      	movs	r1, #0
 800cd62:	2001      	movs	r0, #1
 800cd64:	f000 fb80 	bl	800d468 <xQueueGenericCreateStatic>
 800cd68:	61f8      	str	r0, [r7, #28]
 800cd6a:	e005      	b.n	800cd78 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	2100      	movs	r1, #0
 800cd70:	2001      	movs	r0, #1
 800cd72:	f000 fbf1 	bl	800d558 <xQueueGenericCreate>
 800cd76:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d022      	beq.n	800cdc4 <osSemaphoreNew+0xe8>
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01f      	beq.n	800cdc4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cd84:	2300      	movs	r3, #0
 800cd86:	2200      	movs	r2, #0
 800cd88:	2100      	movs	r1, #0
 800cd8a:	69f8      	ldr	r0, [r7, #28]
 800cd8c:	f000 fcac 	bl	800d6e8 <xQueueGenericSend>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d016      	beq.n	800cdc4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cd96:	69f8      	ldr	r0, [r7, #28]
 800cd98:	f001 f938 	bl	800e00c <vQueueDelete>
            hSemaphore = NULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	e010      	b.n	800cdc4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d108      	bne.n	800cdba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	461a      	mov	r2, r3
 800cdae:	68b9      	ldr	r1, [r7, #8]
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 fc2e 	bl	800d612 <xQueueCreateCountingSemaphoreStatic>
 800cdb6:	61f8      	str	r0, [r7, #28]
 800cdb8:	e004      	b.n	800cdc4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 fc5f 	bl	800d680 <xQueueCreateCountingSemaphore>
 800cdc2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00c      	beq.n	800cde4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	e001      	b.n	800cddc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cddc:	6979      	ldr	r1, [r7, #20]
 800cdde:	69f8      	ldr	r0, [r7, #28]
 800cde0:	f001 fa60 	bl	800e2a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cde4:	69fb      	ldr	r3, [r7, #28]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3720      	adds	r7, #32
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ce08:	f06f 0303 	mvn.w	r3, #3
 800ce0c:	617b      	str	r3, [r7, #20]
 800ce0e:	e039      	b.n	800ce84 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce10:	f3ef 8305 	mrs	r3, IPSR
 800ce14:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d022      	beq.n	800ce62 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d003      	beq.n	800ce2a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ce22:	f06f 0303 	mvn.w	r3, #3
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	e02c      	b.n	800ce84 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ce2e:	f107 0308 	add.w	r3, r7, #8
 800ce32:	461a      	mov	r2, r3
 800ce34:	2100      	movs	r1, #0
 800ce36:	6938      	ldr	r0, [r7, #16]
 800ce38:	f001 f868 	bl	800df0c <xQueueReceiveFromISR>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d003      	beq.n	800ce4a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ce42:	f06f 0302 	mvn.w	r3, #2
 800ce46:	617b      	str	r3, [r7, #20]
 800ce48:	e01c      	b.n	800ce84 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d019      	beq.n	800ce84 <osSemaphoreAcquire+0x94>
 800ce50:	4b0f      	ldr	r3, [pc, #60]	; (800ce90 <osSemaphoreAcquire+0xa0>)
 800ce52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	e010      	b.n	800ce84 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6938      	ldr	r0, [r7, #16]
 800ce66:	f000 ff45 	bl	800dcf4 <xQueueSemaphoreTake>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d009      	beq.n	800ce84 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d003      	beq.n	800ce7e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ce76:	f06f 0301 	mvn.w	r3, #1
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	e002      	b.n	800ce84 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ce7e:	f06f 0302 	mvn.w	r3, #2
 800ce82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ce84:	697b      	ldr	r3, [r7, #20]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	e000ed04 	.word	0xe000ed04

0800ce94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d103      	bne.n	800ceb2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ceaa:	f06f 0303 	mvn.w	r3, #3
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e02c      	b.n	800cf0c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb2:	f3ef 8305 	mrs	r3, IPSR
 800ceb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d01a      	beq.n	800cef4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cec2:	f107 0308 	add.w	r3, r7, #8
 800cec6:	4619      	mov	r1, r3
 800cec8:	6938      	ldr	r0, [r7, #16]
 800ceca:	f000 fda6 	bl	800da1a <xQueueGiveFromISR>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d003      	beq.n	800cedc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ced4:	f06f 0302 	mvn.w	r3, #2
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	e017      	b.n	800cf0c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d014      	beq.n	800cf0c <osSemaphoreRelease+0x78>
 800cee2:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <osSemaphoreRelease+0x84>)
 800cee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	e00b      	b.n	800cf0c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cef4:	2300      	movs	r3, #0
 800cef6:	2200      	movs	r2, #0
 800cef8:	2100      	movs	r1, #0
 800cefa:	6938      	ldr	r0, [r7, #16]
 800cefc:	f000 fbf4 	bl	800d6e8 <xQueueGenericSend>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d002      	beq.n	800cf0c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cf06:	f06f 0302 	mvn.w	r3, #2
 800cf0a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cf0c:	697b      	ldr	r3, [r7, #20]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf28:	f3ef 8305 	mrs	r3, IPSR
 800cf2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800cf34:	f06f 0305 	mvn.w	r3, #5
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	e00e      	b.n	800cf5a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d103      	bne.n	800cf4a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800cf42:	f06f 0303 	mvn.w	r3, #3
 800cf46:	617b      	str	r3, [r7, #20]
 800cf48:	e007      	b.n	800cf5a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800cf4a:	6938      	ldr	r0, [r7, #16]
 800cf4c:	f001 f9d4 	bl	800e2f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800cf54:	6938      	ldr	r0, [r7, #16]
 800cf56:	f001 f859 	bl	800e00c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cf5a:	697b      	ldr	r3, [r7, #20]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08a      	sub	sp, #40	; 0x28
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf74:	f3ef 8305 	mrs	r3, IPSR
 800cf78:	613b      	str	r3, [r7, #16]
  return(result);
 800cf7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d15f      	bne.n	800d040 <osMessageQueueNew+0xdc>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d05c      	beq.n	800d040 <osMessageQueueNew+0xdc>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d059      	beq.n	800d040 <osMessageQueueNew+0xdc>
    mem = -1;
 800cf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d029      	beq.n	800cfec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d012      	beq.n	800cfc6 <osMessageQueueNew+0x62>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	2b4f      	cmp	r3, #79	; 0x4f
 800cfa6:	d90e      	bls.n	800cfc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00a      	beq.n	800cfc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	695a      	ldr	r2, [r3, #20]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	68b9      	ldr	r1, [r7, #8]
 800cfb8:	fb01 f303 	mul.w	r3, r1, r3
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d302      	bcc.n	800cfc6 <osMessageQueueNew+0x62>
        mem = 1;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	61bb      	str	r3, [r7, #24]
 800cfc4:	e014      	b.n	800cff0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d110      	bne.n	800cff0 <osMessageQueueNew+0x8c>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10c      	bne.n	800cff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d108      	bne.n	800cff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	695b      	ldr	r3, [r3, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d104      	bne.n	800cff0 <osMessageQueueNew+0x8c>
          mem = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61bb      	str	r3, [r7, #24]
 800cfea:	e001      	b.n	800cff0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d10b      	bne.n	800d00e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2100      	movs	r1, #0
 800d000:	9100      	str	r1, [sp, #0]
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 fa2f 	bl	800d468 <xQueueGenericCreateStatic>
 800d00a:	61f8      	str	r0, [r7, #28]
 800d00c:	e008      	b.n	800d020 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d105      	bne.n	800d020 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d014:	2200      	movs	r2, #0
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f000 fa9d 	bl	800d558 <xQueueGenericCreate>
 800d01e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00c      	beq.n	800d040 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d003      	beq.n	800d034 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	617b      	str	r3, [r7, #20]
 800d032:	e001      	b.n	800d038 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d034:	2300      	movs	r3, #0
 800d036:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d038:	6979      	ldr	r1, [r7, #20]
 800d03a:	69f8      	ldr	r0, [r7, #28]
 800d03c:	f001 f932 	bl	800e2a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d040:	69fb      	ldr	r3, [r7, #28]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3720      	adds	r7, #32
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	4613      	mov	r3, r2
 800d05a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d060:	2300      	movs	r3, #0
 800d062:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d064:	f3ef 8305 	mrs	r3, IPSR
 800d068:	617b      	str	r3, [r7, #20]
  return(result);
 800d06a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d028      	beq.n	800d0c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d005      	beq.n	800d082 <osMessageQueuePut+0x36>
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <osMessageQueuePut+0x36>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d082:	f06f 0303 	mvn.w	r3, #3
 800d086:	61fb      	str	r3, [r7, #28]
 800d088:	e038      	b.n	800d0fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d08e:	f107 0210 	add.w	r2, r7, #16
 800d092:	2300      	movs	r3, #0
 800d094:	68b9      	ldr	r1, [r7, #8]
 800d096:	69b8      	ldr	r0, [r7, #24]
 800d098:	f000 fc24 	bl	800d8e4 <xQueueGenericSendFromISR>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d003      	beq.n	800d0aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d0a2:	f06f 0302 	mvn.w	r3, #2
 800d0a6:	61fb      	str	r3, [r7, #28]
 800d0a8:	e028      	b.n	800d0fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d025      	beq.n	800d0fc <osMessageQueuePut+0xb0>
 800d0b0:	4b15      	ldr	r3, [pc, #84]	; (800d108 <osMessageQueuePut+0xbc>)
 800d0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	e01c      	b.n	800d0fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <osMessageQueuePut+0x82>
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d103      	bne.n	800d0d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d0ce:	f06f 0303 	mvn.w	r3, #3
 800d0d2:	61fb      	str	r3, [r7, #28]
 800d0d4:	e012      	b.n	800d0fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	69b8      	ldr	r0, [r7, #24]
 800d0de:	f000 fb03 	bl	800d6e8 <xQueueGenericSend>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d009      	beq.n	800d0fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d0ee:	f06f 0301 	mvn.w	r3, #1
 800d0f2:	61fb      	str	r3, [r7, #28]
 800d0f4:	e002      	b.n	800d0fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d0f6:	f06f 0302 	mvn.w	r3, #2
 800d0fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3720      	adds	r7, #32
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b088      	sub	sp, #32
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d11e:	2300      	movs	r3, #0
 800d120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d122:	f3ef 8305 	mrs	r3, IPSR
 800d126:	617b      	str	r3, [r7, #20]
  return(result);
 800d128:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d028      	beq.n	800d180 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d005      	beq.n	800d140 <osMessageQueueGet+0x34>
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <osMessageQueueGet+0x34>
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d140:	f06f 0303 	mvn.w	r3, #3
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	e037      	b.n	800d1b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d148:	2300      	movs	r3, #0
 800d14a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d14c:	f107 0310 	add.w	r3, r7, #16
 800d150:	461a      	mov	r2, r3
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	69b8      	ldr	r0, [r7, #24]
 800d156:	f000 fed9 	bl	800df0c <xQueueReceiveFromISR>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d003      	beq.n	800d168 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d160:	f06f 0302 	mvn.w	r3, #2
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	e027      	b.n	800d1b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d024      	beq.n	800d1b8 <osMessageQueueGet+0xac>
 800d16e:	4b15      	ldr	r3, [pc, #84]	; (800d1c4 <osMessageQueueGet+0xb8>)
 800d170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	e01b      	b.n	800d1b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <osMessageQueueGet+0x80>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d103      	bne.n	800d194 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d18c:	f06f 0303 	mvn.w	r3, #3
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	e011      	b.n	800d1b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d194:	683a      	ldr	r2, [r7, #0]
 800d196:	68b9      	ldr	r1, [r7, #8]
 800d198:	69b8      	ldr	r0, [r7, #24]
 800d19a:	f000 fccb 	bl	800db34 <xQueueReceive>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d009      	beq.n	800d1b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d1aa:	f06f 0301 	mvn.w	r3, #1
 800d1ae:	61fb      	str	r3, [r7, #28]
 800d1b0:	e002      	b.n	800d1b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d1b2:	f06f 0302 	mvn.w	r3, #2
 800d1b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d1b8:	69fb      	ldr	r3, [r7, #28]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3720      	adds	r7, #32
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4a07      	ldr	r2, [pc, #28]	; (800d1f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d1d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	4a06      	ldr	r2, [pc, #24]	; (800d1f8 <vApplicationGetIdleTaskMemory+0x30>)
 800d1de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2280      	movs	r2, #128	; 0x80
 800d1e4:	601a      	str	r2, [r3, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	240081c8 	.word	0x240081c8
 800d1f8:	24008284 	.word	0x24008284

0800d1fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4a07      	ldr	r2, [pc, #28]	; (800d228 <vApplicationGetTimerTaskMemory+0x2c>)
 800d20c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	4a06      	ldr	r2, [pc, #24]	; (800d22c <vApplicationGetTimerTaskMemory+0x30>)
 800d212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d21a:	601a      	str	r2, [r3, #0]
}
 800d21c:	bf00      	nop
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	24008484 	.word	0x24008484
 800d22c:	24008540 	.word	0x24008540

0800d230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f103 0208 	add.w	r2, r3, #8
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f103 0208 	add.w	r2, r3, #8
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f103 0208 	add.w	r2, r3, #8
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d28a:	b480      	push	{r7}
 800d28c:	b085      	sub	sp, #20
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b085      	sub	sp, #20
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e8:	d103      	bne.n	800d2f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	e00c      	b.n	800d30c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	e002      	b.n	800d300 <vListInsert+0x2e>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d2f6      	bcs.n	800d2fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]
}
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6892      	ldr	r2, [r2, #8]
 800d35a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6852      	ldr	r2, [r2, #4]
 800d364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d103      	bne.n	800d378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689a      	ldr	r2, [r3, #8]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	1e5a      	subs	r2, r3, #1
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10a      	bne.n	800d3c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d3be:	bf00      	nop
 800d3c0:	e7fe      	b.n	800d3c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d3c2:	f002 fca7 	bl	800fd14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ce:	68f9      	ldr	r1, [r7, #12]
 800d3d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3d2:	fb01 f303 	mul.w	r3, r1, r3
 800d3d6:	441a      	add	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	68f9      	ldr	r1, [r7, #12]
 800d3f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3f8:	fb01 f303 	mul.w	r3, r1, r3
 800d3fc:	441a      	add	r2, r3
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	22ff      	movs	r2, #255	; 0xff
 800d406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	22ff      	movs	r2, #255	; 0xff
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d114      	bne.n	800d442 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d01a      	beq.n	800d456 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3310      	adds	r3, #16
 800d424:	4618      	mov	r0, r3
 800d426:	f001 fc5d 	bl	800ece4 <xTaskRemoveFromEventList>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d012      	beq.n	800d456 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d430:	4b0c      	ldr	r3, [pc, #48]	; (800d464 <xQueueGenericReset+0xcc>)
 800d432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	e009      	b.n	800d456 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3310      	adds	r3, #16
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff fef2 	bl	800d230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3324      	adds	r3, #36	; 0x24
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff feed 	bl	800d230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d456:	f002 fc8d 	bl	800fd74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d45a:	2301      	movs	r3, #1
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08e      	sub	sp, #56	; 0x38
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4aa:	bf00      	nop
 800d4ac:	e7fe      	b.n	800d4ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <xQueueGenericCreateStatic+0x52>
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <xQueueGenericCreateStatic+0x56>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueGenericCreateStatic+0x58>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	623b      	str	r3, [r7, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xQueueGenericCreateStatic+0x7e>
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueGenericCreateStatic+0x82>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueGenericCreateStatic+0x84>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61fb      	str	r3, [r7, #28]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d506:	2350      	movs	r3, #80	; 0x50
 800d508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b50      	cmp	r3, #80	; 0x50
 800d50e:	d00a      	beq.n	800d526 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	61bb      	str	r3, [r7, #24]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d526:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00d      	beq.n	800d54e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	2201      	movs	r2, #1
 800d536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d53a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	4613      	mov	r3, r2
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 f83f 	bl	800d5cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d550:	4618      	mov	r0, r3
 800d552:	3730      	adds	r7, #48	; 0x30
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b08a      	sub	sp, #40	; 0x28
 800d55c:	af02      	add	r7, sp, #8
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	4613      	mov	r3, r2
 800d564:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	613b      	str	r3, [r7, #16]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	fb02 f303 	mul.w	r3, r2, r3
 800d58a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	3350      	adds	r3, #80	; 0x50
 800d590:	4618      	mov	r0, r3
 800d592:	f002 fce1 	bl	800ff58 <pvPortMalloc>
 800d596:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d011      	beq.n	800d5c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	3350      	adds	r3, #80	; 0x50
 800d5a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5b0:	79fa      	ldrb	r2, [r7, #7]
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	68b9      	ldr	r1, [r7, #8]
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 f805 	bl	800d5cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
	}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d103      	bne.n	800d5e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	69ba      	ldr	r2, [r7, #24]
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	e002      	b.n	800d5ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	69b8      	ldr	r0, [r7, #24]
 800d5fe:	f7ff fecb 	bl	800d398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	78fa      	ldrb	r2, [r7, #3]
 800d606:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d60a:	bf00      	nop
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d612:	b580      	push	{r7, lr}
 800d614:	b08a      	sub	sp, #40	; 0x28
 800d616:	af02      	add	r7, sp, #8
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	61bb      	str	r3, [r7, #24]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d90a      	bls.n	800d658 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	617b      	str	r3, [r7, #20]
}
 800d654:	bf00      	nop
 800d656:	e7fe      	b.n	800d656 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d658:	2302      	movs	r3, #2
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	2100      	movs	r1, #0
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f7ff ff00 	bl	800d468 <xQueueGenericCreateStatic>
 800d668:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d676:	69fb      	ldr	r3, [r7, #28]
	}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10a      	bne.n	800d6a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	613b      	str	r3, [r7, #16]
}
 800d6a2:	bf00      	nop
 800d6a4:	e7fe      	b.n	800d6a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d90a      	bls.n	800d6c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff ff45 	bl	800d558 <xQueueGenericCreate>
 800d6ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d6dc:	697b      	ldr	r3, [r7, #20]
	}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08e      	sub	sp, #56	; 0x38
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <xQueueGenericSend+0x32>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <xQueueGenericSend+0x40>
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <xQueueGenericSend+0x44>
 800d728:	2301      	movs	r3, #1
 800d72a:	e000      	b.n	800d72e <xQueueGenericSend+0x46>
 800d72c:	2300      	movs	r3, #0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10a      	bne.n	800d748 <xQueueGenericSend+0x60>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d744:	bf00      	nop
 800d746:	e7fe      	b.n	800d746 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d103      	bne.n	800d756 <xQueueGenericSend+0x6e>
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <xQueueGenericSend+0x72>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <xQueueGenericSend+0x74>
 800d75a:	2300      	movs	r3, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10a      	bne.n	800d776 <xQueueGenericSend+0x8e>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	623b      	str	r3, [r7, #32]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d776:	f001 fc77 	bl	800f068 <xTaskGetSchedulerState>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <xQueueGenericSend+0x9e>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <xQueueGenericSend+0xa2>
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <xQueueGenericSend+0xa4>
 800d78a:	2300      	movs	r3, #0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10a      	bne.n	800d7a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	61fb      	str	r3, [r7, #28]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7a6:	f002 fab5 	bl	800fd14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d302      	bcc.n	800d7bc <xQueueGenericSend+0xd4>
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d129      	bne.n	800d810 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	68b9      	ldr	r1, [r7, #8]
 800d7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c2:	f000 fc5e 	bl	800e082 <prvCopyDataToQueue>
 800d7c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d010      	beq.n	800d7f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	3324      	adds	r3, #36	; 0x24
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 fa85 	bl	800ece4 <xTaskRemoveFromEventList>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d013      	beq.n	800d808 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7e0:	4b3f      	ldr	r3, [pc, #252]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	e00a      	b.n	800d808 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7f8:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d808:	f002 fab4 	bl	800fd74 <vPortExitCritical>
				return pdPASS;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e063      	b.n	800d8d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d103      	bne.n	800d81e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d816:	f002 faad 	bl	800fd74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e05c      	b.n	800d8d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d820:	2b00      	cmp	r3, #0
 800d822:	d106      	bne.n	800d832 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 fabf 	bl	800edac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d832:	f002 fa9f 	bl	800fd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d836:	f001 f819 	bl	800e86c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d83a:	f002 fa6b 	bl	800fd14 <vPortEnterCritical>
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d844:	b25b      	sxtb	r3, r3
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d103      	bne.n	800d854 <xQueueGenericSend+0x16c>
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d85a:	b25b      	sxtb	r3, r3
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d103      	bne.n	800d86a <xQueueGenericSend+0x182>
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d86a:	f002 fa83 	bl	800fd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d86e:	1d3a      	adds	r2, r7, #4
 800d870:	f107 0314 	add.w	r3, r7, #20
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f001 faae 	bl	800edd8 <xTaskCheckForTimeOut>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d124      	bne.n	800d8cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d884:	f000 fcf5 	bl	800e272 <prvIsQueueFull>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d018      	beq.n	800d8c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	3310      	adds	r3, #16
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f001 f9d4 	bl	800ec44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d89e:	f000 fc80 	bl	800e1a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8a2:	f000 fff1 	bl	800e888 <xTaskResumeAll>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f47f af7c 	bne.w	800d7a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d8ae:	4b0c      	ldr	r3, [pc, #48]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	e772      	b.n	800d7a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8c2:	f000 fc6e 	bl	800e1a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8c6:	f000 ffdf 	bl	800e888 <xTaskResumeAll>
 800d8ca:	e76c      	b.n	800d7a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ce:	f000 fc68 	bl	800e1a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8d2:	f000 ffd9 	bl	800e888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3738      	adds	r7, #56	; 0x38
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b090      	sub	sp, #64	; 0x40
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d103      	bne.n	800d920 <xQueueGenericSendFromISR+0x3c>
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <xQueueGenericSendFromISR+0x40>
 800d920:	2301      	movs	r3, #1
 800d922:	e000      	b.n	800d926 <xQueueGenericSendFromISR+0x42>
 800d924:	2300      	movs	r3, #0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d103      	bne.n	800d94e <xQueueGenericSendFromISR+0x6a>
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d101      	bne.n	800d952 <xQueueGenericSendFromISR+0x6e>
 800d94e:	2301      	movs	r3, #1
 800d950:	e000      	b.n	800d954 <xQueueGenericSendFromISR+0x70>
 800d952:	2300      	movs	r3, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	623b      	str	r3, [r7, #32]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96e:	f002 fab3 	bl	800fed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d972:	f3ef 8211 	mrs	r2, BASEPRI
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	61fa      	str	r2, [r7, #28]
 800d988:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d98a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d996:	429a      	cmp	r2, r3
 800d998:	d302      	bcc.n	800d9a0 <xQueueGenericSendFromISR+0xbc>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d12f      	bne.n	800da00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9b6:	f000 fb64 	bl	800e082 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d112      	bne.n	800d9ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d016      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	3324      	adds	r3, #36	; 0x24
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 f987 	bl	800ece4 <xTaskRemoveFromEventList>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00e      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00b      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	e007      	b.n	800d9fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	b25a      	sxtb	r2, r3
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d9fe:	e001      	b.n	800da04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da00:	2300      	movs	r3, #0
 800da02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800da12:	4618      	mov	r0, r3
 800da14:	3740      	adds	r7, #64	; 0x40
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b08e      	sub	sp, #56	; 0x38
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10a      	bne.n	800da44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	623b      	str	r3, [r7, #32]
}
 800da40:	bf00      	nop
 800da42:	e7fe      	b.n	800da42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00a      	beq.n	800da62 <xQueueGiveFromISR+0x48>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	61fb      	str	r3, [r7, #28]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d103      	bne.n	800da72 <xQueueGiveFromISR+0x58>
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <xQueueGiveFromISR+0x5c>
 800da72:	2301      	movs	r3, #1
 800da74:	e000      	b.n	800da78 <xQueueGiveFromISR+0x5e>
 800da76:	2300      	movs	r3, #0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10a      	bne.n	800da92 <xQueueGiveFromISR+0x78>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	61bb      	str	r3, [r7, #24]
}
 800da8e:	bf00      	nop
 800da90:	e7fe      	b.n	800da90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da92:	f002 fa21 	bl	800fed8 <vPortValidateInterruptPriority>
	__asm volatile
 800da96:	f3ef 8211 	mrs	r2, BASEPRI
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	617a      	str	r2, [r7, #20]
 800daac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800daae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d22b      	bcs.n	800db1a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dadc:	d112      	bne.n	800db04 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d016      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	3324      	adds	r3, #36	; 0x24
 800daea:	4618      	mov	r0, r3
 800daec:	f001 f8fa 	bl	800ece4 <xTaskRemoveFromEventList>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00e      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00b      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2201      	movs	r2, #1
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	e007      	b.n	800db14 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db08:	3301      	adds	r3, #1
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	b25a      	sxtb	r2, r3
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db14:	2301      	movs	r3, #1
 800db16:	637b      	str	r3, [r7, #52]	; 0x34
 800db18:	e001      	b.n	800db1e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	637b      	str	r3, [r7, #52]	; 0x34
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f383 8811 	msr	BASEPRI, r3
}
 800db28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3738      	adds	r7, #56	; 0x38
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	; 0x30
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db40:	2300      	movs	r3, #0
 800db42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10a      	bne.n	800db64 <xQueueReceive+0x30>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	623b      	str	r3, [r7, #32]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <xQueueReceive+0x3e>
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <xQueueReceive+0x42>
 800db72:	2301      	movs	r3, #1
 800db74:	e000      	b.n	800db78 <xQueueReceive+0x44>
 800db76:	2300      	movs	r3, #0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10a      	bne.n	800db92 <xQueueReceive+0x5e>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	61fb      	str	r3, [r7, #28]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db92:	f001 fa69 	bl	800f068 <xTaskGetSchedulerState>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <xQueueReceive+0x6e>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <xQueueReceive+0x72>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <xQueueReceive+0x74>
 800dba6:	2300      	movs	r3, #0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10a      	bne.n	800dbc2 <xQueueReceive+0x8e>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	61bb      	str	r3, [r7, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	e7fe      	b.n	800dbc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbc2:	f002 f8a7 	bl	800fd14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01f      	beq.n	800dc12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbd2:	68b9      	ldr	r1, [r7, #8]
 800dbd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd6:	f000 fabe 	bl	800e156 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	1e5a      	subs	r2, r3, #1
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00f      	beq.n	800dc0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	3310      	adds	r3, #16
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f001 f878 	bl	800ece4 <xTaskRemoveFromEventList>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbfa:	4b3d      	ldr	r3, [pc, #244]	; (800dcf0 <xQueueReceive+0x1bc>)
 800dbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc0a:	f002 f8b3 	bl	800fd74 <vPortExitCritical>
				return pdPASS;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e069      	b.n	800dce6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d103      	bne.n	800dc20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc18:	f002 f8ac 	bl	800fd74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e062      	b.n	800dce6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc26:	f107 0310 	add.w	r3, r7, #16
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f001 f8be 	bl	800edac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc30:	2301      	movs	r3, #1
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc34:	f002 f89e 	bl	800fd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc38:	f000 fe18 	bl	800e86c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc3c:	f002 f86a 	bl	800fd14 <vPortEnterCritical>
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc46:	b25b      	sxtb	r3, r3
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4c:	d103      	bne.n	800dc56 <xQueueReceive+0x122>
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc5c:	b25b      	sxtb	r3, r3
 800dc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc62:	d103      	bne.n	800dc6c <xQueueReceive+0x138>
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc6c:	f002 f882 	bl	800fd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc70:	1d3a      	adds	r2, r7, #4
 800dc72:	f107 0310 	add.w	r3, r7, #16
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 f8ad 	bl	800edd8 <xTaskCheckForTimeOut>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d123      	bne.n	800dccc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc86:	f000 fade 	bl	800e246 <prvIsQueueEmpty>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d017      	beq.n	800dcc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	3324      	adds	r3, #36	; 0x24
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	4611      	mov	r1, r2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 ffd3 	bl	800ec44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca0:	f000 fa7f 	bl	800e1a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dca4:	f000 fdf0 	bl	800e888 <xTaskResumeAll>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d189      	bne.n	800dbc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dcae:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <xQueueReceive+0x1bc>)
 800dcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	e780      	b.n	800dbc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc2:	f000 fa6e 	bl	800e1a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcc6:	f000 fddf 	bl	800e888 <xTaskResumeAll>
 800dcca:	e77a      	b.n	800dbc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcce:	f000 fa68 	bl	800e1a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcd2:	f000 fdd9 	bl	800e888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd8:	f000 fab5 	bl	800e246 <prvIsQueueEmpty>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f43f af6f 	beq.w	800dbc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3730      	adds	r7, #48	; 0x30
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08e      	sub	sp, #56	; 0x38
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10a      	bne.n	800dd26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	623b      	str	r3, [r7, #32]
}
 800dd22:	bf00      	nop
 800dd24:	e7fe      	b.n	800dd24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	61fb      	str	r3, [r7, #28]
}
 800dd40:	bf00      	nop
 800dd42:	e7fe      	b.n	800dd42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd44:	f001 f990 	bl	800f068 <xTaskGetSchedulerState>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <xQueueSemaphoreTake+0x60>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d101      	bne.n	800dd58 <xQueueSemaphoreTake+0x64>
 800dd54:	2301      	movs	r3, #1
 800dd56:	e000      	b.n	800dd5a <xQueueSemaphoreTake+0x66>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	61bb      	str	r3, [r7, #24]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd74:	f001 ffce 	bl	800fd14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d024      	beq.n	800ddce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	1e5a      	subs	r2, r3, #1
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d104      	bne.n	800dd9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd94:	f001 fade 	bl	800f354 <pvTaskIncrementMutexHeldCount>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00f      	beq.n	800ddc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	3310      	adds	r3, #16
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 ff9a 	bl	800ece4 <xTaskRemoveFromEventList>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddb6:	4b54      	ldr	r3, [pc, #336]	; (800df08 <xQueueSemaphoreTake+0x214>)
 800ddb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ddc6:	f001 ffd5 	bl	800fd74 <vPortExitCritical>
				return pdPASS;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e097      	b.n	800defe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d111      	bne.n	800ddf8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	617b      	str	r3, [r7, #20]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ddf0:	f001 ffc0 	bl	800fd74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	e082      	b.n	800defe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d106      	bne.n	800de0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddfe:	f107 030c 	add.w	r3, r7, #12
 800de02:	4618      	mov	r0, r3
 800de04:	f000 ffd2 	bl	800edac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de08:	2301      	movs	r3, #1
 800de0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de0c:	f001 ffb2 	bl	800fd74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de10:	f000 fd2c 	bl	800e86c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de14:	f001 ff7e 	bl	800fd14 <vPortEnterCritical>
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de1e:	b25b      	sxtb	r3, r3
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de24:	d103      	bne.n	800de2e <xQueueSemaphoreTake+0x13a>
 800de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de34:	b25b      	sxtb	r3, r3
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d103      	bne.n	800de44 <xQueueSemaphoreTake+0x150>
 800de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de44:	f001 ff96 	bl	800fd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de48:	463a      	mov	r2, r7
 800de4a:	f107 030c 	add.w	r3, r7, #12
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f000 ffc1 	bl	800edd8 <xTaskCheckForTimeOut>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d132      	bne.n	800dec2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de5e:	f000 f9f2 	bl	800e246 <prvIsQueueEmpty>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d026      	beq.n	800deb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d109      	bne.n	800de84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800de70:	f001 ff50 	bl	800fd14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	4618      	mov	r0, r3
 800de7a:	f001 f913 	bl	800f0a4 <xTaskPriorityInherit>
 800de7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800de80:	f001 ff78 	bl	800fd74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	3324      	adds	r3, #36	; 0x24
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 fed9 	bl	800ec44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de94:	f000 f985 	bl	800e1a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de98:	f000 fcf6 	bl	800e888 <xTaskResumeAll>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f47f af68 	bne.w	800dd74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dea4:	4b18      	ldr	r3, [pc, #96]	; (800df08 <xQueueSemaphoreTake+0x214>)
 800dea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deaa:	601a      	str	r2, [r3, #0]
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	f3bf 8f6f 	isb	sy
 800deb4:	e75e      	b.n	800dd74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800deb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deb8:	f000 f973 	bl	800e1a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800debc:	f000 fce4 	bl	800e888 <xTaskResumeAll>
 800dec0:	e758      	b.n	800dd74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dec4:	f000 f96d 	bl	800e1a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dec8:	f000 fcde 	bl	800e888 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800decc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dece:	f000 f9ba 	bl	800e246 <prvIsQueueEmpty>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f43f af4d 	beq.w	800dd74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00d      	beq.n	800defc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dee0:	f001 ff18 	bl	800fd14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dee6:	f000 f8b4 	bl	800e052 <prvGetDisinheritPriorityAfterTimeout>
 800deea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800def2:	4618      	mov	r0, r3
 800def4:	f001 f9ac 	bl	800f250 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800def8:	f001 ff3c 	bl	800fd74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800defc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800defe:	4618      	mov	r0, r3
 800df00:	3738      	adds	r7, #56	; 0x38
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	e000ed04 	.word	0xe000ed04

0800df0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08e      	sub	sp, #56	; 0x38
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10a      	bne.n	800df38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	623b      	str	r3, [r7, #32]
}
 800df34:	bf00      	nop
 800df36:	e7fe      	b.n	800df36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d103      	bne.n	800df46 <xQueueReceiveFromISR+0x3a>
 800df3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <xQueueReceiveFromISR+0x3e>
 800df46:	2301      	movs	r3, #1
 800df48:	e000      	b.n	800df4c <xQueueReceiveFromISR+0x40>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10a      	bne.n	800df66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	61fb      	str	r3, [r7, #28]
}
 800df62:	bf00      	nop
 800df64:	e7fe      	b.n	800df64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df66:	f001 ffb7 	bl	800fed8 <vPortValidateInterruptPriority>
	__asm volatile
 800df6a:	f3ef 8211 	mrs	r2, BASEPRI
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	61ba      	str	r2, [r7, #24]
 800df80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d02f      	beq.n	800dff2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df9c:	68b9      	ldr	r1, [r7, #8]
 800df9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfa0:	f000 f8d9 	bl	800e156 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	1e5a      	subs	r2, r3, #1
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dfac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb4:	d112      	bne.n	800dfdc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d016      	beq.n	800dfec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	3310      	adds	r3, #16
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 fe8e 	bl	800ece4 <xTaskRemoveFromEventList>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00e      	beq.n	800dfec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00b      	beq.n	800dfec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	e007      	b.n	800dfec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	b25a      	sxtb	r2, r3
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dfec:	2301      	movs	r3, #1
 800dfee:	637b      	str	r3, [r7, #52]	; 0x34
 800dff0:	e001      	b.n	800dff6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	637b      	str	r3, [r7, #52]	; 0x34
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	f383 8811 	msr	BASEPRI, r3
}
 800e000:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e004:	4618      	mov	r0, r3
 800e006:	3738      	adds	r7, #56	; 0x38
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10a      	bne.n	800e034 <vQueueDelete+0x28>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	60bb      	str	r3, [r7, #8]
}
 800e030:	bf00      	nop
 800e032:	e7fe      	b.n	800e032 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f95f 	bl	800e2f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e040:	2b00      	cmp	r3, #0
 800e042:	d102      	bne.n	800e04a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f002 f853 	bl	80100f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e04a:	bf00      	nop
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e052:	b480      	push	{r7}
 800e054:	b085      	sub	sp, #20
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	e001      	b.n	800e074 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e074:	68fb      	ldr	r3, [r7, #12]
	}
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b086      	sub	sp, #24
 800e086:	af00      	add	r7, sp, #0
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10d      	bne.n	800e0bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d14d      	bne.n	800e144 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f001 f861 	bl	800f174 <xTaskPriorityDisinherit>
 800e0b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	609a      	str	r2, [r3, #8]
 800e0ba:	e043      	b.n	800e144 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d119      	bne.n	800e0f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6858      	ldr	r0, [r3, #4]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	f002 f959 	bl	8010384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0da:	441a      	add	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d32b      	bcc.n	800e144 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	605a      	str	r2, [r3, #4]
 800e0f4:	e026      	b.n	800e144 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	68d8      	ldr	r0, [r3, #12]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fe:	461a      	mov	r2, r3
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	f002 f93f 	bl	8010384 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e10e:	425b      	negs	r3, r3
 800e110:	441a      	add	r2, r3
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68da      	ldr	r2, [r3, #12]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d207      	bcs.n	800e132 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	689a      	ldr	r2, [r3, #8]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	425b      	negs	r3, r3
 800e12c:	441a      	add	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d105      	bne.n	800e144 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d002      	beq.n	800e144 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3b01      	subs	r3, #1
 800e142:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e14c:	697b      	ldr	r3, [r7, #20]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b082      	sub	sp, #8
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e164:	2b00      	cmp	r3, #0
 800e166:	d018      	beq.n	800e19a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68da      	ldr	r2, [r3, #12]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	441a      	add	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68da      	ldr	r2, [r3, #12]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d303      	bcc.n	800e18a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68d9      	ldr	r1, [r3, #12]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e192:	461a      	mov	r2, r3
 800e194:	6838      	ldr	r0, [r7, #0]
 800e196:	f002 f8f5 	bl	8010384 <memcpy>
	}
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b084      	sub	sp, #16
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e1aa:	f001 fdb3 	bl	800fd14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1b6:	e011      	b.n	800e1dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d012      	beq.n	800e1e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3324      	adds	r3, #36	; 0x24
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f000 fd8d 	bl	800ece4 <xTaskRemoveFromEventList>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e1d0:	f000 fe64 	bl	800ee9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	dce9      	bgt.n	800e1b8 <prvUnlockQueue+0x16>
 800e1e4:	e000      	b.n	800e1e8 <prvUnlockQueue+0x46>
					break;
 800e1e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	22ff      	movs	r2, #255	; 0xff
 800e1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e1f0:	f001 fdc0 	bl	800fd74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1f4:	f001 fd8e 	bl	800fd14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e200:	e011      	b.n	800e226 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d012      	beq.n	800e230 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3310      	adds	r3, #16
 800e20e:	4618      	mov	r0, r3
 800e210:	f000 fd68 	bl	800ece4 <xTaskRemoveFromEventList>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e21a:	f000 fe3f 	bl	800ee9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
 800e220:	3b01      	subs	r3, #1
 800e222:	b2db      	uxtb	r3, r3
 800e224:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	dce9      	bgt.n	800e202 <prvUnlockQueue+0x60>
 800e22e:	e000      	b.n	800e232 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e230:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	22ff      	movs	r2, #255	; 0xff
 800e236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e23a:	f001 fd9b 	bl	800fd74 <vPortExitCritical>
}
 800e23e:	bf00      	nop
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e24e:	f001 fd61 	bl	800fd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e25a:	2301      	movs	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e001      	b.n	800e264 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e260:	2300      	movs	r3, #0
 800e262:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e264:	f001 fd86 	bl	800fd74 <vPortExitCritical>

	return xReturn;
 800e268:	68fb      	ldr	r3, [r7, #12]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b084      	sub	sp, #16
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e27a:	f001 fd4b 	bl	800fd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e286:	429a      	cmp	r2, r3
 800e288:	d102      	bne.n	800e290 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e28a:	2301      	movs	r3, #1
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	e001      	b.n	800e294 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e290:	2300      	movs	r3, #0
 800e292:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e294:	f001 fd6e 	bl	800fd74 <vPortExitCritical>

	return xReturn;
 800e298:	68fb      	ldr	r3, [r7, #12]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	e014      	b.n	800e2de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e2b4:	4a0f      	ldr	r2, [pc, #60]	; (800e2f4 <vQueueAddToRegistry+0x50>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10b      	bne.n	800e2d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e2c0:	490c      	ldr	r1, [pc, #48]	; (800e2f4 <vQueueAddToRegistry+0x50>)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e2ca:	4a0a      	ldr	r2, [pc, #40]	; (800e2f4 <vQueueAddToRegistry+0x50>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	00db      	lsls	r3, r3, #3
 800e2d0:	4413      	add	r3, r2
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e2d6:	e006      	b.n	800e2e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b07      	cmp	r3, #7
 800e2e2:	d9e7      	bls.n	800e2b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	3714      	adds	r7, #20
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	2400d504 	.word	0x2400d504

0800e2f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e016      	b.n	800e334 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e306:	4a10      	ldr	r2, [pc, #64]	; (800e348 <vQueueUnregisterQueue+0x50>)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	00db      	lsls	r3, r3, #3
 800e30c:	4413      	add	r3, r2
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	429a      	cmp	r2, r3
 800e314:	d10b      	bne.n	800e32e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e316:	4a0c      	ldr	r2, [pc, #48]	; (800e348 <vQueueUnregisterQueue+0x50>)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2100      	movs	r1, #0
 800e31c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e320:	4a09      	ldr	r2, [pc, #36]	; (800e348 <vQueueUnregisterQueue+0x50>)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	00db      	lsls	r3, r3, #3
 800e326:	4413      	add	r3, r2
 800e328:	2200      	movs	r2, #0
 800e32a:	605a      	str	r2, [r3, #4]
				break;
 800e32c:	e006      	b.n	800e33c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3301      	adds	r3, #1
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b07      	cmp	r3, #7
 800e338:	d9e5      	bls.n	800e306 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e33a:	bf00      	nop
 800e33c:	bf00      	nop
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	2400d504 	.word	0x2400d504

0800e34c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e35c:	f001 fcda 	bl	800fd14 <vPortEnterCritical>
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e366:	b25b      	sxtb	r3, r3
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36c:	d103      	bne.n	800e376 <vQueueWaitForMessageRestricted+0x2a>
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e382:	d103      	bne.n	800e38c <vQueueWaitForMessageRestricted+0x40>
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e38c:	f001 fcf2 	bl	800fd74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e394:	2b00      	cmp	r3, #0
 800e396:	d106      	bne.n	800e3a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	3324      	adds	r3, #36	; 0x24
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	68b9      	ldr	r1, [r7, #8]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 fc73 	bl	800ec8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3a6:	6978      	ldr	r0, [r7, #20]
 800e3a8:	f7ff fefb 	bl	800e1a2 <prvUnlockQueue>
	}
 800e3ac:	bf00      	nop
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08e      	sub	sp, #56	; 0x38
 800e3b8:	af04      	add	r7, sp, #16
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <xTaskCreateStatic+0x2a>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	623b      	str	r3, [r7, #32]
}
 800e3da:	bf00      	nop
 800e3dc:	e7fe      	b.n	800e3dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10a      	bne.n	800e3fa <xTaskCreateStatic+0x46>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e8:	f383 8811 	msr	BASEPRI, r3
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	61fb      	str	r3, [r7, #28]
}
 800e3f6:	bf00      	nop
 800e3f8:	e7fe      	b.n	800e3f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e3fa:	23bc      	movs	r3, #188	; 0xbc
 800e3fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2bbc      	cmp	r3, #188	; 0xbc
 800e402:	d00a      	beq.n	800e41a <xTaskCreateStatic+0x66>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	61bb      	str	r3, [r7, #24]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e41a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d01e      	beq.n	800e460 <xTaskCreateStatic+0xac>
 800e422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01b      	beq.n	800e460 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e430:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	2202      	movs	r2, #2
 800e436:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e43a:	2300      	movs	r3, #0
 800e43c:	9303      	str	r3, [sp, #12]
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	9302      	str	r3, [sp, #8]
 800e442:	f107 0314 	add.w	r3, r7, #20
 800e446:	9301      	str	r3, [sp, #4]
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	68b9      	ldr	r1, [r7, #8]
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f000 f850 	bl	800e4f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e45a:	f000 f8f3 	bl	800e644 <prvAddNewTaskToReadyList>
 800e45e:	e001      	b.n	800e464 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e460:	2300      	movs	r3, #0
 800e462:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e464:	697b      	ldr	r3, [r7, #20]
	}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b08c      	sub	sp, #48	; 0x30
 800e472:	af04      	add	r7, sp, #16
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	603b      	str	r3, [r7, #0]
 800e47a:	4613      	mov	r3, r2
 800e47c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e47e:	88fb      	ldrh	r3, [r7, #6]
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4618      	mov	r0, r3
 800e484:	f001 fd68 	bl	800ff58 <pvPortMalloc>
 800e488:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00e      	beq.n	800e4ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e490:	20bc      	movs	r0, #188	; 0xbc
 800e492:	f001 fd61 	bl	800ff58 <pvPortMalloc>
 800e496:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	631a      	str	r2, [r3, #48]	; 0x30
 800e4a4:	e005      	b.n	800e4b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4a6:	6978      	ldr	r0, [r7, #20]
 800e4a8:	f001 fe22 	bl	80100f0 <vPortFree>
 800e4ac:	e001      	b.n	800e4b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d017      	beq.n	800e4e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4c0:	88fa      	ldrh	r2, [r7, #6]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9303      	str	r3, [sp, #12]
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	9302      	str	r3, [sp, #8]
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	68b9      	ldr	r1, [r7, #8]
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f000 f80e 	bl	800e4f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4dc:	69f8      	ldr	r0, [r7, #28]
 800e4de:	f000 f8b1 	bl	800e644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	61bb      	str	r3, [r7, #24]
 800e4e6:	e002      	b.n	800e4ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e4ee:	69bb      	ldr	r3, [r7, #24]
	}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3720      	adds	r7, #32
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	461a      	mov	r2, r3
 800e510:	21a5      	movs	r1, #165	; 0xa5
 800e512:	f001 ff45 	bl	80103a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e51a:	6879      	ldr	r1, [r7, #4]
 800e51c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e520:	440b      	add	r3, r1
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	4413      	add	r3, r2
 800e526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	f023 0307 	bic.w	r3, r3, #7
 800e52e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	617b      	str	r3, [r7, #20]
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d01f      	beq.n	800e596 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e556:	2300      	movs	r3, #0
 800e558:	61fb      	str	r3, [r7, #28]
 800e55a:	e012      	b.n	800e582 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	4413      	add	r3, r2
 800e562:	7819      	ldrb	r1, [r3, #0]
 800e564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	4413      	add	r3, r2
 800e56a:	3334      	adds	r3, #52	; 0x34
 800e56c:	460a      	mov	r2, r1
 800e56e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	4413      	add	r3, r2
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d006      	beq.n	800e58a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	3301      	adds	r3, #1
 800e580:	61fb      	str	r3, [r7, #28]
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	2b0f      	cmp	r3, #15
 800e586:	d9e9      	bls.n	800e55c <prvInitialiseNewTask+0x64>
 800e588:	e000      	b.n	800e58c <prvInitialiseNewTask+0x94>
			{
				break;
 800e58a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e594:	e003      	b.n	800e59e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	2b37      	cmp	r3, #55	; 0x37
 800e5a2:	d901      	bls.n	800e5a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5a4:	2337      	movs	r3, #55	; 0x37
 800e5a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5bc:	3304      	adds	r3, #4
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fe56 	bl	800d270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	3318      	adds	r3, #24
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fe fe51 	bl	800d270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	3354      	adds	r3, #84	; 0x54
 800e5f8:	2260      	movs	r2, #96	; 0x60
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f001 fecf 	bl	80103a0 <memset>
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	4a0c      	ldr	r2, [pc, #48]	; (800e638 <prvInitialiseNewTask+0x140>)
 800e606:	659a      	str	r2, [r3, #88]	; 0x58
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	4a0c      	ldr	r2, [pc, #48]	; (800e63c <prvInitialiseNewTask+0x144>)
 800e60c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	4a0b      	ldr	r2, [pc, #44]	; (800e640 <prvInitialiseNewTask+0x148>)
 800e612:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	69b8      	ldr	r0, [r7, #24]
 800e61a:	f001 fa51 	bl	800fac0 <pxPortInitialiseStack>
 800e61e:	4602      	mov	r2, r0
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	2b00      	cmp	r3, #0
 800e628:	d002      	beq.n	800e630 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e62e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e630:	bf00      	nop
 800e632:	3720      	adds	r7, #32
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	08010ea8 	.word	0x08010ea8
 800e63c:	08010ec8 	.word	0x08010ec8
 800e640:	08010e88 	.word	0x08010e88

0800e644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e64c:	f001 fb62 	bl	800fd14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e650:	4b2d      	ldr	r3, [pc, #180]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3301      	adds	r3, #1
 800e656:	4a2c      	ldr	r2, [pc, #176]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e65a:	4b2c      	ldr	r3, [pc, #176]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d109      	bne.n	800e676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e662:	4a2a      	ldr	r2, [pc, #168]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d110      	bne.n	800e692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e670:	f000 fc38 	bl	800eee4 <prvInitialiseTaskLists>
 800e674:	e00d      	b.n	800e692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e676:	4b26      	ldr	r3, [pc, #152]	; (800e710 <prvAddNewTaskToReadyList+0xcc>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d109      	bne.n	800e692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e67e:	4b23      	ldr	r3, [pc, #140]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	429a      	cmp	r2, r3
 800e68a:	d802      	bhi.n	800e692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e68c:	4a1f      	ldr	r2, [pc, #124]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e692:	4b20      	ldr	r3, [pc, #128]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e69a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e69c:	4b1d      	ldr	r3, [pc, #116]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a8:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <prvAddNewTaskToReadyList+0xd4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d903      	bls.n	800e6b8 <prvAddNewTaskToReadyList+0x74>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	4a18      	ldr	r2, [pc, #96]	; (800e718 <prvAddNewTaskToReadyList+0xd4>)
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4a15      	ldr	r2, [pc, #84]	; (800e71c <prvAddNewTaskToReadyList+0xd8>)
 800e6c6:	441a      	add	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	4610      	mov	r0, r2
 800e6d0:	f7fe fddb 	bl	800d28a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6d4:	f001 fb4e 	bl	800fd74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e6d8:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <prvAddNewTaskToReadyList+0xcc>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d207      	bcs.n	800e6fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e6ee:	4b0c      	ldr	r3, [pc, #48]	; (800e720 <prvAddNewTaskToReadyList+0xdc>)
 800e6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	f3bf 8f4f 	dsb	sy
 800e6fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	24008e14 	.word	0x24008e14
 800e70c:	24008940 	.word	0x24008940
 800e710:	24008e20 	.word	0x24008e20
 800e714:	24008e30 	.word	0x24008e30
 800e718:	24008e1c 	.word	0x24008e1c
 800e71c:	24008944 	.word	0x24008944
 800e720:	e000ed04 	.word	0xe000ed04

0800e724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d017      	beq.n	800e766 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e736:	4b13      	ldr	r3, [pc, #76]	; (800e784 <vTaskDelay+0x60>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <vTaskDelay+0x30>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	60bb      	str	r3, [r7, #8]
}
 800e750:	bf00      	nop
 800e752:	e7fe      	b.n	800e752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e754:	f000 f88a 	bl	800e86c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e758:	2100      	movs	r1, #0
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fe0e 	bl	800f37c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e760:	f000 f892 	bl	800e888 <xTaskResumeAll>
 800e764:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d107      	bne.n	800e77c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e76c:	4b06      	ldr	r3, [pc, #24]	; (800e788 <vTaskDelay+0x64>)
 800e76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e77c:	bf00      	nop
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	24008e3c 	.word	0x24008e3c
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08a      	sub	sp, #40	; 0x28
 800e790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e79a:	463a      	mov	r2, r7
 800e79c:	1d39      	adds	r1, r7, #4
 800e79e:	f107 0308 	add.w	r3, r7, #8
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fe fd10 	bl	800d1c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	9202      	str	r2, [sp, #8]
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	460a      	mov	r2, r1
 800e7ba:	4924      	ldr	r1, [pc, #144]	; (800e84c <vTaskStartScheduler+0xc0>)
 800e7bc:	4824      	ldr	r0, [pc, #144]	; (800e850 <vTaskStartScheduler+0xc4>)
 800e7be:	f7ff fdf9 	bl	800e3b4 <xTaskCreateStatic>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4a23      	ldr	r2, [pc, #140]	; (800e854 <vTaskStartScheduler+0xc8>)
 800e7c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7c8:	4b22      	ldr	r3, [pc, #136]	; (800e854 <vTaskStartScheduler+0xc8>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	e001      	b.n	800e7da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d102      	bne.n	800e7e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7e0:	f000 fe20 	bl	800f424 <xTimerCreateTimerTask>
 800e7e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d11b      	bne.n	800e824 <vTaskStartScheduler+0x98>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	613b      	str	r3, [r7, #16]
}
 800e7fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e800:	4b15      	ldr	r3, [pc, #84]	; (800e858 <vTaskStartScheduler+0xcc>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3354      	adds	r3, #84	; 0x54
 800e806:	4a15      	ldr	r2, [pc, #84]	; (800e85c <vTaskStartScheduler+0xd0>)
 800e808:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e80a:	4b15      	ldr	r3, [pc, #84]	; (800e860 <vTaskStartScheduler+0xd4>)
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295
 800e810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e812:	4b14      	ldr	r3, [pc, #80]	; (800e864 <vTaskStartScheduler+0xd8>)
 800e814:	2201      	movs	r2, #1
 800e816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e818:	4b13      	ldr	r3, [pc, #76]	; (800e868 <vTaskStartScheduler+0xdc>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e81e:	f001 f9d7 	bl	800fbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e822:	e00e      	b.n	800e842 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82a:	d10a      	bne.n	800e842 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	60fb      	str	r3, [r7, #12]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <vTaskStartScheduler+0xb4>
}
 800e842:	bf00      	nop
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	08010d60 	.word	0x08010d60
 800e850:	0800eeb5 	.word	0x0800eeb5
 800e854:	24008e38 	.word	0x24008e38
 800e858:	24008940 	.word	0x24008940
 800e85c:	2400803c 	.word	0x2400803c
 800e860:	24008e34 	.word	0x24008e34
 800e864:	24008e20 	.word	0x24008e20
 800e868:	24008e18 	.word	0x24008e18

0800e86c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e870:	4b04      	ldr	r3, [pc, #16]	; (800e884 <vTaskSuspendAll+0x18>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3301      	adds	r3, #1
 800e876:	4a03      	ldr	r2, [pc, #12]	; (800e884 <vTaskSuspendAll+0x18>)
 800e878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e87a:	bf00      	nop
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	24008e3c 	.word	0x24008e3c

0800e888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e88e:	2300      	movs	r3, #0
 800e890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e892:	2300      	movs	r3, #0
 800e894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e896:	4b42      	ldr	r3, [pc, #264]	; (800e9a0 <xTaskResumeAll+0x118>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10a      	bne.n	800e8b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	603b      	str	r3, [r7, #0]
}
 800e8b0:	bf00      	nop
 800e8b2:	e7fe      	b.n	800e8b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8b4:	f001 fa2e 	bl	800fd14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8b8:	4b39      	ldr	r3, [pc, #228]	; (800e9a0 <xTaskResumeAll+0x118>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	4a38      	ldr	r2, [pc, #224]	; (800e9a0 <xTaskResumeAll+0x118>)
 800e8c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8c2:	4b37      	ldr	r3, [pc, #220]	; (800e9a0 <xTaskResumeAll+0x118>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d162      	bne.n	800e990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8ca:	4b36      	ldr	r3, [pc, #216]	; (800e9a4 <xTaskResumeAll+0x11c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d05e      	beq.n	800e990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8d2:	e02f      	b.n	800e934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8d4:	4b34      	ldr	r3, [pc, #208]	; (800e9a8 <xTaskResumeAll+0x120>)
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3318      	adds	r3, #24
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fe fd2f 	bl	800d344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fd2a 	bl	800d344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f4:	4b2d      	ldr	r3, [pc, #180]	; (800e9ac <xTaskResumeAll+0x124>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d903      	bls.n	800e904 <xTaskResumeAll+0x7c>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e900:	4a2a      	ldr	r2, [pc, #168]	; (800e9ac <xTaskResumeAll+0x124>)
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e908:	4613      	mov	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4a27      	ldr	r2, [pc, #156]	; (800e9b0 <xTaskResumeAll+0x128>)
 800e912:	441a      	add	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3304      	adds	r3, #4
 800e918:	4619      	mov	r1, r3
 800e91a:	4610      	mov	r0, r2
 800e91c:	f7fe fcb5 	bl	800d28a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e924:	4b23      	ldr	r3, [pc, #140]	; (800e9b4 <xTaskResumeAll+0x12c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d302      	bcc.n	800e934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e92e:	4b22      	ldr	r3, [pc, #136]	; (800e9b8 <xTaskResumeAll+0x130>)
 800e930:	2201      	movs	r2, #1
 800e932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e934:	4b1c      	ldr	r3, [pc, #112]	; (800e9a8 <xTaskResumeAll+0x120>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1cb      	bne.n	800e8d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e942:	f000 fb71 	bl	800f028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e946:	4b1d      	ldr	r3, [pc, #116]	; (800e9bc <xTaskResumeAll+0x134>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d010      	beq.n	800e974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e952:	f000 f859 	bl	800ea08 <xTaskIncrementTick>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d002      	beq.n	800e962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e95c:	4b16      	ldr	r3, [pc, #88]	; (800e9b8 <xTaskResumeAll+0x130>)
 800e95e:	2201      	movs	r2, #1
 800e960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3b01      	subs	r3, #1
 800e966:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1f1      	bne.n	800e952 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e96e:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <xTaskResumeAll+0x134>)
 800e970:	2200      	movs	r2, #0
 800e972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e974:	4b10      	ldr	r3, [pc, #64]	; (800e9b8 <xTaskResumeAll+0x130>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d009      	beq.n	800e990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e97c:	2301      	movs	r3, #1
 800e97e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e980:	4b0f      	ldr	r3, [pc, #60]	; (800e9c0 <xTaskResumeAll+0x138>)
 800e982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e990:	f001 f9f0 	bl	800fd74 <vPortExitCritical>

	return xAlreadyYielded;
 800e994:	68bb      	ldr	r3, [r7, #8]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	24008e3c 	.word	0x24008e3c
 800e9a4:	24008e14 	.word	0x24008e14
 800e9a8:	24008dd4 	.word	0x24008dd4
 800e9ac:	24008e1c 	.word	0x24008e1c
 800e9b0:	24008944 	.word	0x24008944
 800e9b4:	24008940 	.word	0x24008940
 800e9b8:	24008e28 	.word	0x24008e28
 800e9bc:	24008e24 	.word	0x24008e24
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9ca:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <xTaskGetTickCount+0x1c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9d0:	687b      	ldr	r3, [r7, #4]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	24008e18 	.word	0x24008e18

0800e9e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9ea:	f001 fa75 	bl	800fed8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e9f2:	4b04      	ldr	r3, [pc, #16]	; (800ea04 <xTaskGetTickCountFromISR+0x20>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e9f8:	683b      	ldr	r3, [r7, #0]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	24008e18 	.word	0x24008e18

0800ea08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea12:	4b4f      	ldr	r3, [pc, #316]	; (800eb50 <xTaskIncrementTick+0x148>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 808f 	bne.w	800eb3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea1c:	4b4d      	ldr	r3, [pc, #308]	; (800eb54 <xTaskIncrementTick+0x14c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3301      	adds	r3, #1
 800ea22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea24:	4a4b      	ldr	r2, [pc, #300]	; (800eb54 <xTaskIncrementTick+0x14c>)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d120      	bne.n	800ea72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea30:	4b49      	ldr	r3, [pc, #292]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00a      	beq.n	800ea50 <xTaskIncrementTick+0x48>
	__asm volatile
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	603b      	str	r3, [r7, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	e7fe      	b.n	800ea4e <xTaskIncrementTick+0x46>
 800ea50:	4b41      	ldr	r3, [pc, #260]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	60fb      	str	r3, [r7, #12]
 800ea56:	4b41      	ldr	r3, [pc, #260]	; (800eb5c <xTaskIncrementTick+0x154>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a3f      	ldr	r2, [pc, #252]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4a3f      	ldr	r2, [pc, #252]	; (800eb5c <xTaskIncrementTick+0x154>)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	4b3e      	ldr	r3, [pc, #248]	; (800eb60 <xTaskIncrementTick+0x158>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	4a3d      	ldr	r2, [pc, #244]	; (800eb60 <xTaskIncrementTick+0x158>)
 800ea6c:	6013      	str	r3, [r2, #0]
 800ea6e:	f000 fadb 	bl	800f028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea72:	4b3c      	ldr	r3, [pc, #240]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d349      	bcc.n	800eb10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea7c:	4b36      	ldr	r3, [pc, #216]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea86:	4b37      	ldr	r3, [pc, #220]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	601a      	str	r2, [r3, #0]
					break;
 800ea8e:	e03f      	b.n	800eb10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea90:	4b31      	ldr	r3, [pc, #196]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d203      	bcs.n	800eab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaa8:	4a2e      	ldr	r2, [pc, #184]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaae:	e02f      	b.n	800eb10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	3304      	adds	r3, #4
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe fc45 	bl	800d344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d004      	beq.n	800eacc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	3318      	adds	r3, #24
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fe fc3c 	bl	800d344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead0:	4b25      	ldr	r3, [pc, #148]	; (800eb68 <xTaskIncrementTick+0x160>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d903      	bls.n	800eae0 <xTaskIncrementTick+0xd8>
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eadc:	4a22      	ldr	r2, [pc, #136]	; (800eb68 <xTaskIncrementTick+0x160>)
 800eade:	6013      	str	r3, [r2, #0]
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae4:	4613      	mov	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4413      	add	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	4a1f      	ldr	r2, [pc, #124]	; (800eb6c <xTaskIncrementTick+0x164>)
 800eaee:	441a      	add	r2, r3
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fe fbc7 	bl	800d28a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb00:	4b1b      	ldr	r3, [pc, #108]	; (800eb70 <xTaskIncrementTick+0x168>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d3b8      	bcc.n	800ea7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb0e:	e7b5      	b.n	800ea7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb10:	4b17      	ldr	r3, [pc, #92]	; (800eb70 <xTaskIncrementTick+0x168>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb16:	4915      	ldr	r1, [pc, #84]	; (800eb6c <xTaskIncrementTick+0x164>)
 800eb18:	4613      	mov	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	440b      	add	r3, r1
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d901      	bls.n	800eb2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eb2c:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <xTaskIncrementTick+0x16c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d007      	beq.n	800eb44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	e004      	b.n	800eb44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eb3a:	4b0f      	ldr	r3, [pc, #60]	; (800eb78 <xTaskIncrementTick+0x170>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	4a0d      	ldr	r2, [pc, #52]	; (800eb78 <xTaskIncrementTick+0x170>)
 800eb42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eb44:	697b      	ldr	r3, [r7, #20]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	24008e3c 	.word	0x24008e3c
 800eb54:	24008e18 	.word	0x24008e18
 800eb58:	24008dcc 	.word	0x24008dcc
 800eb5c:	24008dd0 	.word	0x24008dd0
 800eb60:	24008e2c 	.word	0x24008e2c
 800eb64:	24008e34 	.word	0x24008e34
 800eb68:	24008e1c 	.word	0x24008e1c
 800eb6c:	24008944 	.word	0x24008944
 800eb70:	24008940 	.word	0x24008940
 800eb74:	24008e28 	.word	0x24008e28
 800eb78:	24008e24 	.word	0x24008e24

0800eb7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb82:	4b2a      	ldr	r3, [pc, #168]	; (800ec2c <vTaskSwitchContext+0xb0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb8a:	4b29      	ldr	r3, [pc, #164]	; (800ec30 <vTaskSwitchContext+0xb4>)
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb90:	e046      	b.n	800ec20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800eb92:	4b27      	ldr	r3, [pc, #156]	; (800ec30 <vTaskSwitchContext+0xb4>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb98:	4b26      	ldr	r3, [pc, #152]	; (800ec34 <vTaskSwitchContext+0xb8>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	e010      	b.n	800ebc2 <vTaskSwitchContext+0x46>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d10a      	bne.n	800ebbc <vTaskSwitchContext+0x40>
	__asm volatile
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	607b      	str	r3, [r7, #4]
}
 800ebb8:	bf00      	nop
 800ebba:	e7fe      	b.n	800ebba <vTaskSwitchContext+0x3e>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	60fb      	str	r3, [r7, #12]
 800ebc2:	491d      	ldr	r1, [pc, #116]	; (800ec38 <vTaskSwitchContext+0xbc>)
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	440b      	add	r3, r1
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d0e4      	beq.n	800eba0 <vTaskSwitchContext+0x24>
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4a15      	ldr	r2, [pc, #84]	; (800ec38 <vTaskSwitchContext+0xbc>)
 800ebe2:	4413      	add	r3, r2
 800ebe4:	60bb      	str	r3, [r7, #8]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	605a      	str	r2, [r3, #4]
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d104      	bne.n	800ec06 <vTaskSwitchContext+0x8a>
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	685a      	ldr	r2, [r3, #4]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	605a      	str	r2, [r3, #4]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	; (800ec3c <vTaskSwitchContext+0xc0>)
 800ec0e:	6013      	str	r3, [r2, #0]
 800ec10:	4a08      	ldr	r2, [pc, #32]	; (800ec34 <vTaskSwitchContext+0xb8>)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <vTaskSwitchContext+0xc0>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	3354      	adds	r3, #84	; 0x54
 800ec1c:	4a08      	ldr	r2, [pc, #32]	; (800ec40 <vTaskSwitchContext+0xc4>)
 800ec1e:	6013      	str	r3, [r2, #0]
}
 800ec20:	bf00      	nop
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	24008e3c 	.word	0x24008e3c
 800ec30:	24008e28 	.word	0x24008e28
 800ec34:	24008e1c 	.word	0x24008e1c
 800ec38:	24008944 	.word	0x24008944
 800ec3c:	24008940 	.word	0x24008940
 800ec40:	2400803c 	.word	0x2400803c

0800ec44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10a      	bne.n	800ec6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	60fb      	str	r3, [r7, #12]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec6a:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <vTaskPlaceOnEventList+0x44>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3318      	adds	r3, #24
 800ec70:	4619      	mov	r1, r3
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7fe fb2d 	bl	800d2d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec78:	2101      	movs	r1, #1
 800ec7a:	6838      	ldr	r0, [r7, #0]
 800ec7c:	f000 fb7e 	bl	800f37c <prvAddCurrentTaskToDelayedList>
}
 800ec80:	bf00      	nop
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	24008940 	.word	0x24008940

0800ec8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10a      	bne.n	800ecb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	617b      	str	r3, [r7, #20]
}
 800ecb0:	bf00      	nop
 800ecb2:	e7fe      	b.n	800ecb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3318      	adds	r3, #24
 800ecba:	4619      	mov	r1, r3
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7fe fae4 	bl	800d28a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ecc8:	f04f 33ff 	mov.w	r3, #4294967295
 800eccc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	68b8      	ldr	r0, [r7, #8]
 800ecd2:	f000 fb53 	bl	800f37c <prvAddCurrentTaskToDelayedList>
	}
 800ecd6:	bf00      	nop
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	24008940 	.word	0x24008940

0800ece4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10a      	bne.n	800ed10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	60fb      	str	r3, [r7, #12]
}
 800ed0c:	bf00      	nop
 800ed0e:	e7fe      	b.n	800ed0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	3318      	adds	r3, #24
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fe fb15 	bl	800d344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed1a:	4b1e      	ldr	r3, [pc, #120]	; (800ed94 <xTaskRemoveFromEventList+0xb0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d11d      	bne.n	800ed5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fb0c 	bl	800d344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed30:	4b19      	ldr	r3, [pc, #100]	; (800ed98 <xTaskRemoveFromEventList+0xb4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d903      	bls.n	800ed40 <xTaskRemoveFromEventList+0x5c>
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	4a16      	ldr	r2, [pc, #88]	; (800ed98 <xTaskRemoveFromEventList+0xb4>)
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed44:	4613      	mov	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4a13      	ldr	r2, [pc, #76]	; (800ed9c <xTaskRemoveFromEventList+0xb8>)
 800ed4e:	441a      	add	r2, r3
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4619      	mov	r1, r3
 800ed56:	4610      	mov	r0, r2
 800ed58:	f7fe fa97 	bl	800d28a <vListInsertEnd>
 800ed5c:	e005      	b.n	800ed6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	3318      	adds	r3, #24
 800ed62:	4619      	mov	r1, r3
 800ed64:	480e      	ldr	r0, [pc, #56]	; (800eda0 <xTaskRemoveFromEventList+0xbc>)
 800ed66:	f7fe fa90 	bl	800d28a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6e:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <xTaskRemoveFromEventList+0xc0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d905      	bls.n	800ed84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	; (800eda8 <xTaskRemoveFromEventList+0xc4>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	e001      	b.n	800ed88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ed84:	2300      	movs	r3, #0
 800ed86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed88:	697b      	ldr	r3, [r7, #20]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3718      	adds	r7, #24
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	24008e3c 	.word	0x24008e3c
 800ed98:	24008e1c 	.word	0x24008e1c
 800ed9c:	24008944 	.word	0x24008944
 800eda0:	24008dd4 	.word	0x24008dd4
 800eda4:	24008940 	.word	0x24008940
 800eda8:	24008e28 	.word	0x24008e28

0800edac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edb4:	4b06      	ldr	r3, [pc, #24]	; (800edd0 <vTaskInternalSetTimeOutState+0x24>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edbc:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <vTaskInternalSetTimeOutState+0x28>)
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	605a      	str	r2, [r3, #4]
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	24008e2c 	.word	0x24008e2c
 800edd4:	24008e18 	.word	0x24008e18

0800edd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b088      	sub	sp, #32
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10a      	bne.n	800edfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ede8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edec:	f383 8811 	msr	BASEPRI, r3
 800edf0:	f3bf 8f6f 	isb	sy
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	613b      	str	r3, [r7, #16]
}
 800edfa:	bf00      	nop
 800edfc:	e7fe      	b.n	800edfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10a      	bne.n	800ee1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	60fb      	str	r3, [r7, #12]
}
 800ee16:	bf00      	nop
 800ee18:	e7fe      	b.n	800ee18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ee1a:	f000 ff7b 	bl	800fd14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee1e:	4b1d      	ldr	r3, [pc, #116]	; (800ee94 <xTaskCheckForTimeOut+0xbc>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	69ba      	ldr	r2, [r7, #24]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee36:	d102      	bne.n	800ee3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	e023      	b.n	800ee86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	4b15      	ldr	r3, [pc, #84]	; (800ee98 <xTaskCheckForTimeOut+0xc0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d007      	beq.n	800ee5a <xTaskCheckForTimeOut+0x82>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d302      	bcc.n	800ee5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee54:	2301      	movs	r3, #1
 800ee56:	61fb      	str	r3, [r7, #28]
 800ee58:	e015      	b.n	800ee86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d20b      	bcs.n	800ee7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	1ad2      	subs	r2, r2, r3
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff ff9b 	bl	800edac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee76:	2300      	movs	r3, #0
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	e004      	b.n	800ee86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee82:	2301      	movs	r3, #1
 800ee84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee86:	f000 ff75 	bl	800fd74 <vPortExitCritical>

	return xReturn;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3720      	adds	r7, #32
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	24008e18 	.word	0x24008e18
 800ee98:	24008e2c 	.word	0x24008e2c

0800ee9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eea0:	4b03      	ldr	r3, [pc, #12]	; (800eeb0 <vTaskMissedYield+0x14>)
 800eea2:	2201      	movs	r2, #1
 800eea4:	601a      	str	r2, [r3, #0]
}
 800eea6:	bf00      	nop
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	24008e28 	.word	0x24008e28

0800eeb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eebc:	f000 f852 	bl	800ef64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eec0:	4b06      	ldr	r3, [pc, #24]	; (800eedc <prvIdleTask+0x28>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d9f9      	bls.n	800eebc <prvIdleTask+0x8>
			{
				taskYIELD();
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <prvIdleTask+0x2c>)
 800eeca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eece:	601a      	str	r2, [r3, #0]
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eed8:	e7f0      	b.n	800eebc <prvIdleTask+0x8>
 800eeda:	bf00      	nop
 800eedc:	24008944 	.word	0x24008944
 800eee0:	e000ed04 	.word	0xe000ed04

0800eee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeea:	2300      	movs	r3, #0
 800eeec:	607b      	str	r3, [r7, #4]
 800eeee:	e00c      	b.n	800ef0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	4613      	mov	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4413      	add	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4a12      	ldr	r2, [pc, #72]	; (800ef44 <prvInitialiseTaskLists+0x60>)
 800eefc:	4413      	add	r3, r2
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe f996 	bl	800d230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	3301      	adds	r3, #1
 800ef08:	607b      	str	r3, [r7, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b37      	cmp	r3, #55	; 0x37
 800ef0e:	d9ef      	bls.n	800eef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef10:	480d      	ldr	r0, [pc, #52]	; (800ef48 <prvInitialiseTaskLists+0x64>)
 800ef12:	f7fe f98d 	bl	800d230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef16:	480d      	ldr	r0, [pc, #52]	; (800ef4c <prvInitialiseTaskLists+0x68>)
 800ef18:	f7fe f98a 	bl	800d230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef1c:	480c      	ldr	r0, [pc, #48]	; (800ef50 <prvInitialiseTaskLists+0x6c>)
 800ef1e:	f7fe f987 	bl	800d230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef22:	480c      	ldr	r0, [pc, #48]	; (800ef54 <prvInitialiseTaskLists+0x70>)
 800ef24:	f7fe f984 	bl	800d230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef28:	480b      	ldr	r0, [pc, #44]	; (800ef58 <prvInitialiseTaskLists+0x74>)
 800ef2a:	f7fe f981 	bl	800d230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef2e:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <prvInitialiseTaskLists+0x78>)
 800ef30:	4a05      	ldr	r2, [pc, #20]	; (800ef48 <prvInitialiseTaskLists+0x64>)
 800ef32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef34:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <prvInitialiseTaskLists+0x7c>)
 800ef36:	4a05      	ldr	r2, [pc, #20]	; (800ef4c <prvInitialiseTaskLists+0x68>)
 800ef38:	601a      	str	r2, [r3, #0]
}
 800ef3a:	bf00      	nop
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	24008944 	.word	0x24008944
 800ef48:	24008da4 	.word	0x24008da4
 800ef4c:	24008db8 	.word	0x24008db8
 800ef50:	24008dd4 	.word	0x24008dd4
 800ef54:	24008de8 	.word	0x24008de8
 800ef58:	24008e00 	.word	0x24008e00
 800ef5c:	24008dcc 	.word	0x24008dcc
 800ef60:	24008dd0 	.word	0x24008dd0

0800ef64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef6a:	e019      	b.n	800efa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef6c:	f000 fed2 	bl	800fd14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef70:	4b10      	ldr	r3, [pc, #64]	; (800efb4 <prvCheckTasksWaitingTermination+0x50>)
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe f9e1 	bl	800d344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef82:	4b0d      	ldr	r3, [pc, #52]	; (800efb8 <prvCheckTasksWaitingTermination+0x54>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	4a0b      	ldr	r2, [pc, #44]	; (800efb8 <prvCheckTasksWaitingTermination+0x54>)
 800ef8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef8c:	4b0b      	ldr	r3, [pc, #44]	; (800efbc <prvCheckTasksWaitingTermination+0x58>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	4a0a      	ldr	r2, [pc, #40]	; (800efbc <prvCheckTasksWaitingTermination+0x58>)
 800ef94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef96:	f000 feed 	bl	800fd74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f810 	bl	800efc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efa0:	4b06      	ldr	r3, [pc, #24]	; (800efbc <prvCheckTasksWaitingTermination+0x58>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e1      	bne.n	800ef6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efa8:	bf00      	nop
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	24008de8 	.word	0x24008de8
 800efb8:	24008e14 	.word	0x24008e14
 800efbc:	24008dfc 	.word	0x24008dfc

0800efc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3354      	adds	r3, #84	; 0x54
 800efcc:	4618      	mov	r0, r3
 800efce:	f001 fa57 	bl	8010480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d108      	bne.n	800efee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe0:	4618      	mov	r0, r3
 800efe2:	f001 f885 	bl	80100f0 <vPortFree>
				vPortFree( pxTCB );
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 f882 	bl	80100f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800efec:	e018      	b.n	800f020 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d103      	bne.n	800f000 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f001 f879 	bl	80100f0 <vPortFree>
	}
 800effe:	e00f      	b.n	800f020 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f006:	2b02      	cmp	r3, #2
 800f008:	d00a      	beq.n	800f020 <prvDeleteTCB+0x60>
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	60fb      	str	r3, [r7, #12]
}
 800f01c:	bf00      	nop
 800f01e:	e7fe      	b.n	800f01e <prvDeleteTCB+0x5e>
	}
 800f020:	bf00      	nop
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f02e:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <prvResetNextTaskUnblockTime+0x38>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d104      	bne.n	800f042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f038:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <prvResetNextTaskUnblockTime+0x3c>)
 800f03a:	f04f 32ff 	mov.w	r2, #4294967295
 800f03e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f040:	e008      	b.n	800f054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f042:	4b07      	ldr	r3, [pc, #28]	; (800f060 <prvResetNextTaskUnblockTime+0x38>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	4a04      	ldr	r2, [pc, #16]	; (800f064 <prvResetNextTaskUnblockTime+0x3c>)
 800f052:	6013      	str	r3, [r2, #0]
}
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	24008dcc 	.word	0x24008dcc
 800f064:	24008e34 	.word	0x24008e34

0800f068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f06e:	4b0b      	ldr	r3, [pc, #44]	; (800f09c <xTaskGetSchedulerState+0x34>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d102      	bne.n	800f07c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f076:	2301      	movs	r3, #1
 800f078:	607b      	str	r3, [r7, #4]
 800f07a:	e008      	b.n	800f08e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f07c:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <xTaskGetSchedulerState+0x38>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d102      	bne.n	800f08a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f084:	2302      	movs	r3, #2
 800f086:	607b      	str	r3, [r7, #4]
 800f088:	e001      	b.n	800f08e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f08a:	2300      	movs	r3, #0
 800f08c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f08e:	687b      	ldr	r3, [r7, #4]
	}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	24008e20 	.word	0x24008e20
 800f0a0:	24008e3c 	.word	0x24008e3c

0800f0a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d051      	beq.n	800f15e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0be:	4b2a      	ldr	r3, [pc, #168]	; (800f168 <xTaskPriorityInherit+0xc4>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d241      	bcs.n	800f14c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	db06      	blt.n	800f0de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0d0:	4b25      	ldr	r3, [pc, #148]	; (800f168 <xTaskPriorityInherit+0xc4>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	6959      	ldr	r1, [r3, #20]
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4a1f      	ldr	r2, [pc, #124]	; (800f16c <xTaskPriorityInherit+0xc8>)
 800f0f0:	4413      	add	r3, r2
 800f0f2:	4299      	cmp	r1, r3
 800f0f4:	d122      	bne.n	800f13c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe f922 	bl	800d344 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <xTaskPriorityInherit+0xc4>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f10e:	4b18      	ldr	r3, [pc, #96]	; (800f170 <xTaskPriorityInherit+0xcc>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d903      	bls.n	800f11e <xTaskPriorityInherit+0x7a>
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11a:	4a15      	ldr	r2, [pc, #84]	; (800f170 <xTaskPriorityInherit+0xcc>)
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f122:	4613      	mov	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4413      	add	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4a10      	ldr	r2, [pc, #64]	; (800f16c <xTaskPriorityInherit+0xc8>)
 800f12c:	441a      	add	r2, r3
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	3304      	adds	r3, #4
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fe f8a8 	bl	800d28a <vListInsertEnd>
 800f13a:	e004      	b.n	800f146 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f13c:	4b0a      	ldr	r3, [pc, #40]	; (800f168 <xTaskPriorityInherit+0xc4>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f146:	2301      	movs	r3, #1
 800f148:	60fb      	str	r3, [r7, #12]
 800f14a:	e008      	b.n	800f15e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f150:	4b05      	ldr	r3, [pc, #20]	; (800f168 <xTaskPriorityInherit+0xc4>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	429a      	cmp	r2, r3
 800f158:	d201      	bcs.n	800f15e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f15a:	2301      	movs	r3, #1
 800f15c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f15e:	68fb      	ldr	r3, [r7, #12]
	}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	24008940 	.word	0x24008940
 800f16c:	24008944 	.word	0x24008944
 800f170:	24008e1c 	.word	0x24008e1c

0800f174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f180:	2300      	movs	r3, #0
 800f182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d056      	beq.n	800f238 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f18a:	4b2e      	ldr	r3, [pc, #184]	; (800f244 <xTaskPriorityDisinherit+0xd0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	693a      	ldr	r2, [r7, #16]
 800f190:	429a      	cmp	r2, r3
 800f192:	d00a      	beq.n	800f1aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	60fb      	str	r3, [r7, #12]
}
 800f1a6:	bf00      	nop
 800f1a8:	e7fe      	b.n	800f1a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10a      	bne.n	800f1c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	60bb      	str	r3, [r7, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1cc:	1e5a      	subs	r2, r3, #1
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d02c      	beq.n	800f238 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d128      	bne.n	800f238 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe f8aa 	bl	800d344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f208:	4b0f      	ldr	r3, [pc, #60]	; (800f248 <xTaskPriorityDisinherit+0xd4>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d903      	bls.n	800f218 <xTaskPriorityDisinherit+0xa4>
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f214:	4a0c      	ldr	r2, [pc, #48]	; (800f248 <xTaskPriorityDisinherit+0xd4>)
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4a09      	ldr	r2, [pc, #36]	; (800f24c <xTaskPriorityDisinherit+0xd8>)
 800f226:	441a      	add	r2, r3
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	3304      	adds	r3, #4
 800f22c:	4619      	mov	r1, r3
 800f22e:	4610      	mov	r0, r2
 800f230:	f7fe f82b 	bl	800d28a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f234:	2301      	movs	r3, #1
 800f236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f238:	697b      	ldr	r3, [r7, #20]
	}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	24008940 	.word	0x24008940
 800f248:	24008e1c 	.word	0x24008e1c
 800f24c:	24008944 	.word	0x24008944

0800f250 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f25e:	2301      	movs	r3, #1
 800f260:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d06a      	beq.n	800f33e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10a      	bne.n	800f286 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	f383 8811 	msr	BASEPRI, r3
 800f278:	f3bf 8f6f 	isb	sy
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	60fb      	str	r3, [r7, #12]
}
 800f282:	bf00      	nop
 800f284:	e7fe      	b.n	800f284 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d902      	bls.n	800f296 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	61fb      	str	r3, [r7, #28]
 800f294:	e002      	b.n	800f29c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a0:	69fa      	ldr	r2, [r7, #28]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d04b      	beq.n	800f33e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d146      	bne.n	800f33e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f2b0:	4b25      	ldr	r3, [pc, #148]	; (800f348 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	69ba      	ldr	r2, [r7, #24]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d10a      	bne.n	800f2d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	60bb      	str	r3, [r7, #8]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	69fa      	ldr	r2, [r7, #28]
 800f2da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	699b      	ldr	r3, [r3, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	db04      	blt.n	800f2ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	6959      	ldr	r1, [r3, #20]
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	4a13      	ldr	r2, [pc, #76]	; (800f34c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f2fe:	4413      	add	r3, r2
 800f300:	4299      	cmp	r1, r3
 800f302:	d11c      	bne.n	800f33e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	3304      	adds	r3, #4
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fe f81b 	bl	800d344 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f312:	4b0f      	ldr	r3, [pc, #60]	; (800f350 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	429a      	cmp	r2, r3
 800f318:	d903      	bls.n	800f322 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31e:	4a0c      	ldr	r2, [pc, #48]	; (800f350 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f326:	4613      	mov	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4a07      	ldr	r2, [pc, #28]	; (800f34c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f330:	441a      	add	r2, r3
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	3304      	adds	r3, #4
 800f336:	4619      	mov	r1, r3
 800f338:	4610      	mov	r0, r2
 800f33a:	f7fd ffa6 	bl	800d28a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f33e:	bf00      	nop
 800f340:	3720      	adds	r7, #32
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	24008940 	.word	0x24008940
 800f34c:	24008944 	.word	0x24008944
 800f350:	24008e1c 	.word	0x24008e1c

0800f354 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f354:	b480      	push	{r7}
 800f356:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f358:	4b07      	ldr	r3, [pc, #28]	; (800f378 <pvTaskIncrementMutexHeldCount+0x24>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d004      	beq.n	800f36a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f360:	4b05      	ldr	r3, [pc, #20]	; (800f378 <pvTaskIncrementMutexHeldCount+0x24>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f366:	3201      	adds	r2, #1
 800f368:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f36a:	4b03      	ldr	r3, [pc, #12]	; (800f378 <pvTaskIncrementMutexHeldCount+0x24>)
 800f36c:	681b      	ldr	r3, [r3, #0]
	}
 800f36e:	4618      	mov	r0, r3
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	24008940 	.word	0x24008940

0800f37c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f386:	4b21      	ldr	r3, [pc, #132]	; (800f40c <prvAddCurrentTaskToDelayedList+0x90>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f38c:	4b20      	ldr	r3, [pc, #128]	; (800f410 <prvAddCurrentTaskToDelayedList+0x94>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3304      	adds	r3, #4
 800f392:	4618      	mov	r0, r3
 800f394:	f7fd ffd6 	bl	800d344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f39e:	d10a      	bne.n	800f3b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d007      	beq.n	800f3b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3a6:	4b1a      	ldr	r3, [pc, #104]	; (800f410 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3304      	adds	r3, #4
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4819      	ldr	r0, [pc, #100]	; (800f414 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3b0:	f7fd ff6b 	bl	800d28a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3b4:	e026      	b.n	800f404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3be:	4b14      	ldr	r3, [pc, #80]	; (800f410 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d209      	bcs.n	800f3e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3ce:	4b12      	ldr	r3, [pc, #72]	; (800f418 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	; (800f410 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	4619      	mov	r1, r3
 800f3da:	4610      	mov	r0, r2
 800f3dc:	f7fd ff79 	bl	800d2d2 <vListInsert>
}
 800f3e0:	e010      	b.n	800f404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3e2:	4b0e      	ldr	r3, [pc, #56]	; (800f41c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	4b0a      	ldr	r3, [pc, #40]	; (800f410 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	f7fd ff6f 	bl	800d2d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3f4:	4b0a      	ldr	r3, [pc, #40]	; (800f420 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d202      	bcs.n	800f404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3fe:	4a08      	ldr	r2, [pc, #32]	; (800f420 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	6013      	str	r3, [r2, #0]
}
 800f404:	bf00      	nop
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	24008e18 	.word	0x24008e18
 800f410:	24008940 	.word	0x24008940
 800f414:	24008e00 	.word	0x24008e00
 800f418:	24008dd0 	.word	0x24008dd0
 800f41c:	24008dcc 	.word	0x24008dcc
 800f420:	24008e34 	.word	0x24008e34

0800f424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b08a      	sub	sp, #40	; 0x28
 800f428:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f42e:	f000 fb07 	bl	800fa40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f432:	4b1c      	ldr	r3, [pc, #112]	; (800f4a4 <xTimerCreateTimerTask+0x80>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d021      	beq.n	800f47e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f442:	1d3a      	adds	r2, r7, #4
 800f444:	f107 0108 	add.w	r1, r7, #8
 800f448:	f107 030c 	add.w	r3, r7, #12
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fd fed5 	bl	800d1fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f452:	6879      	ldr	r1, [r7, #4]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	9202      	str	r2, [sp, #8]
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	2302      	movs	r3, #2
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	2300      	movs	r3, #0
 800f462:	460a      	mov	r2, r1
 800f464:	4910      	ldr	r1, [pc, #64]	; (800f4a8 <xTimerCreateTimerTask+0x84>)
 800f466:	4811      	ldr	r0, [pc, #68]	; (800f4ac <xTimerCreateTimerTask+0x88>)
 800f468:	f7fe ffa4 	bl	800e3b4 <xTaskCreateStatic>
 800f46c:	4603      	mov	r3, r0
 800f46e:	4a10      	ldr	r2, [pc, #64]	; (800f4b0 <xTimerCreateTimerTask+0x8c>)
 800f470:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f472:	4b0f      	ldr	r3, [pc, #60]	; (800f4b0 <xTimerCreateTimerTask+0x8c>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f47a:	2301      	movs	r3, #1
 800f47c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d10a      	bne.n	800f49a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	613b      	str	r3, [r7, #16]
}
 800f496:	bf00      	nop
 800f498:	e7fe      	b.n	800f498 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f49a:	697b      	ldr	r3, [r7, #20]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	24008e70 	.word	0x24008e70
 800f4a8:	08010d68 	.word	0x08010d68
 800f4ac:	0800f5e9 	.word	0x0800f5e9
 800f4b0:	24008e74 	.word	0x24008e74

0800f4b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b08a      	sub	sp, #40	; 0x28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
 800f4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10a      	bne.n	800f4e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	623b      	str	r3, [r7, #32]
}
 800f4de:	bf00      	nop
 800f4e0:	e7fe      	b.n	800f4e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4e2:	4b1a      	ldr	r3, [pc, #104]	; (800f54c <xTimerGenericCommand+0x98>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d02a      	beq.n	800f540 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	2b05      	cmp	r3, #5
 800f4fa:	dc18      	bgt.n	800f52e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4fc:	f7ff fdb4 	bl	800f068 <xTaskGetSchedulerState>
 800f500:	4603      	mov	r3, r0
 800f502:	2b02      	cmp	r3, #2
 800f504:	d109      	bne.n	800f51a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f506:	4b11      	ldr	r3, [pc, #68]	; (800f54c <xTimerGenericCommand+0x98>)
 800f508:	6818      	ldr	r0, [r3, #0]
 800f50a:	f107 0110 	add.w	r1, r7, #16
 800f50e:	2300      	movs	r3, #0
 800f510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f512:	f7fe f8e9 	bl	800d6e8 <xQueueGenericSend>
 800f516:	6278      	str	r0, [r7, #36]	; 0x24
 800f518:	e012      	b.n	800f540 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f51a:	4b0c      	ldr	r3, [pc, #48]	; (800f54c <xTimerGenericCommand+0x98>)
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	f107 0110 	add.w	r1, r7, #16
 800f522:	2300      	movs	r3, #0
 800f524:	2200      	movs	r2, #0
 800f526:	f7fe f8df 	bl	800d6e8 <xQueueGenericSend>
 800f52a:	6278      	str	r0, [r7, #36]	; 0x24
 800f52c:	e008      	b.n	800f540 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f52e:	4b07      	ldr	r3, [pc, #28]	; (800f54c <xTimerGenericCommand+0x98>)
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	f107 0110 	add.w	r1, r7, #16
 800f536:	2300      	movs	r3, #0
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	f7fe f9d3 	bl	800d8e4 <xQueueGenericSendFromISR>
 800f53e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f542:	4618      	mov	r0, r3
 800f544:	3728      	adds	r7, #40	; 0x28
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	24008e70 	.word	0x24008e70

0800f550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b088      	sub	sp, #32
 800f554:	af02      	add	r7, sp, #8
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f55a:	4b22      	ldr	r3, [pc, #136]	; (800f5e4 <prvProcessExpiredTimer+0x94>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	3304      	adds	r3, #4
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd feeb 	bl	800d344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f574:	f003 0304 	and.w	r3, r3, #4
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d022      	beq.n	800f5c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	699a      	ldr	r2, [r3, #24]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	18d1      	adds	r1, r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	6978      	ldr	r0, [r7, #20]
 800f58a:	f000 f8d1 	bl	800f730 <prvInsertTimerInActiveList>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01f      	beq.n	800f5d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f594:	2300      	movs	r3, #0
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2300      	movs	r3, #0
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	2100      	movs	r1, #0
 800f59e:	6978      	ldr	r0, [r7, #20]
 800f5a0:	f7ff ff88 	bl	800f4b4 <xTimerGenericCommand>
 800f5a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d113      	bne.n	800f5d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	60fb      	str	r3, [r7, #12]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5c8:	f023 0301 	bic.w	r3, r3, #1
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	6978      	ldr	r0, [r7, #20]
 800f5da:	4798      	blx	r3
}
 800f5dc:	bf00      	nop
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	24008e68 	.word	0x24008e68

0800f5e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5f0:	f107 0308 	add.w	r3, r7, #8
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f000 f857 	bl	800f6a8 <prvGetNextExpireTime>
 800f5fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	4619      	mov	r1, r3
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f803 	bl	800f60c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f606:	f000 f8d5 	bl	800f7b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f60a:	e7f1      	b.n	800f5f0 <prvTimerTask+0x8>

0800f60c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f616:	f7ff f929 	bl	800e86c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 f866 	bl	800f6f0 <prvSampleTimeNow>
 800f624:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d130      	bne.n	800f68e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10a      	bne.n	800f648 <prvProcessTimerOrBlockTask+0x3c>
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	429a      	cmp	r2, r3
 800f638:	d806      	bhi.n	800f648 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f63a:	f7ff f925 	bl	800e888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f63e:	68f9      	ldr	r1, [r7, #12]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff ff85 	bl	800f550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f646:	e024      	b.n	800f692 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d008      	beq.n	800f660 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <prvProcessTimerOrBlockTask+0x90>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <prvProcessTimerOrBlockTask+0x50>
 800f658:	2301      	movs	r3, #1
 800f65a:	e000      	b.n	800f65e <prvProcessTimerOrBlockTask+0x52>
 800f65c:	2300      	movs	r3, #0
 800f65e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f660:	4b0f      	ldr	r3, [pc, #60]	; (800f6a0 <prvProcessTimerOrBlockTask+0x94>)
 800f662:	6818      	ldr	r0, [r3, #0]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	4619      	mov	r1, r3
 800f66e:	f7fe fe6d 	bl	800e34c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f672:	f7ff f909 	bl	800e888 <xTaskResumeAll>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d10a      	bne.n	800f692 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f67c:	4b09      	ldr	r3, [pc, #36]	; (800f6a4 <prvProcessTimerOrBlockTask+0x98>)
 800f67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	f3bf 8f6f 	isb	sy
}
 800f68c:	e001      	b.n	800f692 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f68e:	f7ff f8fb 	bl	800e888 <xTaskResumeAll>
}
 800f692:	bf00      	nop
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	24008e6c 	.word	0x24008e6c
 800f6a0:	24008e70 	.word	0x24008e70
 800f6a4:	e000ed04 	.word	0xe000ed04

0800f6a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6b0:	4b0e      	ldr	r3, [pc, #56]	; (800f6ec <prvGetNextExpireTime+0x44>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <prvGetNextExpireTime+0x16>
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	e000      	b.n	800f6c0 <prvGetNextExpireTime+0x18>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d105      	bne.n	800f6d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6cc:	4b07      	ldr	r3, [pc, #28]	; (800f6ec <prvGetNextExpireTime+0x44>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	60fb      	str	r3, [r7, #12]
 800f6d6:	e001      	b.n	800f6dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	24008e68 	.word	0x24008e68

0800f6f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6f8:	f7ff f964 	bl	800e9c4 <xTaskGetTickCount>
 800f6fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6fe:	4b0b      	ldr	r3, [pc, #44]	; (800f72c <prvSampleTimeNow+0x3c>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	429a      	cmp	r2, r3
 800f706:	d205      	bcs.n	800f714 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f708:	f000 f936 	bl	800f978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	e002      	b.n	800f71a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f71a:	4a04      	ldr	r2, [pc, #16]	; (800f72c <prvSampleTimeNow+0x3c>)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f720:	68fb      	ldr	r3, [r7, #12]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	24008e78 	.word	0x24008e78

0800f730 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
 800f73c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	429a      	cmp	r2, r3
 800f754:	d812      	bhi.n	800f77c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	429a      	cmp	r2, r3
 800f762:	d302      	bcc.n	800f76a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f764:	2301      	movs	r3, #1
 800f766:	617b      	str	r3, [r7, #20]
 800f768:	e01b      	b.n	800f7a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f76a:	4b10      	ldr	r3, [pc, #64]	; (800f7ac <prvInsertTimerInActiveList+0x7c>)
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	3304      	adds	r3, #4
 800f772:	4619      	mov	r1, r3
 800f774:	4610      	mov	r0, r2
 800f776:	f7fd fdac 	bl	800d2d2 <vListInsert>
 800f77a:	e012      	b.n	800f7a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d206      	bcs.n	800f792 <prvInsertTimerInActiveList+0x62>
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d302      	bcc.n	800f792 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f78c:	2301      	movs	r3, #1
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e007      	b.n	800f7a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f792:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <prvInsertTimerInActiveList+0x80>)
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3304      	adds	r3, #4
 800f79a:	4619      	mov	r1, r3
 800f79c:	4610      	mov	r0, r2
 800f79e:	f7fd fd98 	bl	800d2d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7a2:	697b      	ldr	r3, [r7, #20]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3718      	adds	r7, #24
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	24008e6c 	.word	0x24008e6c
 800f7b0:	24008e68 	.word	0x24008e68

0800f7b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08e      	sub	sp, #56	; 0x38
 800f7b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7ba:	e0ca      	b.n	800f952 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da18      	bge.n	800f7f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10a      	bne.n	800f7e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	61fb      	str	r3, [r7, #28]
}
 800f7e0:	bf00      	nop
 800f7e2:	e7fe      	b.n	800f7e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ea:	6850      	ldr	r0, [r2, #4]
 800f7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ee:	6892      	ldr	r2, [r2, #8]
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f2c0 80aa 	blt.w	800f950 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d004      	beq.n	800f812 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80a:	3304      	adds	r3, #4
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fd fd99 	bl	800d344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f812:	463b      	mov	r3, r7
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff ff6b 	bl	800f6f0 <prvSampleTimeNow>
 800f81a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2b09      	cmp	r3, #9
 800f820:	f200 8097 	bhi.w	800f952 <prvProcessReceivedCommands+0x19e>
 800f824:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <prvProcessReceivedCommands+0x78>)
 800f826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82a:	bf00      	nop
 800f82c:	0800f855 	.word	0x0800f855
 800f830:	0800f855 	.word	0x0800f855
 800f834:	0800f855 	.word	0x0800f855
 800f838:	0800f8c9 	.word	0x0800f8c9
 800f83c:	0800f8dd 	.word	0x0800f8dd
 800f840:	0800f927 	.word	0x0800f927
 800f844:	0800f855 	.word	0x0800f855
 800f848:	0800f855 	.word	0x0800f855
 800f84c:	0800f8c9 	.word	0x0800f8c9
 800f850:	0800f8dd 	.word	0x0800f8dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f85a:	f043 0301 	orr.w	r3, r3, #1
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	699b      	ldr	r3, [r3, #24]
 800f86c:	18d1      	adds	r1, r2, r3
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f874:	f7ff ff5c 	bl	800f730 <prvInsertTimerInActiveList>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d069      	beq.n	800f952 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	6a1b      	ldr	r3, [r3, #32]
 800f882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f88c:	f003 0304 	and.w	r3, r3, #4
 800f890:	2b00      	cmp	r3, #0
 800f892:	d05e      	beq.n	800f952 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	441a      	add	r2, r3
 800f89c:	2300      	movs	r3, #0
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a6:	f7ff fe05 	bl	800f4b4 <xTimerGenericCommand>
 800f8aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d14f      	bne.n	800f952 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b6:	f383 8811 	msr	BASEPRI, r3
 800f8ba:	f3bf 8f6f 	isb	sy
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	61bb      	str	r3, [r7, #24]
}
 800f8c4:	bf00      	nop
 800f8c6:	e7fe      	b.n	800f8c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8ce:	f023 0301 	bic.w	r3, r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f8da:	e03a      	b.n	800f952 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8e2:	f043 0301 	orr.w	r3, r3, #1
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10a      	bne.n	800f912 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	617b      	str	r3, [r7, #20]
}
 800f90e:	bf00      	nop
 800f910:	e7fe      	b.n	800f910 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	699a      	ldr	r2, [r3, #24]
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	18d1      	adds	r1, r2, r3
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f920:	f7ff ff06 	bl	800f730 <prvInsertTimerInActiveList>
					break;
 800f924:	e015      	b.n	800f952 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f92c:	f003 0302 	and.w	r3, r3, #2
 800f930:	2b00      	cmp	r3, #0
 800f932:	d103      	bne.n	800f93c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f936:	f000 fbdb 	bl	80100f0 <vPortFree>
 800f93a:	e00a      	b.n	800f952 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f942:	f023 0301 	bic.w	r3, r3, #1
 800f946:	b2da      	uxtb	r2, r3
 800f948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f94e:	e000      	b.n	800f952 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f952:	4b08      	ldr	r3, [pc, #32]	; (800f974 <prvProcessReceivedCommands+0x1c0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	1d39      	adds	r1, r7, #4
 800f958:	2200      	movs	r2, #0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fe f8ea 	bl	800db34 <xQueueReceive>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	f47f af2a 	bne.w	800f7bc <prvProcessReceivedCommands+0x8>
	}
}
 800f968:	bf00      	nop
 800f96a:	bf00      	nop
 800f96c:	3730      	adds	r7, #48	; 0x30
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	24008e70 	.word	0x24008e70

0800f978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f97e:	e048      	b.n	800fa12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f980:	4b2d      	ldr	r3, [pc, #180]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f98a:	4b2b      	ldr	r3, [pc, #172]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3304      	adds	r3, #4
 800f998:	4618      	mov	r0, r3
 800f99a:	f7fd fcd3 	bl	800d344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9ac:	f003 0304 	and.w	r3, r3, #4
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d02e      	beq.n	800fa12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	699b      	ldr	r3, [r3, #24]
 800f9b8:	693a      	ldr	r2, [r7, #16]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d90e      	bls.n	800f9e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9d2:	4b19      	ldr	r3, [pc, #100]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4610      	mov	r0, r2
 800f9de:	f7fd fc78 	bl	800d2d2 <vListInsert>
 800f9e2:	e016      	b.n	800fa12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	693a      	ldr	r2, [r7, #16]
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f7ff fd60 	bl	800f4b4 <xTimerGenericCommand>
 800f9f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10a      	bne.n	800fa12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	603b      	str	r3, [r7, #0]
}
 800fa0e:	bf00      	nop
 800fa10:	e7fe      	b.n	800fa10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa12:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1b1      	bne.n	800f980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa22:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <prvSwitchTimerLists+0xc4>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a04      	ldr	r2, [pc, #16]	; (800fa38 <prvSwitchTimerLists+0xc0>)
 800fa28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa2a:	4a04      	ldr	r2, [pc, #16]	; (800fa3c <prvSwitchTimerLists+0xc4>)
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	6013      	str	r3, [r2, #0]
}
 800fa30:	bf00      	nop
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	24008e68 	.word	0x24008e68
 800fa3c:	24008e6c 	.word	0x24008e6c

0800fa40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa46:	f000 f965 	bl	800fd14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <prvCheckForValidListAndQueue+0x60>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d120      	bne.n	800fa94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa52:	4814      	ldr	r0, [pc, #80]	; (800faa4 <prvCheckForValidListAndQueue+0x64>)
 800fa54:	f7fd fbec 	bl	800d230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa58:	4813      	ldr	r0, [pc, #76]	; (800faa8 <prvCheckForValidListAndQueue+0x68>)
 800fa5a:	f7fd fbe9 	bl	800d230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa5e:	4b13      	ldr	r3, [pc, #76]	; (800faac <prvCheckForValidListAndQueue+0x6c>)
 800fa60:	4a10      	ldr	r2, [pc, #64]	; (800faa4 <prvCheckForValidListAndQueue+0x64>)
 800fa62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa64:	4b12      	ldr	r3, [pc, #72]	; (800fab0 <prvCheckForValidListAndQueue+0x70>)
 800fa66:	4a10      	ldr	r2, [pc, #64]	; (800faa8 <prvCheckForValidListAndQueue+0x68>)
 800fa68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	4b11      	ldr	r3, [pc, #68]	; (800fab4 <prvCheckForValidListAndQueue+0x74>)
 800fa70:	4a11      	ldr	r2, [pc, #68]	; (800fab8 <prvCheckForValidListAndQueue+0x78>)
 800fa72:	2110      	movs	r1, #16
 800fa74:	200a      	movs	r0, #10
 800fa76:	f7fd fcf7 	bl	800d468 <xQueueGenericCreateStatic>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	4a08      	ldr	r2, [pc, #32]	; (800faa0 <prvCheckForValidListAndQueue+0x60>)
 800fa7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa80:	4b07      	ldr	r3, [pc, #28]	; (800faa0 <prvCheckForValidListAndQueue+0x60>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d005      	beq.n	800fa94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa88:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <prvCheckForValidListAndQueue+0x60>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	490b      	ldr	r1, [pc, #44]	; (800fabc <prvCheckForValidListAndQueue+0x7c>)
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe fc08 	bl	800e2a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa94:	f000 f96e 	bl	800fd74 <vPortExitCritical>
}
 800fa98:	bf00      	nop
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	24008e70 	.word	0x24008e70
 800faa4:	24008e40 	.word	0x24008e40
 800faa8:	24008e54 	.word	0x24008e54
 800faac:	24008e68 	.word	0x24008e68
 800fab0:	24008e6c 	.word	0x24008e6c
 800fab4:	24008f1c 	.word	0x24008f1c
 800fab8:	24008e7c 	.word	0x24008e7c
 800fabc:	08010d70 	.word	0x08010d70

0800fac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	3b04      	subs	r3, #4
 800fad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3b04      	subs	r3, #4
 800fade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	f023 0201 	bic.w	r2, r3, #1
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3b04      	subs	r3, #4
 800faee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faf0:	4a0c      	ldr	r2, [pc, #48]	; (800fb24 <pxPortInitialiseStack+0x64>)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3b14      	subs	r3, #20
 800fafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	3b04      	subs	r3, #4
 800fb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f06f 0202 	mvn.w	r2, #2
 800fb0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3b20      	subs	r3, #32
 800fb14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb16:	68fb      	ldr	r3, [r7, #12]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	0800fb29 	.word	0x0800fb29

0800fb28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb32:	4b12      	ldr	r3, [pc, #72]	; (800fb7c <prvTaskExitError+0x54>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3a:	d00a      	beq.n	800fb52 <prvTaskExitError+0x2a>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	60fb      	str	r3, [r7, #12]
}
 800fb4e:	bf00      	nop
 800fb50:	e7fe      	b.n	800fb50 <prvTaskExitError+0x28>
	__asm volatile
 800fb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb56:	f383 8811 	msr	BASEPRI, r3
 800fb5a:	f3bf 8f6f 	isb	sy
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	60bb      	str	r3, [r7, #8]
}
 800fb64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb66:	bf00      	nop
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d0fc      	beq.n	800fb68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb6e:	bf00      	nop
 800fb70:	bf00      	nop
 800fb72:	3714      	adds	r7, #20
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	24008038 	.word	0x24008038

0800fb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb80:	4b07      	ldr	r3, [pc, #28]	; (800fba0 <pxCurrentTCBConst2>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	6808      	ldr	r0, [r1, #0]
 800fb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	f380 8809 	msr	PSP, r0
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8811 	msr	BASEPRI, r0
 800fb9a:	4770      	bx	lr
 800fb9c:	f3af 8000 	nop.w

0800fba0 <pxCurrentTCBConst2>:
 800fba0:	24008940 	.word	0x24008940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop

0800fba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fba8:	4808      	ldr	r0, [pc, #32]	; (800fbcc <prvPortStartFirstTask+0x24>)
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	6800      	ldr	r0, [r0, #0]
 800fbae:	f380 8808 	msr	MSP, r0
 800fbb2:	f04f 0000 	mov.w	r0, #0
 800fbb6:	f380 8814 	msr	CONTROL, r0
 800fbba:	b662      	cpsie	i
 800fbbc:	b661      	cpsie	f
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	df00      	svc	0
 800fbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbca:	bf00      	nop
 800fbcc:	e000ed08 	.word	0xe000ed08

0800fbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbd6:	4b46      	ldr	r3, [pc, #280]	; (800fcf0 <xPortStartScheduler+0x120>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a46      	ldr	r2, [pc, #280]	; (800fcf4 <xPortStartScheduler+0x124>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d10a      	bne.n	800fbf6 <xPortStartScheduler+0x26>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	613b      	str	r3, [r7, #16]
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbf6:	4b3e      	ldr	r3, [pc, #248]	; (800fcf0 <xPortStartScheduler+0x120>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a3f      	ldr	r2, [pc, #252]	; (800fcf8 <xPortStartScheduler+0x128>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d10a      	bne.n	800fc16 <xPortStartScheduler+0x46>
	__asm volatile
 800fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	60fb      	str	r3, [r7, #12]
}
 800fc12:	bf00      	nop
 800fc14:	e7fe      	b.n	800fc14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc16:	4b39      	ldr	r3, [pc, #228]	; (800fcfc <xPortStartScheduler+0x12c>)
 800fc18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	22ff      	movs	r2, #255	; 0xff
 800fc26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	4b31      	ldr	r3, [pc, #196]	; (800fd00 <xPortStartScheduler+0x130>)
 800fc3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc3e:	4b31      	ldr	r3, [pc, #196]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc40:	2207      	movs	r2, #7
 800fc42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc44:	e009      	b.n	800fc5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fc46:	4b2f      	ldr	r3, [pc, #188]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	4a2d      	ldr	r2, [pc, #180]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc50:	78fb      	ldrb	r3, [r7, #3]
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	005b      	lsls	r3, r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc5a:	78fb      	ldrb	r3, [r7, #3]
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc62:	2b80      	cmp	r3, #128	; 0x80
 800fc64:	d0ef      	beq.n	800fc46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc66:	4b27      	ldr	r3, [pc, #156]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f1c3 0307 	rsb	r3, r3, #7
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d00a      	beq.n	800fc88 <xPortStartScheduler+0xb8>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	60bb      	str	r3, [r7, #8]
}
 800fc84:	bf00      	nop
 800fc86:	e7fe      	b.n	800fc86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc88:	4b1e      	ldr	r3, [pc, #120]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	021b      	lsls	r3, r3, #8
 800fc8e:	4a1d      	ldr	r2, [pc, #116]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc92:	4b1c      	ldr	r3, [pc, #112]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc9a:	4a1a      	ldr	r2, [pc, #104]	; (800fd04 <xPortStartScheduler+0x134>)
 800fc9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fca6:	4b18      	ldr	r3, [pc, #96]	; (800fd08 <xPortStartScheduler+0x138>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a17      	ldr	r2, [pc, #92]	; (800fd08 <xPortStartScheduler+0x138>)
 800fcac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fcb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcb2:	4b15      	ldr	r3, [pc, #84]	; (800fd08 <xPortStartScheduler+0x138>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a14      	ldr	r2, [pc, #80]	; (800fd08 <xPortStartScheduler+0x138>)
 800fcb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fcbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcbe:	f000 f8dd 	bl	800fe7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcc2:	4b12      	ldr	r3, [pc, #72]	; (800fd0c <xPortStartScheduler+0x13c>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcc8:	f000 f8fc 	bl	800fec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fccc:	4b10      	ldr	r3, [pc, #64]	; (800fd10 <xPortStartScheduler+0x140>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a0f      	ldr	r2, [pc, #60]	; (800fd10 <xPortStartScheduler+0x140>)
 800fcd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fcd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcd8:	f7ff ff66 	bl	800fba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcdc:	f7fe ff4e 	bl	800eb7c <vTaskSwitchContext>
	prvTaskExitError();
 800fce0:	f7ff ff22 	bl	800fb28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	e000ed00 	.word	0xe000ed00
 800fcf4:	410fc271 	.word	0x410fc271
 800fcf8:	410fc270 	.word	0x410fc270
 800fcfc:	e000e400 	.word	0xe000e400
 800fd00:	24008f6c 	.word	0x24008f6c
 800fd04:	24008f70 	.word	0x24008f70
 800fd08:	e000ed20 	.word	0xe000ed20
 800fd0c:	24008038 	.word	0x24008038
 800fd10:	e000ef34 	.word	0xe000ef34

0800fd14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	607b      	str	r3, [r7, #4]
}
 800fd2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd2e:	4b0f      	ldr	r3, [pc, #60]	; (800fd6c <vPortEnterCritical+0x58>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	3301      	adds	r3, #1
 800fd34:	4a0d      	ldr	r2, [pc, #52]	; (800fd6c <vPortEnterCritical+0x58>)
 800fd36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd38:	4b0c      	ldr	r3, [pc, #48]	; (800fd6c <vPortEnterCritical+0x58>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d10f      	bne.n	800fd60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd40:	4b0b      	ldr	r3, [pc, #44]	; (800fd70 <vPortEnterCritical+0x5c>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <vPortEnterCritical+0x4c>
	__asm volatile
 800fd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4e:	f383 8811 	msr	BASEPRI, r3
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	f3bf 8f4f 	dsb	sy
 800fd5a:	603b      	str	r3, [r7, #0]
}
 800fd5c:	bf00      	nop
 800fd5e:	e7fe      	b.n	800fd5e <vPortEnterCritical+0x4a>
	}
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	24008038 	.word	0x24008038
 800fd70:	e000ed04 	.word	0xe000ed04

0800fd74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd7a:	4b12      	ldr	r3, [pc, #72]	; (800fdc4 <vPortExitCritical+0x50>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d10a      	bne.n	800fd98 <vPortExitCritical+0x24>
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	607b      	str	r3, [r7, #4]
}
 800fd94:	bf00      	nop
 800fd96:	e7fe      	b.n	800fd96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd98:	4b0a      	ldr	r3, [pc, #40]	; (800fdc4 <vPortExitCritical+0x50>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	4a09      	ldr	r2, [pc, #36]	; (800fdc4 <vPortExitCritical+0x50>)
 800fda0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fda2:	4b08      	ldr	r3, [pc, #32]	; (800fdc4 <vPortExitCritical+0x50>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d105      	bne.n	800fdb6 <vPortExitCritical+0x42>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	f383 8811 	msr	BASEPRI, r3
}
 800fdb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdb6:	bf00      	nop
 800fdb8:	370c      	adds	r7, #12
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	24008038 	.word	0x24008038
	...

0800fdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdd0:	f3ef 8009 	mrs	r0, PSP
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	4b15      	ldr	r3, [pc, #84]	; (800fe30 <pxCurrentTCBConst>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	f01e 0f10 	tst.w	lr, #16
 800fde0:	bf08      	it	eq
 800fde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	6010      	str	r0, [r2, #0]
 800fdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fdf4:	f380 8811 	msr	BASEPRI, r0
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f7fe febc 	bl	800eb7c <vTaskSwitchContext>
 800fe04:	f04f 0000 	mov.w	r0, #0
 800fe08:	f380 8811 	msr	BASEPRI, r0
 800fe0c:	bc09      	pop	{r0, r3}
 800fe0e:	6819      	ldr	r1, [r3, #0]
 800fe10:	6808      	ldr	r0, [r1, #0]
 800fe12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe16:	f01e 0f10 	tst.w	lr, #16
 800fe1a:	bf08      	it	eq
 800fe1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe20:	f380 8809 	msr	PSP, r0
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	f3af 8000 	nop.w

0800fe30 <pxCurrentTCBConst>:
 800fe30:	24008940 	.word	0x24008940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop

0800fe38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe52:	f7fe fdd9 	bl	800ea08 <xTaskIncrementTick>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe5c:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <xPortSysTickHandler+0x40>)
 800fe5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	2300      	movs	r3, #0
 800fe66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	f383 8811 	msr	BASEPRI, r3
}
 800fe6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	e000ed04 	.word	0xe000ed04

0800fe7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe80:	4b0b      	ldr	r3, [pc, #44]	; (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe86:	4b0b      	ldr	r3, [pc, #44]	; (800feb4 <vPortSetupTimerInterrupt+0x38>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe8c:	4b0a      	ldr	r3, [pc, #40]	; (800feb8 <vPortSetupTimerInterrupt+0x3c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a0a      	ldr	r2, [pc, #40]	; (800febc <vPortSetupTimerInterrupt+0x40>)
 800fe92:	fba2 2303 	umull	r2, r3, r2, r3
 800fe96:	099b      	lsrs	r3, r3, #6
 800fe98:	4a09      	ldr	r2, [pc, #36]	; (800fec0 <vPortSetupTimerInterrupt+0x44>)
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe9e:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fea0:	2207      	movs	r2, #7
 800fea2:	601a      	str	r2, [r3, #0]
}
 800fea4:	bf00      	nop
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	e000e010 	.word	0xe000e010
 800feb4:	e000e018 	.word	0xe000e018
 800feb8:	24008028 	.word	0x24008028
 800febc:	10624dd3 	.word	0x10624dd3
 800fec0:	e000e014 	.word	0xe000e014

0800fec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fed4 <vPortEnableVFP+0x10>
 800fec8:	6801      	ldr	r1, [r0, #0]
 800feca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fece:	6001      	str	r1, [r0, #0]
 800fed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fed2:	bf00      	nop
 800fed4:	e000ed88 	.word	0xe000ed88

0800fed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fede:	f3ef 8305 	mrs	r3, IPSR
 800fee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b0f      	cmp	r3, #15
 800fee8:	d914      	bls.n	800ff14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feea:	4a17      	ldr	r2, [pc, #92]	; (800ff48 <vPortValidateInterruptPriority+0x70>)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fef4:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <vPortValidateInterruptPriority+0x74>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	7afa      	ldrb	r2, [r7, #11]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d20a      	bcs.n	800ff14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	607b      	str	r3, [r7, #4]
}
 800ff10:	bf00      	nop
 800ff12:	e7fe      	b.n	800ff12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff14:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <vPortValidateInterruptPriority+0x78>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <vPortValidateInterruptPriority+0x7c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d90a      	bls.n	800ff3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ff24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	603b      	str	r3, [r7, #0]
}
 800ff36:	bf00      	nop
 800ff38:	e7fe      	b.n	800ff38 <vPortValidateInterruptPriority+0x60>
	}
 800ff3a:	bf00      	nop
 800ff3c:	3714      	adds	r7, #20
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	e000e3f0 	.word	0xe000e3f0
 800ff4c:	24008f6c 	.word	0x24008f6c
 800ff50:	e000ed0c 	.word	0xe000ed0c
 800ff54:	24008f70 	.word	0x24008f70

0800ff58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08a      	sub	sp, #40	; 0x28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff64:	f7fe fc82 	bl	800e86c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff68:	4b5b      	ldr	r3, [pc, #364]	; (80100d8 <pvPortMalloc+0x180>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff70:	f000 f920 	bl	80101b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff74:	4b59      	ldr	r3, [pc, #356]	; (80100dc <pvPortMalloc+0x184>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f040 8093 	bne.w	80100a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d01d      	beq.n	800ffc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ff88:	2208      	movs	r2, #8
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f003 0307 	and.w	r3, r3, #7
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d014      	beq.n	800ffc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f023 0307 	bic.w	r3, r3, #7
 800ffa0:	3308      	adds	r3, #8
 800ffa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f003 0307 	and.w	r3, r3, #7
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00a      	beq.n	800ffc4 <pvPortMalloc+0x6c>
	__asm volatile
 800ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	617b      	str	r3, [r7, #20]
}
 800ffc0:	bf00      	nop
 800ffc2:	e7fe      	b.n	800ffc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d06e      	beq.n	80100a8 <pvPortMalloc+0x150>
 800ffca:	4b45      	ldr	r3, [pc, #276]	; (80100e0 <pvPortMalloc+0x188>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d869      	bhi.n	80100a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffd4:	4b43      	ldr	r3, [pc, #268]	; (80100e4 <pvPortMalloc+0x18c>)
 800ffd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffd8:	4b42      	ldr	r3, [pc, #264]	; (80100e4 <pvPortMalloc+0x18c>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffde:	e004      	b.n	800ffea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d903      	bls.n	800fffc <pvPortMalloc+0xa4>
 800fff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1f1      	bne.n	800ffe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fffc:	4b36      	ldr	r3, [pc, #216]	; (80100d8 <pvPortMalloc+0x180>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010002:	429a      	cmp	r2, r3
 8010004:	d050      	beq.n	80100a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010006:	6a3b      	ldr	r3, [r7, #32]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2208      	movs	r2, #8
 801000c:	4413      	add	r3, r2
 801000e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	6a3b      	ldr	r3, [r7, #32]
 8010016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	1ad2      	subs	r2, r2, r3
 8010020:	2308      	movs	r3, #8
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	429a      	cmp	r2, r3
 8010026:	d91f      	bls.n	8010068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4413      	add	r3, r2
 801002e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	f003 0307 	and.w	r3, r3, #7
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00a      	beq.n	8010050 <pvPortMalloc+0xf8>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	613b      	str	r3, [r7, #16]
}
 801004c:	bf00      	nop
 801004e:	e7fe      	b.n	801004e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010052:	685a      	ldr	r2, [r3, #4]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	1ad2      	subs	r2, r2, r3
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010062:	69b8      	ldr	r0, [r7, #24]
 8010064:	f000 f908 	bl	8010278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010068:	4b1d      	ldr	r3, [pc, #116]	; (80100e0 <pvPortMalloc+0x188>)
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	4a1b      	ldr	r2, [pc, #108]	; (80100e0 <pvPortMalloc+0x188>)
 8010074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010076:	4b1a      	ldr	r3, [pc, #104]	; (80100e0 <pvPortMalloc+0x188>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	4b1b      	ldr	r3, [pc, #108]	; (80100e8 <pvPortMalloc+0x190>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	d203      	bcs.n	801008a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010082:	4b17      	ldr	r3, [pc, #92]	; (80100e0 <pvPortMalloc+0x188>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a18      	ldr	r2, [pc, #96]	; (80100e8 <pvPortMalloc+0x190>)
 8010088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	4b13      	ldr	r3, [pc, #76]	; (80100dc <pvPortMalloc+0x184>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	431a      	orrs	r2, r3
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801009e:	4b13      	ldr	r3, [pc, #76]	; (80100ec <pvPortMalloc+0x194>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3301      	adds	r3, #1
 80100a4:	4a11      	ldr	r2, [pc, #68]	; (80100ec <pvPortMalloc+0x194>)
 80100a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100a8:	f7fe fbee 	bl	800e888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	f003 0307 	and.w	r3, r3, #7
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00a      	beq.n	80100cc <pvPortMalloc+0x174>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
}
 80100c8:	bf00      	nop
 80100ca:	e7fe      	b.n	80100ca <pvPortMalloc+0x172>
	return pvReturn;
 80100cc:	69fb      	ldr	r3, [r7, #28]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3728      	adds	r7, #40	; 0x28
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	2400cb7c 	.word	0x2400cb7c
 80100dc:	2400cb90 	.word	0x2400cb90
 80100e0:	2400cb80 	.word	0x2400cb80
 80100e4:	2400cb74 	.word	0x2400cb74
 80100e8:	2400cb84 	.word	0x2400cb84
 80100ec:	2400cb88 	.word	0x2400cb88

080100f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d04d      	beq.n	801019e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010102:	2308      	movs	r3, #8
 8010104:	425b      	negs	r3, r3
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	4413      	add	r3, r2
 801010a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	685a      	ldr	r2, [r3, #4]
 8010114:	4b24      	ldr	r3, [pc, #144]	; (80101a8 <vPortFree+0xb8>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4013      	ands	r3, r2
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10a      	bne.n	8010134 <vPortFree+0x44>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	60fb      	str	r3, [r7, #12]
}
 8010130:	bf00      	nop
 8010132:	e7fe      	b.n	8010132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00a      	beq.n	8010152 <vPortFree+0x62>
	__asm volatile
 801013c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010140:	f383 8811 	msr	BASEPRI, r3
 8010144:	f3bf 8f6f 	isb	sy
 8010148:	f3bf 8f4f 	dsb	sy
 801014c:	60bb      	str	r3, [r7, #8]
}
 801014e:	bf00      	nop
 8010150:	e7fe      	b.n	8010150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <vPortFree+0xb8>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4013      	ands	r3, r2
 801015c:	2b00      	cmp	r3, #0
 801015e:	d01e      	beq.n	801019e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d11a      	bne.n	801019e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	4b0e      	ldr	r3, [pc, #56]	; (80101a8 <vPortFree+0xb8>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	43db      	mvns	r3, r3
 8010172:	401a      	ands	r2, r3
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010178:	f7fe fb78 	bl	800e86c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	685a      	ldr	r2, [r3, #4]
 8010180:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <vPortFree+0xbc>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4413      	add	r3, r2
 8010186:	4a09      	ldr	r2, [pc, #36]	; (80101ac <vPortFree+0xbc>)
 8010188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801018a:	6938      	ldr	r0, [r7, #16]
 801018c:	f000 f874 	bl	8010278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010190:	4b07      	ldr	r3, [pc, #28]	; (80101b0 <vPortFree+0xc0>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3301      	adds	r3, #1
 8010196:	4a06      	ldr	r2, [pc, #24]	; (80101b0 <vPortFree+0xc0>)
 8010198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801019a:	f7fe fb75 	bl	800e888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801019e:	bf00      	nop
 80101a0:	3718      	adds	r7, #24
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	2400cb90 	.word	0x2400cb90
 80101ac:	2400cb80 	.word	0x2400cb80
 80101b0:	2400cb8c 	.word	0x2400cb8c

080101b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80101be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101c0:	4b27      	ldr	r3, [pc, #156]	; (8010260 <prvHeapInit+0xac>)
 80101c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00c      	beq.n	80101e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3307      	adds	r3, #7
 80101d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f023 0307 	bic.w	r3, r3, #7
 80101da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	4a1f      	ldr	r2, [pc, #124]	; (8010260 <prvHeapInit+0xac>)
 80101e4:	4413      	add	r3, r2
 80101e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101ec:	4a1d      	ldr	r2, [pc, #116]	; (8010264 <prvHeapInit+0xb0>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101f2:	4b1c      	ldr	r3, [pc, #112]	; (8010264 <prvHeapInit+0xb0>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	4413      	add	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010200:	2208      	movs	r2, #8
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	1a9b      	subs	r3, r3, r2
 8010206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f023 0307 	bic.w	r3, r3, #7
 801020e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	4a15      	ldr	r2, [pc, #84]	; (8010268 <prvHeapInit+0xb4>)
 8010214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010216:	4b14      	ldr	r3, [pc, #80]	; (8010268 <prvHeapInit+0xb4>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2200      	movs	r2, #0
 801021c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801021e:	4b12      	ldr	r3, [pc, #72]	; (8010268 <prvHeapInit+0xb4>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2200      	movs	r2, #0
 8010224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	1ad2      	subs	r2, r2, r3
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010234:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <prvHeapInit+0xb4>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	4a0a      	ldr	r2, [pc, #40]	; (801026c <prvHeapInit+0xb8>)
 8010242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	4a09      	ldr	r2, [pc, #36]	; (8010270 <prvHeapInit+0xbc>)
 801024a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801024c:	4b09      	ldr	r3, [pc, #36]	; (8010274 <prvHeapInit+0xc0>)
 801024e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010252:	601a      	str	r2, [r3, #0]
}
 8010254:	bf00      	nop
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr
 8010260:	24008f74 	.word	0x24008f74
 8010264:	2400cb74 	.word	0x2400cb74
 8010268:	2400cb7c 	.word	0x2400cb7c
 801026c:	2400cb84 	.word	0x2400cb84
 8010270:	2400cb80 	.word	0x2400cb80
 8010274:	2400cb90 	.word	0x2400cb90

08010278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010278:	b480      	push	{r7}
 801027a:	b085      	sub	sp, #20
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010280:	4b28      	ldr	r3, [pc, #160]	; (8010324 <prvInsertBlockIntoFreeList+0xac>)
 8010282:	60fb      	str	r3, [r7, #12]
 8010284:	e002      	b.n	801028c <prvInsertBlockIntoFreeList+0x14>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	60fb      	str	r3, [r7, #12]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	429a      	cmp	r2, r3
 8010294:	d8f7      	bhi.n	8010286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	4413      	add	r3, r2
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d108      	bne.n	80102ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	685a      	ldr	r2, [r3, #4]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	441a      	add	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	68ba      	ldr	r2, [r7, #8]
 80102c4:	441a      	add	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d118      	bne.n	8010300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	4b15      	ldr	r3, [pc, #84]	; (8010328 <prvInsertBlockIntoFreeList+0xb0>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d00d      	beq.n	80102f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	441a      	add	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	601a      	str	r2, [r3, #0]
 80102f4:	e008      	b.n	8010308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102f6:	4b0c      	ldr	r3, [pc, #48]	; (8010328 <prvInsertBlockIntoFreeList+0xb0>)
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	601a      	str	r2, [r3, #0]
 80102fe:	e003      	b.n	8010308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	429a      	cmp	r2, r3
 801030e:	d002      	beq.n	8010316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010316:	bf00      	nop
 8010318:	3714      	adds	r7, #20
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	2400cb74 	.word	0x2400cb74
 8010328:	2400cb7c 	.word	0x2400cb7c

0801032c <__errno>:
 801032c:	4b01      	ldr	r3, [pc, #4]	; (8010334 <__errno+0x8>)
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	2400803c 	.word	0x2400803c

08010338 <__libc_init_array>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	4d0d      	ldr	r5, [pc, #52]	; (8010370 <__libc_init_array+0x38>)
 801033c:	4c0d      	ldr	r4, [pc, #52]	; (8010374 <__libc_init_array+0x3c>)
 801033e:	1b64      	subs	r4, r4, r5
 8010340:	10a4      	asrs	r4, r4, #2
 8010342:	2600      	movs	r6, #0
 8010344:	42a6      	cmp	r6, r4
 8010346:	d109      	bne.n	801035c <__libc_init_array+0x24>
 8010348:	4d0b      	ldr	r5, [pc, #44]	; (8010378 <__libc_init_array+0x40>)
 801034a:	4c0c      	ldr	r4, [pc, #48]	; (801037c <__libc_init_array+0x44>)
 801034c:	f000 fcb8 	bl	8010cc0 <_init>
 8010350:	1b64      	subs	r4, r4, r5
 8010352:	10a4      	asrs	r4, r4, #2
 8010354:	2600      	movs	r6, #0
 8010356:	42a6      	cmp	r6, r4
 8010358:	d105      	bne.n	8010366 <__libc_init_array+0x2e>
 801035a:	bd70      	pop	{r4, r5, r6, pc}
 801035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010360:	4798      	blx	r3
 8010362:	3601      	adds	r6, #1
 8010364:	e7ee      	b.n	8010344 <__libc_init_array+0xc>
 8010366:	f855 3b04 	ldr.w	r3, [r5], #4
 801036a:	4798      	blx	r3
 801036c:	3601      	adds	r6, #1
 801036e:	e7f2      	b.n	8010356 <__libc_init_array+0x1e>
 8010370:	08010f24 	.word	0x08010f24
 8010374:	08010f24 	.word	0x08010f24
 8010378:	08010f24 	.word	0x08010f24
 801037c:	08010f28 	.word	0x08010f28

08010380 <__retarget_lock_acquire_recursive>:
 8010380:	4770      	bx	lr

08010382 <__retarget_lock_release_recursive>:
 8010382:	4770      	bx	lr

08010384 <memcpy>:
 8010384:	440a      	add	r2, r1
 8010386:	4291      	cmp	r1, r2
 8010388:	f100 33ff 	add.w	r3, r0, #4294967295
 801038c:	d100      	bne.n	8010390 <memcpy+0xc>
 801038e:	4770      	bx	lr
 8010390:	b510      	push	{r4, lr}
 8010392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010396:	f803 4f01 	strb.w	r4, [r3, #1]!
 801039a:	4291      	cmp	r1, r2
 801039c:	d1f9      	bne.n	8010392 <memcpy+0xe>
 801039e:	bd10      	pop	{r4, pc}

080103a0 <memset>:
 80103a0:	4402      	add	r2, r0
 80103a2:	4603      	mov	r3, r0
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d100      	bne.n	80103aa <memset+0xa>
 80103a8:	4770      	bx	lr
 80103aa:	f803 1b01 	strb.w	r1, [r3], #1
 80103ae:	e7f9      	b.n	80103a4 <memset+0x4>

080103b0 <_malloc_r>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	1ccd      	adds	r5, r1, #3
 80103b4:	f025 0503 	bic.w	r5, r5, #3
 80103b8:	3508      	adds	r5, #8
 80103ba:	2d0c      	cmp	r5, #12
 80103bc:	bf38      	it	cc
 80103be:	250c      	movcc	r5, #12
 80103c0:	2d00      	cmp	r5, #0
 80103c2:	4606      	mov	r6, r0
 80103c4:	db01      	blt.n	80103ca <_malloc_r+0x1a>
 80103c6:	42a9      	cmp	r1, r5
 80103c8:	d903      	bls.n	80103d2 <_malloc_r+0x22>
 80103ca:	230c      	movs	r3, #12
 80103cc:	6033      	str	r3, [r6, #0]
 80103ce:	2000      	movs	r0, #0
 80103d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103d2:	f000 f8e1 	bl	8010598 <__malloc_lock>
 80103d6:	4921      	ldr	r1, [pc, #132]	; (801045c <_malloc_r+0xac>)
 80103d8:	680a      	ldr	r2, [r1, #0]
 80103da:	4614      	mov	r4, r2
 80103dc:	b99c      	cbnz	r4, 8010406 <_malloc_r+0x56>
 80103de:	4f20      	ldr	r7, [pc, #128]	; (8010460 <_malloc_r+0xb0>)
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	b923      	cbnz	r3, 80103ee <_malloc_r+0x3e>
 80103e4:	4621      	mov	r1, r4
 80103e6:	4630      	mov	r0, r6
 80103e8:	f000 f8a6 	bl	8010538 <_sbrk_r>
 80103ec:	6038      	str	r0, [r7, #0]
 80103ee:	4629      	mov	r1, r5
 80103f0:	4630      	mov	r0, r6
 80103f2:	f000 f8a1 	bl	8010538 <_sbrk_r>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d123      	bne.n	8010442 <_malloc_r+0x92>
 80103fa:	230c      	movs	r3, #12
 80103fc:	6033      	str	r3, [r6, #0]
 80103fe:	4630      	mov	r0, r6
 8010400:	f000 f8d0 	bl	80105a4 <__malloc_unlock>
 8010404:	e7e3      	b.n	80103ce <_malloc_r+0x1e>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	1b5b      	subs	r3, r3, r5
 801040a:	d417      	bmi.n	801043c <_malloc_r+0x8c>
 801040c:	2b0b      	cmp	r3, #11
 801040e:	d903      	bls.n	8010418 <_malloc_r+0x68>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	441c      	add	r4, r3
 8010414:	6025      	str	r5, [r4, #0]
 8010416:	e004      	b.n	8010422 <_malloc_r+0x72>
 8010418:	6863      	ldr	r3, [r4, #4]
 801041a:	42a2      	cmp	r2, r4
 801041c:	bf0c      	ite	eq
 801041e:	600b      	streq	r3, [r1, #0]
 8010420:	6053      	strne	r3, [r2, #4]
 8010422:	4630      	mov	r0, r6
 8010424:	f000 f8be 	bl	80105a4 <__malloc_unlock>
 8010428:	f104 000b 	add.w	r0, r4, #11
 801042c:	1d23      	adds	r3, r4, #4
 801042e:	f020 0007 	bic.w	r0, r0, #7
 8010432:	1ac2      	subs	r2, r0, r3
 8010434:	d0cc      	beq.n	80103d0 <_malloc_r+0x20>
 8010436:	1a1b      	subs	r3, r3, r0
 8010438:	50a3      	str	r3, [r4, r2]
 801043a:	e7c9      	b.n	80103d0 <_malloc_r+0x20>
 801043c:	4622      	mov	r2, r4
 801043e:	6864      	ldr	r4, [r4, #4]
 8010440:	e7cc      	b.n	80103dc <_malloc_r+0x2c>
 8010442:	1cc4      	adds	r4, r0, #3
 8010444:	f024 0403 	bic.w	r4, r4, #3
 8010448:	42a0      	cmp	r0, r4
 801044a:	d0e3      	beq.n	8010414 <_malloc_r+0x64>
 801044c:	1a21      	subs	r1, r4, r0
 801044e:	4630      	mov	r0, r6
 8010450:	f000 f872 	bl	8010538 <_sbrk_r>
 8010454:	3001      	adds	r0, #1
 8010456:	d1dd      	bne.n	8010414 <_malloc_r+0x64>
 8010458:	e7cf      	b.n	80103fa <_malloc_r+0x4a>
 801045a:	bf00      	nop
 801045c:	2400cb94 	.word	0x2400cb94
 8010460:	2400cb98 	.word	0x2400cb98

08010464 <cleanup_glue>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	460c      	mov	r4, r1
 8010468:	6809      	ldr	r1, [r1, #0]
 801046a:	4605      	mov	r5, r0
 801046c:	b109      	cbz	r1, 8010472 <cleanup_glue+0xe>
 801046e:	f7ff fff9 	bl	8010464 <cleanup_glue>
 8010472:	4621      	mov	r1, r4
 8010474:	4628      	mov	r0, r5
 8010476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801047a:	f000 b899 	b.w	80105b0 <_free_r>
	...

08010480 <_reclaim_reent>:
 8010480:	4b2c      	ldr	r3, [pc, #176]	; (8010534 <_reclaim_reent+0xb4>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4283      	cmp	r3, r0
 8010486:	b570      	push	{r4, r5, r6, lr}
 8010488:	4604      	mov	r4, r0
 801048a:	d051      	beq.n	8010530 <_reclaim_reent+0xb0>
 801048c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801048e:	b143      	cbz	r3, 80104a2 <_reclaim_reent+0x22>
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d14a      	bne.n	801052c <_reclaim_reent+0xac>
 8010496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010498:	6819      	ldr	r1, [r3, #0]
 801049a:	b111      	cbz	r1, 80104a2 <_reclaim_reent+0x22>
 801049c:	4620      	mov	r0, r4
 801049e:	f000 f887 	bl	80105b0 <_free_r>
 80104a2:	6961      	ldr	r1, [r4, #20]
 80104a4:	b111      	cbz	r1, 80104ac <_reclaim_reent+0x2c>
 80104a6:	4620      	mov	r0, r4
 80104a8:	f000 f882 	bl	80105b0 <_free_r>
 80104ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80104ae:	b111      	cbz	r1, 80104b6 <_reclaim_reent+0x36>
 80104b0:	4620      	mov	r0, r4
 80104b2:	f000 f87d 	bl	80105b0 <_free_r>
 80104b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80104b8:	b111      	cbz	r1, 80104c0 <_reclaim_reent+0x40>
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 f878 	bl	80105b0 <_free_r>
 80104c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80104c2:	b111      	cbz	r1, 80104ca <_reclaim_reent+0x4a>
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 f873 	bl	80105b0 <_free_r>
 80104ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80104cc:	b111      	cbz	r1, 80104d4 <_reclaim_reent+0x54>
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 f86e 	bl	80105b0 <_free_r>
 80104d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80104d6:	b111      	cbz	r1, 80104de <_reclaim_reent+0x5e>
 80104d8:	4620      	mov	r0, r4
 80104da:	f000 f869 	bl	80105b0 <_free_r>
 80104de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80104e0:	b111      	cbz	r1, 80104e8 <_reclaim_reent+0x68>
 80104e2:	4620      	mov	r0, r4
 80104e4:	f000 f864 	bl	80105b0 <_free_r>
 80104e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ea:	b111      	cbz	r1, 80104f2 <_reclaim_reent+0x72>
 80104ec:	4620      	mov	r0, r4
 80104ee:	f000 f85f 	bl	80105b0 <_free_r>
 80104f2:	69a3      	ldr	r3, [r4, #24]
 80104f4:	b1e3      	cbz	r3, 8010530 <_reclaim_reent+0xb0>
 80104f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80104f8:	4620      	mov	r0, r4
 80104fa:	4798      	blx	r3
 80104fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80104fe:	b1b9      	cbz	r1, 8010530 <_reclaim_reent+0xb0>
 8010500:	4620      	mov	r0, r4
 8010502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010506:	f7ff bfad 	b.w	8010464 <cleanup_glue>
 801050a:	5949      	ldr	r1, [r1, r5]
 801050c:	b941      	cbnz	r1, 8010520 <_reclaim_reent+0xa0>
 801050e:	3504      	adds	r5, #4
 8010510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010512:	2d80      	cmp	r5, #128	; 0x80
 8010514:	68d9      	ldr	r1, [r3, #12]
 8010516:	d1f8      	bne.n	801050a <_reclaim_reent+0x8a>
 8010518:	4620      	mov	r0, r4
 801051a:	f000 f849 	bl	80105b0 <_free_r>
 801051e:	e7ba      	b.n	8010496 <_reclaim_reent+0x16>
 8010520:	680e      	ldr	r6, [r1, #0]
 8010522:	4620      	mov	r0, r4
 8010524:	f000 f844 	bl	80105b0 <_free_r>
 8010528:	4631      	mov	r1, r6
 801052a:	e7ef      	b.n	801050c <_reclaim_reent+0x8c>
 801052c:	2500      	movs	r5, #0
 801052e:	e7ef      	b.n	8010510 <_reclaim_reent+0x90>
 8010530:	bd70      	pop	{r4, r5, r6, pc}
 8010532:	bf00      	nop
 8010534:	2400803c 	.word	0x2400803c

08010538 <_sbrk_r>:
 8010538:	b538      	push	{r3, r4, r5, lr}
 801053a:	4d06      	ldr	r5, [pc, #24]	; (8010554 <_sbrk_r+0x1c>)
 801053c:	2300      	movs	r3, #0
 801053e:	4604      	mov	r4, r0
 8010540:	4608      	mov	r0, r1
 8010542:	602b      	str	r3, [r5, #0]
 8010544:	f7f0 ff6a 	bl	800141c <_sbrk>
 8010548:	1c43      	adds	r3, r0, #1
 801054a:	d102      	bne.n	8010552 <_sbrk_r+0x1a>
 801054c:	682b      	ldr	r3, [r5, #0]
 801054e:	b103      	cbz	r3, 8010552 <_sbrk_r+0x1a>
 8010550:	6023      	str	r3, [r4, #0]
 8010552:	bd38      	pop	{r3, r4, r5, pc}
 8010554:	2400d550 	.word	0x2400d550

08010558 <siprintf>:
 8010558:	b40e      	push	{r1, r2, r3}
 801055a:	b500      	push	{lr}
 801055c:	b09c      	sub	sp, #112	; 0x70
 801055e:	ab1d      	add	r3, sp, #116	; 0x74
 8010560:	9002      	str	r0, [sp, #8]
 8010562:	9006      	str	r0, [sp, #24]
 8010564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010568:	4809      	ldr	r0, [pc, #36]	; (8010590 <siprintf+0x38>)
 801056a:	9107      	str	r1, [sp, #28]
 801056c:	9104      	str	r1, [sp, #16]
 801056e:	4909      	ldr	r1, [pc, #36]	; (8010594 <siprintf+0x3c>)
 8010570:	f853 2b04 	ldr.w	r2, [r3], #4
 8010574:	9105      	str	r1, [sp, #20]
 8010576:	6800      	ldr	r0, [r0, #0]
 8010578:	9301      	str	r3, [sp, #4]
 801057a:	a902      	add	r1, sp, #8
 801057c:	f000 f8c4 	bl	8010708 <_svfiprintf_r>
 8010580:	9b02      	ldr	r3, [sp, #8]
 8010582:	2200      	movs	r2, #0
 8010584:	701a      	strb	r2, [r3, #0]
 8010586:	b01c      	add	sp, #112	; 0x70
 8010588:	f85d eb04 	ldr.w	lr, [sp], #4
 801058c:	b003      	add	sp, #12
 801058e:	4770      	bx	lr
 8010590:	2400803c 	.word	0x2400803c
 8010594:	ffff0208 	.word	0xffff0208

08010598 <__malloc_lock>:
 8010598:	4801      	ldr	r0, [pc, #4]	; (80105a0 <__malloc_lock+0x8>)
 801059a:	f7ff bef1 	b.w	8010380 <__retarget_lock_acquire_recursive>
 801059e:	bf00      	nop
 80105a0:	2400d548 	.word	0x2400d548

080105a4 <__malloc_unlock>:
 80105a4:	4801      	ldr	r0, [pc, #4]	; (80105ac <__malloc_unlock+0x8>)
 80105a6:	f7ff beec 	b.w	8010382 <__retarget_lock_release_recursive>
 80105aa:	bf00      	nop
 80105ac:	2400d548 	.word	0x2400d548

080105b0 <_free_r>:
 80105b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105b2:	2900      	cmp	r1, #0
 80105b4:	d048      	beq.n	8010648 <_free_r+0x98>
 80105b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ba:	9001      	str	r0, [sp, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f1a1 0404 	sub.w	r4, r1, #4
 80105c2:	bfb8      	it	lt
 80105c4:	18e4      	addlt	r4, r4, r3
 80105c6:	f7ff ffe7 	bl	8010598 <__malloc_lock>
 80105ca:	4a20      	ldr	r2, [pc, #128]	; (801064c <_free_r+0x9c>)
 80105cc:	9801      	ldr	r0, [sp, #4]
 80105ce:	6813      	ldr	r3, [r2, #0]
 80105d0:	4615      	mov	r5, r2
 80105d2:	b933      	cbnz	r3, 80105e2 <_free_r+0x32>
 80105d4:	6063      	str	r3, [r4, #4]
 80105d6:	6014      	str	r4, [r2, #0]
 80105d8:	b003      	add	sp, #12
 80105da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105de:	f7ff bfe1 	b.w	80105a4 <__malloc_unlock>
 80105e2:	42a3      	cmp	r3, r4
 80105e4:	d90b      	bls.n	80105fe <_free_r+0x4e>
 80105e6:	6821      	ldr	r1, [r4, #0]
 80105e8:	1862      	adds	r2, r4, r1
 80105ea:	4293      	cmp	r3, r2
 80105ec:	bf04      	itt	eq
 80105ee:	681a      	ldreq	r2, [r3, #0]
 80105f0:	685b      	ldreq	r3, [r3, #4]
 80105f2:	6063      	str	r3, [r4, #4]
 80105f4:	bf04      	itt	eq
 80105f6:	1852      	addeq	r2, r2, r1
 80105f8:	6022      	streq	r2, [r4, #0]
 80105fa:	602c      	str	r4, [r5, #0]
 80105fc:	e7ec      	b.n	80105d8 <_free_r+0x28>
 80105fe:	461a      	mov	r2, r3
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	b10b      	cbz	r3, 8010608 <_free_r+0x58>
 8010604:	42a3      	cmp	r3, r4
 8010606:	d9fa      	bls.n	80105fe <_free_r+0x4e>
 8010608:	6811      	ldr	r1, [r2, #0]
 801060a:	1855      	adds	r5, r2, r1
 801060c:	42a5      	cmp	r5, r4
 801060e:	d10b      	bne.n	8010628 <_free_r+0x78>
 8010610:	6824      	ldr	r4, [r4, #0]
 8010612:	4421      	add	r1, r4
 8010614:	1854      	adds	r4, r2, r1
 8010616:	42a3      	cmp	r3, r4
 8010618:	6011      	str	r1, [r2, #0]
 801061a:	d1dd      	bne.n	80105d8 <_free_r+0x28>
 801061c:	681c      	ldr	r4, [r3, #0]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	6053      	str	r3, [r2, #4]
 8010622:	4421      	add	r1, r4
 8010624:	6011      	str	r1, [r2, #0]
 8010626:	e7d7      	b.n	80105d8 <_free_r+0x28>
 8010628:	d902      	bls.n	8010630 <_free_r+0x80>
 801062a:	230c      	movs	r3, #12
 801062c:	6003      	str	r3, [r0, #0]
 801062e:	e7d3      	b.n	80105d8 <_free_r+0x28>
 8010630:	6825      	ldr	r5, [r4, #0]
 8010632:	1961      	adds	r1, r4, r5
 8010634:	428b      	cmp	r3, r1
 8010636:	bf04      	itt	eq
 8010638:	6819      	ldreq	r1, [r3, #0]
 801063a:	685b      	ldreq	r3, [r3, #4]
 801063c:	6063      	str	r3, [r4, #4]
 801063e:	bf04      	itt	eq
 8010640:	1949      	addeq	r1, r1, r5
 8010642:	6021      	streq	r1, [r4, #0]
 8010644:	6054      	str	r4, [r2, #4]
 8010646:	e7c7      	b.n	80105d8 <_free_r+0x28>
 8010648:	b003      	add	sp, #12
 801064a:	bd30      	pop	{r4, r5, pc}
 801064c:	2400cb94 	.word	0x2400cb94

08010650 <__ssputs_r>:
 8010650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010654:	688e      	ldr	r6, [r1, #8]
 8010656:	429e      	cmp	r6, r3
 8010658:	4682      	mov	sl, r0
 801065a:	460c      	mov	r4, r1
 801065c:	4690      	mov	r8, r2
 801065e:	461f      	mov	r7, r3
 8010660:	d838      	bhi.n	80106d4 <__ssputs_r+0x84>
 8010662:	898a      	ldrh	r2, [r1, #12]
 8010664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010668:	d032      	beq.n	80106d0 <__ssputs_r+0x80>
 801066a:	6825      	ldr	r5, [r4, #0]
 801066c:	6909      	ldr	r1, [r1, #16]
 801066e:	eba5 0901 	sub.w	r9, r5, r1
 8010672:	6965      	ldr	r5, [r4, #20]
 8010674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801067c:	3301      	adds	r3, #1
 801067e:	444b      	add	r3, r9
 8010680:	106d      	asrs	r5, r5, #1
 8010682:	429d      	cmp	r5, r3
 8010684:	bf38      	it	cc
 8010686:	461d      	movcc	r5, r3
 8010688:	0553      	lsls	r3, r2, #21
 801068a:	d531      	bpl.n	80106f0 <__ssputs_r+0xa0>
 801068c:	4629      	mov	r1, r5
 801068e:	f7ff fe8f 	bl	80103b0 <_malloc_r>
 8010692:	4606      	mov	r6, r0
 8010694:	b950      	cbnz	r0, 80106ac <__ssputs_r+0x5c>
 8010696:	230c      	movs	r3, #12
 8010698:	f8ca 3000 	str.w	r3, [sl]
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295
 80106a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ac:	6921      	ldr	r1, [r4, #16]
 80106ae:	464a      	mov	r2, r9
 80106b0:	f7ff fe68 	bl	8010384 <memcpy>
 80106b4:	89a3      	ldrh	r3, [r4, #12]
 80106b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106be:	81a3      	strh	r3, [r4, #12]
 80106c0:	6126      	str	r6, [r4, #16]
 80106c2:	6165      	str	r5, [r4, #20]
 80106c4:	444e      	add	r6, r9
 80106c6:	eba5 0509 	sub.w	r5, r5, r9
 80106ca:	6026      	str	r6, [r4, #0]
 80106cc:	60a5      	str	r5, [r4, #8]
 80106ce:	463e      	mov	r6, r7
 80106d0:	42be      	cmp	r6, r7
 80106d2:	d900      	bls.n	80106d6 <__ssputs_r+0x86>
 80106d4:	463e      	mov	r6, r7
 80106d6:	4632      	mov	r2, r6
 80106d8:	6820      	ldr	r0, [r4, #0]
 80106da:	4641      	mov	r1, r8
 80106dc:	f000 faa8 	bl	8010c30 <memmove>
 80106e0:	68a3      	ldr	r3, [r4, #8]
 80106e2:	6822      	ldr	r2, [r4, #0]
 80106e4:	1b9b      	subs	r3, r3, r6
 80106e6:	4432      	add	r2, r6
 80106e8:	60a3      	str	r3, [r4, #8]
 80106ea:	6022      	str	r2, [r4, #0]
 80106ec:	2000      	movs	r0, #0
 80106ee:	e7db      	b.n	80106a8 <__ssputs_r+0x58>
 80106f0:	462a      	mov	r2, r5
 80106f2:	f000 fab7 	bl	8010c64 <_realloc_r>
 80106f6:	4606      	mov	r6, r0
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d1e1      	bne.n	80106c0 <__ssputs_r+0x70>
 80106fc:	6921      	ldr	r1, [r4, #16]
 80106fe:	4650      	mov	r0, sl
 8010700:	f7ff ff56 	bl	80105b0 <_free_r>
 8010704:	e7c7      	b.n	8010696 <__ssputs_r+0x46>
	...

08010708 <_svfiprintf_r>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	4698      	mov	r8, r3
 801070e:	898b      	ldrh	r3, [r1, #12]
 8010710:	061b      	lsls	r3, r3, #24
 8010712:	b09d      	sub	sp, #116	; 0x74
 8010714:	4607      	mov	r7, r0
 8010716:	460d      	mov	r5, r1
 8010718:	4614      	mov	r4, r2
 801071a:	d50e      	bpl.n	801073a <_svfiprintf_r+0x32>
 801071c:	690b      	ldr	r3, [r1, #16]
 801071e:	b963      	cbnz	r3, 801073a <_svfiprintf_r+0x32>
 8010720:	2140      	movs	r1, #64	; 0x40
 8010722:	f7ff fe45 	bl	80103b0 <_malloc_r>
 8010726:	6028      	str	r0, [r5, #0]
 8010728:	6128      	str	r0, [r5, #16]
 801072a:	b920      	cbnz	r0, 8010736 <_svfiprintf_r+0x2e>
 801072c:	230c      	movs	r3, #12
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	f04f 30ff 	mov.w	r0, #4294967295
 8010734:	e0d1      	b.n	80108da <_svfiprintf_r+0x1d2>
 8010736:	2340      	movs	r3, #64	; 0x40
 8010738:	616b      	str	r3, [r5, #20]
 801073a:	2300      	movs	r3, #0
 801073c:	9309      	str	r3, [sp, #36]	; 0x24
 801073e:	2320      	movs	r3, #32
 8010740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010744:	f8cd 800c 	str.w	r8, [sp, #12]
 8010748:	2330      	movs	r3, #48	; 0x30
 801074a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108f4 <_svfiprintf_r+0x1ec>
 801074e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010752:	f04f 0901 	mov.w	r9, #1
 8010756:	4623      	mov	r3, r4
 8010758:	469a      	mov	sl, r3
 801075a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801075e:	b10a      	cbz	r2, 8010764 <_svfiprintf_r+0x5c>
 8010760:	2a25      	cmp	r2, #37	; 0x25
 8010762:	d1f9      	bne.n	8010758 <_svfiprintf_r+0x50>
 8010764:	ebba 0b04 	subs.w	fp, sl, r4
 8010768:	d00b      	beq.n	8010782 <_svfiprintf_r+0x7a>
 801076a:	465b      	mov	r3, fp
 801076c:	4622      	mov	r2, r4
 801076e:	4629      	mov	r1, r5
 8010770:	4638      	mov	r0, r7
 8010772:	f7ff ff6d 	bl	8010650 <__ssputs_r>
 8010776:	3001      	adds	r0, #1
 8010778:	f000 80aa 	beq.w	80108d0 <_svfiprintf_r+0x1c8>
 801077c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801077e:	445a      	add	r2, fp
 8010780:	9209      	str	r2, [sp, #36]	; 0x24
 8010782:	f89a 3000 	ldrb.w	r3, [sl]
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 80a2 	beq.w	80108d0 <_svfiprintf_r+0x1c8>
 801078c:	2300      	movs	r3, #0
 801078e:	f04f 32ff 	mov.w	r2, #4294967295
 8010792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010796:	f10a 0a01 	add.w	sl, sl, #1
 801079a:	9304      	str	r3, [sp, #16]
 801079c:	9307      	str	r3, [sp, #28]
 801079e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107a2:	931a      	str	r3, [sp, #104]	; 0x68
 80107a4:	4654      	mov	r4, sl
 80107a6:	2205      	movs	r2, #5
 80107a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ac:	4851      	ldr	r0, [pc, #324]	; (80108f4 <_svfiprintf_r+0x1ec>)
 80107ae:	f7ef fdb7 	bl	8000320 <memchr>
 80107b2:	9a04      	ldr	r2, [sp, #16]
 80107b4:	b9d8      	cbnz	r0, 80107ee <_svfiprintf_r+0xe6>
 80107b6:	06d0      	lsls	r0, r2, #27
 80107b8:	bf44      	itt	mi
 80107ba:	2320      	movmi	r3, #32
 80107bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107c0:	0711      	lsls	r1, r2, #28
 80107c2:	bf44      	itt	mi
 80107c4:	232b      	movmi	r3, #43	; 0x2b
 80107c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ca:	f89a 3000 	ldrb.w	r3, [sl]
 80107ce:	2b2a      	cmp	r3, #42	; 0x2a
 80107d0:	d015      	beq.n	80107fe <_svfiprintf_r+0xf6>
 80107d2:	9a07      	ldr	r2, [sp, #28]
 80107d4:	4654      	mov	r4, sl
 80107d6:	2000      	movs	r0, #0
 80107d8:	f04f 0c0a 	mov.w	ip, #10
 80107dc:	4621      	mov	r1, r4
 80107de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e2:	3b30      	subs	r3, #48	; 0x30
 80107e4:	2b09      	cmp	r3, #9
 80107e6:	d94e      	bls.n	8010886 <_svfiprintf_r+0x17e>
 80107e8:	b1b0      	cbz	r0, 8010818 <_svfiprintf_r+0x110>
 80107ea:	9207      	str	r2, [sp, #28]
 80107ec:	e014      	b.n	8010818 <_svfiprintf_r+0x110>
 80107ee:	eba0 0308 	sub.w	r3, r0, r8
 80107f2:	fa09 f303 	lsl.w	r3, r9, r3
 80107f6:	4313      	orrs	r3, r2
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	46a2      	mov	sl, r4
 80107fc:	e7d2      	b.n	80107a4 <_svfiprintf_r+0x9c>
 80107fe:	9b03      	ldr	r3, [sp, #12]
 8010800:	1d19      	adds	r1, r3, #4
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	9103      	str	r1, [sp, #12]
 8010806:	2b00      	cmp	r3, #0
 8010808:	bfbb      	ittet	lt
 801080a:	425b      	neglt	r3, r3
 801080c:	f042 0202 	orrlt.w	r2, r2, #2
 8010810:	9307      	strge	r3, [sp, #28]
 8010812:	9307      	strlt	r3, [sp, #28]
 8010814:	bfb8      	it	lt
 8010816:	9204      	strlt	r2, [sp, #16]
 8010818:	7823      	ldrb	r3, [r4, #0]
 801081a:	2b2e      	cmp	r3, #46	; 0x2e
 801081c:	d10c      	bne.n	8010838 <_svfiprintf_r+0x130>
 801081e:	7863      	ldrb	r3, [r4, #1]
 8010820:	2b2a      	cmp	r3, #42	; 0x2a
 8010822:	d135      	bne.n	8010890 <_svfiprintf_r+0x188>
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	1d1a      	adds	r2, r3, #4
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	9203      	str	r2, [sp, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	bfb8      	it	lt
 8010830:	f04f 33ff 	movlt.w	r3, #4294967295
 8010834:	3402      	adds	r4, #2
 8010836:	9305      	str	r3, [sp, #20]
 8010838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010904 <_svfiprintf_r+0x1fc>
 801083c:	7821      	ldrb	r1, [r4, #0]
 801083e:	2203      	movs	r2, #3
 8010840:	4650      	mov	r0, sl
 8010842:	f7ef fd6d 	bl	8000320 <memchr>
 8010846:	b140      	cbz	r0, 801085a <_svfiprintf_r+0x152>
 8010848:	2340      	movs	r3, #64	; 0x40
 801084a:	eba0 000a 	sub.w	r0, r0, sl
 801084e:	fa03 f000 	lsl.w	r0, r3, r0
 8010852:	9b04      	ldr	r3, [sp, #16]
 8010854:	4303      	orrs	r3, r0
 8010856:	3401      	adds	r4, #1
 8010858:	9304      	str	r3, [sp, #16]
 801085a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801085e:	4826      	ldr	r0, [pc, #152]	; (80108f8 <_svfiprintf_r+0x1f0>)
 8010860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010864:	2206      	movs	r2, #6
 8010866:	f7ef fd5b 	bl	8000320 <memchr>
 801086a:	2800      	cmp	r0, #0
 801086c:	d038      	beq.n	80108e0 <_svfiprintf_r+0x1d8>
 801086e:	4b23      	ldr	r3, [pc, #140]	; (80108fc <_svfiprintf_r+0x1f4>)
 8010870:	bb1b      	cbnz	r3, 80108ba <_svfiprintf_r+0x1b2>
 8010872:	9b03      	ldr	r3, [sp, #12]
 8010874:	3307      	adds	r3, #7
 8010876:	f023 0307 	bic.w	r3, r3, #7
 801087a:	3308      	adds	r3, #8
 801087c:	9303      	str	r3, [sp, #12]
 801087e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010880:	4433      	add	r3, r6
 8010882:	9309      	str	r3, [sp, #36]	; 0x24
 8010884:	e767      	b.n	8010756 <_svfiprintf_r+0x4e>
 8010886:	fb0c 3202 	mla	r2, ip, r2, r3
 801088a:	460c      	mov	r4, r1
 801088c:	2001      	movs	r0, #1
 801088e:	e7a5      	b.n	80107dc <_svfiprintf_r+0xd4>
 8010890:	2300      	movs	r3, #0
 8010892:	3401      	adds	r4, #1
 8010894:	9305      	str	r3, [sp, #20]
 8010896:	4619      	mov	r1, r3
 8010898:	f04f 0c0a 	mov.w	ip, #10
 801089c:	4620      	mov	r0, r4
 801089e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a2:	3a30      	subs	r2, #48	; 0x30
 80108a4:	2a09      	cmp	r2, #9
 80108a6:	d903      	bls.n	80108b0 <_svfiprintf_r+0x1a8>
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d0c5      	beq.n	8010838 <_svfiprintf_r+0x130>
 80108ac:	9105      	str	r1, [sp, #20]
 80108ae:	e7c3      	b.n	8010838 <_svfiprintf_r+0x130>
 80108b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80108b4:	4604      	mov	r4, r0
 80108b6:	2301      	movs	r3, #1
 80108b8:	e7f0      	b.n	801089c <_svfiprintf_r+0x194>
 80108ba:	ab03      	add	r3, sp, #12
 80108bc:	9300      	str	r3, [sp, #0]
 80108be:	462a      	mov	r2, r5
 80108c0:	4b0f      	ldr	r3, [pc, #60]	; (8010900 <_svfiprintf_r+0x1f8>)
 80108c2:	a904      	add	r1, sp, #16
 80108c4:	4638      	mov	r0, r7
 80108c6:	f3af 8000 	nop.w
 80108ca:	1c42      	adds	r2, r0, #1
 80108cc:	4606      	mov	r6, r0
 80108ce:	d1d6      	bne.n	801087e <_svfiprintf_r+0x176>
 80108d0:	89ab      	ldrh	r3, [r5, #12]
 80108d2:	065b      	lsls	r3, r3, #25
 80108d4:	f53f af2c 	bmi.w	8010730 <_svfiprintf_r+0x28>
 80108d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108da:	b01d      	add	sp, #116	; 0x74
 80108dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e0:	ab03      	add	r3, sp, #12
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	462a      	mov	r2, r5
 80108e6:	4b06      	ldr	r3, [pc, #24]	; (8010900 <_svfiprintf_r+0x1f8>)
 80108e8:	a904      	add	r1, sp, #16
 80108ea:	4638      	mov	r0, r7
 80108ec:	f000 f87a 	bl	80109e4 <_printf_i>
 80108f0:	e7eb      	b.n	80108ca <_svfiprintf_r+0x1c2>
 80108f2:	bf00      	nop
 80108f4:	08010ee8 	.word	0x08010ee8
 80108f8:	08010ef2 	.word	0x08010ef2
 80108fc:	00000000 	.word	0x00000000
 8010900:	08010651 	.word	0x08010651
 8010904:	08010eee 	.word	0x08010eee

08010908 <_printf_common>:
 8010908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801090c:	4616      	mov	r6, r2
 801090e:	4699      	mov	r9, r3
 8010910:	688a      	ldr	r2, [r1, #8]
 8010912:	690b      	ldr	r3, [r1, #16]
 8010914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010918:	4293      	cmp	r3, r2
 801091a:	bfb8      	it	lt
 801091c:	4613      	movlt	r3, r2
 801091e:	6033      	str	r3, [r6, #0]
 8010920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010924:	4607      	mov	r7, r0
 8010926:	460c      	mov	r4, r1
 8010928:	b10a      	cbz	r2, 801092e <_printf_common+0x26>
 801092a:	3301      	adds	r3, #1
 801092c:	6033      	str	r3, [r6, #0]
 801092e:	6823      	ldr	r3, [r4, #0]
 8010930:	0699      	lsls	r1, r3, #26
 8010932:	bf42      	ittt	mi
 8010934:	6833      	ldrmi	r3, [r6, #0]
 8010936:	3302      	addmi	r3, #2
 8010938:	6033      	strmi	r3, [r6, #0]
 801093a:	6825      	ldr	r5, [r4, #0]
 801093c:	f015 0506 	ands.w	r5, r5, #6
 8010940:	d106      	bne.n	8010950 <_printf_common+0x48>
 8010942:	f104 0a19 	add.w	sl, r4, #25
 8010946:	68e3      	ldr	r3, [r4, #12]
 8010948:	6832      	ldr	r2, [r6, #0]
 801094a:	1a9b      	subs	r3, r3, r2
 801094c:	42ab      	cmp	r3, r5
 801094e:	dc26      	bgt.n	801099e <_printf_common+0x96>
 8010950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010954:	1e13      	subs	r3, r2, #0
 8010956:	6822      	ldr	r2, [r4, #0]
 8010958:	bf18      	it	ne
 801095a:	2301      	movne	r3, #1
 801095c:	0692      	lsls	r2, r2, #26
 801095e:	d42b      	bmi.n	80109b8 <_printf_common+0xb0>
 8010960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010964:	4649      	mov	r1, r9
 8010966:	4638      	mov	r0, r7
 8010968:	47c0      	blx	r8
 801096a:	3001      	adds	r0, #1
 801096c:	d01e      	beq.n	80109ac <_printf_common+0xa4>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	68e5      	ldr	r5, [r4, #12]
 8010972:	6832      	ldr	r2, [r6, #0]
 8010974:	f003 0306 	and.w	r3, r3, #6
 8010978:	2b04      	cmp	r3, #4
 801097a:	bf08      	it	eq
 801097c:	1aad      	subeq	r5, r5, r2
 801097e:	68a3      	ldr	r3, [r4, #8]
 8010980:	6922      	ldr	r2, [r4, #16]
 8010982:	bf0c      	ite	eq
 8010984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010988:	2500      	movne	r5, #0
 801098a:	4293      	cmp	r3, r2
 801098c:	bfc4      	itt	gt
 801098e:	1a9b      	subgt	r3, r3, r2
 8010990:	18ed      	addgt	r5, r5, r3
 8010992:	2600      	movs	r6, #0
 8010994:	341a      	adds	r4, #26
 8010996:	42b5      	cmp	r5, r6
 8010998:	d11a      	bne.n	80109d0 <_printf_common+0xc8>
 801099a:	2000      	movs	r0, #0
 801099c:	e008      	b.n	80109b0 <_printf_common+0xa8>
 801099e:	2301      	movs	r3, #1
 80109a0:	4652      	mov	r2, sl
 80109a2:	4649      	mov	r1, r9
 80109a4:	4638      	mov	r0, r7
 80109a6:	47c0      	blx	r8
 80109a8:	3001      	adds	r0, #1
 80109aa:	d103      	bne.n	80109b4 <_printf_common+0xac>
 80109ac:	f04f 30ff 	mov.w	r0, #4294967295
 80109b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b4:	3501      	adds	r5, #1
 80109b6:	e7c6      	b.n	8010946 <_printf_common+0x3e>
 80109b8:	18e1      	adds	r1, r4, r3
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	2030      	movs	r0, #48	; 0x30
 80109be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109c2:	4422      	add	r2, r4
 80109c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109cc:	3302      	adds	r3, #2
 80109ce:	e7c7      	b.n	8010960 <_printf_common+0x58>
 80109d0:	2301      	movs	r3, #1
 80109d2:	4622      	mov	r2, r4
 80109d4:	4649      	mov	r1, r9
 80109d6:	4638      	mov	r0, r7
 80109d8:	47c0      	blx	r8
 80109da:	3001      	adds	r0, #1
 80109dc:	d0e6      	beq.n	80109ac <_printf_common+0xa4>
 80109de:	3601      	adds	r6, #1
 80109e0:	e7d9      	b.n	8010996 <_printf_common+0x8e>
	...

080109e4 <_printf_i>:
 80109e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109e8:	460c      	mov	r4, r1
 80109ea:	4691      	mov	r9, r2
 80109ec:	7e27      	ldrb	r7, [r4, #24]
 80109ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109f0:	2f78      	cmp	r7, #120	; 0x78
 80109f2:	4680      	mov	r8, r0
 80109f4:	469a      	mov	sl, r3
 80109f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109fa:	d807      	bhi.n	8010a0c <_printf_i+0x28>
 80109fc:	2f62      	cmp	r7, #98	; 0x62
 80109fe:	d80a      	bhi.n	8010a16 <_printf_i+0x32>
 8010a00:	2f00      	cmp	r7, #0
 8010a02:	f000 80d8 	beq.w	8010bb6 <_printf_i+0x1d2>
 8010a06:	2f58      	cmp	r7, #88	; 0x58
 8010a08:	f000 80a3 	beq.w	8010b52 <_printf_i+0x16e>
 8010a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a14:	e03a      	b.n	8010a8c <_printf_i+0xa8>
 8010a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a1a:	2b15      	cmp	r3, #21
 8010a1c:	d8f6      	bhi.n	8010a0c <_printf_i+0x28>
 8010a1e:	a001      	add	r0, pc, #4	; (adr r0, 8010a24 <_printf_i+0x40>)
 8010a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a24:	08010a7d 	.word	0x08010a7d
 8010a28:	08010a91 	.word	0x08010a91
 8010a2c:	08010a0d 	.word	0x08010a0d
 8010a30:	08010a0d 	.word	0x08010a0d
 8010a34:	08010a0d 	.word	0x08010a0d
 8010a38:	08010a0d 	.word	0x08010a0d
 8010a3c:	08010a91 	.word	0x08010a91
 8010a40:	08010a0d 	.word	0x08010a0d
 8010a44:	08010a0d 	.word	0x08010a0d
 8010a48:	08010a0d 	.word	0x08010a0d
 8010a4c:	08010a0d 	.word	0x08010a0d
 8010a50:	08010b9d 	.word	0x08010b9d
 8010a54:	08010ac1 	.word	0x08010ac1
 8010a58:	08010b7f 	.word	0x08010b7f
 8010a5c:	08010a0d 	.word	0x08010a0d
 8010a60:	08010a0d 	.word	0x08010a0d
 8010a64:	08010bbf 	.word	0x08010bbf
 8010a68:	08010a0d 	.word	0x08010a0d
 8010a6c:	08010ac1 	.word	0x08010ac1
 8010a70:	08010a0d 	.word	0x08010a0d
 8010a74:	08010a0d 	.word	0x08010a0d
 8010a78:	08010b87 	.word	0x08010b87
 8010a7c:	680b      	ldr	r3, [r1, #0]
 8010a7e:	1d1a      	adds	r2, r3, #4
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	600a      	str	r2, [r1, #0]
 8010a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e0a3      	b.n	8010bd8 <_printf_i+0x1f4>
 8010a90:	6825      	ldr	r5, [r4, #0]
 8010a92:	6808      	ldr	r0, [r1, #0]
 8010a94:	062e      	lsls	r6, r5, #24
 8010a96:	f100 0304 	add.w	r3, r0, #4
 8010a9a:	d50a      	bpl.n	8010ab2 <_printf_i+0xce>
 8010a9c:	6805      	ldr	r5, [r0, #0]
 8010a9e:	600b      	str	r3, [r1, #0]
 8010aa0:	2d00      	cmp	r5, #0
 8010aa2:	da03      	bge.n	8010aac <_printf_i+0xc8>
 8010aa4:	232d      	movs	r3, #45	; 0x2d
 8010aa6:	426d      	negs	r5, r5
 8010aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aac:	485e      	ldr	r0, [pc, #376]	; (8010c28 <_printf_i+0x244>)
 8010aae:	230a      	movs	r3, #10
 8010ab0:	e019      	b.n	8010ae6 <_printf_i+0x102>
 8010ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ab6:	6805      	ldr	r5, [r0, #0]
 8010ab8:	600b      	str	r3, [r1, #0]
 8010aba:	bf18      	it	ne
 8010abc:	b22d      	sxthne	r5, r5
 8010abe:	e7ef      	b.n	8010aa0 <_printf_i+0xbc>
 8010ac0:	680b      	ldr	r3, [r1, #0]
 8010ac2:	6825      	ldr	r5, [r4, #0]
 8010ac4:	1d18      	adds	r0, r3, #4
 8010ac6:	6008      	str	r0, [r1, #0]
 8010ac8:	0628      	lsls	r0, r5, #24
 8010aca:	d501      	bpl.n	8010ad0 <_printf_i+0xec>
 8010acc:	681d      	ldr	r5, [r3, #0]
 8010ace:	e002      	b.n	8010ad6 <_printf_i+0xf2>
 8010ad0:	0669      	lsls	r1, r5, #25
 8010ad2:	d5fb      	bpl.n	8010acc <_printf_i+0xe8>
 8010ad4:	881d      	ldrh	r5, [r3, #0]
 8010ad6:	4854      	ldr	r0, [pc, #336]	; (8010c28 <_printf_i+0x244>)
 8010ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8010ada:	bf0c      	ite	eq
 8010adc:	2308      	moveq	r3, #8
 8010ade:	230a      	movne	r3, #10
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ae6:	6866      	ldr	r6, [r4, #4]
 8010ae8:	60a6      	str	r6, [r4, #8]
 8010aea:	2e00      	cmp	r6, #0
 8010aec:	bfa2      	ittt	ge
 8010aee:	6821      	ldrge	r1, [r4, #0]
 8010af0:	f021 0104 	bicge.w	r1, r1, #4
 8010af4:	6021      	strge	r1, [r4, #0]
 8010af6:	b90d      	cbnz	r5, 8010afc <_printf_i+0x118>
 8010af8:	2e00      	cmp	r6, #0
 8010afa:	d04d      	beq.n	8010b98 <_printf_i+0x1b4>
 8010afc:	4616      	mov	r6, r2
 8010afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b02:	fb03 5711 	mls	r7, r3, r1, r5
 8010b06:	5dc7      	ldrb	r7, [r0, r7]
 8010b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b0c:	462f      	mov	r7, r5
 8010b0e:	42bb      	cmp	r3, r7
 8010b10:	460d      	mov	r5, r1
 8010b12:	d9f4      	bls.n	8010afe <_printf_i+0x11a>
 8010b14:	2b08      	cmp	r3, #8
 8010b16:	d10b      	bne.n	8010b30 <_printf_i+0x14c>
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	07df      	lsls	r7, r3, #31
 8010b1c:	d508      	bpl.n	8010b30 <_printf_i+0x14c>
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	6861      	ldr	r1, [r4, #4]
 8010b22:	4299      	cmp	r1, r3
 8010b24:	bfde      	ittt	le
 8010b26:	2330      	movle	r3, #48	; 0x30
 8010b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b30:	1b92      	subs	r2, r2, r6
 8010b32:	6122      	str	r2, [r4, #16]
 8010b34:	f8cd a000 	str.w	sl, [sp]
 8010b38:	464b      	mov	r3, r9
 8010b3a:	aa03      	add	r2, sp, #12
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4640      	mov	r0, r8
 8010b40:	f7ff fee2 	bl	8010908 <_printf_common>
 8010b44:	3001      	adds	r0, #1
 8010b46:	d14c      	bne.n	8010be2 <_printf_i+0x1fe>
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	b004      	add	sp, #16
 8010b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b52:	4835      	ldr	r0, [pc, #212]	; (8010c28 <_printf_i+0x244>)
 8010b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b58:	6823      	ldr	r3, [r4, #0]
 8010b5a:	680e      	ldr	r6, [r1, #0]
 8010b5c:	061f      	lsls	r7, r3, #24
 8010b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b62:	600e      	str	r6, [r1, #0]
 8010b64:	d514      	bpl.n	8010b90 <_printf_i+0x1ac>
 8010b66:	07d9      	lsls	r1, r3, #31
 8010b68:	bf44      	itt	mi
 8010b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b6e:	6023      	strmi	r3, [r4, #0]
 8010b70:	b91d      	cbnz	r5, 8010b7a <_printf_i+0x196>
 8010b72:	6823      	ldr	r3, [r4, #0]
 8010b74:	f023 0320 	bic.w	r3, r3, #32
 8010b78:	6023      	str	r3, [r4, #0]
 8010b7a:	2310      	movs	r3, #16
 8010b7c:	e7b0      	b.n	8010ae0 <_printf_i+0xfc>
 8010b7e:	6823      	ldr	r3, [r4, #0]
 8010b80:	f043 0320 	orr.w	r3, r3, #32
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	2378      	movs	r3, #120	; 0x78
 8010b88:	4828      	ldr	r0, [pc, #160]	; (8010c2c <_printf_i+0x248>)
 8010b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b8e:	e7e3      	b.n	8010b58 <_printf_i+0x174>
 8010b90:	065e      	lsls	r6, r3, #25
 8010b92:	bf48      	it	mi
 8010b94:	b2ad      	uxthmi	r5, r5
 8010b96:	e7e6      	b.n	8010b66 <_printf_i+0x182>
 8010b98:	4616      	mov	r6, r2
 8010b9a:	e7bb      	b.n	8010b14 <_printf_i+0x130>
 8010b9c:	680b      	ldr	r3, [r1, #0]
 8010b9e:	6826      	ldr	r6, [r4, #0]
 8010ba0:	6960      	ldr	r0, [r4, #20]
 8010ba2:	1d1d      	adds	r5, r3, #4
 8010ba4:	600d      	str	r5, [r1, #0]
 8010ba6:	0635      	lsls	r5, r6, #24
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	d501      	bpl.n	8010bb0 <_printf_i+0x1cc>
 8010bac:	6018      	str	r0, [r3, #0]
 8010bae:	e002      	b.n	8010bb6 <_printf_i+0x1d2>
 8010bb0:	0671      	lsls	r1, r6, #25
 8010bb2:	d5fb      	bpl.n	8010bac <_printf_i+0x1c8>
 8010bb4:	8018      	strh	r0, [r3, #0]
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	6123      	str	r3, [r4, #16]
 8010bba:	4616      	mov	r6, r2
 8010bbc:	e7ba      	b.n	8010b34 <_printf_i+0x150>
 8010bbe:	680b      	ldr	r3, [r1, #0]
 8010bc0:	1d1a      	adds	r2, r3, #4
 8010bc2:	600a      	str	r2, [r1, #0]
 8010bc4:	681e      	ldr	r6, [r3, #0]
 8010bc6:	6862      	ldr	r2, [r4, #4]
 8010bc8:	2100      	movs	r1, #0
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f7ef fba8 	bl	8000320 <memchr>
 8010bd0:	b108      	cbz	r0, 8010bd6 <_printf_i+0x1f2>
 8010bd2:	1b80      	subs	r0, r0, r6
 8010bd4:	6060      	str	r0, [r4, #4]
 8010bd6:	6863      	ldr	r3, [r4, #4]
 8010bd8:	6123      	str	r3, [r4, #16]
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010be0:	e7a8      	b.n	8010b34 <_printf_i+0x150>
 8010be2:	6923      	ldr	r3, [r4, #16]
 8010be4:	4632      	mov	r2, r6
 8010be6:	4649      	mov	r1, r9
 8010be8:	4640      	mov	r0, r8
 8010bea:	47d0      	blx	sl
 8010bec:	3001      	adds	r0, #1
 8010bee:	d0ab      	beq.n	8010b48 <_printf_i+0x164>
 8010bf0:	6823      	ldr	r3, [r4, #0]
 8010bf2:	079b      	lsls	r3, r3, #30
 8010bf4:	d413      	bmi.n	8010c1e <_printf_i+0x23a>
 8010bf6:	68e0      	ldr	r0, [r4, #12]
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	4298      	cmp	r0, r3
 8010bfc:	bfb8      	it	lt
 8010bfe:	4618      	movlt	r0, r3
 8010c00:	e7a4      	b.n	8010b4c <_printf_i+0x168>
 8010c02:	2301      	movs	r3, #1
 8010c04:	4632      	mov	r2, r6
 8010c06:	4649      	mov	r1, r9
 8010c08:	4640      	mov	r0, r8
 8010c0a:	47d0      	blx	sl
 8010c0c:	3001      	adds	r0, #1
 8010c0e:	d09b      	beq.n	8010b48 <_printf_i+0x164>
 8010c10:	3501      	adds	r5, #1
 8010c12:	68e3      	ldr	r3, [r4, #12]
 8010c14:	9903      	ldr	r1, [sp, #12]
 8010c16:	1a5b      	subs	r3, r3, r1
 8010c18:	42ab      	cmp	r3, r5
 8010c1a:	dcf2      	bgt.n	8010c02 <_printf_i+0x21e>
 8010c1c:	e7eb      	b.n	8010bf6 <_printf_i+0x212>
 8010c1e:	2500      	movs	r5, #0
 8010c20:	f104 0619 	add.w	r6, r4, #25
 8010c24:	e7f5      	b.n	8010c12 <_printf_i+0x22e>
 8010c26:	bf00      	nop
 8010c28:	08010ef9 	.word	0x08010ef9
 8010c2c:	08010f0a 	.word	0x08010f0a

08010c30 <memmove>:
 8010c30:	4288      	cmp	r0, r1
 8010c32:	b510      	push	{r4, lr}
 8010c34:	eb01 0402 	add.w	r4, r1, r2
 8010c38:	d902      	bls.n	8010c40 <memmove+0x10>
 8010c3a:	4284      	cmp	r4, r0
 8010c3c:	4623      	mov	r3, r4
 8010c3e:	d807      	bhi.n	8010c50 <memmove+0x20>
 8010c40:	1e43      	subs	r3, r0, #1
 8010c42:	42a1      	cmp	r1, r4
 8010c44:	d008      	beq.n	8010c58 <memmove+0x28>
 8010c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c4e:	e7f8      	b.n	8010c42 <memmove+0x12>
 8010c50:	4402      	add	r2, r0
 8010c52:	4601      	mov	r1, r0
 8010c54:	428a      	cmp	r2, r1
 8010c56:	d100      	bne.n	8010c5a <memmove+0x2a>
 8010c58:	bd10      	pop	{r4, pc}
 8010c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c62:	e7f7      	b.n	8010c54 <memmove+0x24>

08010c64 <_realloc_r>:
 8010c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c66:	4607      	mov	r7, r0
 8010c68:	4614      	mov	r4, r2
 8010c6a:	460e      	mov	r6, r1
 8010c6c:	b921      	cbnz	r1, 8010c78 <_realloc_r+0x14>
 8010c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c72:	4611      	mov	r1, r2
 8010c74:	f7ff bb9c 	b.w	80103b0 <_malloc_r>
 8010c78:	b922      	cbnz	r2, 8010c84 <_realloc_r+0x20>
 8010c7a:	f7ff fc99 	bl	80105b0 <_free_r>
 8010c7e:	4625      	mov	r5, r4
 8010c80:	4628      	mov	r0, r5
 8010c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c84:	f000 f814 	bl	8010cb0 <_malloc_usable_size_r>
 8010c88:	42a0      	cmp	r0, r4
 8010c8a:	d20f      	bcs.n	8010cac <_realloc_r+0x48>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7ff fb8e 	bl	80103b0 <_malloc_r>
 8010c94:	4605      	mov	r5, r0
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d0f2      	beq.n	8010c80 <_realloc_r+0x1c>
 8010c9a:	4631      	mov	r1, r6
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	f7ff fb71 	bl	8010384 <memcpy>
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4638      	mov	r0, r7
 8010ca6:	f7ff fc83 	bl	80105b0 <_free_r>
 8010caa:	e7e9      	b.n	8010c80 <_realloc_r+0x1c>
 8010cac:	4635      	mov	r5, r6
 8010cae:	e7e7      	b.n	8010c80 <_realloc_r+0x1c>

08010cb0 <_malloc_usable_size_r>:
 8010cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cb4:	1f18      	subs	r0, r3, #4
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	bfbc      	itt	lt
 8010cba:	580b      	ldrlt	r3, [r1, r0]
 8010cbc:	18c0      	addlt	r0, r0, r3
 8010cbe:	4770      	bx	lr

08010cc0 <_init>:
 8010cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc2:	bf00      	nop
 8010cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cc6:	bc08      	pop	{r3}
 8010cc8:	469e      	mov	lr, r3
 8010cca:	4770      	bx	lr

08010ccc <_fini>:
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cce:	bf00      	nop
 8010cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cd2:	bc08      	pop	{r3}
 8010cd4:	469e      	mov	lr, r3
 8010cd6:	4770      	bx	lr
